<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>mlwhiz</title><link href="http://mlwhiz.github.io/" rel="alternate"></link><link href="http://mlwhiz.github.io/feeds/all.atom.xml" rel="self"></link><id>http://mlwhiz.github.io/</id><updated>2018-12-17T04:43:00-02:00</updated><entry><title>Text Classification basics for Deep Learning</title><link href="http://mlwhiz.github.io/blog/2018/12/17/text_classification/" rel="alternate"></link><updated>2018-12-17T04:43:00-02:00</updated><author><name>Rahul Agarwal</name></author><id>tag:mlwhiz.github.io,2018-12-17:blog/2018/12/17/text_classification/</id><summary type="html">&lt;p&gt;With the problem of Image Classification is more or less solved by Deep learning, Text Classification is the next new developing theme in deep learning. For those who don't know, Text classification is a common task in natural language processing, which transforms a sequence
of text of indefinite length into a category of text. How could you use that? &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To find sentiment of a review. &lt;/li&gt;
&lt;li&gt;Find toxic comments in a platform like Facebook&lt;/li&gt;
&lt;li&gt;Find Insincere questions on Quora. A current ongoing competition on kaggle&lt;/li&gt;
&lt;li&gt;Find fake reviews on websites&lt;/li&gt;
&lt;li&gt;Will a text advert get clicked or not&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And many more. The whole internet is filled with text and to categorise the information algorithmically will only give us incremental benefits to say the least in the field of AI. &lt;/p&gt;
&lt;p&gt;Here I am going to use the data from Quora's Insincere questions to talk about the different models that people are building and sharing to perform this task. Obviously these standalone models are not going to put you on the top of the leaderboard, yet I hope that this ensuing discussion would be helpful for people who want to learn more about text classification. This is going to be a long post in that regard.&lt;/p&gt;
&lt;p&gt;As a side note: if you want to know more about NLP, I would like to recommend this awesome course on &lt;a href="https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-AqkGMb7JzoCMW0Np1uLfCA&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0"&gt;Natural Language Processing&lt;/a&gt; in the &lt;a href="https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-AqkGMb7JzoCMW0Np1uLfCA&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0"&gt;Advanced machine learning specialization&lt;/a&gt;. This course covers a wide range of tasks in Natural Language Processing from basic to advanced: sentiment analysis, summarization, dialogue state tracking, to name a few. &lt;/p&gt;
&lt;p&gt;So let me try to go through some of the models which people are using to perform text classification and try to provide a brief intuition for them.&lt;/p&gt;
&lt;h3&gt;1. TextCNN:&lt;/h3&gt;
&lt;p&gt;The idea of using a CNN to classify text was first presented in the paper &lt;a href="https://www.aclweb.org/anthology/D14-1181"&gt;Convolutional Neural Networks for Sentence Classification&lt;/a&gt; by Yoon Kim. Instead of image pixels, the input to the tasks are sentences or documents represented as a matrix. Each row of the matrix corresponds to one word vector. That is, each row is word-vector that represents a word. Thus a sequence of max length 70 gives us a image of 70(max sequence length)x300(embedding size)&lt;/p&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/text_convolution.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;Now for some intuition. While for a image we move our conv filter horizontally also since here we have fixed our kernel size to filter_size x embed_size i.e. (3,300) we are just going to move down for the convolution taking look at three words at once since our filter size is 3 in this case.Also one can think of filter sizes as unigrams, bigrams, trigrams etc. Since we are looking at a context window of 1,2,3, and 5 words respectively. Get a more in-depth idea from this blog by Denny Britz. Here is the text classification network coded in Keras: &lt;/p&gt;
&lt;pre style="font-size:60%"&gt;
&lt;code class="python"&gt;# https://www.kaggle.com/yekenot/2dcnn-textclassifier
def model_cnn(embedding_matrix):
    filter_sizes = [1,2,3,5]
    num_filters = 36

    inp = Input(shape=(maxlen,))
    x = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp)
    x = Reshape((maxlen, embed_size, 1))(x)

    maxpool_pool = []
    for i in range(len(filter_sizes)):
        conv = Conv2D(num_filters, kernel_size=(filter_sizes[i], embed_size),
                                     kernel_initializer='he_normal', activation='elu')(x)
        maxpool_pool.append(MaxPool2D(pool_size=(maxlen - filter_sizes[i] + 1, 1))(conv))

    z = Concatenate(axis=1)(maxpool_pool)   
    z = Flatten()(z)
    z = Dropout(0.1)(z)

    outp = Dense(1, activation="sigmoid")(z)

    model = Model(inputs=inp, outputs=outp)
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

    return model
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have written a simplified and well commented code to run this network(taking input from a lot of other kernels) on a &lt;a href="https://www.kaggle.com/mlwhiz/learning-text-classification-textcnn"&gt;kaggle kernel&lt;/a&gt; for this competition. Do take a look there to learn the preprocessing steps, and the word to vec embeddings usage in this model. You will learn something. Please do upvote the kernel if you find it helpful. This kernel scored around 0.661 on the public leaderboard. &lt;/p&gt;
&lt;h3&gt;2. BiDirectional RNN(LSTM/GRU):&lt;/h3&gt;
&lt;p&gt;TextCNN takes care of a lot of things. For example it takes care of words in close range. It is able to see "new york" together. But it still can't take care of all the context provided in a particular text sequence. It still does not learn the seem to learn the sequential structure of the data. where every word is dependednt on the previous word. Or a word in the previous sentence. &lt;/p&gt;
&lt;p&gt;RNN help us with that. They are able to remember previous information using hidden states and connect it to the current task.
Long Short Term Memory networks (LSTM) are a subclass of RNN, specialized in remembering information for a long period of time. More over the Bidirectional lstms keep the contextual information in both directions which is pretty useful in text classification task(But won't work for a time sweries prediction task).&lt;/p&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/birnn.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;For a most simplistic explanation of Bidirectional RNN, think of RNN cell as taking as input a hidden state(a vector) and the word vector and giving out an output vector and the next hidden state. 
            Hidden state, Word vector -&amp;gt;(RNN Cell) -&amp;gt; Output Vector , Next Hidden state&lt;/p&gt;
&lt;p&gt;For a sequence of length 4 like 'you will never believe', The RNN cell will give 4 output vectors. Which can be concatenated and then used as part of a dense feedforward architecture. &lt;/p&gt;
&lt;p&gt;In the Bidirectional RNN the only change is that we read the text in the normal fashion as well in reverse. So we stack two RNNs in parallel and hence we get 8 output vectors to append. &lt;/p&gt;
&lt;p&gt;Once we get the output vectors we send them through a series of dense layers and finally a softmax layer to build a text classifier.&lt;/p&gt;
&lt;p&gt;Due to the limitations of RNNs like not remembering long term dependencies, in practice we almost always use LSTM/GRU to model long term dependencies. In such a case you can just think of the RNN cell being replaced by a LSTM cell or a GRU cell in the above figure. An example model is provided below. Youc an use CuDNNGRU interchangably with CuDNNLSTM, when you build models. &lt;/p&gt;
&lt;pre style="font-size:60%"&gt;
&lt;code class="python"&gt;# BiDirectional LSTM
def model_lstm_du(embedding_matrix):
    inp = Input(shape=(maxlen,))
    x = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp)
    '''
    Here 64 is the size(dim) of the hidden state vector as well as the output vector. Keeping return_sequence we want the output for the entire sequence. So what is the dimension of output for this layer?
        64*70(maxlen)*2(bidirection concat)
    CuDNNLSTM is fast implementation of LSTM layer in Keras which only runs on GPU
    '''
    x = Bidirectional(CuDNNLSTM(64, return_sequences=True))(x)
    avg_pool = GlobalAveragePooling1D()(x)
    max_pool = GlobalMaxPooling1D()(x)
    conc = concatenate([avg_pool, max_pool])
    conc = Dense(64, activation="relu")(conc)
    conc = Dropout(0.1)(conc)
    outp = Dense(1, activation="sigmoid")(conc)
    model = Model(inputs=inp, outputs=outp)
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have written a simplified and well commented code to run this network(taking input from a lot of other kernels) on a &lt;a href="https://www.kaggle.com/mlwhiz/learning-text-classification-bidirectionalrnn"&gt;kaggle kernel&lt;/a&gt; for this competition. Do take a look there to learn the preprocessing steps, and the word to vec embeddings usage in this model. You will learn something. Please do upvote the kernel if you find it helpful. This kernel scored around 0.671 on the public leaderboard. &lt;/p&gt;
&lt;h3&gt;3. Attention Models&lt;/h3&gt;
&lt;p&gt;The concept of Attention is relatively new as it comes from &lt;a href="https://www.cs.cmu.edu/~diyiy/docs/naacl16.pdf"&gt;Hierarchical Attention Networks for Document Classification&lt;/a&gt; paper written jointly by CMU and Microsoft guys in 2016. &lt;/p&gt;
&lt;p&gt;So in the past we used to find features from text by doing a keyword extraction. Some word are more helpful in determining the category of a text than others. But in this method we sort of lost the sequential structure of text. With LSTM and deep learning methods while we are able to take case of the sequence structure we lose the ability to give higher weightage to more important words. 
Can we have the best of both worlds?&lt;/p&gt;
&lt;p&gt;And that is attention for you. In the author's words:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Not all words contribute equally to the representation of the sentence meaning. Hence, we introduce attention mechanism to extract
such words that are important to the meaning of the sentence and aggregate the representation of those informative words to form a sentence vector&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/birnn attention.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;In essense we want to create scores for every word in the text, which are the attention similarity score for a word. &lt;/p&gt;
&lt;p&gt;To do this we start with a weight matrix(W), a bias vector(b) and a context vector u. All of them will be learned by the optimmization algorithm.&lt;/p&gt;
&lt;p&gt;Then there are a series of mathematical operations. See the figure for more clarification. We can think of u1 as non linearity on RNN word output. After that v1 is a dot product of u1 with a context vector u raised to an exponentiation. From an intuition viewpoint, the value of v1 will be high if u and u1 are similar. Since we want the sum of scores to be 1, we divide v by the sum of v’s to get the Final Scores,s  &lt;/p&gt;
&lt;p&gt;These final scores are then multiplied by RNN output for words to weight them according to their importance. After which the outputs are summed and sent through dense layers and softmax for the task of text classification.&lt;/p&gt;
&lt;pre style="font-size:60%"&gt;
&lt;code class="python"&gt;def dot_product(x, kernel):
    """
    Wrapper for dot product operation, in order to be compatible with both
    Theano and Tensorflow
    Args:
        x (): input
        kernel (): weights
    Returns:
    """
    if K.backend() == 'tensorflow':
        return K.squeeze(K.dot(x, K.expand_dims(kernel)), axis=-1)
    else:
        return K.dot(x, kernel)

class AttentionWithContext(Layer):
    """
    Attention operation, with a context/query vector, for temporal data.
    Supports Masking.
    Follows the work of Yang et al. [https://www.cs.cmu.edu/~diyiy/docs/naacl16.pdf]
    "Hierarchical Attention Networks for Document Classification"
    by using a context vector to assist the attention
    # Input shape
        3D tensor with shape: `(samples, steps, features)`.
    # Output shape
        2D tensor with shape: `(samples, features)`.
    How to use:
    Just put it on top of an RNN Layer (GRU/LSTM/SimpleRNN) with return_sequences=True.
    The dimensions are inferred based on the output shape of the RNN.
    Note: The layer has been tested with Keras 2.0.6
    Example:
        model.add(LSTM(64, return_sequences=True))
        model.add(AttentionWithContext())
        # next add a Dense layer (for classification/regression) or whatever...
    """

    def __init__(self,
                 W_regularizer=None, u_regularizer=None, b_regularizer=None,
                 W_constraint=None, u_constraint=None, b_constraint=None,
                 bias=True, **kwargs):

        self.supports_masking = True
        self.init = initializers.get('glorot_uniform')

        self.W_regularizer = regularizers.get(W_regularizer)
        self.u_regularizer = regularizers.get(u_regularizer)
        self.b_regularizer = regularizers.get(b_regularizer)

        self.W_constraint = constraints.get(W_constraint)
        self.u_constraint = constraints.get(u_constraint)
        self.b_constraint = constraints.get(b_constraint)

        self.bias = bias
        super(AttentionWithContext, self).__init__(**kwargs)

    def build(self, input_shape):
        assert len(input_shape) == 3

        self.W = self.add_weight((input_shape[-1], input_shape[-1],),
                                 initializer=self.init,
                                 name='{}_W'.format(self.name),
                                 regularizer=self.W_regularizer,
                                 constraint=self.W_constraint)
        if self.bias:
            self.b = self.add_weight((input_shape[-1],),
                                     initializer='zero',
                                     name='{}_b'.format(self.name),
                                     regularizer=self.b_regularizer,
                                     constraint=self.b_constraint)

        self.u = self.add_weight((input_shape[-1],),
                                 initializer=self.init,
                                 name='{}_u'.format(self.name),
                                 regularizer=self.u_regularizer,
                                 constraint=self.u_constraint)

        super(AttentionWithContext, self).build(input_shape)

    def compute_mask(self, input, input_mask=None):
        # do not pass the mask to the next layers
        return None

    def call(self, x, mask=None):
        uit = dot_product(x, self.W)

        if self.bias:
            uit += self.b

        uit = K.tanh(uit)
        ait = dot_product(uit, self.u)

        a = K.exp(ait)

        # apply mask after the exp. will be re-normalized next
        if mask is not None:
            # Cast the mask to floatX to avoid float64 upcasting in theano
            a *= K.cast(mask, K.floatx())

        # in some cases especially in the early stages of training the sum may be almost zero
        # and this results in NaN's. A workaround is to add a very small positive number ε to the sum.
        # a /= K.cast(K.sum(a, axis=1, keepdims=True), K.floatx())
        a /= K.cast(K.sum(a, axis=1, keepdims=True) + K.epsilon(), K.floatx())

        a = K.expand_dims(a)
        weighted_input = x * a
        return K.sum(weighted_input, axis=1)

    def compute_output_shape(self, input_shape):
        return input_shape[0], input_shape[-1]


def model_lstm_atten(embedding_matrix):
    inp = Input(shape=(maxlen,))
    x = Embedding(max_features, embed_size, weights=[embedding_matrix], trainable=False)(inp)
    x = Bidirectional(CuDNNLSTM(128, return_sequences=True))(x)
    x = Bidirectional(CuDNNLSTM(64, return_sequences=True))(x)
    x = AttentionWithContext()(x)
    x = Dense(64, activation="relu")(x)
    x = Dense(1, activation="sigmoid")(x)
    model = Model(inputs=inp, outputs=x)
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have written a simplified and well commented code to run this network(taking input from a lot of other kernels) on a &lt;a href="https://www.kaggle.com/mlwhiz/learning-text-classification-attention"&gt;kaggle kernel&lt;/a&gt; for this competition. Do take a look there to learn the preprocessing steps, and the word to vec embeddings usage in this model. You will learn something. Please do upvote the kernel if you find it helpful. This kernel scored around 0.682 on the public leaderboard. &lt;/p&gt;
&lt;p&gt;Hope that Helps! Do checkout the kernels for all the networks and see the comments too. I will try to write a part 2 of this post where I would like to talk about capsule networks and more techniques as they get used in this competition. &lt;/p&gt;
&lt;p&gt;Here are the links again: &lt;a href="https://www.kaggle.com/mlwhiz/learning-text-classification-textcnn"&gt;TextCNN&lt;/a&gt;,&lt;a href="https://www.kaggle.com/mlwhiz/learning-text-classification-bidirectionalrnn"&gt;BiLSTM/GRU&lt;/a&gt;,&lt;a href="https://www.kaggle.com/mlwhiz/learning-text-classification-attention"&gt;Attention&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Do upvote them if you find them helpful.&lt;/p&gt;
&lt;h3&gt;References:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wildml.com/2015/11/understanding-convolutional-neural-networks-for-nlp/"&gt;CNN for NLP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https://en.diveintodeeplearning.org/d2l-en.pdf&lt;/li&gt;
&lt;li&gt;https://gist.github.com/cbaziotis/7ef97ccf71cbc14366835198c09809d2&lt;/li&gt;
&lt;li&gt;http://univagora.ro/jour/index.php/ijccc/article/view/3142&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.kaggle.com/shujian/fork-of-mix-of-nn-models"&gt;Shujian's kernel on Kaggle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="text classification"></category><category term="birnn"></category><category term="bidirectional RNN"></category><category term="bidirectional LSTM for text"></category><category term="bidirectional GRU for text"></category><category term="Attention models for text"></category></entry><entry><title>To all Data Scientists - The one Graph Algorithm you need to know</title><link href="http://mlwhiz.github.io/blog/2018/12/07/connected_components/" rel="alternate"></link><updated>2018-12-07T04:43:00-02:00</updated><author><name>Rahul Agarwal</name></author><id>tag:mlwhiz.github.io,2018-12-07:blog/2018/12/07/connected_components/</id><summary type="html">&lt;p&gt;Graphs provide us with a very useful data structure. They can help us to find structure within our data. With the advent of Machine learning and big data we need to get as much information as possible about our data. Learning a little bit of graph theory can certainly help us with that. &lt;/p&gt;
&lt;p&gt;Here is a &lt;a href="https://www.coursera.org/learn/big-data-graph-analytics?ranMID=40328&amp;amp;ranEAID=lVarvwc5BD0&amp;amp;ranSiteID=lVarvwc5BD0-uD3tAFL0mCUdzcfwDd6FTQ&amp;amp;siteID=lVarvwc5BD0-uD3tAFL0mCUdzcfwDd6FTQ&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0"&gt;Graph Analytics for Big Data course on Coursera by UCSanDiego&lt;/a&gt; which I highly recommend to learn the basics of graph theory.&lt;/p&gt;
&lt;p&gt;One of the algorithms I am going to focus in the current post is called &lt;strong&gt;Connected Components&lt;/strong&gt;. Why it is important. We all know clustering. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;You can think of Connected Components in very layman's terms as sort of a hard clustering algorithm which finds clusters/islands in related/connected data. As a concrete example: Say you have data about roads joining any two cities in the world. And you need to find out all the continents in the world and which city they contain.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;How will you achieve that? Come on give some thought. &lt;/p&gt;
&lt;p&gt;To put a &lt;strong&gt;Retail Perspective&lt;/strong&gt;: Lets say, we have a lot of customers using a lot of accounts. One way in which we can use the Connected components algorithm is to find out distinct families in our dataset. We can assume edges(roads) between CustomerIDs based on same credit card usage, or same address or same mobile number etc. Once we have those connections, we can then run the connected component algorithm on the same to create individual clusters to which we can then assign a family ID. We can use these family IDs to provide personalized recommendations based on a family needs. We can also use this family ID to fuel our classification algorithms by creating grouped features based on family.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;Finance Perspective&lt;/strong&gt;: Another use case would be to capture fraud using these family IDs. If an account has done fraud in past, it is highly probable that the connected accounts are also susceptible to fraud.&lt;/p&gt;
&lt;p&gt;So enough of use cases. Lets start with a simple graph class written in Python to start up our exploits with code. &lt;/p&gt;
&lt;p&gt;This post will revolve more around code from here onwards. &lt;/p&gt;
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;""" A Python Class
A simple Python graph class, demonstrating the essential 
facts and functionalities of graphs.
Taken from https://www.python-course.eu/graphs_python.php
Changed the implementation a little bit to include weighted edges
"""

class Graph(object):
    def __init__(self, graph_dict=None):
        """ initializes a graph object 
            If no dictionary or None is given, 
            an empty dictionary will be used
        """
        if graph_dict == None:
            graph_dict = {}
        self.__graph_dict = graph_dict

    def vertices(self):
        """ returns the vertices of a graph """
        return list(self.__graph_dict.keys())

    def edges(self):
        """ returns the edges of a graph """
        return self.__generate_edges()

    def add_vertex(self, vertex):
        """ If the vertex "vertex" is not in 
            self.__graph_dict, a key "vertex" with an empty
            dict as a value is added to the dictionary. 
            Otherwise nothing has to be done. 
        """
        if vertex not in self.__graph_dict:
            self.__graph_dict[vertex] = {}

    def add_edge(self, edge,weight=1):
        """ assumes that edge is of type set, tuple or list
        """
        edge = set(edge)
        (vertex1, vertex2) = tuple(edge)
        if vertex1 in self.__graph_dict:
            self.__graph_dict[vertex1][vertex2] = weight
        else:
            self.__graph_dict[vertex1] = {vertex2:weight}

        if vertex2 in self.__graph_dict:
            self.__graph_dict[vertex2][vertex1] = weight
        else:
            self.__graph_dict[vertex2] = {vertex1:weight}


    def __generate_edges(self):
        """ A static method generating the edges of the 
            graph "graph". Edges are represented as sets 
            with one (a loop back to the vertex) or two 
            vertices 
        """
        edges = []
        for vertex in self.__graph_dict:
            for neighbour,weight in self.__graph_dict[vertex].iteritems():
                if (neighbour, vertex, weight) not in edges:
                    edges.append([vertex, neighbour, weight])
        return edges

    def __str__(self):
        res = "vertices: "
        for k in self.__graph_dict:
            res += str(k) + " "
        res += "\nedges: "
        for edge in self.__generate_edges():
            res += str(edge) + " "
        return res

    def adj_mat(self):
        return self.__graph_dict
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;You can certainly play with our new graph class.Here we try to build some graphs.&lt;/p&gt;
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;g = { "a" : {"d":2},
      "b" : {"c":2},
      "c" : {"b":5,  "d":3, "e":5}
    }
graph = Graph(g)
print("Vertices of graph:")
print(graph.vertices())
print("Edges of graph:")
print(graph.edges())
print("Add vertex:")
graph.add_vertex("z")
print("Vertices of graph:")
print(graph.vertices()) 
print("Add an edge:")
graph.add_edge({"a","z"})    
print("Vertices of graph:")
print(graph.vertices())
print("Edges of graph:")
print(graph.edges())
print('Adding an edge {"x","y"} with new vertices:')
graph.add_edge({"x","y"})
print("Vertices of graph:")
print(graph.vertices())
print("Edges of graph:")
print(graph.edges())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre style="font-family:courier new,monospace; background-color:#f6c6529c; color:#000000"&gt;Vertices of graph:
['a', 'c', 'b']
Edges of graph:
[['a', 'd', 2], ['c', 'b', 5], ['c', 'e', 5], ['c', 'd', 3], ['b', 'c', 2]]
Add vertex:
Vertices of graph:
['a', 'c', 'b', 'z']
Add an edge:
Vertices of graph:
['a', 'c', 'b', 'z']
Edges of graph:
[['a', 'z', 1], ['a', 'd', 2], ['c', 'b', 5], ['c', 'e', 5], ['c', 'd', 3], ['b', 'c', 2], ['z', 'a', 1]]
Adding an edge {"x","y"} with new vertices:
Vertices of graph:
['a', 'c', 'b', 'y', 'x', 'z']
Edges of graph:
[['a', 'z', 1], ['a', 'd', 2], ['c', 'b', 5], ['c', 'e', 5], ['c', 'd', 3], ['b', 'c', 2], ['y', 'x', 1], ['x', 'y', 1], ['z', 'a', 1]]
&lt;/pre&gt;

&lt;p&gt;Lets do something interesting now.&lt;/p&gt;
&lt;p&gt;We will use the above graph class for our understanding purpose. There are many Modules in python which we can use to do whatever I am going to do next,but to understand the methods we will write everything from scratch.
Lets start with an example graph which we can use for our purpose.&lt;/p&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/ad/MapGermanyGraph.svg/1200px-MapGermanyGraph.svg.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;g = {'Frankfurt': {'Mannheim':85, 'Wurzburg':217, 'Kassel':173},
     'Mannheim': {'Frankfurt':85, 'Karlsruhe':80},
     'Karlsruhe': {'Augsburg':250, 'Mannheim':80},
     'Augsburg': {'Karlsruhe':250, 'Munchen':84},
     'Wurzburg': {'Erfurt':186, 'Numberg':103,'Frankfurt':217},
     'Erfurt': {'Wurzburg':186},
     'Numberg': {'Wurzburg':103, 'Stuttgart':183,'Munchen':167},
     'Munchen': {'Numberg':167, 'Augsburg':84,'Kassel':502},
     'Kassel': {'Frankfurt':173, 'Munchen':502},
     'Stuttgart': {'Numberg':183}
     }
graph = Graph(g)
print("Vertices of graph:")
print(graph.vertices())
print("Edges of graph:")
print(graph.edges())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre style="font-family:courier new,monospace; background-color:#f6c6529c; color:#000000"&gt;
Vertices of graph:
['Mannheim', 'Erfurt', 'Munchen', 'Numberg', 'Stuttgart', 'Augsburg', 'Kassel', 'Frankfurt', 'Wurzburg', 'Karlsruhe']
Edges of graph:
[['Mannheim', 'Frankfurt', 85], ['Mannheim', 'Karlsruhe', 80], ['Erfurt', 'Wurzburg', 186], ['Munchen', 'Numberg', 167], ['Munchen', 'Augsburg', 84], ['Munchen', 'Kassel', 502], ['Numberg', 'Stuttgart', 183], ['Numberg', 'Wurzburg', 103], ['Numberg', 'Munchen', 167], ['Stuttgart', 'Numberg', 183], ['Augsburg', 'Munchen', 84], ['Augsburg', 'Karlsruhe', 250], ['Kassel', 'Munchen', 502], ['Kassel', 'Frankfurt', 173], ['Frankfurt', 'Mannheim', 85], ['Frankfurt', 'Wurzburg', 217], ['Frankfurt', 'Kassel', 173], ['Wurzburg', 'Numberg', 103], ['Wurzburg', 'Erfurt', 186], ['Wurzburg', 'Frankfurt', 217], ['Karlsruhe', 'Mannheim', 80], ['Karlsruhe', 'Augsburg', 250]]
&lt;/pre&gt;

&lt;p&gt;Lets say we are given a graph with the cities of Germany and respective distance between them. &lt;strong&gt;You want to find out how to go from Frankfurt (The starting node) to Munchen&lt;/strong&gt;. There might be many ways in which you can traverse the graph but you need to find how many cities you will need to visit on a minimum to go from frankfurt to Munchen)
This problem is analogous to finding out distance between nodes in an unweighted graph.&lt;/p&gt;
&lt;p&gt;The algorithm that we use here is called as &lt;strong&gt;Breadth First Search&lt;/strong&gt;.&lt;/p&gt;
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;def min_num_edges_between_nodes(graph,start_node):
    distance = 0
    shortest_path = []
    queue = [start_node] #FIFO
    levels = {}
    levels[start_node] = 0 
    shortest_paths = {}
    shortest_paths[start_node] = ":"
    visited = [start_node]
    while len(queue)!=0:
        start = queue.pop(0)
        neighbours = graph[start]
        for neighbour,_ in neighbours.iteritems():
            if neighbour not in visited:
                queue.append(neighbour)
                visited.append(neighbour)
                levels[neighbour] = levels[start]+1
                shortest_paths[neighbour] = shortest_paths[start] +"-&gt;"+ start
    return levels, shortest_paths
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we do in the above piece of code is create a queue and traverse it based on levels. 
We start with Frankfurt as starting node.
We loop through its neighbouring cities(Menheim, Wurzburg and Kassel) and push them into the queue. 
We keep track of what level they are at and also the path through which we reached them. 
Since we are popping a first element of a queue we are sure we will visit cities in the order of their level. &lt;/p&gt;
&lt;p&gt;Checkout this good &lt;a href="https://medium.com/basecs/breaking-down-breadth-first-search-cebe696709d9"&gt;post&lt;/a&gt; about BFS to understand more about queues and BFS.&lt;/p&gt;
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;min_num_edges_between_nodes(g,'Frankfurt')
&lt;/code&gt;&lt;/pre&gt;

&lt;pre style="font-family:courier new,monospace; background-color:#f6c6529c; color:#000000"&gt;
  ({'Augsburg': 3,
  'Erfurt': 2,
  'Frankfurt': 0,
  'Karlsruhe': 2,
  'Kassel': 1,
  'Mannheim': 1,
  'Munchen': 2,
  'Numberg': 2,
  'Stuttgart': 3,
  'Wurzburg': 1},
 {'Augsburg': ':-&gt;Frankfurt-&gt;Mannheim-&gt;Karlsruhe',
  'Erfurt': ':-&gt;Frankfurt-&gt;Wurzburg',
  'Frankfurt': ':',
  'Karlsruhe': ':-&gt;Frankfurt-&gt;Mannheim',
  'Kassel': ':-&gt;Frankfurt',
  'Mannheim': ':-&gt;Frankfurt',
  'Munchen': ':-&gt;Frankfurt-&gt;Kassel',
  'Numberg': ':-&gt;Frankfurt-&gt;Wurzburg',
  'Stuttgart': ':-&gt;Frankfurt-&gt;Wurzburg-&gt;Numberg',
  'Wurzburg': ':-&gt;Frankfurt'})
&lt;/pre&gt;

&lt;p&gt;I did this example to show how  BFS algorithm works.
We can extend this algorithm to find out connected components in an unconnected graph. 
Lets say we need to find groups of unconnected vertices in the graph. &lt;/p&gt;
&lt;p&gt;For example: the below graph has 3 unconnected sub-graphs. Can we find what nodes belong to a particular subgraph?&lt;/p&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/commons/8/85/Pseudoforest.svg"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;#We add another countries in the loop 
graph = Graph(g)
graph.add_edge(("Mumbai", "Delhi"),400)
graph.add_edge(("Delhi", "Kolkata"),500)
graph.add_edge(("Kolkata", "Bangalore"),600)
graph.add_edge(("TX", "NY"),1200)
graph.add_edge(("ALB", "NY"),800)

g = graph.adj_mat()

def bfs_connected_components(graph):
    connected_components = []
    nodes = graph.keys()

    while len(nodes)!=0:
        start_node = nodes.pop()
        queue = [start_node] #FIFO
        visited = [start_node]
        while len(queue)!=0:
            start = queue[0]
            queue.remove(start)
            neighbours = graph[start]
            for neighbour,_ in neighbours.iteritems():
                if neighbour not in visited:
                    queue.append(neighbour)
                    visited.append(neighbour)
                    nodes.remove(neighbour)
        connected_components.append(visited)

    return connected_components

print bfs_connected_components(g)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code is similar to the previous BFS code. We keep all the vertices of the graph in the nodes list. We take a node from the nodes list and start BFS on it. as we visit a node we remove that node from the nodes list. Whenever the BFS completes we start again with another node in the nodes list until the nodes list is empty.&lt;/p&gt;
&lt;pre style="font-family:courier new,monospace; background-color:#f6c6529c; color:#000000"&gt;[['Kassel',
  'Munchen',
  'Frankfurt',
  'Numberg',
  'Augsburg',
  'Mannheim',
  'Wurzburg',
  'Stuttgart',
  'Karlsruhe',
  'Erfurt'],
 ['Bangalore', 'Kolkata', 'Delhi', 'Mumbai'],
 ['NY', 'ALB', 'TX']]
&lt;/pre&gt;

&lt;p&gt;As you can see we are able to find distinct components in our data. Just by using Edges and Vertices. This algorithm could be run on different data to satisfy any use case I presented above. &lt;/p&gt;
&lt;p&gt;But Normally using Connected Components for a retail case will involve a lot of data and you will need to scale this algorithm.&lt;/p&gt;
&lt;h2&gt;Connected Components in PySpark&lt;/h2&gt;
&lt;p&gt;Below is an implementation from this paper on &lt;a href="https://ai.google/research/pubs/pub43122"&gt;Connected Components in
MapReduce and Beyond&lt;/a&gt; from Google Research. Read the PPT to understand the implementation better.
Some ready to use code for you.&lt;/p&gt;
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;def create_edges(line):
    a = [int(x) for x in line.split(" ")]
    edges_list=[]

    for i in range(0, len(a)-1):
        for j in range(i+1 ,len(a)):
            edges_list.append((a[i],a[j]))
            edges_list.append((a[j],a[i]))
    return edges_list

# adj_list.txt is a txt file containing adjacency list of the graph.
adjacency_list = sc.textFile("adj_list.txt")

edges_rdd = adjacency_list.flatMap(lambda line : create_edges(line)).distinct()

def largeStarInit(record):
    a, b = record
    yield (a,b)
    yield (b,a)

def largeStar(record):
    a, b = record
    t_list = list(b)
    t_list.append(a)
    list_min = min(t_list)
    for x in b:
        if a &lt; x:
            yield (x,list_min)

def smallStarInit(record):
    a, b = record
    if b&lt;=a:
        yield (a,b)
    else:
        yield (b,a)

def smallStar(record):
    a, b = record
    t_list = list(b)
    t_list.append(a)
    list_min = min(t_list)
    for x in t_list:
        if x!=list_min:
            yield (x,list_min)

#Handle case for single nodes
def single_vertex(line):
    a = [int(x) for x in line.split(" ")]
    edges_list=[]
    if len(a)==1:
        edges_list.append((a[0],a[0]))
    return edges_list

iteration_num =0 
while 1==1:
    if iteration_num==0:
        print "iter", iteration_num
        large_star_rdd = edges_rdd.groupByKey().flatMap(lambda x : largeStar(x))
        small_star_rdd = large_star_rdd.flatMap(lambda x : smallStarInit(x)).groupByKey().flatMap(lambda x : smallStar(x)).distinct()
        iteration_num += 1

    else:
        print "iter", iteration_num
        large_star_rdd = small_star_rdd.flatMap(lambda x: largeStarInit(x)).groupByKey().flatMap(lambda x : largeStar(x)).distinct()
        small_star_rdd = large_star_rdd.flatMap(lambda x : smallStarInit(x)).groupByKey().flatMap(lambda x : smallStar(x)).distinct()
        iteration_num += 1
    #check Convergence

    changes = (large_star_rdd.subtract(small_star_rdd).union(small_star_rdd.subtract(large_star_rdd))).collect()
    if len(changes) == 0 :
        break

single_vertex_rdd = adjacency_list.flatMap(lambda line : single_vertex(line)).distinct()

answer = single_vertex_rdd.collect() + large_star_rdd.collect()

print answer[:10]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Or Use GraphFrames in PySpark&lt;/h2&gt;
&lt;p&gt;To Install graphframes:&lt;/p&gt;
&lt;p&gt;I ran on command line: pyspark --packages graphframes:graphframes:0.5.0-spark2.1-s_2.11 which opened up my notebook and installed graphframes after i try to import in my notebook. &lt;/p&gt;
&lt;p&gt;The string to be formatted as : graphframes:(latest version)-spark(your spark version)-s_(your scala version). &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Checkout&lt;/em&gt; &lt;a href="http://go.databricks.com/hubfs/notebooks/3-GraphFrames-User-Guide-python.html"&gt;this guide on how to use GraphFrames&lt;/a&gt; for more information. &lt;/p&gt;
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;from graphframes import *
def vertices(line):
    vert = [int(x) for x in line.split(" ")]
    return vert

vertices = adjacency_list.flatMap(lambda x: vertices(x)).distinct().collect()
vertices = sqlContext.createDataFrame([[x] for x in vertices], ["id"])

def create_edges(line):
    a = [int(x) for x in line.split(" ")]
    edges_list=[]
    if len(a)==1:
        edges_list.append((a[0],a[0]))
    for i in range(0, len(a)-1):
        for j in range(i+1 ,len(a)):
            edges_list.append((a[i],a[j]))
            edges_list.append((a[j],a[i]))
    return edges_list

edges = adjacency_list.flatMap(lambda x: create_edges(x)).distinct().collect()
edges = sqlContext.createDataFrame(edges, ["src", "dst"])

g = GraphFrame(vertices, edges)
sc.setCheckpointDir(".")

# graphframes uses the same paper we referenced apparently
cc = g.connectedComponents()
print cc.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;The GraphFrames library implements the CC algorithm as well as a variety of other graph algorithms. &lt;/p&gt;
&lt;p&gt;The above post was a lot of code but hope it was helpful. It took me a lot of time to implement the algorithm so wanted to make it easy for the folks. &lt;/p&gt;
&lt;p&gt;If you want to read up more on Graph Algorithms here is an &lt;a href="https://www.coursera.org/learn/big-data-graph-analytics?ranMID=40328&amp;amp;ranEAID=lVarvwc5BD0&amp;amp;ranSiteID=lVarvwc5BD0-uD3tAFL0mCUdzcfwDd6FTQ&amp;amp;siteID=lVarvwc5BD0-uD3tAFL0mCUdzcfwDd6FTQ&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0"&gt;Graph Analytics for Big Data course on Coursera by UCSanDiego&lt;/a&gt; which I highly recommend to learn the basics of graph theory.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.python-course.eu/graphs_python.php"&gt;Graphs in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/basecs/a-gentle-introduction-to-graph-theory-77969829ead8"&gt;A Gentle Intoduction to Graph Theory Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/learn/big-data-graph-analytics?ranMID=40328&amp;amp;ranEAID=lVarvwc5BD0&amp;amp;ranSiteID=lVarvwc5BD0-uD3tAFL0mCUdzcfwDd6FTQ&amp;amp;siteID=lVarvwc5BD0-uD3tAFL0mCUdzcfwDd6FTQ&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0"&gt;Graph Analytics for Big Data course on Coursera by UCSanDiego&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;</summary><category term="graph algorithms"></category><category term="Python"></category><category term="Pyspark"></category></entry><entry><title>Object Detection: An End to End Theoretical Perspective</title><link href="http://mlwhiz.github.io/blog/2018/09/22/object_detection/" rel="alternate"></link><updated>2018-09-22T04:43:00-03:00</updated><author><name>Rahul Agarwal</name></author><id>tag:mlwhiz.github.io,2018-09-22:blog/2018/09/22/object_detection/</id><summary type="html">&lt;p&gt;We all know about the image classification problem. Given an image can you find out the class the image belongs to? We can solve any new image classification problem with ConvNets and &lt;a href="https://medium.com/@14prakash/transfer-learning-using-keras-d804b2e04ef8"&gt;Transfer Learning&lt;/a&gt; using pre-trained nets.
&lt;br&gt;
&lt;div style="color:black; background-color: #E9DAEE;"&gt;
ConvNet as fixed feature extractor. Take a ConvNet pretrained on ImageNet, remove the last fully-connected layer (this layer's outputs are the 1000 class scores for a different task like ImageNet), then treat the rest of the ConvNet as a fixed feature extractor for the new dataset. In an AlexNet, this would compute a 4096-D vector for every image that contains the activations of the hidden layer immediately before the classifier. We call these features CNN codes. It is important for performance that these codes are ReLUd (i.e. thresholded at zero) if they were also thresholded during the training of the ConvNet on ImageNet (as is usually the case). Once you extract the 4096-D codes for all images, train a linear classifier (e.g. Linear SVM or Softmax classifier) for the new dataset.
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;As a side note: if you want to know more about convnets and Transfer Learning I would like to recommend this awesome course on &lt;a href="https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-AqkGMb7JzoCMW0Np1uLfCA&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0"&gt;Deep Learning in Computer Vision&lt;/a&gt; in the &lt;a href="https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-AqkGMb7JzoCMW0Np1uLfCA&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0"&gt;Advanced machine learning specialization&lt;/a&gt;. This course talks about various CNN architetures and covers a wide variety of problems in the image domain including detection and segmentation.&lt;/p&gt;
&lt;p&gt;But there are a lot many interesting problems in the Image domain. The one which we are going to focus on today is the Segmentation, Localization and Detection problem.
So what are these problems?&lt;/p&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/id1.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;So these problems are divided into 4 major buckets. In the next few lines I would try to explain each of these problems concisely before we take a deeper dive:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Semantic Segmentation: Given an image, can we classify each pixel as belonging to a particular class?&lt;/li&gt;
&lt;li&gt;Classification+Localization: We were able to classify an image as a cat. Great. Can we also get the location of the said cat in that image by drawing a bounding box around the cat? Here we assume that there is a fixed number(commonly 1) in the image.&lt;/li&gt;
&lt;li&gt;Object Detection: A More general case of the Classification+Localization problem. In a real-world setting, we don't know how many objects are in the image beforehand. So can we detect all the objects in the image and draw bounding boxes around them?&lt;/li&gt;
&lt;li&gt;Instance Segmentation: Can we create masks for each individual object in the image? It is different from semantic segmentation. How? If you look in the 4th image on the top, we won't be able to distinguish between the two dogs using semantic segmentation procedure as it would sort of merge both the dogs together.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this post, we will focus mainly on Object Detection.&lt;/p&gt;
&lt;h2&gt;Classification+Localization&lt;/h2&gt;
&lt;p&gt;So lets first try to understand how we can solve the problem when we have a single object in the image. The Classification+Localization case. Pretty neatly said in the CS231n notes:&lt;/p&gt;
&lt;div style="color:black; background-color: #E9DAEE;"&gt;
Treat localization as a regression problem!
&lt;/div&gt;

&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/id2.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Input Data:&lt;/strong&gt; Lets first talk about what sort of data such sort of model expects. Normally in an image classification setting we used to have data in the form (X,y) where X is the image and y used to be the class labels.
In the Classification+Localization setting we will have data normally in the form (X,y), where X is still the image and y is a array containing (class_label, x,y,w,h) where,&lt;/p&gt;
&lt;p&gt;x = bounding box top left corner x-coordinate&lt;/p&gt;
&lt;p&gt;y = bounding box top left corner y-coordinate&lt;/p&gt;
&lt;p&gt;w = width of bounding box in pixel&lt;/p&gt;
&lt;p&gt;h = height of bounding box in pixel&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Model:&lt;/strong&gt; So in this setting we create a multi-output model which takes an image as the input and has (n_labels + 4) output nodes. n_labels nodes for each of the output class and 4 nodes that give the predictions for (x,y,w,h).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Loss:&lt;/strong&gt; In such a setting setting up the loss is pretty important. Normally the loss is a weighted sum of the Softmax Loss(from the Classification Problem) and the regression L2 loss(from the bounding box coordinates).&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$Loss = alpha*SoftmaxLoss + (1-alpha)*L2Loss$$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Since these two losses would be on a different scale, the alpha hyper-parameter needs to be tuned.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;There is one thing I would like to note here. We are trying to do object localization task but we still have our convnets in place here. We are just adding one more output layer to also predict the coordinates of the bounding box and tweaking our loss function. And here in lies the essence of the whole Deep Learning framework - Stack layers on top of each other, reuse components to create better models, and create architectures to solve your own problem. And that is what we are going to see a lot going forward.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Object Detection&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;So how does this idea of localization using regression get mapped to Object Detection?&lt;/em&gt; It doesn't. We don't have a fixed number of objects. So we can't have 4 outputs denoting, the bounding box coordinates.&lt;/p&gt;
&lt;p&gt;One naive idea could be to apply a CNN to many different crops of the image, CNN classifies each crop as object class or background class. This is intractable. There could be a lot of such crops that you can create.&lt;/p&gt;
&lt;h3&gt;Region Proposals:&lt;/h3&gt;
&lt;p&gt;If just there was a method(Normally called Region Proposal Network)which could find some cropped regions for us automatically, we could just run our convnet on those regions and be done with object detection. And that is what selective search (Uijlings et al, "&lt;a href="https://medium.com/r/?url=http%3A%2F%2Fwww.huppelen.nl%2Fpublications%2FselectiveSearchDraft.pdf"&gt;Selective Search for Object Recognition&lt;/a&gt;", IJCV 2013) provided for RCNN.&lt;/p&gt;
&lt;p&gt;So what are Region Proposals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find &lt;em&gt;"blobby"&lt;/em&gt; image regions that are likely to contain objects&lt;/li&gt;
&lt;li&gt;Relatively fast to run; e.g. Selective Search gives 2000 region proposals in a few seconds on CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How the region proposals are being made?&lt;/p&gt;
&lt;h3&gt;Selective Search for Object Recognition:&lt;/h3&gt;
&lt;p&gt;So this paper starts with a set of some initial regions using [13] (P. F. Felzenszwalb and D. P. Huttenlocher. &lt;a href="https://medium.com/r/?url=http%3A%2F%2Fpeople.cs.uchicago.edu%2F~pff%2Fpapers%2Fseg-ijcv.pdf"&gt;Efficient GraphBased Image Segmentation&lt;/a&gt;. IJCV, 59:167–181, 2004. 1, 3, 4, 5, 7)
&lt;br&gt;
&lt;div style="color:black; background-color: #E9DAEE;"&gt;
Graph-based image segmentation techniques generally represent the problem in terms of a graph G = (V, E) where each node v ∈ V corresponds to a pixel in the image, and the edges in E connect certain pairs of neighboring pixels. A weight is associated with each edge based on some property of the pixels that it connects, such as their image intensities. Depending on the method, there may or may not be an edge connecting each pair of vertices.
&lt;/div&gt;
&lt;br&gt;
In this paper they take an approach:
&lt;br&gt;
&lt;div style="color:black; background-color: #E9DAEE;"&gt;
Each edge (vi , vj )∈ E has a corresponding weight w((vi , vj )), which is a non-negative measure of the dissimilarity between neighboring elements vi and vj . In the case of image segmentation, the elements in V are pixels and the weight of an edge is some measure of the dissimilarity between the two pixels connected by that edge (e.g., the difference in intensity, color, motion, location or some other local attribute). In the graph-based approach, a segmentation S is a partition of V into components such that each component (or region) C ∈ S corresponds to a connected component in a graph.
&lt;/div&gt;
&lt;br&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/id3.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;As you can see if we create bounding boxes around these masks we will be losing a lot of regions. We want to have the whole baseball player in a single bounding box/frame. We need to somehow group these initial regions.
For that the authors of &lt;a href="https://medium.com/r/?url=http%3A%2F%2Fwww.huppelen.nl%2Fpublications%2FselectiveSearchDraft.pdf"&gt;Selective Search for Object Recognition&lt;/a&gt; apply the Hierarchical Grouping algorithm to these initial regions. In this algorithm they merge most similar regions together based on different notions of similarity based on colour, texture, size and fill.&lt;/p&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/id5.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/id6.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;h2&gt;RCNN&lt;/h2&gt;
&lt;p&gt;The above selective search is the region proposal they used in RCNN paper. But what is RCNN and how does it use region proposals?&lt;/p&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/id7.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;div style="color:black; background-color: #E9DAEE;"&gt;
Object detection system overview. Our system
(1) takes an input image, (2) extracts around 2000 bottom-up region proposals, (3) computes features for each proposal using a large convolutional neural network (CNN), and then (4) classifies each region using class-specific linear SVM.
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
Along with this, the authors have also used a class specific bounding box regressor, that takes:
Input : (Px,Py,Ph,Pw) - the location of the proposed region.
Target: (Gx,Gy,Gh,Gw) - Ground truth labels for the region.
The goal is to learn a transformation that maps the proposed region(P) to the Ground truth box(G)&lt;/p&gt;
&lt;h3&gt;Training RCNN&lt;/h3&gt;
&lt;p&gt;What is the input to an RCNN?
So we have got an image, Region Proposals from the RPN strategy and the ground truths of the labels (labels, ground truth boxes)
Next we treat all region proposals with ≥ 0.5 IoU(Intersection over union) overlap with a ground-truth box as positive training example for that box's class and the rest as negative. We train class specific SVM's&lt;/p&gt;
&lt;p&gt;So every region proposal becomes a training example. and the convnet gives a feature vector for that region proposal. We can then train our n-SVMs using the class specific data.&lt;/p&gt;
&lt;h3&gt;Test Time RCNN&lt;/h3&gt;
&lt;p&gt;At test time we predict detection boxes using class specific SVMs. We will be getting a lot of overlapping detection boxes at the time of testing. Non-maximum suppression is an integral part of the object detection pipeline. First, it sorts all detection boxes on the basis of their scores. The detection box M with the maximum score is selected and all other detection boxes with a significant overlap (using a pre-defined threshold) with M are suppressed. This process is recursively applied on the remaining boxes&lt;/p&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/id8.jpeg"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;h3&gt;Problems with RCNN:&lt;/h3&gt;
&lt;p&gt;Training is slow.
Inference (detection) is slow. 47s / image with VGG16 - Since the Convnet needs to be run many times.&lt;/p&gt;
&lt;p&gt;Need for speed. Hence comes in picture by the same authors:&lt;/p&gt;
&lt;h2&gt;Fast RCNN&lt;/h2&gt;
&lt;div style="color:black; background-color: #E9DAEE;"&gt;
So the next idea from the same authors: Why not create convolution map of input image and then just select the regions from that convolutional map? Do we really need to run so many convnets? What we can do is run just a single convnet and then apply region proposal crops on the features calculated by the convnet and use a simple SVM to classify those crops.
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
Something like:&lt;/p&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/id9.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;div style="color:black; background-color: #E9DAEE;"&gt;
From Paper: Fig. illustrates the Fast R-CNN architecture. A Fast R-CNN network takes as input an entire image and a set of object proposals. The network first processes the whole image with several convolutional (conv) and max pooling layers to produce a conv feature map. Then, for each object proposal a region of interest (RoI) pooling layer extracts a fixed-length feature vector from the feature map. Each feature vector is fed into a sequence of fully connected (fc) layers that finally branch into two sibling output layers: one that produces softmax probability estimates over K object classes plus a catch-all "background" class and another layer that outputs four real-valued numbers for each of the K object classes. Each set of 4 values encodes refined bounding-box positions for one of the K classes.
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
This idea depends a little upon the architecture of the model that get used too. Do we take the 4096 bottleneck layer from VGG16?
So the architecture that the authors have proposed is:&lt;/p&gt;
&lt;div style="color:black; background-color: #E9DAEE;"&gt;
We experiment with three pre-trained ImageNet [4] networks, each with five max pooling layers and between five and thirteen conv layers (see Section 4.1 for network details). When a pre-trained network initializes a Fast R-CNN network, it undergoes three transformations. First, the last max pooling layer is replaced by a RoI pooling layer that is configured by setting H and W to be compatible with the net's first fully connected layer (e.g., H = W = 7 for VGG16). Second, the network's last fully connected layer and softmax (which were trained for 1000-way ImageNet classification) are replaced with the two sibling layers described earlier (a fully connected layer and softmax over K + 1 categories and category-specific bounding-box regressors). Third, the network is modified to take two data inputs: a list of images and a list of RoIs in those images.
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
This obviously is a little confusing and "hairy", let us break this down. But for that, we need to see the VGG16 architecture.&lt;/p&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/id10.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;The last pooling layer is 7x7x512. This is the layer the network authors intend to replace by the ROI pooling layers. This pooling layer has got as input the location of the region proposal(xmin_roi,ymin_roi,h_roi,w_roi) and the previous feature map(14x14x512).&lt;/p&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/id11.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;Now the location of ROI coordinates are in the units of the input image i.e. 224x224 pixels. But the layer on which we have to apply the ROI pooling operation is 14x14x512. As we are using VGG we will transform image (224 x 224 x 3) into (14 x 14 x 512) - height and width is divided by 16. we can map ROIs coordinates onto the feature map just by dividing them by 16.&lt;/p&gt;
&lt;div style="color:black; background-color: #E9DAEE;"&gt;
In its depth, the convolutional feature map has encoded all the information for the image while maintaining the location of the "things" it has encoded relative to the original image. For example, if there was a red square on the top left of the image and the convolutional layers activate for it, then the information for that red square would still be on the top left of the convolutional feature map.
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
How the ROI pooling is done?&lt;/p&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/id12.gif"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;In the above image our region proposal is (0,3,5,7) and we divide that area into 4 regions since we want to have a ROI pooling layer of 2x2.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.com/r/?url=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F48163961%2Fhow-do-you-do-roi-pooling-on-areas-smaller-than-the-target-size"&gt;How do you do ROI-Pooling on Areas smaller than the target size?&lt;/a&gt; if region proposal size is 5x5 and ROI pooling layer of size 7x7. If this happens, we resize to 35x35 just by copying 7 times each cell and then max-pooling back to 7x7.&lt;/p&gt;
&lt;p&gt;After replacing the pooling layer, the authors also replaced the 1000 layer imagenet classification layer by a fully connected layer and softmax over K + 1 categories(+1 for Background) and category-specific bounding-box regressors.&lt;/p&gt;
&lt;h3&gt;Training Fast-RCNN&lt;/h3&gt;
&lt;p&gt;What is the input to an Fast- RCNN?&lt;/p&gt;
&lt;p&gt;Pretty much similar: So we have got an image, Region Proposals from the RPN strategy and the ground truths of the labels (labels, ground truth boxes)&lt;/p&gt;
&lt;p&gt;Next we treat all region proposals with ≥ 0.5 IoU(Intersection over union) overlap with a ground-truth box as positive training example for that box's class and the rest as negative. This time we have a dense layer on top, and we use multi task loss.&lt;/p&gt;
&lt;p&gt;So every ROI becomes a training example. The main difference is that there is concept of multi-task loss:&lt;/p&gt;
&lt;p&gt;A Fast R-CNN network has two sibling output layers. The first outputs a discrete probability distribution (per RoI), p = (p0, . . . , pK), over K + 1 categories. As usual, p is computed by a softmax over the K+1 outputs of a fully connected layer. The second sibling layer outputs bounding-box regression offsets, t= (tx , ty , tw, th), for each of the K object classes. Each training RoI is labeled with a ground-truth class u and a ground-truth bounding-box regression target v. We use a multi-task loss L on each labeled RoI to jointly train for classification and bounding-box regression&lt;/p&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/id13.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;Where Lcls is the softmax classification loss and Lloc is the regression loss. u=0 is for BG class and hence we add to loss only when we have a boundary box for any of the other class. Further:&lt;/p&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/id14.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;h3&gt;Problem:&lt;/h3&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/id15.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;h2&gt;Faster-RCNN&lt;/h2&gt;
&lt;p&gt;The next question that got asked was : Can the network itself do region proposals?&lt;/p&gt;
&lt;div style="color:black; background-color: #E9DAEE;"&gt;
The intuition is that: With FastRCNN we're already computing an Activation Map in the CNN, why not run the Activation Map through a few more layers to find the interesting regions, and then finish off the forward pass by predicting the classes + bbox coordinates?
&lt;/div&gt;

&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/id16.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;h3&gt;How does the Region Proposal Network work?&lt;/h3&gt;
&lt;p&gt;One of the main idea in the paper is the idea of Anchors. Anchors are fixed bounding boxes that are placed throughout the image with different sizes and ratios that are going to be used for reference when first predicting object locations.&lt;/p&gt;
&lt;p&gt;So first of all we define anchor centers on the image.&lt;/p&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/id17.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;The anchor centers are separated by 16 px in case of VGG16 network as the final convolution layer of (14x14x512) subsamples the image by a factor of 16(224/14).
This is how anchors look like:&lt;/p&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/id18.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;So we start with some predefined regions we think our objects could be with Anchors.&lt;/li&gt;
&lt;li&gt;Our RPN Classifies which regions have the object and the offset of the object bounding box. 1 if IOU for anchor with bounding box&amp;gt;0.5 0 otherwise.&lt;/li&gt;
&lt;li&gt;Non-Maximum suppression to reduce region proposals&lt;/li&gt;
&lt;li&gt;Fast RCNN detection network on top of proposals&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Faster-RCNN Loss:&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;The whole network is then jointly trained with 4 losses:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RPN classify object / not object&lt;/li&gt;
&lt;li&gt;RPN regress box coordinates offset&lt;/li&gt;
&lt;li&gt;Final classification score (object classes)&lt;/li&gt;
&lt;li&gt;Final box coordinates offset&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Results:&lt;/h2&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/id19.jpeg"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; &lt;em&gt;This is my own understanding of these papers with inputs from many blogs and slides on the internet. Let me know if you find something wrong with my understanding. I will be sure to correct myself and post.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;References:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://cs231n.github.io/transfer-learning/#tf"&gt;Transfer Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cs231n.stanford.edu/slides/2017/cs231n_2017_lecture11.pdf"&gt;CS231 Object detection Lecture Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://people.cs.uchicago.edu/~pff/papers/seg-ijcv.pdf"&gt;Efficient Graph-Based Image Segmentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/pdf/1311.2524.pdf"&gt;Rich feature hierarchies for accurate object detection and semantic segmentation(RCNN Paper)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/r/?url=http%3A%2F%2Fwww.huppelen.nl%2Fpublications%2FselectiveSearchDraft.pdf"&gt;Selective Search for Object Recognition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deepsense.ai/region-of-interest-pooling-explained/"&gt;ROI Pooling Explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://towardsdatascience.com/fasterrcnn-explained-part-1-with-code-599c16568cff"&gt;Faster RCNN Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/48163961/how-do-you-do-roi-pooling-on-areas-smaller-than-the-target-size"&gt;StackOverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@smallfishbigsea/faster-r-cnn-explained-864d4fb7e3f8"&gt;Faster RCNN Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tryolabs.com/blog/2018/01/18/faster-r-cnn-down-the-rabbit-hole-of-modern-object-detection/"&gt;Faster RCNN Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/r/?url=https%3A%2F%2Farxiv.org%2Fpdf%2F1506.01497.pdf"&gt;Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/WenjingChen7/deep-learning-for-object-detection"&gt;https://www.slideshare.net/WenjingChen7/deep-learning-for-object-detection&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: 'center'," +
        "    displayIndent: '0em'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processClass: 'mathjax', " +
        "        ignoreClass: 'no-mathjax', " +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
        "    } " +
        "}); ";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="object detection"></category><category term="rcnn"></category><category term="faster rcnn"></category></entry><entry><title>Hyperopt - A bayesian Parameter Tuning Framework</title><link href="http://mlwhiz.github.io/blog/2017/12/28/hyperopt_tuning_ml_model/" rel="alternate"></link><updated>2017-12-28T04:43:00-02:00</updated><author><name>Rahul Agarwal</name></author><id>tag:mlwhiz.github.io,2017-12-28:blog/2017/12/28/hyperopt_tuning_ml_model/</id><summary type="html">&lt;p&gt;Recently I was working on a in-class competition from the &lt;a href="https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-BShznKdc3CUauhfsM7_8xw&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0"&gt;"How to win a data science competition"&lt;/a&gt; Coursera course. Learned a lot of new things from that about using &lt;a href="http://mlwhiz.com/blog/2017/12/26/How_to_win_a_data_science_competition/"&gt;XGBoost for time series prediction&lt;/a&gt; tasks.&lt;/p&gt;
&lt;p&gt;The one thing that I tired out in this competition was the Hyperopt package - A bayesian Parameter Tuning Framework. And I was literally amazed. Left the machine with hyperopt in the night. And in the morning I had my results. It was really awesome and I did avoid a lot of hit and trial.&lt;/p&gt;
&lt;h2&gt;What really is Hyperopt?&lt;/h2&gt;
&lt;p&gt;From the site:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hyperopt is a Python library for serial and parallel optimization over awkward search spaces, which may include real-valued, discrete, and conditional dimensions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What the above means is that it is a optimizer that could minimize/maximize the loss function/accuracy(or whatever metric) for you.&lt;/p&gt;
&lt;p&gt;All of us are fairly known to cross-grid search or random-grid search. Hyperopt takes as an input a space of hyperparams in which it will search, and moves according to the result of past trials.&lt;/p&gt;
&lt;p&gt;To know more about how it does this, take a look at this &lt;a href="https://conference.scipy.org/proceedings/scipy2013/pdfs/bergstra_hyperopt.pdf"&gt;paper&lt;/a&gt; by J Bergstra.
Here is the &lt;a href="https://github.com/hyperopt/hyperopt/wiki/FMin"&gt;documentation&lt;/a&gt; from github.&lt;/p&gt;
&lt;h2&gt;How?&lt;/h2&gt;
&lt;p&gt;Let me just put the code first. This is how I define the objective function. The objective function takes space(the hyperparam space) as the input and returns the loss(The thing you want to minimize.Or negative of the thing you want to maximize)&lt;/p&gt;
&lt;p&gt;(X,y) and (Xcv,ycv) are the train and cross validation dataframes respectively.&lt;/p&gt;
&lt;p&gt;We have defined a hyperparam space by using the variable &lt;code&gt;space&lt;/code&gt; which is actually just a dictionary. We could choose different distributions for different parameter values.&lt;/p&gt;
&lt;p&gt;We use the &lt;code&gt;fmin&lt;/code&gt; function from the hyperopt package to minimize our &lt;code&gt;fn&lt;/code&gt; through the &lt;code&gt;space&lt;/code&gt;.&lt;/p&gt;
&lt;pre style="font-size:80%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;from sklearn.metrics import mean_squared_error
import xgboost as xgb
from hyperopt import hp, fmin, tpe, STATUS_OK, Trials
import numpy as np

def objective(space):
    print(space)
    clf = xgb.XGBRegressor(n_estimators =1000,colsample_bytree=space['colsample_bytree'],
                           learning_rate = .3,
                            max_depth = int(space['max_depth']),
                            min_child_weight = space['min_child_weight'],
                            subsample = space['subsample'],
                           gamma = space['gamma'],
                           reg_lambda = space['reg_lambda'],)

    eval_set  = [( X, y), ( Xcv, ycv)]

    clf.fit(X, y,
            eval_set=eval_set, eval_metric="rmse",
            early_stopping_rounds=10,verbose=False)

    pred = clf.predict(Xcv)
    mse_scr = mean_squared_error(ycv, pred)
    print "SCORE:", np.sqrt(mse_scr)
    #change the metric if you like
    return {'loss':mse_scr, 'status': STATUS_OK }


space ={'max_depth': hp.quniform("x_max_depth", 4, 16, 1),
        'min_child_weight': hp.quniform ('x_min_child', 1, 10, 1),
        'subsample': hp.uniform ('x_subsample', 0.7, 1),
        'gamma' : hp.uniform ('x_gamma', 0.1,0.5),
        'colsample_bytree' : hp.uniform ('x_colsample_bytree', 0.7,1),
        'reg_lambda' : hp.uniform ('x_reg_lambda', 0,1)
    }


trials = Trials()
best = fmin(fn=objective,
            space=space,
            algo=tpe.suggest,
            max_evals=100,
            trials=trials)

print best
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Finally:&lt;/h2&gt;
&lt;p&gt;Running the above gives us pretty good hyperparams for our learning algorithm.&lt;/p&gt;
&lt;p&gt;In fact I bagged up the results from multiple hyperparam settings and it gave me the best score on the LB.&lt;/p&gt;
&lt;p&gt;If you like this and would like to get more information about such things, subscribe to the mailing list on the right hand side.&lt;/p&gt;
&lt;p&gt;Also I would definitely recommend this &lt;a href="https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-BShznKdc3CUauhfsM7_8xw&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0"&gt;course&lt;/a&gt; about winning Kaggle competitions by Kazanova, Kaggle rank 3 . Do take a look.&lt;/p&gt;</summary><category term="machine learning"></category><category term="hyperparameter tuning"></category><category term="bayesian optimization"></category></entry><entry><title>Using XGBoost for time series prediction tasks</title><link href="http://mlwhiz.github.io/blog/2017/12/26/How_to_win_a_data_science_competition/" rel="alternate"></link><updated>2017-12-26T04:43:00-02:00</updated><author><name>Rahul Agarwal</name></author><id>tag:mlwhiz.github.io,2017-12-26:blog/2017/12/26/How_to_win_a_data_science_competition/</id><summary type="html">&lt;p&gt;Recently Kaggle master Kazanova along with some of his friends released a &lt;a href="https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-BShznKdc3CUauhfsM7_8xw&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0"&gt;"How to win a data science competition"&lt;/a&gt; Coursera course. The Course involved a final project which itself was a time series prediction problem. Here I will describe how I got a top 10 position as of writing this article.&lt;/p&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/lboard.png"  height="800" width="600" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;h2&gt;Description of the Problem:&lt;/h2&gt;
&lt;p&gt;In this competition we were given a challenging time-series dataset consisting of daily sales data, kindly provided by one of the largest Russian software firms - 1C Company.&lt;/p&gt;
&lt;p&gt;We were asked you to predict total sales for every product and store in the next month.&lt;/p&gt;
&lt;p&gt;The evaluation metric was RMSE where True target values are clipped into [0,20] range. This target range will be a lot important in understanding the submissions that I will prepare.&lt;/p&gt;
&lt;p&gt;The main thing that I noticed was that the data preparation aspect of this competition was by far the most important thing. I creted a variety of features. Here are the steps I took and the features I created.&lt;/p&gt;
&lt;h2&gt;1. Created a dataframe of all Date_block_num, Store and  Item combinations:&lt;/h2&gt;
&lt;p&gt;This is important because in the months we don't have a data for an item store combination, the machine learning algorithm needs to be specifically told that the sales is zero.&lt;/p&gt;
&lt;pre style="font-size:80%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;from itertools import product
# Create "grid" with columns
index_cols = ['shop_id', 'item_id', 'date_block_num']

# For every month we create a grid from all shops/items combinations from that month
grid = []
for block_num in sales['date_block_num'].unique():
    cur_shops = sales.loc[sales['date_block_num'] == block_num, 'shop_id'].unique()
    cur_items = sales.loc[sales['date_block_num'] == block_num, 'item_id'].unique()
    grid.append(np.array(list(product(*[cur_shops, cur_items, [block_num]])),dtype='int32'))
grid = pd.DataFrame(np.vstack(grid), columns = index_cols,dtype=np.int32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;2. Cleaned up a little of sales data after some basic EDA:&lt;/h2&gt;
&lt;pre style="font-size:80%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;sales = sales[sales.item_price&lt;100000]
sales = sales[sales.item_cnt_day&lt;=1000]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;3. Created Mean Encodings:&lt;/h2&gt;
&lt;pre style="font-size:80%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;sales_m = sales.groupby(['date_block_num','shop_id','item_id']).agg({'item_cnt_day': 'sum','item_price': np.mean}).reset_index()
sales_m = pd.merge(grid,sales_m,on=['date_block_num','shop_id','item_id'],how='left').fillna(0)
# adding the category id too
sales_m = pd.merge(sales_m,items,on=['item_id'],how='left')

for type_id in ['item_id','shop_id','item_category_id']:
    for column_id,aggregator,aggtype in [('item_price',np.mean,'avg'),('item_cnt_day',np.sum,'sum'),('item_cnt_day',np.mean,'avg')]:

        mean_df = sales.groupby([type_id,'date_block_num']).aggregate(aggregator).reset_index()[[column_id,type_id,'date_block_num']]
        mean_df.columns = [type_id+'_'+aggtype+'_'+column_id,type_id,'date_block_num']

        sales_m = pd.merge(sales_m,mean_df,on=['date_block_num',type_id],how='left')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
These above lines add the following 9 features :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;'item_id_avg_item_price'&lt;/li&gt;
&lt;li&gt;'item_id_sum_item_cnt_day'&lt;/li&gt;
&lt;li&gt;'item_id_avg_item_cnt_day'&lt;/li&gt;
&lt;li&gt;'shop_id_avg_item_price',&lt;/li&gt;
&lt;li&gt;'shop_id_sum_item_cnt_day'&lt;/li&gt;
&lt;li&gt;'shop_id_avg_item_cnt_day'&lt;/li&gt;
&lt;li&gt;'item_category_id_avg_item_price'&lt;/li&gt;
&lt;li&gt;'item_category_id_sum_item_cnt_day'&lt;/li&gt;
&lt;li&gt;'item_category_id_avg_item_cnt_day'&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;4. Create Lag Features:&lt;/h2&gt;
&lt;p&gt;Next we create lag features with diferent lag periods on the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;'item_id_avg_item_price',&lt;/li&gt;
&lt;li&gt;'item_id_sum_item_cnt_day'&lt;/li&gt;
&lt;li&gt;'item_id_avg_item_cnt_day'&lt;/li&gt;
&lt;li&gt;'shop_id_avg_item_price'&lt;/li&gt;
&lt;li&gt;'shop_id_sum_item_cnt_day'&lt;/li&gt;
&lt;li&gt;'shop_id_avg_item_cnt_day'&lt;/li&gt;
&lt;li&gt;'item_category_id_avg_item_price'&lt;/li&gt;
&lt;li&gt;'item_category_id_sum_item_cnt_day'&lt;/li&gt;
&lt;li&gt;'item_category_id_avg_item_cnt_day'&lt;/li&gt;
&lt;li&gt;'item_cnt_day'&lt;/li&gt;
&lt;/ul&gt;
&lt;pre style="font-size:80%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;lag_variables  = list(sales_m.columns[7:])+['item_cnt_day']
lags = [1 ,2 ,3 ,4, 5, 12]
for lag in lags:
    sales_new_df = sales_m.copy()
    sales_new_df.date_block_num+=lag
    sales_new_df = sales_new_df[['date_block_num','shop_id','item_id']+lag_variables]
    sales_new_df.columns = ['date_block_num','shop_id','item_id']+ [lag_feat+'_lag_'+str(lag) for lag_feat in lag_variables]
    sales_means = pd.merge(sales_means, sales_new_df,on=['date_block_num','shop_id','item_id'] ,how='left')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;5. Fill NA with zeros:&lt;/h2&gt;
&lt;pre style="font-size:80%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;for feat in sales_means.columns:
    if 'item_cnt' in feat:
        sales_means[feat]=sales_means[feat].fillna(0)
    elif 'item_price' in feat:
        sales_means[feat]=sales_means[feat].fillna(sales_means[feat].median())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;6. Drop the columns that we are not going to use in training:&lt;/h2&gt;
&lt;pre style="font-size:80%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;cols_to_drop = lag_variables[:-1] + ['item_name','item_price']
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;7. Take a recent bit of data only:&lt;/h2&gt;
&lt;pre style="font-size:80%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;sales_means = sales_means[sales_means['date_block_num']&gt;12]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;8. Split in train and CV :&lt;/h2&gt;
&lt;pre style="font-size:80%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;X_train = sales_means[sales_means['date_block_num']&lt;33].drop(cols_to_drop, axis=1)
X_cv =  sales_means[sales_means['date_block_num']==33].drop(cols_to_drop, axis=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;9. THE MAGIC SAUCE:&lt;/h2&gt;
&lt;p&gt;In the start I told that the clipping aspect of [0,20] will be important.
In the next few lines I clipped the days to range[0,40]. You might ask me why 40. An intuitive answer is if I had clipped to range [0,20] there would be very few tree nodes that could give 20 as an answer. While if I increase it to 40 having a 20 becomes much more easier. Please note that We will clip our predictions in the [0,20] range in the end.&lt;/p&gt;
&lt;pre style="font-size:80%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;def clip(x):
    if x&gt;40:
        return 40
    elif x&lt;0:
        return 0
    else:
        return x
train['item_cnt_day'] = train.apply(lambda x: clip(x['item_cnt_day']),axis=1)
cv['item_cnt_day'] = cv.apply(lambda x: clip(x['item_cnt_day']),axis=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;10: Modelling:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Created a XGBoost model to get the most important features(Top 42 features)&lt;/li&gt;
&lt;li&gt;Use hyperopt to tune xgboost&lt;/li&gt;
&lt;li&gt;Used top 10 models from tuned XGBoosts to generate predictions.&lt;/li&gt;
&lt;li&gt;clipped the predictions to [0,20] range&lt;/li&gt;
&lt;li&gt;Final solution was the average of these 10 predictions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learned a lot of new things from this &lt;a href="https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-BShznKdc3CUauhfsM7_8xw&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0"&gt;awesome course&lt;/a&gt;. Most recommended.&lt;/p&gt;</summary><category term="Python"></category><category term="NLP"></category><category term="Algorithms"></category><category term="Kaggle"></category></entry><entry><title>The story of every distribution - Discrete Distributions</title><link href="http://mlwhiz.github.io/blog/2017/09/14/discrete_distributions/" rel="alternate"></link><updated>2017-09-14T04:43:00-03:00</updated><author><name>Rahul Agarwal</name></author><id>tag:mlwhiz.github.io,2017-09-14:blog/2017/09/14/discrete_distributions/</id><summary type="html">&lt;p&gt;Distributions play an important role in the life of every Statistician. I coming from a non-statistic background am not so well versed in these and keep forgetting about the properties of these famous distributions. That is why I chose to write my own understanding in an intuitive way to keep a track.
One of the most helpful way to learn more about these is the &lt;a href="https://projects.iq.harvard.edu/stat110/home"&gt;STAT110&lt;/a&gt; course by Joe Blitzstein and his &lt;a href="http://amzn.to/2xAsYzE"&gt;book&lt;/a&gt;. You can check out this &lt;a href="https://www.coursera.org/specializations/statistics?siteID=lVarvwc5BD0-1nQtJg8.ENATqSUIufAaaw&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0"&gt;Coursera&lt;/a&gt; course too. Hope it could be useful to someone else too. So here goes:&lt;/p&gt;
&lt;h2&gt;1. Bernoulli Distribution:&lt;/h2&gt;
&lt;p&gt;Perhaps the most simple discrete distribution of all.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Story:&lt;/strong&gt; A Coin is tossed with probability p of heads.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PMF of Bernoulli Distribution is given by:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$P(X=k) = \begin{cases}1-p &amp;amp; k = 0\\p &amp;amp; k = 1\end{cases}$$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CDF of Bernoulli Distribution is given by:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$P(X&amp;lt;=k) = \begin{cases}0 &amp;amp; k &amp;lt; 0\\1-p &amp;amp; 0=&amp;lt;k&amp;lt;1 \\1 &amp;amp; k &amp;gt;= 1\end{cases}$$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Expected Value:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$E[X] = \sum kP(X=k)$$&lt;/div&gt;
&lt;div class="math"&gt;$$E[X] = 0*P(X=0)+1*P(X=1) = p$$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Variance:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$Var[X] = E[X^2] - E[X]^2$$&lt;/div&gt;
Now we find,
&lt;div class="math"&gt;$$E[X]^2 = p^2$$&lt;/div&gt;
and
&lt;div class="math"&gt;$$E[X^2] = \sum k^2P(X=k)$$&lt;/div&gt;
&lt;div class="math"&gt;$$E[X^2] =  0^2P(X=0) + 1^2P(X=1) = p $$&lt;/div&gt;
Thus,
&lt;div class="math"&gt;$$Var[X] = p(1-p)$$&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;2. Binomial Distribution:&lt;/h2&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/maxresdefault.jpg"  height="400" width="500" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;One of the most basic distribution in the Statistician toolkit. The parameters of this distribution is n(number of trials) and p(probability of success).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Story:&lt;/strong&gt;
Probability of getting exactly k successes in n trials&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PMF of binomial Distribution is given by:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$P(X=k) = \left(\begin{array}{c}n\\ k\end{array}\right) p^{k}(1-p)^{n-k}$$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CDF of binomial Distribution is given by:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$ P(X\leq k) = \sum_{i=0}^k  \left(\begin{array}{c}n\\ i\end{array}\right)  p^i(1-p)^{n-i} $$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Expected Value:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$E[X] = \sum kP(X=k)$$&lt;/div&gt;
&lt;div class="math"&gt;$$E[X] = \sum_{k=0}^n k \left(\begin{array}{c}n\\ k\end{array}\right) * p^{k}(1-p)^{n-k} = np $$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;A better way to solve this:&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$ X = I_{1} + I_{2} + ....+ I_{n-1}+ I_{n} $$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;X is the sum on n Indicator Bernoulli random variables.&lt;/p&gt;
&lt;p&gt;Thus,&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$E[X] = E[I_{1} + I_{2} + ....+ I_{n-1}+ I_{n}]$$&lt;/div&gt;
&lt;div class="math"&gt;$$E[X] = E[I_{1}] + E[I_{2}] + ....+ E[I_{n-1}]+ E[I_{n}]$$&lt;/div&gt;
&lt;div class="math"&gt;$$E[X] = \underbrace{p + p + ....+ p + p}_{n} = np$$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Variance:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$ X = I_{1} + I_{2} + ....+ I_{n-1}+ I_{n} $$&lt;/div&gt;
X is the sum on n Indicator Bernoulli random variables.
&lt;div class="math"&gt;$$Var[X] = Var[I_{1} + I_{2} + ....+ I_{n-1}+ I_{n}]$$&lt;/div&gt;
&lt;div class="math"&gt;$$Var[X] = Var[I_{1}] + Var[I_{2}] + ....+ Var[I_{n-1}]+ Var[I_{n}]$$&lt;/div&gt;
&lt;div class="math"&gt;$$Var[X] = \underbrace{p(1-p) + p(1-p) + ....+ p(1-p) + p(1-p)}_{n} = np(1-p)$$&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;3. Geometric Distribution:&lt;/h2&gt;
&lt;p&gt;The parameters of this distribution is p(probability of success).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Story:&lt;/strong&gt;
The number of failures before the first success(Heads) when a coin with probability p is tossed&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PMF of Geometric Distribution is given by:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$P(X=k) = (1-p)^kp$$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CDF of Geometric Distribution is given by:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$ P(X\leq k) = \sum_{i=0}^k (1-p)^{i}p$$&lt;/div&gt;
&lt;div class="math"&gt;$$ P(X\leq k) = p(1+q+q^2...+q^k)= p(1-q^k)/(1-q) = 1-(1-p)^k $$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Expected Value:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$E[X] = \sum kP(X=k)$$&lt;/div&gt;
&lt;div class="math"&gt;$$E[X] = \sum_{k=0}^{inf} k (1-p)^kp$$&lt;/div&gt;
&lt;div class="math"&gt;$$E[X] = qp +2q^2p +3q^3p +4q^4p .... $$&lt;/div&gt;
&lt;div class="math"&gt;$$E[X] = qp(1+2q+3q^2+4q^3+....)$$&lt;/div&gt;
&lt;div class="math"&gt;$$E[X] = qp/(1-q)^2 = q/p $$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Variance:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$Var[X] = E[X^2] - E[X]^2$$&lt;/div&gt;
Now we find,
&lt;div class="math"&gt;$$E[X]^2 = q^2/p^2$$&lt;/div&gt;
and
&lt;div class="math"&gt;$$E[X^2] = \sum_0^k k^2q^kp= qp + 4q^2p + 9q^3p +16q^4p ... = qp(1+4q+9q^2+16q^3....)$$&lt;/div&gt;
&lt;div class="math"&gt;$$E[X^2] = qp^{-2}(1+q)$$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Thus,
&lt;div class="math"&gt;$$Var[X] =q/p^2$$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Check Math appendix at bottom of this post for Geometric Series Proofs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Example:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Q. A doctor is seeking an anti-depressant for a newly diagnosed patient. Suppose that, of the available anti-depressant drugs, the probability that any particular drug will be effective for a particular patient is p=0.6. What is the probability that the first drug found to be effective for this patient is the first drug tried, the second drug tried, and so on? What is the expected number of drugs that will be tried to find one that is effective?&lt;/p&gt;
&lt;p&gt;A. Expected number of drugs that will be tried to find one that is effective = q/p = .4/.6 =.67&lt;/p&gt;
&lt;h2&gt;4. Negative Binomial Distribution:&lt;/h2&gt;
&lt;p&gt;The parameters of this distribution is p(probability of success) and r(number of success).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Story:&lt;/strong&gt;
The &lt;strong&gt;number of failures&lt;/strong&gt; of independent Bernoulli(p) trials before the rth success.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PMF of Negative Binomial Distribution is given by:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;r successes , k failures , last attempt needs to be a success:
&lt;div class="math"&gt;$$P(X=k) = \left(\begin{array}{c}k+r-1\\ k\end{array}\right) p^r(1-p)^k$$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Expected Value:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The negative binomial RV could be stated as the sum of r Geometric RVs
&lt;div class="math"&gt;$$X = X^1+X^2.... X^{r-1} +X^r$$&lt;/div&gt;
Thus,
&lt;div class="math"&gt;$$E[X] = E[X^1]+E[X^2].... E[X^{r-1}] +E[X^r]$$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$E[X] = rq/p$$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Variance:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The negative binomial RV could be stated as the sum of r independent Geometric RVs
&lt;div class="math"&gt;$$X = X^1+X^2.... X^{r-1} +X^r$$&lt;/div&gt;
Thus,
&lt;div class="math"&gt;$$Var[X] = Var[X^1]+Var[X^2].... Var[X^{r-1}] +Var[X^r]$$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$E[X] = rq/p^2$$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Example:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Q. Pat is required to sell candy bars to raise money for the 6th grade field trip. There are thirty houses in the neighborhood, and Pat is not supposed to return home until five candy bars have been sold. So the child goes door to door, selling candy bars. At each house, there is a 0.4 probability of selling one candy bar and a 0.6 probability of selling nothing.
What's the probability of selling the last candy bar at the nth house?&lt;/p&gt;
&lt;p&gt;A. r = 5 ; k = n - r&lt;/p&gt;
&lt;p&gt;Probability of selling the last candy bar at the nth house =
&lt;div class="math"&gt;$$P(X=k) = \left(\begin{array}{c}k+r-1\\ k\end{array}\right) p^r(1-p)^k$$&lt;/div&gt;
&lt;div class="math"&gt;$$P(X=k) = \left(\begin{array}{c}n-1\\ n-5\end{array}\right) .4^5(.6)^{n-5}$$&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;5. Poisson Distribution:&lt;/h2&gt;
&lt;p&gt;The parameters of this distribution is &lt;span class="math"&gt;\(\lambda\)&lt;/span&gt; the rate parameter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Motivation:&lt;/strong&gt;
There is as such no story to this distribution but only motivation for using this distribution. The Poisson distribution is often used for applications where we count the successes of a large number of trials where the per-trial success rate is small. For example, the Poisson distribution is a good starting point for counting the number of people who email you over the course of an hour.The number of chocolate chips in a chocolate chip cookie is another good candidate for a Poisson distribution, or the number of earthquakes in a year in some particular region&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PMF of Poisson Distribution is given by:&lt;/strong&gt;
&lt;div class="math"&gt;$$ P(X=k) = \frac{e^{-\lambda}\lambda^k} {k!}$$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Expected Value:&lt;/strong&gt;
&lt;div class="math"&gt;$$E[X] = \sum kP(X=k)$$&lt;/div&gt;
&lt;div class="math"&gt;$$ E[X] = \sum_{k=0}^{inf} k \frac{e^{-\lambda}\lambda^k} {k!}$$&lt;/div&gt;
&lt;div class="math"&gt;$$ E[X] = \lambda e^{-\lambda}\sum_{k=0}^{inf}  \frac{\lambda^{k-1}} {(k-1)!}$$&lt;/div&gt;
&lt;div class="math"&gt;$$ E[X] = \lambda e^{-\lambda} e^{\lambda} = \lambda $$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Variance:&lt;/strong&gt;
&lt;div class="math"&gt;$$Var[X] = E[X^2] - E[X]^2$$&lt;/div&gt;
Now we find,
&lt;div class="math"&gt;$$E[X]^2 = \lambda + \lambda^2$$&lt;/div&gt;
Thus,
&lt;div class="math"&gt;$$Var[X] = \lambda$$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Example:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Q. If electricity power failures occur according to a Poisson distribution with an average of 3 failures every twenty weeks, calculate the probability that there will not be more than one failure during a particular week?&lt;/p&gt;
&lt;p&gt;A. Probability = P(X=0)+P(X=1) = $e^{-3/20} + e^{-3/20}3/20 = 23/20*e^{-3/20} $&lt;/p&gt;
&lt;p&gt;Probability of selling the last candy bar at the nth house =
&lt;div class="math"&gt;$$P(X=k) = \left(\begin{array}{c}k+r-1\\ k\end{array}\right) p^r(1-p)^k$$&lt;/div&gt;
&lt;div class="math"&gt;$$P(X=k) = \left(\begin{array}{c}n-1\\ n-5\end{array}\right) .4^5(.6)^{n-5}$$&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Math Appendix:&lt;/h2&gt;
&lt;p&gt;Some Math (For Geometric Distribution) :&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$a+ar+ar^2+ar^3+⋯=a/(1−r)=a(1−r)^{−1}$$&lt;/div&gt;
Taking the derivatives of both sides, the first derivative with respect to r must be:
&lt;div class="math"&gt;$$a+2ar+3ar^2+4ar^3⋯=a(1−r)^{−2}$$&lt;/div&gt;
Multiplying above with r:
&lt;div class="math"&gt;$$ar+2ar^2+3ar^3+4ar^4⋯=ar(1−r)^{−2}$$&lt;/div&gt;
Taking the derivatives of both sides, the first derivative with respect to r must be:
&lt;div class="math"&gt;$$a+4ar+9ar^2+16ar^3⋯=a(1−r)^{-3}(1+r)$$&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Bonus - Python Graphs and Functions:&lt;/h2&gt;
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;# Useful Function to create graph
def chart_creator(x,y,title):
    import matplotlib.pyplot as plt  #sets up plotting under plt
    import seaborn as sns           #sets up styles and gives us more plotting options
    import pandas as pd             #lets us handle data as dataframes
    %matplotlib inline
    # Create a list of 100 Normal RVs
    data = pd.DataFrame(zip(x,y))
    data.columns = ['x','y']
    # We dont Probably need the Gridlines. Do we? If yes comment this line
    sns.set(style="ticks")

    # Here we create a matplotlib axes object. The extra parameters we use
    # "ci" to remove confidence interval
    # "marker" to have a x as marker.
    # "scatter_kws" to provide style info for the points.[s for size]
    # "line_kws" to provide style info for the line.[lw for line width]

    g = sns.regplot(x='x', y='y', data=data, ci = False,
        scatter_kws={"color":"darkred","alpha":0.3,"s":90},
        line_kws={"color":"g","alpha":0.5,"lw":0},marker="x")

    # remove the top and right line in graph
    sns.despine()

    # Set the size of the graph from here
    g.figure.set_size_inches(12,8)
    # Set the Title of the graph from here
    g.axes.set_title(title, fontsize=34,color="r",alpha=0.5)
    # Set the xlabel of the graph from here
    g.set_xlabel("k",size = 67,color="r",alpha=0.5)
    # Set the ylabel of the graph from here
    g.set_ylabel("pmf",size = 67,color="r",alpha=0.5)
    # Set the ticklabel size and color of the graph from here
    g.tick_params(labelsize=14,labelcolor="black")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here I will generate the PMFs of the discrete distributions we just discussed above using Pythons built in functions. For more details on the upper function, please see my previous post - &lt;a href="http://mlwhiz.com/blog/2015/09/13/seaborn_visualizations/"&gt;Create basic graph visualizations with SeaBorn&lt;/a&gt;. Also take a look at the &lt;a href="https://docs.scipy.org/doc/scipy/reference/stats.html"&gt;documentation&lt;/a&gt; guide for the below functions&lt;/p&gt;
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;# Binomial :
from scipy.stats import binom
n=30
p=0.5
k = range(0,n)
pmf = binom.pmf(k, n, p)
chart_creator(k,pmf,"Binomial PMF")
&lt;/code&gt;&lt;/pre&gt;

&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/output_12_0.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;# Geometric :
from scipy.stats import geom
n=30
p=0.5
k = range(0,n)
# -1 here is the location parameter for generating the PMF we want.
pmf = geom.pmf(k, p,-1)
chart_creator(k,pmf,"Geometric PMF")
&lt;/code&gt;&lt;/pre&gt;

&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/output_13_0.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;# Negative Binomial :
from scipy.stats import nbinom
r=5 # number of successes
p=0.5 # probability of Success
k = range(0,25) # number of failures
# -1 here is the location parameter for generating the PMF we want.
pmf = nbinom.pmf(k, r, p)
chart_creator(k,pmf,"Nbinom PMF")
&lt;/code&gt;&lt;/pre&gt;

&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/output_14_0.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;#Poisson
from scipy.stats import poisson
lamb = .3 # Rate
k = range(0,5)
pmf = poisson.pmf(k, lamb)
chart_creator(k,pmf,"Poisson PMF")
&lt;/code&gt;&lt;/pre&gt;

&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/output_15_0.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;h2&gt;References:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://amzn.to/2xAsYzE"&gt;Introduction to Probability by Joe Blitzstein&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Negative_binomial_distribution"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Next thing I want to come up with is a same sort of post for continuous distributions too. Keep checking for the same. Till then Ciao.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: 'center'," +
        "    displayIndent: '0em'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processClass: 'mathjax', " +
        "        ignoreClass: 'no-mathjax', " +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
        "    } " +
        "}); ";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="distributions"></category><category term="pdf"></category><category term="cdf"></category><category term="expected value"></category><category term="variance"></category><category term="binomial"></category><category term="poisson"></category><category term="geometric"></category></entry><entry><title>Good Feature Building Techniques - Tricks for Kaggle - My Kaggle Code Repository</title><link href="http://mlwhiz.github.io/blog/2017/09/14/kaggle_tricks/" rel="alternate"></link><updated>2017-09-14T04:43:00-03:00</updated><author><name>Rahul Agarwal</name></author><id>tag:mlwhiz.github.io,2017-09-14:blog/2017/09/14/kaggle_tricks/</id><summary type="html">&lt;p&gt;Often times it happens that we fall short of creativity. And creativity is one of the basic ingredients of what we do. Creating features needs creativity. So here is the list of ideas I gather in day to day life, where people have used creativity to get great results on Kaggle leaderboards.&lt;/p&gt;
&lt;p&gt;Take a look at the &lt;a href="https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-AqkGMb7JzoCMW0Np1uLfCA&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0"&gt;How to Win a Data Science Competition: Learn from Top Kagglers&lt;/a&gt; course in the &lt;a href="https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-AqkGMb7JzoCMW0Np1uLfCA&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0"&gt;Advanced machine learning specialization&lt;/a&gt; by Kazanova(Number 3 Kaggler at the time of writing)&lt;/p&gt;
&lt;p&gt;This post is inspired by a &lt;a href="https://www.kaggle.com/gaborfodor/from-eda-to-the-top-lb-0-368"&gt;Kernel&lt;/a&gt; on Kaggle written by Beluga, one of the top Kagglers, for a knowledge based &lt;a href="https://www.kaggle.com/c/nyc-taxi-trip-duration"&gt;competition&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some of the techniques/tricks I am sharing have been taken directly from that kernel so you could take a look yourself.
Otherwise stay here and read on.&lt;/p&gt;
&lt;h2&gt;1. Don't try predicting the future when you don't have to:&lt;/h2&gt;
&lt;p&gt;If both training/test comes from the same timeline, we can get really crafty with features. Although this is a case with Kaggle only, we can use this to our advantage. For example: In the Taxi Trip duration challenge the test data is randomly sampled from the train data. In this case we can use the target variable averaged over different categorical variable as a feature. Like in this case Beluga actually used the averaged the target variable over different weekdays. He then mapped the same averaged value as a variable by mapping it to test data too.&lt;/p&gt;
&lt;h2&gt;2. logloss clipping Technique:&lt;/h2&gt;
&lt;p&gt;Something that I learned in the Neural Network course by Jeremy Howard. Its based on a very simple Idea. Logloss penalises a lot if we are very confident and wrong. So in case of Classification problems where we have to predict probabilities, it would be much better to clip our probabilities between 0.05-0.95 so that we are never very sure about our prediction.&lt;/p&gt;
&lt;h2&gt;3. kaggle submission in gzip format:&lt;/h2&gt;
&lt;p&gt;A small piece of code that will help you save countless hours of uploading. Enjoy.
df.to_csv('submission.csv.gz', index=False, compression='gzip')&lt;/p&gt;
&lt;h2&gt;4. How best to use Latitude and Longitude features - Part 1:&lt;/h2&gt;
&lt;p&gt;One of the best things that I liked about the Beluga Kernel is how he used the Lat/Lon Data. So in the example we had pickup Lat/Lon and Dropoff Lat/Lon. We created features like:&lt;/p&gt;
&lt;h4&gt;A. Haversine Distance Between the Two Lat/Lons:&lt;/h4&gt;
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;def haversine_array(lat1, lng1, lat2, lng2):
    lat1, lng1, lat2, lng2 = map(np.radians, (lat1, lng1, lat2, lng2))
    AVG_EARTH_RADIUS = 6371  # in km
    lat = lat2 - lat1
    lng = lng2 - lng1
    d = np.sin(lat * 0.5) ** 2 + np.cos(lat1) * np.cos(lat2) * np.sin(lng * 0.5) ** 2
    h = 2 * AVG_EARTH_RADIUS * np.arcsin(np.sqrt(d))
    return h
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;B. Manhattan Distance Between the two Lat/Lons:&lt;/h4&gt;
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;def dummy_manhattan_distance(lat1, lng1, lat2, lng2):
    a = haversine_array(lat1, lng1, lat1, lng2)
    b = haversine_array(lat1, lng1, lat2, lng1)
    return a + b
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;C. Bearing Between the two Lat/Lons:&lt;/h4&gt;
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;def bearing_array(lat1, lng1, lat2, lng2):
    AVG_EARTH_RADIUS = 6371  # in km
    lng_delta_rad = np.radians(lng2 - lng1)
    lat1, lng1, lat2, lng2 = map(np.radians, (lat1, lng1, lat2, lng2))
    y = np.sin(lng_delta_rad) * np.cos(lat2)
    x = np.cos(lat1) * np.sin(lat2) - np.sin(lat1) * np.cos(lat2) * np.cos(lng_delta_rad)
    return np.degrees(np.arctan2(y, x))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;D. Center Latitude and Longitude between Pickup and Dropoff:&lt;/h4&gt;
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;train.loc[:, 'center_latitude'] = (train['pickup_latitude'].values + train['dropoff_latitude'].values) / 2
train.loc[:, 'center_longitude'] = (train['pickup_longitude'].values + train['dropoff_longitude'].values) / 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;5. How best to use Latitude and Longitude features - Part 2:&lt;/h2&gt;
&lt;p&gt;The Second way he used the Lat/Lon Feats was to create clusters for Pickup and Dropoff Lat/Lons. The way it worked was it created sort of Boroughs in the data by design.&lt;/p&gt;
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;from sklearn.cluster import MiniBatchKMeans
coords = np.vstack((train[['pickup_latitude', 'pickup_longitude']].values,
                    train[['dropoff_latitude', 'dropoff_longitude']].values,
                    test[['pickup_latitude', 'pickup_longitude']].values,
                    test[['dropoff_latitude', 'dropoff_longitude']].values))

sample_ind = np.random.permutation(len(coords))[:500000]
kmeans = MiniBatchKMeans(n_clusters=100, batch_size=10000).fit(coords[sample_ind])

train.loc[:, 'pickup_cluster'] = kmeans.predict(train[['pickup_latitude', 'pickup_longitude']])
train.loc[:, 'dropoff_cluster'] = kmeans.predict(train[['dropoff_latitude', 'dropoff_longitude']])
test.loc[:, 'pickup_cluster'] = kmeans.predict(test[['pickup_latitude', 'pickup_longitude']])
test.loc[:, 'dropoff_cluster'] = kmeans.predict(test[['dropoff_latitude', 'dropoff_longitude']])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;He then used these Clusters to create features like counting no of trips going out and coming in on a particular day.&lt;/p&gt;
&lt;h2&gt;6. How best to use Latitude and Longitude features - Part 3&lt;/h2&gt;
&lt;p&gt;He used PCA to transform longitude and latitude coordinates. In this case it is not about dimension reduction since he transformed 2D-&amp;gt; 2D. The rotation could help for decision tree splits, and it did actually.&lt;/p&gt;
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;pca = PCA().fit(coords)
train['pickup_pca0'] = pca.transform(train[['pickup_latitude', 'pickup_longitude']])[:, 0]
train['pickup_pca1'] = pca.transform(train[['pickup_latitude', 'pickup_longitude']])[:, 1]
train['dropoff_pca0'] = pca.transform(train[['dropoff_latitude', 'dropoff_longitude']])[:, 0]
train['dropoff_pca1'] = pca.transform(train[['dropoff_latitude', 'dropoff_longitude']])[:, 1]
test['pickup_pca0'] = pca.transform(test[['pickup_latitude', 'pickup_longitude']])[:, 0]
test['pickup_pca1'] = pca.transform(test[['pickup_latitude', 'pickup_longitude']])[:, 1]
test['dropoff_pca0'] = pca.transform(test[['dropoff_latitude', 'dropoff_longitude']])[:, 0]
test['dropoff_pca1'] = pca.transform(test[['dropoff_latitude', 'dropoff_longitude']])[:, 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;7. Lets not forget the Normal Things you can do with your features:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Scaling by Max-Min&lt;/li&gt;
&lt;li&gt;Normalization using Standard Deviation&lt;/li&gt;
&lt;li&gt;Log based feature/Target: use log based features or log based target function.&lt;/li&gt;
&lt;li&gt;One Hot Encoding&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;8. Creating Intuitive Additional Features:&lt;/h2&gt;
&lt;p&gt;A) Date time Features: Time based Features like "Evening", "Noon", "Night", "Purchases_last_month", "Purchases_last_week" etc.&lt;/p&gt;
&lt;p&gt;B) Thought Features: Suppose you have shopping cart data and you want to categorize TripType (See Walmart Recruiting: Trip Type Classification on &lt;a href="https://www.kaggle.com/c/walmart-recruiting-trip-type-classification/"&gt;Kaggle&lt;/a&gt; for some background).&lt;/p&gt;
&lt;p&gt;You could think of creating a feature like "Stylish" where you create this variable by adding together number of items that belong to category Men's Fashion, Women's Fashion, Teens Fashion.&lt;/p&gt;
&lt;p&gt;You could create a feature like "Rare" which is created by tagging some items as rare, based on the data we have and then counting the number of those rare items in the shopping cart. Such features might work or might not work. From what I have observed they normally provide a lot of value.&lt;/p&gt;
&lt;p&gt;I feel this is the way that Target's "Pregnant Teen model" was made. They would have had a variable in which they kept all the items that a pregnant teen could buy and put it into a classification algorithm.&lt;/p&gt;
&lt;h2&gt;9 . The not so Normal Things which people do:&lt;/h2&gt;
&lt;p&gt;These features are highly unintuitive and should not be created where the machine learning model needs to be interpretable.&lt;/p&gt;
&lt;p&gt;A) Interaction Features: If you have features A and B create features A*B, A+B, A/B, A-B. This explodes the feature space. If you have 10 features and you are creating two variable interactions you will be adding 10C2 * 4  features = 180 features to your model. And most of us have a lot more than 10 features.&lt;/p&gt;
&lt;p&gt;B) Bucket Feature Using Hashing: Suppose you have a lot of features. In the order of Thousands but you don't want to use all the thousand features because of the training times of algorithms involved. People bucket their features using some hashing algorithm to achieve this.Mostly done for text classification tasks.
For example:
If we have 6 features A,B,C,D,E,F.
And the row of data is:
A:1,B:1,C:1,D:0,E:1,F:0
I may decide to use a hashing function so that these 6 features correspond to 3 buckets and create the data using this feature hashing vector.
After processing my data might look like:
Bucket1:2,Bucket2:2,Bucket3:0
Which happened because A and B fell in bucket1, C and E fell in bucket2 and D and F fell in bucket 3. I summed up the observations here, but you could substitute addition with any math function you like.
Now i would use Bucket1,Bucket2,Bucket3 as my variables for machine learning.&lt;/p&gt;
&lt;p&gt;Will try to keep on expanding. Wait for more....&lt;/p&gt;</summary><category term="Python"></category><category term="NLP"></category><category term="Algorithms"></category><category term="Kaggle"></category></entry><entry><title>Today I Learned This Part 2: Pretrained Neural Networks What are they?</title><link href="http://mlwhiz.github.io/blog/2017/04/17/deep_learning_pretrained_models/" rel="alternate"></link><updated>2017-04-17T04:43:00-03:00</updated><author><name>Rahul Agarwal</name></author><id>tag:mlwhiz.github.io,2017-04-17:blog/2017/04/17/deep_learning_pretrained_models/</id><summary type="html">&lt;p&gt;Deeplearning is the buzz word right now. I was working on the &lt;a href="http://www.fast.ai/"&gt;course&lt;/a&gt; for deep learning by Jeremy Howard and one thing I noticed were pretrained deep Neural Networks. In the first lesson he used the pretrained NN to predict on the &lt;a href="https://www.kaggle.com/c/dogs-vs-cats"&gt;Dogs vs Cats&lt;/a&gt; competition on Kaggle to achieve very good results.&lt;/p&gt;
&lt;h2&gt;What are pretrained Neural Networks?&lt;/h2&gt;
&lt;p&gt;So let me tell you about the background a little bit. There is a challenge that happens every year in the visual recognition community - The Imagenet Challenge. The task there is to classify the images in 1000 categories using Image training data. People train big convolutional deep learning models for this challenge.&lt;/p&gt;
&lt;p&gt;Now what does training a neural model actually mean? It just means that they learn the weights for a NN. What if we can get the weights they learn? We can use those weights to load them into our own NN model and predict on the test dataset. Right?&lt;/p&gt;
&lt;p&gt;But actually we can go further than that. We can add an extra layer on top of the NN they have prepared to classify our own dataset.&lt;/p&gt;
&lt;p&gt;In a way you can think of the intermediate features created by the Pretrained neural networks to be the features for the next layer.&lt;/p&gt;
&lt;h2&gt;Why it works?&lt;/h2&gt;
&lt;p&gt;We are essentially doing the image classification task only. We need to find out edges, shapes, intensities and other features from the images that are given to us. The pretrained model is already pretty good at finding these sort of features. Forget neural nets, if we plug these features into a machine learning algorithm we should be good.&lt;/p&gt;
&lt;p&gt;What we actually do here is replace the last layer of the neural network with a new prediction/output layer and train while keeping the weights for all the layers before the second last layer constant.&lt;/p&gt;
&lt;h2&gt;Code:&lt;/h2&gt;
&lt;p&gt;I assume that you understand Keras a little. If not you can look at the docs.
Let us get into coding now. First of all we will create the architecture of the neural network the VGG Team created in 2014. Then we will load the weights.&lt;/p&gt;
&lt;p&gt;Import some stuff&lt;/p&gt;
&lt;pre style="font-size:80%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;import numpy as np
from numpy.random import random, permutation
from scipy import misc, ndimage
from scipy.ndimage.interpolation import zoom
import keras
from keras import backend as K
from keras.utils.data_utils import get_file
from keras.models import Sequential, Model
from keras.layers.core import Flatten, Dense, Dropout, Lambda
from keras.layers import Input
from keras.layers.convolutional import Convolution2D, MaxPooling2D, ZeroPadding2D
from keras.optimizers import SGD, RMSprop, Adam
from keras.preprocessing import image
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;VGG has just one type of convolutional block, and one type of fully connected ('dense') block. We start by defining the building blocks of our Deep learning model.&lt;/p&gt;
&lt;pre style="font-size:80%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;def ConvBlock(layers, model, filters):
    for i in range(layers):
        model.add(ZeroPadding2D((1,1)))
        model.add(Convolution2D(filters, 3, 3, activation='relu'))
    model.add(MaxPooling2D((2,2), strides=(2,2)))

def FCBlock(model):
    model.add(Dense(4096, activation='relu'))
    model.add(Dropout(0.5))
&lt;/code&gt;&lt;/pre&gt;

&lt;script src="//z-na.amazon-adsystem.com/widgets/onejs?MarketPlace=US&amp;adInstanceId=c4ca54df-6d53-4362-92c0-13cb9977639e"&gt;&lt;/script&gt;

&lt;p&gt;Now the input of the VGG Model was images. When the VGG model was trained in 2014, the creators subtracted the average of each of the three (R,G,B) channels first, so that the data for each channel had a mean of zero. Furthermore, their software that expected the channels to be in B,G,R order, whereas Python by default uses R,G,B. We need to preprocess our data to make these two changes, so that it is compatible with the VGG model. We also add some helper functions.&lt;/p&gt;
&lt;pre style="font-size:80%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;#Mean of each channel as provided by VGG researchers
vgg_mean = np.array([123.68, 116.779, 103.939]).reshape((3,1,1))

def vgg_preprocess(x):
    x = x - vgg_mean     # subtract mean
    return x[:, ::-1]    # reverse axis bgr-&gt;rgb

def VGG_16():
    model = Sequential()
    model.add(Lambda(vgg_preprocess, input_shape=(3,224,224)))
    ConvBlock(2, model, 64)
    ConvBlock(2, model, 128)
    ConvBlock(3, model, 256)
    ConvBlock(3, model, 512)
    ConvBlock(3, model, 512)
    model.add(Flatten())
    FCBlock(model)
    FCBlock(model)
    model.add(Dense(1000, activation='softmax'))
    return model


def finetune(model, num_classes):
    # Drop last layer
    model.pop()
    # Make all layers untrainable. i.e fix all weights
    for layer in model.layers: layer.trainable=False
    # Add a new layer which is the new output layer
    model.add(Dense(num_classes, activation='softmax'))
    model.compile(optimizer=Adam(lr=0.001),
                loss='categorical_crossentropy', metrics=['accuracy'])
    return model


# A way to generate batches of images
def get_batches(path, dirname, gen=image.ImageDataGenerator(), shuffle=True,
                batch_size=64, class_mode='categorical'):
    return gen.flow_from_directory(path+dirname, target_size=(224,224),
                class_mode=class_mode, shuffle=shuffle, batch_size=batch_size)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The hard part is done now. Just create a VGG object and load the weights.We will need to load pretrained weights into the model too. You can download the "VGG16_weights.h5" file &lt;a href="https://drive.google.com/file/d/0Bz7KyqmuGsilT0J5dmRCM0ROVHc/view"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;pre style="font-size:80%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;model = VGG_16()
model.load_weights('VGG16_weights.h5')
# Since our dogs vs cat dataset is binary classification model
ftmodel = finetune(model,2)
print ftmodel.summary()
&lt;/code&gt;&lt;/pre&gt;

&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/keras_net.png"  height="400" width="500" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;Showing a little bit of output here. This is how the last layers of our Neural net look after training. Now we have got a architecture which we got to train. Here we are only training to get the last layer weights. As you can see from the trainable params.&lt;/p&gt;
&lt;pre style="font-size:80%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;path = "dogscats/"
batch_size=64

# Iterators to get our images from our datasets. The datasets are folders named train and valid. Both folder contain two directories 'dogs' and 'cats'. In each directory the corresponding images are kept.

batches = get_batches(path,'train', batch_size=batch_size)
val_batches = get_batches(path,'valid', batch_size=batch_size)

# Now run for some epochs till the validation loss stops decreasing.
no_of_epochs=1

for epoch in range(no_of_epochs):
    print "Running epoch: %d" % epoch
    ftmodel.fit_generator(batches, samples_per_epoch=batches.nb_sample, nb_epoch=1,
                validation_data=val_batches, nb_val_samples=val_batches.nb_sample)
    latest_weights_filename = 'ft%d.h5' % epoch
    ftmodel.save_weights(latest_weights_filename)

#Create Predictions on test set. The test images should be in the folder dogscats/test/test_images/ , which is a single directory containing all images.

test_batches = get_batches(path, 'test', batch_size=2*batch_size, class_mode=None)

preds = ftmodel.predict_generator(test_batches, test_batches.nb_sample)

isdog = preds[:,1]
image_id = batches.filenames
final_submission = np.stack([ids,isdog], axis=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we are done!&lt;/p&gt;</summary><category term="deeplearning"></category><category term="pretrained models"></category></entry><entry><title>Maths Beats Intuition probably every damn time</title><link href="http://mlwhiz.github.io/blog/2017/04/16/maths_beats_intuition/" rel="alternate"></link><updated>2017-04-16T04:43:00-03:00</updated><author><name>Rahul Agarwal</name></author><id>tag:mlwhiz.github.io,2017-04-16:blog/2017/04/16/maths_beats_intuition/</id><summary type="html">&lt;p&gt;Newton once said that &lt;strong&gt;"God does not play dice with the universe"&lt;/strong&gt;. But actually he does. Everything happening around us could be explained in terms of probabilities. We repeatedly watch things around us happen due to chances, yet we never learn. We always get dumbfounded by the playfulness of nature.&lt;/p&gt;
&lt;p&gt;One of such ways intuition plays with us is with the Birthday problem.&lt;/p&gt;
&lt;h2&gt;Problem Statement:&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;In a room full of N people, what is the probability that 2 or more people share the same birthday(Assumption: 365 days in year)?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;By the &lt;a href="https://en.wikipedia.org/wiki/Pigeonhole_principle"&gt;pigeonhole principle&lt;/a&gt;, the probability reaches 100% when the number of people reaches 366 (since there are only 365 possible birthdays).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;However, the paradox is that 99.9% probability is reached with just 70 people, and 50% probability is reached with just 23 people.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Mathematical Proof:&lt;/h2&gt;
&lt;p&gt;Sometimes a good strategy when trying to find out probability of an event is to look at the probability of the complement event.Here it is easier to find the probability of the complement event.
We just need to count the number of cases in which no person has the same birthday.(Sampling without replacement)
Since there are k ways in which birthdays can be chosen with replacement.&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(P(birthday Match) = 1 - \dfrac{(365).364...(365−k+1)}{365^k}\)&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Simulation:&lt;/h2&gt;
&lt;p&gt;Lets try to build around this result some more by trying to simulate this result:&lt;/p&gt;
&lt;pre style="font-size:80%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;%matplotlib inline
import matplotlib
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt  #sets up plotting under plt
import seaborn as sns           #sets up styles and gives us more plotting options
import pandas as pd             #lets us handle data as dataframes
import random

def sim_bithday_problem(num_people_room, trials =1000):
    '''This function takes as input the number of people in the room.
    Runs 1000 trials by default and returns
    (number of times same brthday found)/(no of trials)
    '''
    same_birthdays_found = 0
    for i in range(trials):
        # randomly sample from the birthday space which could be any of a number from 1 to 365
        birthdays = [random.randint(1,365) for x in range(num_people_room)]
        if len(birthdays) - len(set(birthdays))&gt;0:
            same_birthdays_found+=1
    return same_birthdays_found/float(trials)

num_people = range(2,100)
probs = [sim_bithday_problem(i) for i in num_people]
data = pd.DataFrame()
data['num_peeps'] = num_people
data['probs'] = probs
sns.set(style="ticks")

g = sns.regplot(x="num_peeps", y="probs", data=data, ci = False,
    scatter_kws={"color":"darkred","alpha":0.3,"s":90},
    marker="x",fit_reg=False)

sns.despine()
g.figure.set_size_inches(10,6)
g.axes.set_title('As the Number of people in room reaches 23 the probability reaches ~0.5\nAt more than 50 people the probability is reaching 1', fontsize=15,color="g",alpha=0.5)
g.set_xlabel("# of people in room",size = 30,color="r",alpha=0.5)
g.set_ylabel("Probability",size = 30,color="r",alpha=0.5)
g.tick_params(labelsize=14,labelcolor="black")
&lt;/code&gt;&lt;/pre&gt;

&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/bithdayproblem.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;We can see from the &lt;a href="http://mlwhiz.com/blog/2015/09/13/seaborn_visualizations/"&gt;graph&lt;/a&gt; that as the Number of people in room reaches 23 the probability reaches ~ 0.5. So we have proved this fact Mathematically as well as with simulation.&lt;/p&gt;
&lt;h2&gt;Intuition:&lt;/h2&gt;
&lt;p&gt;To understand it we need to think of this problem in terms of pairs. There are &lt;span class="math"&gt;\({{23}\choose{2}} = 253\)&lt;/span&gt; pairs of people in the room when only 23 people are present. Now with that big number you should not find the probability of 0.5 too much. In the case of 70 people we are looking at &lt;span class="math"&gt;\({{70}\choose{2}} = 2450\)&lt;/span&gt; pairs.&lt;/p&gt;
&lt;p&gt;So thats it for now. To learn more about this go to &lt;a href="https://en.wikipedia.org/wiki/Birthday_problem"&gt;Wikipedia&lt;/a&gt; which has an awesome page on this topic.&lt;/p&gt;
&lt;h2&gt;References:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://amzn.to/2nIUkxq"&gt;Introduction to Probability by Joseph K. Blitzstein&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Birthday_problem"&gt;Birthday Problem on Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: 'center'," +
        "    displayIndent: '0em'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processClass: 'mathjax', " +
        "        ignoreClass: 'no-mathjax', " +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
        "    } " +
        "}); ";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="Python"></category><category term="machine learning"></category><category term="probability"></category></entry><entry><title>Today I Learned This Part I: What are word2vec Embeddings?</title><link href="http://mlwhiz.github.io/blog/2017/04/09/word_vec_embeddings_examples_understanding/" rel="alternate"></link><updated>2017-04-09T04:43:00-03:00</updated><author><name>Rahul Agarwal</name></author><id>tag:mlwhiz.github.io,2017-04-09:blog/2017/04/09/word_vec_embeddings_examples_understanding/</id><summary type="html">&lt;p&gt;Recently Quora put out a &lt;a href="https://www.kaggle.com/c/quora-question-pairs"&gt;Question similarity&lt;/a&gt; competition on Kaggle. This is the first time I was attempting an NLP problem so a lot to learn. The one thing that blew my mind away was the word2vec embeddings.&lt;/p&gt;
&lt;p&gt;Till now whenever I heard the term word2vec I visualized it as a way to create a bag of words vector for a sentence.&lt;/p&gt;
&lt;p&gt;For those who don't know &lt;em&gt;bag of words&lt;/em&gt;:
If we have a series of sentences(documents)&lt;/p&gt;
&lt;div style="margin-left: 10px;margin-bottom:9px;color: green"&gt;
1. This is good       - [1,1,1,0,0]&lt;br&gt;
2. This is bad        - [1,1,0,1,0]&lt;br&gt;
3. This is awesome    - [1,1,0,0,1]&lt;br&gt;
&lt;/div&gt;

&lt;p&gt;Bag of words would encode it using &lt;em&gt;0:This 1:is 2:good 3:bad 4:awesome&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But it is much more powerful than that.&lt;/p&gt;
&lt;p&gt;What word2vec does is that it creates vectors for words.
What I mean by that is that we have a 300 dimensional vector for every word(common bigrams too) in a dictionary.&lt;/p&gt;
&lt;h2&gt;How does that help?&lt;/h2&gt;
&lt;p&gt;We can use this for multiple scenarios but the most common are:&lt;/p&gt;
&lt;p&gt;A. &lt;em&gt;Using word2vec embeddings we can find out similarity between words&lt;/em&gt;.
Assume you have to answer if these two statements signify the same thing:
&lt;div style="margin-left: 10px;margin-bottom:9px;color: green"&gt;
1. President greets press in Chicago&lt;br&gt;
2. Obama speaks to media in Illinois.
&lt;/div&gt;
If we do a sentence similarity metric or a bag of words approach to compare these two sentences we will get a pretty low score.&lt;/p&gt;
&lt;div style="margin-top: 9px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/word2vecembed.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;But with a word encoding we can say that&lt;/p&gt;
&lt;div style="margin-left: 10px;margin-bottom:9px;color: green"&gt;
1. President is similar to Obama&lt;br&gt;
2. greets is similar to speaks&lt;br&gt;
3. press is similar to media&lt;br&gt;
4. Chicago is similar to Illinois&lt;br&gt;
&lt;/div&gt;

&lt;p&gt;B. &lt;em&gt;Encode Sentences&lt;/em&gt;: I read a &lt;a href="https://www.linkedin.com/pulse/duplicate-quora-question-abhishek-thakur"&gt;post&lt;/a&gt; from Abhishek Thakur a prominent kaggler.(Must Read). What he did was he used these word embeddings to create a 300 dimensional vector for every sentence.&lt;/p&gt;
&lt;p&gt;His Approach: Lets say the sentence is "What is this"
And lets say the embedding for every word is given in 4 dimension(normally 300 dimensional encoding is given)
&lt;div style="margin-left: 10px;margin-bottom:9px;color: green"&gt;
1. what : [.25 ,.25 ,.25 ,.25]&lt;br&gt;
2. is   : [  1 ,  0 ,  0 ,  0]&lt;br&gt;
3. this : [ .5 ,  0 ,  0 , .5]&lt;br&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Then the vector for the sentence is normalized elementwise addition of the vectors. i.e.&lt;/p&gt;
&lt;div style="margin-bottom:9px;margin-left: 10px"&gt;
Elementwise addition : [.25+1+0.5, 0.25+0+0 , 0.25+0+0, .25+0+.5] = [1.75, .25, .25, .75]
&lt;br&gt;
divided by
&lt;br&gt;
math.sqrt(1.25^2 + .25^2 + .25^2 + .75^2) = 1.5
&lt;br&gt;
gives:[1.16, .17, .17, 0.5]
&lt;/div&gt;

&lt;p&gt;Thus I can convert any sentence to a vector  of a fixed dimension(decided by the embedding). To find similarity between two sentences I can use a variety of distance/similarity metrics.&lt;/p&gt;
&lt;p&gt;C. Also It enables us to do algebraic manipulations on words which was not possible before. For example: What is king - man + woman ?&lt;br&gt;
Guess what it comes out to be : &lt;em&gt;Queen&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Application/Coding:&lt;/h2&gt;
&lt;p&gt;Now lets get down to the coding part as we know a little bit of fundamentals.&lt;/p&gt;
&lt;p&gt;First of all we download a custom word embedding from Google. There are many other embeddings too.&lt;/p&gt;
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="bash"&gt;wget https://s3.amazonaws.com/dl4j-distribution/GoogleNews-vectors-negative300.bin.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above file is pretty big. Might take some time. Then moving on to coding.&lt;/p&gt;
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;from gensim.models import word2vec
model = gensim.models.KeyedVectors.load_word2vec_format('data/GoogleNews-vectors-negative300.bin.gz', binary=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;1. Starting simple, lets find out similar words. Want to find similar words to python?&lt;/h3&gt;
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;model.most_similar('python')
&lt;/code&gt;&lt;/pre&gt;

&lt;div style="font-size:60%;color:blue;font-family: helvetica;line-height:18px;margin-top:8px;margin-left:20px"&gt;
[(u'pythons', 0.6688377261161804),&lt;br&gt;
 (u'Burmese_python', 0.6680364608764648),&lt;br&gt;
 (u'snake', 0.6606293320655823),&lt;br&gt;
 (u'crocodile', 0.6591362953186035),&lt;br&gt;
 (u'boa_constrictor', 0.6443519592285156),&lt;br&gt;
 (u'alligator', 0.6421656608581543),&lt;br&gt;
 (u'reptile', 0.6387745141983032),&lt;br&gt;
 (u'albino_python', 0.6158879995346069),&lt;br&gt;
 (u'croc', 0.6083582639694214),&lt;br&gt;
 (u'lizard', 0.601341724395752)]&lt;br&gt;
 &lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;2. Now we can use this model to find the solution to the equation:&lt;/h3&gt;
&lt;p&gt;What is king - man + woman?&lt;/p&gt;
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;model.most_similar(positive = ['king','woman'],negative = ['man'])
&lt;/code&gt;&lt;/pre&gt;

&lt;div style="font-size:60%;color:blue;font-family: helvetica;line-height:18px;margin-top:8px;margin-left:20px"&gt;
[(u'queen', 0.7118192315101624),&lt;br&gt;
 (u'monarch', 0.6189674139022827),&lt;br&gt;
 (u'princess', 0.5902431011199951),&lt;br&gt;
 (u'crown_prince', 0.5499460697174072),&lt;br&gt;
 (u'prince', 0.5377321839332581),&lt;br&gt;
 (u'kings', 0.5236844420433044),&lt;br&gt;
 (u'Queen_Consort', 0.5235946178436279),&lt;br&gt;
 (u'queens', 0.5181134343147278),&lt;br&gt;
 (u'sultan', 0.5098593235015869),&lt;br&gt;
 (u'monarchy', 0.5087412595748901)]&lt;br&gt;
&lt;/div&gt;

&lt;p&gt;You can do plenty of freaky/cool things using this:&lt;/p&gt;
&lt;script src="//z-na.amazon-adsystem.com/widgets/onejs?MarketPlace=US&amp;adInstanceId=c4ca54df-6d53-4362-92c0-13cb9977639e"&gt;&lt;/script&gt;

&lt;h3&gt;3. Lets say you wanted a girl and had a girl name like emma in mind but you got a boy. So what is the male version for emma?&lt;/h3&gt;
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;model.most_similar(positive = ['emma','he','male','mr'],negative = ['she','mrs','female'])
&lt;/code&gt;&lt;/pre&gt;

&lt;div style="font-size:60%;color:blue;font-family: helvetica;line-height:18px;margin-top:8px;margin-left:20px"&gt;
[(u'sanchez', 0.4920658469200134),&lt;br&gt;
 (u'kenny', 0.48300960659980774),&lt;br&gt;
 (u'alves', 0.4684845209121704),&lt;br&gt;
 (u'gareth', 0.4530612826347351),&lt;br&gt;
 (u'bellamy', 0.44884198904037476),&lt;br&gt;
 (u'gibbs', 0.445194810628891),&lt;br&gt;
 (u'dos_santos', 0.44508373737335205),&lt;br&gt;
 (u'gasol', 0.44387346506118774),&lt;br&gt;
 (u'silva', 0.4424275755882263),&lt;br&gt;
 (u'shaun', 0.44144102931022644)]&lt;br&gt;&lt;br&gt;
&lt;/div&gt;

&lt;h3&gt;4. Find which word doesn't belong to a &lt;a href="https://github.com/dhammack/Word2VecExample/blob/master/main.py"&gt;list&lt;/a&gt;?&lt;/h3&gt;
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;model.doesnt_match("math shopping reading science".split(" "))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think staple doesnt belong in this list!&lt;/p&gt;
&lt;h2&gt;Other Cool Things&lt;/h2&gt;
&lt;h3&gt;1. Recommendations:&lt;/h3&gt;
&lt;div style="margin-top: 4px; margin-bottom: 10px;"&gt;
&lt;center&gt;&lt;img src="/images/recommendationpaper.png"  height="400" width="700" &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;In this &lt;a href="https://arxiv.org/abs/1603.04259"&gt;paper&lt;/a&gt;, the authors have shown that itembased CF can be cast in the same framework of word embedding.&lt;/p&gt;
&lt;h3&gt;2. Some other &lt;a href="http://byterot.blogspot.in/2015/06/five-crazy-abstractions-my-deep-learning-word2doc-model-just-did-NLP-gensim.html"&gt;examples&lt;/a&gt; that people have seen after using their own embeddings:&lt;/h3&gt;
&lt;p&gt;Library - Books = Hall&lt;br&gt;
Obama + Russia - USA = Putin&lt;br&gt;
Iraq - Violence = Jordan&lt;br&gt;
President - Power = Prime Minister (Not in India Though)&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;3.Seeing the above I started playing with it a little.&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Is this model sexist?&lt;/strong&gt;&lt;/p&gt;
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="python"&gt;model.most_similar(positive = ["donald_trump"],negative = ['brain'])
&lt;/code&gt;&lt;/pre&gt;

&lt;div style="font-size:60%;color:blue;font-family: helvetica;line-height:18px;margin-top:8px;margin-left:20px"&gt;
[(u'novak', 0.40405112504959106),&lt;br&gt;
 (u'ozzie', 0.39440611004829407),&lt;br&gt;
 (u'democrate', 0.39187556505203247),&lt;br&gt;
 (u'clinton', 0.390536367893219),&lt;br&gt;
 (u'hillary_clinton', 0.3862358033657074),&lt;br&gt;
 (u'bnp', 0.38295692205429077),&lt;br&gt;
 (u'klaar', 0.38228923082351685),&lt;br&gt;
 (u'geithner', 0.380607008934021),&lt;br&gt;
 (u'bafana_bafana', 0.3801495432853699),&lt;br&gt;
 (u'whitman', 0.3790769875049591)]&lt;br&gt;
&lt;/div&gt;

&lt;p&gt;Whatever it is doing it surely feels like magic. Next time I will try to write more on how it works once I understand it fully.&lt;/p&gt;</summary><category term="Python"></category><category term="NLP"></category><category term="Algorithms"></category><category term="Kaggle"></category></entry></feed>