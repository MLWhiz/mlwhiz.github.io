<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1" xmlns:content="http://purl.org/rss/1.0/modules/content" xmlns:media="http://search.yahoo.com/mrss/" >

  
  <channel>
    <title>Posts on MLWhiz</title>
    <link>https://mlwhiz.com/post/</link>
    <description>Recent content in Posts on MLWhiz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 May 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://mlwhiz.com/post/atom.xml" rel="self" type="application/rss+xml" />
    

    

    <item>
      <title>Make your own Super Pandas using Multiproc</title>
      <link>https://mlwhiz.com/blog/2019/04/22/python_pandas_multiproc/</link>
      <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/04/22/python_pandas_multiproc/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/superpanda/superpanda.png"></media:content>
      

      
      <description>Parallelization is awesome.
We data scientists have got laptops with quad-core, octa-core, turbo-boost. We work with servers with even more cores and computing power.
But do we really utilize the raw power we have at hand?
Instead, we wait for time taking processes to finish. Sometimes for hours, when urgent deliverables are at hand.
Can we do better? Can we get better?
In this series of posts named Python Shorts, I will explain some simple constructs provided by Python, some essential tips and some use cases I come up with regularly in my Data Science work.</description>

      <content:encoded>  
        
        <![CDATA[    Parallelization is awesome.
We data scientists have got laptops with quad-core, octa-core, turbo-boost. We work with servers with even more cores and computing power.
But do we really utilize the raw power we have at hand?
Instead, we wait for time taking processes to finish. Sometimes for hours, when urgent deliverables are at hand.
Can we do better? Can we get better?
In this series of posts named Python Shorts, I will explain some simple constructs provided by Python, some essential tips and some use cases I come up with regularly in my Data Science work.
This post is about using the computing power we have at hand and applying it to the data structure we use most.
Problem Statement We have got a huge pandas data frame, and we want to apply a complex function to it which takes a lot of time.
For this post, I will use data from the Quora Insincere Question Classification on Kaggle, and we need to create some numerical features like length, the number of punctuations, etc. on it.
The competition was a Kernel-based competition and the code needed to run in 2 hours. So every minute was essential, and there was too much time going in preprocessing.
Can we use parallelization to get extra performance out of our code?
Yes, we can.
Parallelization using just a single function Can we make all our cores run?
Let me first start with defining the function I want to use to create our features. add_features is the toy function we wish to apply to our data.
import random import pandas as pd import numpy as np from multiprocessing import Pool def add_features(df): df[&amp;#39;question_text&amp;#39;] = df[&amp;#39;question_text&amp;#39;].apply(lambda x:str(x)) df[&amp;#34;lower_question_text&amp;#34;] = df[&amp;#34;question_text&amp;#34;].apply(lambda x: x.lower()) df[&amp;#39;total_length&amp;#39;] = df[&amp;#39;question_text&amp;#39;].apply(len) df[&amp;#39;capitals&amp;#39;] = df[&amp;#39;question_text&amp;#39;].apply(lambda comment: sum(1 for c in comment if c.isupper())) df[&amp;#39;caps_vs_length&amp;#39;] = df.apply(lambda row: float(row[&amp;#39;capitals&amp;#39;])/float(row[&amp;#39;total_length&amp;#39;]), axis=1) df[&amp;#39;num_words&amp;#39;] = df.question_text.str.count(&amp;#39;\S&#43;&amp;#39;) df[&amp;#39;num_unique_words&amp;#39;] = df[&amp;#39;question_text&amp;#39;].apply(lambda comment: len(set(w for w in comment.split()))) df[&amp;#39;words_vs_unique&amp;#39;] = df[&amp;#39;num_unique_words&amp;#39;] / df[&amp;#39;num_words&amp;#39;] df[&amp;#39;num_exclamation_marks&amp;#39;] = df[&amp;#39;question_text&amp;#39;].apply(lambda comment: comment.count(&amp;#39;!&amp;#39;)) df[&amp;#39;num_question_marks&amp;#39;] = df[&amp;#39;question_text&amp;#39;].apply(lambda comment: comment.count(&amp;#39;?&amp;#39;)) df[&amp;#39;num_punctuation&amp;#39;] = df[&amp;#39;question_text&amp;#39;].apply(lambda comment: sum(comment.count(w) for w in &amp;#39;.,;:&amp;#39;)) df[&amp;#39;num_symbols&amp;#39;] = df[&amp;#39;question_text&amp;#39;].apply(lambda comment: sum(comment.count(w) for w in &amp;#39;*&amp;amp;$%&amp;#39;)) df[&amp;#39;num_smilies&amp;#39;] = df[&amp;#39;question_text&amp;#39;].apply(lambda comment: sum(comment.count(w) for w in (&amp;#39;:-)&amp;#39;, &amp;#39;:)&amp;#39;, &amp;#39;;-)&amp;#39;, &amp;#39;;)&amp;#39;))) df[&amp;#39;num_sad&amp;#39;] = df[&amp;#39;question_text&amp;#39;].apply(lambda comment: sum(comment.count(w) for w in (&amp;#39;:-&amp;lt;&amp;#39;, &amp;#39;:()&amp;#39;, &amp;#39;;-()&amp;#39;, &amp;#39;;(&amp;#39;))) df[&amp;#34;mean_word_len&amp;#34;] = df[&amp;#34;question_text&amp;#34;].apply(lambda x: np.mean([len(w) for w in str(x).split()])) return df We can use parallelized apply using the below function.
def parallelize_dataframe(df, func, n_cores=4): df_split = np.array_split(df, n_cores) pool = Pool(n_cores) df = pd.concat(pool.map(func, df_split)) pool.close() pool.join() return df What does it do? It breaks the dataframe into n_cores parts, and spawns n_cores processes which apply the function to all the pieces.
Once it applies the function to all the split dataframes, it just concatenates the split dataframe and returns the full dataframe to us.
How can we use it? It is pretty simple to use.
train = parallelize_dataframe(train_df, add_features) Does this work? To check the performance of this parallelize function, I ran %%timeit magic on this function in my Jupyter notebook in a Kaggle Kernel.
vs. just using the function as it is:
As you can see I gained some performance just by using the parallelize function. And it was using a kaggle kernel which has only got 2 CPUs.
In the actual competition, there was a lot of computation involved, and the add_features function I was using was much more involved. And this parallelize function helped me immensely to reduce processing time and get a Silver medal.
Here is the kernel with the full code.
Conclusion Parallelization is not a silver bullet; it is buckshot. It won’t solve all your problems, and you would still have to work on optimizing your functions, but it is a great tool to have in your arsenal.
Time never comes back, and sometimes we have a shortage of it. At these times we should be able to use parallelization easily.
 Parallelization is not a silver bullet it is a buckshot  Also if you want to learn more about Python 3, I would like to call out an excellent course on Learn Intermediate level Python from the University of Michigan. Do check it out.
I am going to be writing more beginner friendly posts in the future too. Let me know what you think about the series. Follow me up at Medium or Subscribe to my blog to be informed about them. As always, I welcome feedback and constructive criticism and can be reached on Twitter @mlwhiz.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Minimize for loop usage in Python</title>
      <link>https://mlwhiz.com/blog/2019/04/22/python_forloops/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/04/22/python_forloops/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/python2/loops.jpeg"></media:content>
      

      
      <description>Python provides us with many styles of coding.
In a way, it is pretty inclusive.
One can come from any language and start writing Python.
However, learning to write a language and writing a language in an optimized way are two different things.
In this series of posts named Python Shorts, I will explain some simple but very useful constructs provided by Python, some essential tips and some use cases I come up with regularly in my Data Science work.</description>

      <content:encoded>  
        
        <![CDATA[    Python provides us with many styles of coding.
In a way, it is pretty inclusive.
One can come from any language and start writing Python.
However, learning to write a language and writing a language in an optimized way are two different things.
In this series of posts named Python Shorts, I will explain some simple but very useful constructs provided by Python, some essential tips and some use cases I come up with regularly in my Data Science work.
In this post, I am going to talk about for loops in Python and how you should avoid them whenever possible.
3 Ways of writing a for loop: Let me explain this with a simple example statement.
Suppose you want to take the sum of squares in a list.
This is a valid problem we all face in machine learning whenever we want to calculate the distance between two points in n dimension.
You can do this using loops easily.
In fact, I will show you** three ways to do the same task which I have seen people use and let you choose for yourself which you find the best.**
x = [1,3,5,7,9] sum_squared = 0 for i in range(len(x)): sum_squared&#43;=x[i]**2 Whenever I see the above code in a python codebase, I understand that the person has come from C or Java background.
A **slightly more pythonic way **of doing the same thing is:
x = [1,3,5,7,9] sum_squared = 0 for y in x: sum_squared&#43;=y**2 Better.
I didn’t index the list. And my code is more readable.
But still, the pythonic way to do it is in one line.
x = [1,3,5,7,9] sum_squared = sum([y**2 for y in x]) This approach is called List Comprehension, and this may very well be one of the reasons that I love Python.
You can also use if in a list comprehension.
Let’s say we wanted a list of squared numbers for even numbers only.
x = [1,2,3,4,5,6,7,8,9] even_squared = [y**2 for y in x if y%2==0] -------------------------------------------- [4,16,36,64] if-else?
What if we wanted to have the number squared for even and cubed for odd?
x = [1,2,3,4,5,6,7,8,9] squared_cubed = [y**2 if y%2==0 else y**3 for y in x] -------------------------------------------- [1, 4, 27, 16, 125, 36, 343, 64, 729] Great!!!
  So basically follow specific guidelines: Whenever you feel like writing a for statement, you should ask yourself the following questions,
 Can it be done without a for loop? Most Pythonic
 Can it be done using list comprehension? If yes, use it.
 Can I do it without indexing arrays? if not, think about using enumerate
  What is enumerate?
Sometimes we need both the index in an array as well as the value in an array.
In such cases, I prefer to use enumerate rather than indexing the list.
L = [&amp;#39;blue&amp;#39;, &amp;#39;yellow&amp;#39;, &amp;#39;orange&amp;#39;] for i, val in enumerate(L): print(&amp;#34;index is %dand value is %s&amp;#34; % (i, val)) --------------------------------------------------------------- index is 0 and value is blue index is 1 and value is yellow index is 2 and value is orange The rule is:
 Never index a list, if you can do without it.  Try Using Dictionary Comprehension Also try using dictionary comprehension, which is a relatively new addition in Python. The syntax is pretty similar to List comprehension.
Let me explain using an example. I want to get a dictionary with (key: squared value) for every value in x.
x = [1,2,3,4,5,6,7,8,9] {k:k**2 for k in x} --------------------------------------------------------- {1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81} What if I want a dict only for even values?
x = [1,2,3,4,5,6,7,8,9] {k:k**2 for k in x if x%2==0} --------------------------------------------------------- {2: 4, 4: 16, 6: 36, 8: 64} What if we want squared value for even key and cubed number for the odd key?
x = [1,2,3,4,5,6,7,8,9] {k:k**2 if k%2==0 else k**3 for k in x} --------------------------------------------------------- {1: 1, 2: 4, 3: 27, 4: 16, 5: 125, 6: 36, 7: 343, 8: 64, 9: 729} Conclusion To conclude, I will say that while it might seem easy to transfer the knowledge you acquired from other languages to Python, you won’t be able to appreciate the beauty of Python if you keep doing that. Python is much more powerful when we use its ways and decidedly much more fun.
So, use List Comprehensions and Dict comprehensions when you need afor loop. Use enumerate if you need array index.
 Avoid for loops like plague  Your code will be much more readable and maintainable in the long run.
Also if you want to learn more about Python 3, I would like to call out an excellent course on Learn Intermediate level Python from the University of Michigan. Do check it out.
I am going to be writing more beginner friendly posts in the future too. Let me know what you think about the series. Follow me up at Medium or Subscribe to my blog to be informed about them.
As always, I welcome feedback and constructive criticism and can be reached on Twitter @mlwhiz.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Python Pro Tip: Start using Python defaultdict and Counter in place of dictionary</title>
      <link>https://mlwhiz.com/blog/2019/04/22/python_defaultdict/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/04/22/python_defaultdict/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/python1/likeaboss.jpeg"></media:content>
      

      
      <description>Learning a language is easy. Whenever I start with a new language, I focus on a few things in below order, and it is a breeze to get started with writing code in any language.
 Operators and Data Types: &#43;,-,int,float,str
 Conditional statements: if,else,case,switch
 Loops: For, while
 Data structures: List, Array, Dict, Hashmaps
 Define Function
  However, learning to write a language and writing a language in an optimized way are two different things.</description>

      <content:encoded>  
        
        <![CDATA[    Learning a language is easy. Whenever I start with a new language, I focus on a few things in below order, and it is a breeze to get started with writing code in any language.
 Operators and Data Types: &#43;,-,int,float,str
 Conditional statements: if,else,case,switch
 Loops: For, while
 Data structures: List, Array, Dict, Hashmaps
 Define Function
  However, learning to write a language and writing a language in an optimized way are two different things.
Every Language has some ingredients which make it unique.
Yet, a new programmer to any language will always do some forced overfitting. A Java programmer, new to python, for example, might write this code to add numbers in a list.
x=[1,2,3,4,5] sum_x = 0 for i in range(len(x)): sum_x&#43;=x[i] While a python programmer will naturally do this:
sum_x = sum(x) In this series of posts named ‘Python Shorts’, I will explain some simple constructs that Python provides, some essential tips and some use cases I come up with regularly in my Data Science work.
This series is about efficient and readable code.
Counter and defaultdict — Use Cases   Let’s say I need to count the number of word occurrences in a piece of text. Maybe for a book like Hamlet. How could I do that?
Python always provides us with multiple ways to do the same thing. But only one way that I find elegant.
This is a Naive Python implementation using the dict object.
text = &amp;#34;I need to count the number of word occurrences in a piece of text. How could I do that? Python provides us with multiple ways to do the same thing. But only one way I find beautiful.&amp;#34; word_count_dict = {} for w in text.split(&amp;#34; &amp;#34;): if w in word_count_dict: word_count_dict[w]&#43;=1 else: word_count_dict[w]=1 We could use defaultdict to reduce the number of lines in the code.
from Collections import defaultdict word_count_dict = defaultdict(int) for w in text.split(&amp;#34; &amp;#34;): word_count_dict[w]&#43;=1 We could also have used Counter to do this.
from Collections import Counter word_count_dict = Counter() for w in text.split(&amp;#34; &amp;#34;): word_count_dict[w]&#43;=1 If we use Counter, we can also get the most common words using a simple function.
word_count_dict.most_common(10) --------------------------------------------------------------- [(&amp;#39;I&amp;#39;, 3), (&amp;#39;to&amp;#39;, 2), (&amp;#39;the&amp;#39;, 2)] Other use cases of Counter:
# Count Characters Counter(&amp;#39;abccccccddddd&amp;#39;) --------------------------------------------------------------- Counter({&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 1, &amp;#39;c&amp;#39;: 6, &amp;#39;d&amp;#39;: 5}) # Count List elements Counter([1,2,3,4,5,1,2]) --------------------------------------------------------------- Counter({1: 2, 2: 2, 3: 1, 4: 1, 5: 1}) So, why ever use defaultdict ? Notice that in Counter, the value is always an integer.
What if we wanted to parse through a list of tuples and wanted to create a dictionary of key and list of values.
The main functionality provided by a defaultdict is that it defaults a key to empty/zero if it is not found in the defaultdict.
s = [(&amp;#39;color&amp;#39;, &amp;#39;blue&amp;#39;), (&amp;#39;color&amp;#39;, &amp;#39;orange&amp;#39;), (&amp;#39;color&amp;#39;, &amp;#39;yellow&amp;#39;), (&amp;#39;fruit&amp;#39;, &amp;#39;banana&amp;#39;), (&amp;#39;fruit&amp;#39;, &amp;#39;orange&amp;#39;),(&amp;#39;fruit&amp;#39;,&amp;#39;banana&amp;#39;)] d = defaultdict(list) for k, v in s: d[k].append(v) print(d) --------------------------------------------------------------- defaultdict(&amp;lt;class &amp;#39;list&amp;#39;&amp;gt;, {&amp;#39;color&amp;#39;: [&amp;#39;blue&amp;#39;, &amp;#39;orange&amp;#39;, &amp;#39;yellow&amp;#39;], &amp;#39;fruit&amp;#39;: [&amp;#39;banana&amp;#39;, &amp;#39;orange&amp;#39;, &amp;#39;banana&amp;#39;]}) banana comes two times in fruit, we could use set
d = defaultdict(set) for k, v in s: d[k].add(v) print(d) --------------------------------------------------------------- defaultdict(&amp;lt;class &amp;#39;set&amp;#39;&amp;gt;, {&amp;#39;color&amp;#39;: {&amp;#39;yellow&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;orange&amp;#39;}, &amp;#39;fruit&amp;#39;: {&amp;#39;banana&amp;#39;, &amp;#39;orange&amp;#39;}}) Conclusion To conclude, I will say that there is always a beautiful way to do anything in Python. Search for it before you write code. Going to StackOverflow is okay. I go there a lot of times when I get stuck. Always Remember:
 Creating a function for what already is provided is not pythonic.
 Also if you want to learn more about Python 3, I would like to call out an excellent course on Learn Intermediate level Python from the University of Michigan. Do check it out.
If you liked this post do share. It will help increase coverage for this post. I am going to be writing more beginner friendly posts in the future too. Let me know what you think about the series. Follow me up at Medium or Subscribe to my blog to be informed about them. As always, I welcome feedback and constructive criticism and can be reached on Twitter @mlwhiz.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>3 Awesome Visualization Techniques for every dataset</title>
      <link>https://mlwhiz.com/blog/2019/04/19/awesome_seaborn_visuals/</link>
      <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/04/19/awesome_seaborn_visuals/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/visualizations/football.jpeg"></media:content>
      

      
      <description>Visualizations are awesome. However, a good visualization is annoyingly hard to make.
Moreover, it takes time and effort when it comes to present these visualizations to a bigger audience.
We all know how to make Bar-Plots, Scatter Plots, and Histograms, yet we don&amp;amp;rsquo;t pay much attention to beautify them.
This hurts us - our credibility with peers and managers. You won&amp;amp;rsquo;t feel it now, but it happens.</description>

      <content:encoded>  
        
        <![CDATA[    Visualizations are awesome. However, a good visualization is annoyingly hard to make.
Moreover, it takes time and effort when it comes to present these visualizations to a bigger audience.
We all know how to make Bar-Plots, Scatter Plots, and Histograms, yet we don&amp;rsquo;t pay much attention to beautify them.
This hurts us - our credibility with peers and managers. You won&amp;rsquo;t feel it now, but it happens.
Also, I find it essential to reuse my code. Every time I visit a new dataset do I need to start again? Some reusable ideas of graphs that can help us to find information about the data FAST.
In this post, I am also going to talk about 3 cool visual tools:
 Categorical Correlation with Graphs, Pairplots, Swarmplots and Graph Annotations using Seaborn.  In short, this post is about useful and presentable graphs.
I will be using data from FIFA 19 complete player dataset on kaggle - Detailed attributes for every player registered in the latest edition of FIFA 19 database.
Since the Dataset has many columns, we will only focus on a subset of categorical and continuous columns.
import numpy as np import pandas as pd import seaborn as sns import matplotlib.pyplot as plt %matplotlib inline # We dont Probably need the Gridlines. Do we? If yes comment this line sns.set(style=&amp;#34;ticks&amp;#34;) player_df = pd.read_csv(&amp;#34;../input/data.csv&amp;#34;) numcols = [ &amp;#39;Overall&amp;#39;, &amp;#39;Potential&amp;#39;, &amp;#39;Crossing&amp;#39;,&amp;#39;Finishing&amp;#39;, &amp;#39;ShortPassing&amp;#39;, &amp;#39;Dribbling&amp;#39;,&amp;#39;LongPassing&amp;#39;, &amp;#39;BallControl&amp;#39;, &amp;#39;Acceleration&amp;#39;, &amp;#39;SprintSpeed&amp;#39;, &amp;#39;Agility&amp;#39;, &amp;#39;Stamina&amp;#39;, &amp;#39;Value&amp;#39;,&amp;#39;Wage&amp;#39;] catcols = [&amp;#39;Name&amp;#39;,&amp;#39;Club&amp;#39;,&amp;#39;Nationality&amp;#39;,&amp;#39;Preferred Foot&amp;#39;,&amp;#39;Position&amp;#39;,&amp;#39;Body Type&amp;#39;] # Subset the columns player_df = player_df[numcols&#43; catcols] # Few rows of data player_df.head(5)   Player Data    This is a nicely formatted data, yet we need to do some preprocessing to the Wage and Value columns(as they are in Euro and contain strings) to make them numeric for our subsequent analysis.
def wage_split(x): try: return int(x.split(&amp;#34;K&amp;#34;)[0][1:]) except: return 0 player_df[&amp;#39;Wage&amp;#39;] = player_df[&amp;#39;Wage&amp;#39;].apply(lambda x : wage_split(x)) def value_split(x): try: if &amp;#39;M&amp;#39; in x: return float(x.split(&amp;#34;M&amp;#34;)[0][1:]) elif &amp;#39;K&amp;#39; in x: return float(x.split(&amp;#34;K&amp;#34;)[0][1:])/1000 except: return 0 player_df[&amp;#39;Value&amp;#39;] = player_df[&amp;#39;Value&amp;#39;].apply(lambda x : value_split(x)) Categorical Correlation with Graphs: In Simple terms, Correlation is a measure of how two variables move together.
For example, In the real world, Income and Spend are positively correlated. If one increases the other also increases.
Academic Performance and Video Games Usage is negatively correlated. Increase in one predicts a decrease in another.
So if our predictor variable is positively or negatively correlated with our target variable, it is valuable.
I feel that Correlations among different variables are a pretty good thing to do when we try to understand our data.
We can create a pretty good correlation plot using Seaborn easily.
corr = player_df.corr() g = sns.heatmap(corr, vmax=.3, center=0, square=True, linewidths=.5, cbar_kws={&amp;#34;shrink&amp;#34;: .5}, annot=True, fmt=&amp;#39;.2f&amp;#39;, cmap=&amp;#39;coolwarm&amp;#39;) sns.despine() g.figure.set_size_inches(14,10) plt.show()   Where did all the categorical variables go?    But do you notice any problem?
Yes, this graph only calculates Correlation between Numerical columns. What if my target variable is Club or Position?
I want to be able to get a correlation among three different cases, and we use the following metrics of correlation to calculate these:
1. Numerical Variables We already have this in the form of Pearson&amp;rsquo;s Correlation which is a measure of how two variables move together. This Ranges from [-1,1]
2. Categorical Variables We will use Cramer&amp;rsquo;s V for categorical-categorical cases. It is the intercorrelation of two discrete variables and used with variables having two or more levels. It is a symmetrical measure as in the order of variable does not matter. Cramer(A,B) == Cramer(B,A).
For Example: In our dataset, Club and Nationality must be somehow correlated.
Let us check this using a stacked graph which is an excellent way to understand distribution between categorical vs. categorical variables. Note that we use a subset of data since there are a lot of nationalities and club in this data.
We keep only the best teams(Kept FC Porto just for more diversity in the sample)and the most common nationalities.
  Note that Club preference says quite a bit about Nationality: knowing the former helps a lot in predicting the latter.
We can see that if a player belongs to England, it is more probable that he plays in Chelsea or Manchester United and not in FC Barcelona or Bayern Munchen or Porto.
So there is some information present here. Cramer&amp;rsquo;s V captures the same information.
If all clubs have the same proportion of players from every nationality, Cramer&amp;rsquo;s V is 0.
If Every club prefers a single nationality Cramer&amp;rsquo;s V ==1, for example, all England player play in Manchester United, All Germans in Bayern Munchen and so on.
In all other cases, it ranges from [0,1]
3. Numerical and Categorical variables We will use the Correlation Ratio for categorical-continuous cases.
Without getting into too much Maths, it is a measure of Dispersion.
 Given a number can we find out which category it belongs to?
 For Example:
Suppose we have two columns from our dataset: SprintSpeed and Position:
 GK: 58(De Gea),52(T. Courtois), 58(M. Neuer), 43(G. Buffon) CB: 68(D. Godin), 59(V. Kompany), 73(S. Umtiti), 75(M. Benatia) ST: 91(C.Ronaldo), 94(G. Bale), 80(S.Aguero), 76(R. Lewandowski)  As you can see these numbers are pretty predictive of the bucket they fall into and thus high Correlation Ratio.
If I know the sprint speed is more than 85, I can definitely say this player plays at ST.
This ratio also ranges from [0,1]
The code to do this is taken from the dython package. I won&amp;rsquo;t write too much into code which you can anyway find in my Kaggle Kernel. The final result looks something like:
player_df = player_df.fillna(0) results = associations(player_df,nominal_columns=catcols,return_results=True)   Categorical vs. Categorical, Categorical vs. Numeric, Numeric vs. Numeric. Much more interesting    Isn&amp;rsquo;t it Beautiful?
We can understand so much about Football just by looking at this data. For Example:
 The position of a player is highly correlated with dribbling ability. You won&amp;rsquo;t play Messi at the back. Right?
 Value is more highly correlated with passing and ball control than dribbling. The rule is to pass the ball always. Neymar I am looking at you.
 Club and Wage have high Correlation. To be expected.
 Body Type and Preferred Foot is correlated highly. Does that mean if you are Lean, you are most likely left-footed? Doesn&amp;rsquo;t make much sense. One can investigate further.
  Moreover, so much info we could find with this simple graph which was not visible in the typical correlation plot without Categorical Variables.
I leave it here at that. One can look more into the chart and find more meaningful results, but the point is that this makes life so much easier to find patterns.
Pairplots While I talked a lot about correlation, it is a fickle metric.
To understand what I mean let us see one example.
Anscombe&amp;rsquo;s quartet comprises four datasets that have nearly identical Correlation of 1, yet have very different distributions and appear very different when graphed.
  Anscombe Quartet - Correlations can be fickle.    Thus sometimes it becomes crucial to plot correlated data. And see the distributions individually.
Now we have many columns in our dataset. Graphing them all would be so much effort.
No, it is a single line of code.
filtered_player_df = player_df[(player_df[&amp;#39;Club&amp;#39;].isin([&amp;#39;FC Barcelona&amp;#39;, &amp;#39;Paris Saint-Germain&amp;#39;, &amp;#39;Manchester United&amp;#39;, &amp;#39;Manchester City&amp;#39;, &amp;#39;Chelsea&amp;#39;, &amp;#39;Real Madrid&amp;#39;,&amp;#39;FC Porto&amp;#39;,&amp;#39;FC Bayern München&amp;#39;])) &amp;amp; (player_df[&amp;#39;Nationality&amp;#39;].isin([&amp;#39;England&amp;#39;, &amp;#39;Brazil&amp;#39;, &amp;#39;Argentina&amp;#39;, &amp;#39;Brazil&amp;#39;, &amp;#39;Italy&amp;#39;,&amp;#39;Spain&amp;#39;,&amp;#39;Germany&amp;#39;])) ] # Single line to create pairplot g = sns.pairplot(filtered_player_df[[&amp;#39;Value&amp;#39;,&amp;#39;SprintSpeed&amp;#39;,&amp;#39;Potential&amp;#39;,&amp;#39;Wage&amp;#39;]])   Pretty Good. We can see so much in this graph.
 Wage and Value are highly correlated.
 Most of the other values are correlated too. However, the trend of potential vs. value is unusual. We can see how the value increases exponentially as we reach a particular potential threshold. This information can be helpful in modeling. Can use some transformation on Potential to make it more correlated?
  Caveat: No categorical columns.
Can we do better? We always can.
g = sns.pairplot(filtered_player_df[[&amp;#39;Value&amp;#39;,&amp;#39;SprintSpeed&amp;#39;,&amp;#39;Potential&amp;#39;,&amp;#39;Wage&amp;#39;,&amp;#39;Club&amp;#39;]],hue = &amp;#39;Club&amp;#39;)   So much more info. Just by adding the hue parameter as a categorical variable Club.
 Porto&amp;rsquo;s Wage distribution is too much towards the lower side. I don&amp;rsquo;t see that steep distribution in value of Porto players. Porto&amp;rsquo;s players would always be looking out for an opportunity. See how a lot of pink points(Chelsea) form sort of a cluster on Potential vs. wage graph. Chelsea has a lot of high potential players with lower wages. Needs more attention.  I already know some of the points on the Wage/Value Subplot.
The blue point for wage 500k is Messi. Also, the orange point having more value than Messi is Neymar.
Although this hack still doesn&amp;rsquo;t solve the Categorical problem, I have something cool to look into categorical variables distribution. Though individually.
SwarmPlots How to see the relationship between categorical and numerical data?
Enter into picture Swarmplots, just like their name. A swarm of points plotted for each category with a little dispersion on the y-axis to make them easier to see.
They are my current favorite for plotting such relationships.
g = sns.swarmplot(y = &amp;#34;Club&amp;#34;, x = &amp;#39;Wage&amp;#39;, data = filtered_player_df, # Decrease the size of the points to avoid crowding  size = 7) # remove the top and right line in graph sns.despine() g.figure.set_size_inches(14,10) plt.show()   Swarmplot...    Why don&amp;rsquo;t I use Boxplots? Where are the median values? Can I plot that? Obviously. Overlay a bar plot on top, and we have a great looking graph.
g = sns.boxplot(y = &amp;#34;Club&amp;#34;, x = &amp;#39;Wage&amp;#39;, data = filtered_player_df, whis=np.inf) g = sns.swarmplot(y = &amp;#34;Club&amp;#34;, x = &amp;#39;Wage&amp;#39;, data = filtered_player_df, # Decrease the size of the points to avoid crowding  size = 7,color = &amp;#39;black&amp;#39;) # remove the top and right line in graph sns.despine() g.figure.set_size_inches(12,8) plt.show()   Swarmplot&#43;Boxplot, Interesting    Pretty good. We can see the individual points on the graph, see some statistics and understand the wage difference categorically.
The far right point is Messi. However, I should not have to tell you that in a text below the chart. Right?
This graph is going to go in a presentation. Your boss says. I want to write Messi on this graph. Comes into picture annotations.
max_wage = filtered_player_df.Wage.max() max_wage_player = filtered_player_df[(player_df[&amp;#39;Wage&amp;#39;] == max_wage)][&amp;#39;Name&amp;#39;].values[0] g = sns.boxplot(y = &amp;#34;Club&amp;#34;, x = &amp;#39;Wage&amp;#39;, data = filtered_player_df, whis=np.inf) g = sns.swarmplot(y = &amp;#34;Club&amp;#34;, x = &amp;#39;Wage&amp;#39;, data = filtered_player_df, # Decrease the size of the points to avoid crowding  size = 7,color=&amp;#39;black&amp;#39;) # remove the top and right line in graph sns.despine() # Annotate. xy for coordinate. max_wage is x and 0 is y. In this plot y ranges from 0 to 7 for each level # xytext for coordinates of where I want to put my text plt.annotate(s = max_wage_player, xy = (max_wage,0), xytext = (500,1), # Shrink the arrow to avoid occlusion arrowprops = {&amp;#39;facecolor&amp;#39;:&amp;#39;gray&amp;#39;, &amp;#39;width&amp;#39;: 3, &amp;#39;shrink&amp;#39;: 0.03}, backgroundcolor = &amp;#39;white&amp;#39;) g.figure.set_size_inches(12,8) plt.show()   Annotated, Statistical Info and point swarm. To the presentation, I go.     See Porto Down there. Competing with the giants with such a small wage budget. So many Highly paid players in Real and Barcelona. Manchester City has the highest median Wage. Manchester United and Chelsea believes in equality. Many players clustered in around the same wage scale. I am happy that while Neymar is more valued than Messi, Messi and Neymar have a huge Wage difference.  A semblance of normalcy in this crazy world.
So to recap, in this post, we talked about calculating and reading correlations between different variable types, plotting correlations between numerical data and Plotting categorical data with Numerical data using Swarmplots. I love how we can overlay chart elements on top of each other in Seaborn.
Also if you want to learn more about Visualizations, I would like to call out an excellent course about Data Visualization and applied plotting from the University of Michigan which is a part of a pretty good Data Science Specialization with Python in itself. Do check it out
If you liked this post, do look at my other post on Seaborn too where I have created some more straightforward reusable graphs. I am going to be writing more beginner friendly posts in the future too. Follow me up at Medium or Subscribe to my blog to be informed about them. As always, I welcome feedback and constructive criticism and can be reached on Twitter @mlwhiz
Code for this post in this kaggle kernel.
References:  The Search for Categorical Correlation Seaborn Swarmplot Documentation Seaborn Pairplot Documentation  ]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Chatbots  aren&#39;t as difficult to make as You Think</title>
      <link>https://mlwhiz.com/blog/2019/04/15/chatbot/</link>
      <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/04/15/chatbot/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/chatbot/dvader.jpeg"></media:content>
      

      
      <description>Chatbots are the in thing now. Every website must implement it. Every Data Scientist must know about them. Anytime we talk about AI; Chatbots must be discussed. But they look intimidating to someone very new to the field. We struggle with a lot of questions before we even begin to start working on them. Are they hard to create? What technologies should I know before attempting to work on them?</description>

      <content:encoded>  
        
        <![CDATA[  Chatbots are the in thing now. Every website must implement it. Every Data Scientist must know about them. Anytime we talk about AI; Chatbots must be discussed. But they look intimidating to someone very new to the field. We struggle with a lot of questions before we even begin to start working on them. Are they hard to create? What technologies should I know before attempting to work on them? In the end, we end up discouraged reading through many posts on the internet and effectively accomplishing nothing.
  Let me assure you this is not going to be &amp;ldquo;that kind of a post&amp;rdquo;.
I will try to distill some of the knowledge I acquired while working through a project in the Natural Language Processing course in the Advanced machine learning specialization.
So before I start, let me first say it for once that don&amp;rsquo;t be intimidated by the hype and the enigma surrounding Chatbots. They are pretty much using pretty simple NLP techniques which most of us already know. If you don&amp;rsquo;t, you are welcome to check out my NLP Learning Series, where I go through the problem of text classification in fair detail using Conventional, Deep Learning and Transfer Learning methods.
A Very brief Intro to Chatbots We can logically divide of Chatbots in the following two categories.
 Database/FAQ based - We have a database with some questions and answers, and we would like that a user can query that using Natural Language. This is the sort of Chatbots you find at most of the Banking websites for answering FAQs.
 Chit-Chat Based - Simulate dialogue with the user. These are the kind of chatbots that bring the cool in chatbots. We can use Seq-2-Seq models to create such bots.
  The Chatbot we will be creating We will be creating a dialogue chat bot, which will be able to:
 Answer programming-related questions (using StackOverflow dataset) Chit-Chat and simulate dialogue on all non-programming related questions  Once we will have it up and running our final chatbot should look like this.
  Seems quite fun.
We will be taking help of resources like Telegram and Chatterbot to build our Chatbot. So before we start, I think I should get you up and running with these two tools.
1. Telegram: From the website:
 Telegram is a messaging app with a focus on speed and security, it’s super-fast, simple and free. You can use Telegram on all your devices at the same time — your messages sync seamlessly across any number of your phones, tablets or computers.
 For us, Telegram provides us with an easy way to create a Chatbot UI. It provides us with an access token which we will use to connect to the Telegram App backend and run our chatbot logic. Naturally, we need to have a window where we will write our questions to the chatbot, for us that is provided by Telegram. Also, telegram powers the chatbot by communicating with our chatbot logic. The above screenshot is taken from the telegram app only.
Set up Telegram: Don&amp;rsquo;t worry if you don&amp;rsquo;t understand how it works yet; I will try to give step by step instructions as we go forward.
 Step 1: Download and Install Telegram App on your Laptop.
 Step 2: Talk with BotFather by opening this link in Chrome and subsequently your Telegram App.
 Step 3: The above steps will take you to a Chatbot called Botfather which can help you create a new bot. Inception Anyone? It will look something like this.
 Set up a new bot using command &amp;ldquo;/newbot&amp;rdquo; Create a name for Your bot. Create a username for your bot.      Step 4: You will get an access token for the bot. Copy the Token at a safe place. Step 5: Click on the &amp;ldquo;t.me/MLWhizbot&amp;rdquo; link to open Chat with your chatbot in a new window.  Right now if you try to communicate with the chatbot, you won&amp;rsquo;t receive any answers. And that is how it should be.
  But that&amp;rsquo;s not at all fun. Is it? Let&amp;rsquo;s do some python magic to make it responsive.
Making our Telegram Chatbot responsive Create a file main.py and put the following code in it. Don&amp;rsquo;t worry most of the code here is Boilerplate code to make our Chatbot communicate with Telegram using the Access token. We need to worry about implementing the class SimpleDialogueManager. This class contains a function called generate_answer which is where we will write our bot logic.
#!/usr/bin/env python3 import requests import time import argparse import os import json from requests.compat import urljoin class BotHandler(object): &amp;#34;&amp;#34;&amp;#34; BotHandler is a class which implements all back-end of the bot. It has three main functions: &amp;#39;get_updates&amp;#39; — checks for new messages &amp;#39;send_message&amp;#39; – posts new message to user &amp;#39;get_answer&amp;#39; — computes the most relevant on a user&amp;#39;s question &amp;#34;&amp;#34;&amp;#34; def __init__(self, token, dialogue_manager): self.token = token self.api_url = &amp;#34;https://api.telegram.org/bot{}/&amp;#34;.format(token) self.dialogue_manager = dialogue_manager def get_updates(self, offset=None, timeout=30): params = {&amp;#34;timeout&amp;#34;: timeout, &amp;#34;offset&amp;#34;: offset} raw_resp = requests.get(urljoin(self.api_url, &amp;#34;getUpdates&amp;#34;), params) try: resp = raw_resp.json() except json.decoder.JSONDecodeError as e: print(&amp;#34;Failed to parse response {}: {}.&amp;#34;.format(raw_resp.content, e)) return [] if &amp;#34;result&amp;#34; not in resp: return [] return resp[&amp;#34;result&amp;#34;] def send_message(self, chat_id, text): params = {&amp;#34;chat_id&amp;#34;: chat_id, &amp;#34;text&amp;#34;: text} return requests.post(urljoin(self.api_url, &amp;#34;sendMessage&amp;#34;), params) def get_answer(self, question): if question == &amp;#39;/start&amp;#39;: return &amp;#34;Hi, I am your project bot. How can I help you today?&amp;#34; return self.dialogue_manager.generate_answer(question) def is_unicode(text): return len(text) == len(text.encode()) class SimpleDialogueManager(object): &amp;#34;&amp;#34;&amp;#34; This is a simple dialogue manager to test the telegram bot. The main part of our bot will be written here. &amp;#34;&amp;#34;&amp;#34; def generate_answer(self, question): if &amp;#34;Hi&amp;#34; in question: return &amp;#34;Hello, You&amp;#34; else: return &amp;#34;Don&amp;#39;t be rude. Say Hi first.&amp;#34; def main(): # Put your own Telegram Access token here... token = &amp;#39;839585958:AAEfTDo2X6PgHb9IEdb62ueS4SmdpCkhtmc&amp;#39; simple_manager = SimpleDialogueManager() bot = BotHandler(token, simple_manager) ############################################################### print(&amp;#34;Ready to talk!&amp;#34;) offset = 0 while True: updates = bot.get_updates(offset=offset) for update in updates: print(&amp;#34;An update received.&amp;#34;) if &amp;#34;message&amp;#34; in update: chat_id = update[&amp;#34;message&amp;#34;][&amp;#34;chat&amp;#34;][&amp;#34;id&amp;#34;] if &amp;#34;text&amp;#34; in update[&amp;#34;message&amp;#34;]: text = update[&amp;#34;message&amp;#34;][&amp;#34;text&amp;#34;] if is_unicode(text): print(&amp;#34;Update content: {}&amp;#34;.format(update)) bot.send_message(chat_id, bot.get_answer(update[&amp;#34;message&amp;#34;][&amp;#34;text&amp;#34;])) else: bot.send_message(chat_id, &amp;#34;Hmm, you are sending some weird characters to me...&amp;#34;) offset = max(offset, update[&amp;#39;update_id&amp;#39;] &#43; 1) time.sleep(1) if __name__ == &amp;#34;__main__&amp;#34;: main() You can run the file main.py in the terminal window to make your bot responsive.
$ python main.py   Nice. It is following simple logic. But the good thing is that our bot now does something.
Also, take a look at the terminal window where we have run our main.py File. Whenever a user asks a question, we get the sort of dictionary below containing Unique Chat ID, Chat Text, User Information, etc.
Update content: {&#39;update_id&#39;: 484689748, &#39;message&#39;: {&#39;message_id&#39;: 115, &#39;from&#39;: {&#39;id&#39;: 844474950, &#39;is_bot&#39;: False, &#39;first_name&#39;: &#39;Rahul&#39;, &#39;last_name&#39;: &#39;Agarwal&#39;, &#39;language_code&#39;: &#39;en&#39;}, &#39;chat&#39;: {&#39;id&#39;: 844474950, &#39;first_name&#39;: &#39;Rahul&#39;, &#39;last_name&#39;: &#39;Agarwal&#39;, &#39;type&#39;: &#39;private&#39;}, &#39;date&#39;: 1555266010, &#39;text&#39;: &#39;What is 2&#43;2&#39;}}  Until now whatever we had done was sort of setting up and engineering sort of work.
Only if we can write some sound Data Science logic in the generate_answer function in our main.py we should have a decent chatbot.
2. ChatterBot From the Documentation:
 ChatterBot is a Python library that makes it easy to generate automated responses to a user’s input. ChatterBot uses a selection of machine learning algorithms to produce different types of reactions. This makes it easy for developers to create chat bots and automate conversations with users.
 Simply. It is a Blackbox system which can provide us with responses for Chitchat type questions for our Chatbot. And the best part about it is that it is pretty easy to integrate with our current flow. We could also have trained a SeqtoSeq model to do the same thing. Might be I will do it in a later post. I digress.
So, install it with:
$ pip install chatterbot And change the SimpleDialogueManager Class in main.py to the following. We can have a bot that can talk to the user and answer random queries.
class SimpleDialogueManager(object): &amp;#34;&amp;#34;&amp;#34; This is a simple dialogue manager to test the telegram bot. The main part of our bot will be written here. &amp;#34;&amp;#34;&amp;#34; def __init__(self): from chatterbot import ChatBot from chatterbot.trainers import ChatterBotCorpusTrainer chatbot = ChatBot(&amp;#39;MLWhizChatterbot&amp;#39;) trainer = ChatterBotCorpusTrainer(chatbot) trainer.train(&amp;#39;chatterbot.corpus.english&amp;#39;) self.chitchat_bot = chatbot def generate_answer(self, question): response = self.chitchat_bot.get_response(question) return response The code in init instantiates a chatbot using chatterbot and trains it on the provided english corpus data. The data is pretty small, but you can always train it on your dataset too. Just see the documentation. We can then give our responses using the Chatterbot chatbot in the generate_answer function.
  Not too &amp;ldquo;ba a a a a a d&amp;rdquo; , I must say.
Creating our StackOverFlow ChatBot Ok, so finally we are at a stage where we can do something we love. Use Data Science to power our Application/Chatbot. Let us start with creating a rough architecture of what we are going to do next.
  We will need to create two classifiers and save them as .pkl files.
 Intent-Classifier: This classifier will predict if it a question is a Stack-Overflow question or not. If it is not a Stack-overflow question, we let Chatterbot handle it.
 Programming-Language(Tag) Classifier: This classifier will predict which language a question belongs to if the question is a Stack-Overflow question. We do this so that we can search for those language questions in our database only.
  To keep it simple we will create simple TFIDF models. We will need to save these TFIDF vectorizers.
We will also need to store word vectors for every question for similarity calculations later.
Let us go through the process step by step. You can get the full code in this jupyter notebook in my project repository.
Step 1. Reading and Visualizing the Data dialogues = pd.read_csv(&amp;#34;data/dialogues.tsv&amp;#34;,sep=&amp;#34;\t&amp;#34;) posts = pd.read_csv(&amp;#34;data/tagged_posts.tsv&amp;#34;,sep=&amp;#34;\t&amp;#34;)dialogues.head()  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: left; }    text tag     0 Okay -- you&#39;re gonna need to learn how to lie. dialogue   1 I&#39;m kidding. You know how sometimes you just ... dialogue   2 Like my fear of wearing pastels? dialogue   3 I figured you&#39;d get to the good stuff eventually. dialogue   4 Thank God! If I had to hear one more story ab... dialogue     posts.head()  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    post_id title tag     0 9 Calculate age in C# c#   1 16 Filling a DataSet or DataTable from a LINQ que... c#   2 39 Reliable timer in a console application c#   3 42 Best way to allow plugins for a PHP application php   4 59 How do I get a distinct, ordered list of names... c#     print(&amp;#34;Num Posts:&amp;#34;,len(posts)) print(&amp;#34;Num Dialogues:&amp;#34;,len(dialogues)) Num Posts: 2171575 Num Dialogues: 218609  Step 2: Create training data for intent classifier - Chitchat/StackOverflow Question We will be creating a TFIDF model with Logistic regression to do this. If you want to know about the TFIDF model you can read it here.
We could also have used one of the Deep Learning models or transfer learning approaches to do this, but since the main objective of this post is to get a chatbot up and running and not worry too much about the accuracy we sort of work with the TFIDF based model only.
texts = list(dialogues[:200000].text.values) &#43; list(posts[:200000].title.values) labels = [&amp;#39;dialogue&amp;#39;]*200000 &#43; [&amp;#39;stackoverflow&amp;#39;]*200000 data = pd.DataFrame({&amp;#39;text&amp;#39;:texts,&amp;#39;target&amp;#39;:labels}) def text_prepare(text): &amp;#34;&amp;#34;&amp;#34;Performs tokenization and simple preprocessing.&amp;#34;&amp;#34;&amp;#34; replace_by_space_re = re.compile(&amp;#39;[/(){}\[\]\|@,;]&amp;#39;) bad_symbols_re = re.compile(&amp;#39;[^0-9a-z #&#43;_]&amp;#39;) stopwords_set = set(stopwords.words(&amp;#39;english&amp;#39;)) text = text.lower() text = replace_by_space_re.sub(&amp;#39; &amp;#39;, text) text = bad_symbols_re.sub(&amp;#39;&amp;#39;, text) text = &amp;#39; &amp;#39;.join([x for x in text.split() if x and x not in stopwords_set]) return text.strip() # Doing some data cleaning data[&amp;#39;text&amp;#39;] = data[&amp;#39;text&amp;#39;].apply(lambda x : text_prepare(x)) X_train, X_test, y_train, y_test = train_test_split(data[&amp;#39;text&amp;#39;],data[&amp;#39;target&amp;#39;],test_size = .1 , random_state=0) print(&amp;#39;Train size = {}, test size = {}&amp;#39;.format(len(X_train), len(X_test))) Train size = 360000, test size = 40000  Step 3. Create Intent classifier Here we Create a TFIDF Vectorizer to create features and also train a Logistic regression model to create the intent_classifier. Please note how we are saving TFIDF Vectorizer to resources/tfidf.pkl and intent_classifier to resources/intent_clf.pkl. We will need these files once we are going to write the SimpleDialogueManager class for our final Chatbot.
# We will keep our models and vectorizers in this folder !mkdir resources def tfidf_features(X_train, X_test, vectorizer_path): &amp;#34;&amp;#34;&amp;#34;Performs TF-IDF transformation and dumps the model.&amp;#34;&amp;#34;&amp;#34; tfv = TfidfVectorizer(dtype=np.float32, min_df=3, max_features=None, strip_accents=&amp;#39;unicode&amp;#39;, analyzer=&amp;#39;word&amp;#39;,token_pattern=r&amp;#39;\w{1,}&amp;#39;, ngram_range=(1, 3), use_idf=1,smooth_idf=1,sublinear_tf=1, stop_words = &amp;#39;english&amp;#39;) X_train = tfv.fit_transform(X_train) X_test = tfv.transform(X_test) pickle.dump(tfv,vectorizer_path) return X_train, X_test X_train_tfidf, X_test_tfidf = tfidf_features(X_train, X_test, open(&amp;#34;resources/tfidf.pkl&amp;#34;,&amp;#39;wb&amp;#39;)) intent_recognizer = LogisticRegression(C=10,random_state=0) intent_recognizer.fit(X_train_tfidf,y_train) pickle.dump(intent_recognizer, open(&amp;#34;resources/intent_clf.pkl&amp;#34; , &amp;#39;wb&amp;#39;)) # Check test accuracy. y_test_pred = intent_recognizer.predict(X_test_tfidf) test_accuracy = accuracy_score(y_test, y_test_pred) print(&amp;#39;Test accuracy = {}&amp;#39;.format(test_accuracy)) Test accuracy = 0.989825  The Intent Classifier has a pretty good test accuracy of 98%. TFIDF is not so bad.
Step 4: Create Programming Language classifier Let us first create the data for Programming Language classifier and then train a Logistic Regression model using TFIDF features. We save this tag Classifier at the location resources/tag_clf.pkl. We do this step mostly because we don&amp;rsquo;t want to do similarity calculations over the whole database of questions but only on the subset of questions by the language tag.
# creating the data for Programming Language classifier  X = posts[&amp;#39;title&amp;#39;].values y = posts[&amp;#39;tag&amp;#39;].values X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) print(&amp;#39;Train size = {}, test size = {}&amp;#39;.format(len(X_train), len(X_test))) Train size = 1737260, test size = 434315  vectorizer = pickle.load(open(&amp;#34;resources/tfidf.pkl&amp;#34;, &amp;#39;rb&amp;#39;)) X_train_tfidf, X_test_tfidf = vectorizer.transform(X_train), vectorizer.transform(X_test) tag_classifier = OneVsRestClassifier(LogisticRegression(C=5,random_state=0)) tag_classifier.fit(X_train_tfidf,y_train) pickle.dump(tag_classifier, open(&amp;#34;resources/tag_clf.pkl&amp;#34;, &amp;#39;wb&amp;#39;)) # Check test accuracy. y_test_pred = tag_classifier.predict(X_test_tfidf) test_accuracy = accuracy_score(y_test, y_test_pred) print(&amp;#39;Test accuracy = {}&amp;#39;.format(test_accuracy)) Test accuracy = 0.8043816124241622  Not Bad again.
Step 5: Store Question database Embeddings One can use pre-trained word vectors from Google or get a better result by training their embeddings using their data. Since again accuracy and precision is not the primary goal of this post, we will use pretrained vectors.
# Load Google&amp;#39;s pre-trained Word2Vec model. model = gensim.models.KeyedVectors.load_word2vec_format(&amp;#39;GoogleNews-vectors-negative300.bin&amp;#39;, binary=True)  We want to convert every question to an embedding and store them so that we don&amp;rsquo;t calculate the embeddings for the whole dataset every time. In essence, whenever the user asks a Stack Overflow question, we want to use some distance similarity measure to get the most similar question.
def question_to_vec(question, embeddings, dim=300): &amp;#34;&amp;#34;&amp;#34; question: a string embeddings: dict where the key is a word and a value is its&amp;#39; embedding dim: size of the representation result: vector representation for the question &amp;#34;&amp;#34;&amp;#34; word_tokens = question.split(&amp;#34; &amp;#34;) question_len = len(word_tokens) question_mat = np.zeros((question_len,dim), dtype = np.float32) for idx, word in enumerate(word_tokens): if word in embeddings: question_mat[idx,:] = embeddings[word] # remove zero-rows which stand for OOV words  question_mat = question_mat[~np.all(question_mat == 0, axis = 1)] # Compute the mean of each word along the sentence if question_mat.shape[0] &amp;gt; 0: vec = np.array(np.mean(question_mat, axis = 0), dtype = np.float32).reshape((1,dim)) else: vec = np.zeros((1,dim), dtype = np.float32) return vec counts_by_tag = posts.groupby(by=[&amp;#39;tag&amp;#39;])[&amp;#34;tag&amp;#34;].count().reset_index(name = &amp;#39;count&amp;#39;).sort_values([&amp;#39;count&amp;#39;], ascending = False) counts_by_tag = list(zip(counts_by_tag[&amp;#39;tag&amp;#39;],counts_by_tag[&amp;#39;count&amp;#39;])) print(counts_by_tag) [(&#39;c#&#39;, 394451), (&#39;java&#39;, 383456), (&#39;javascript&#39;, 375867), (&#39;php&#39;, 321752), (&#39;c_cpp&#39;, 281300), (&#39;python&#39;, 208607), (&#39;ruby&#39;, 99930), (&#39;r&#39;, 36359), (&#39;vb&#39;, 35044), (&#39;swift&#39;, 34809)]  We save the embeddings in a folder aptly named resources/embeddings_folder. This folder will contain a .pkl file for every tag. For example one of the files will be python.pkl.
! mkdir resources/embeddings_folder for tag, count in counts_by_tag: tag_posts = posts[posts[&amp;#39;tag&amp;#39;] == tag] tag_post_ids = tag_posts[&amp;#39;post_id&amp;#39;].values tag_vectors = np.zeros((count, 300), dtype=np.float32) for i, title in enumerate(tag_posts[&amp;#39;title&amp;#39;]): tag_vectors[i, :] = question_to_vec(title, model, 300) # Dump post ids and vectors to a file. filename = &amp;#39;resources/embeddings_folder/&amp;#39;&#43; tag &#43; &amp;#39;.pkl&amp;#39; pickle.dump((tag_post_ids, tag_vectors), open(filename, &amp;#39;wb&amp;#39;)) We are nearing the end now. We need to have a function to get most similar question&amp;rsquo;s post id in the dataset given we know the programming Language of the question. Here it is:
def get_similar_question(question,tag): # get the path where all question embeddings are kept and load the post_ids and post_embeddings embeddings_path = &amp;#39;resources/embeddings_folder/&amp;#39; &#43; tag &#43; &amp;#34;.pkl&amp;#34; post_ids, post_embeddings = pickle.load(open(embeddings_path, &amp;#39;rb&amp;#39;)) # Get the embeddings for the question question_vec = question_to_vec(question, model, 300) # find index of most similar post best_post_index = pairwise_distances_argmin(question_vec, post_embeddings) # return best post id return post_ids[best_post_index] get_similar_question(&amp;#34;how to use list comprehension in python?&amp;#34;,&amp;#39;python&amp;#39;) array([5947137])  we can use this post ID and find this question at https://stackoverflow.com/questions/5947137
The question the similarity checker suggested has the actual text: &amp;ldquo;How can I use a list comprehension to extend a list in python? [duplicate]&amp;rdquo;
Not too bad. It could have been better if we train our embeddings or use starspace embeddings.
Assemble the Puzzle - SimpleDialogueManager Class Finally, we have reached the end of the whole exercise, and we have to fit all the pieces in the puzzle in our SimpleDialogueManager Class. Here is the code for that. Go in the main.py file again to paste this code and see if it works or not.
Go through the comments to understand how the pieces are fitting together to build one wholesome logic.
import gensim import pickle import re import nltk from nltk.corpus import stopwords import numpy as np from sklearn.metrics.pairwise import pairwise_distances_argmin # We will need this function to prepare text at prediction time def text_prepare(text): &amp;#34;&amp;#34;&amp;#34;Performs tokenization and simple preprocessing.&amp;#34;&amp;#34;&amp;#34; replace_by_space_re = re.compile(&amp;#39;[/(){}\[\]\|@,;]&amp;#39;) bad_symbols_re = re.compile(&amp;#39;[^0-9a-z #&#43;_]&amp;#39;) stopwords_set = set(stopwords.words(&amp;#39;english&amp;#39;)) text = text.lower() text = replace_by_space_re.sub(&amp;#39; &amp;#39;, text) text = bad_symbols_re.sub(&amp;#39;&amp;#39;, text) text = &amp;#39; &amp;#39;.join([x for x in text.split() if x and x not in stopwords_set]) return text.strip() # need this to convert questions asked by user to vectors def question_to_vec(question, embeddings, dim=300): &amp;#34;&amp;#34;&amp;#34; question: a string embeddings: dict where the key is a word and a value is its&amp;#39; embedding dim: size of the representation result: vector representation for the question &amp;#34;&amp;#34;&amp;#34; word_tokens = question.split(&amp;#34; &amp;#34;) question_len = len(word_tokens) question_mat = np.zeros((question_len,dim), dtype = np.float32) for idx, word in enumerate(word_tokens): if word in embeddings: question_mat[idx,:] = embeddings[word] # remove zero-rows which stand for OOV words  question_mat = question_mat[~np.all(question_mat == 0, axis = 1)] # Compute the mean of each word along the sentence if question_mat.shape[0] &amp;gt; 0: vec = np.array(np.mean(question_mat, axis = 0), dtype = np.float32).reshape((1,dim)) else: vec = np.zeros((1,dim), dtype = np.float32) return vec class SimpleDialogueManager(object): &amp;#34;&amp;#34;&amp;#34; This is a simple dialogue manager to test the telegram bot. The main part of our bot will be written here. &amp;#34;&amp;#34;&amp;#34; def __init__(self): # Instantiate all the models and TFIDF Objects. print(&amp;#34;Loading resources...&amp;#34;) # Instantiate a Chatterbot for Chitchat type questions from chatterbot import ChatBot from chatterbot.trainers import ChatterBotCorpusTrainer chatbot = ChatBot(&amp;#39;MLWhizChatterbot&amp;#39;) trainer = ChatterBotCorpusTrainer(chatbot) trainer.train(&amp;#39;chatterbot.corpus.english&amp;#39;) self.chitchat_bot = chatbot print(&amp;#34;Loading Word2vec model...&amp;#34;) # Instantiate the Google&amp;#39;s pre-trained Word2Vec model. self.model = gensim.models.KeyedVectors.load_word2vec_format(&amp;#39;GoogleNews-vectors-negative300.bin&amp;#39;, binary=True) print(&amp;#34;Loading Classifier objects...&amp;#34;) # Load the intent classifier and tag classifier self.intent_recognizer = pickle.load(open(&amp;#39;resources/intent_clf.pkl&amp;#39;, &amp;#39;rb&amp;#39;)) self.tag_classifier = pickle.load(open(&amp;#39;resources/tag_clf.pkl&amp;#39;, &amp;#39;rb&amp;#39;)) # Load the TFIDF vectorizer object self.tfidf_vectorizer = pickle.load(open(&amp;#39;resources/tfidf.pkl&amp;#39;, &amp;#39;rb&amp;#39;)) print(&amp;#34;Finished Loading Resources&amp;#34;) # We created this function just above. We just need to have a function to get most similar question&amp;#39;s *post id* in the dataset given we know the programming Language of the question. Here it is: def get_similar_question(self,question,tag): # get the path where all question embeddings are kept and load the post_ids and post_embeddings embeddings_path = &amp;#39;resources/embeddings_folder/&amp;#39; &#43; tag &#43; &amp;#34;.pkl&amp;#34; post_ids, post_embeddings = pickle.load(open(embeddings_path, &amp;#39;rb&amp;#39;)) # Get the embeddings for the question question_vec = question_to_vec(question, self.model, 300) # find index of most similar post best_post_index = pairwise_distances_argmin(question_vec, post_embeddings) # return best post id return post_ids[best_post_index] def generate_answer(self, question): prepared_question = text_prepare(question) features = self.tfidf_vectorizer.transform([prepared_question]) # find intent intent = self.intent_recognizer.predict(features)[0] # Chit-chat part:  if intent == &amp;#39;dialogue&amp;#39;: response = self.chitchat_bot.get_response(question) # Stack Overflow Question else: # find programming language tag = self.tag_classifier.predict(features)[0] # find most similar question post id post_id = self.get_similar_question(question,tag)[0] # respond with  response = &amp;#39;I think its about %s\nThis thread might help you: https://stackoverflow.com/questions/%s&amp;#39; % (tag, post_id) return response Here is the code for the whole main.py for you to use and see. Just run the whole main.py using
$ python main.py And we will have our bot up and running.
Again, here is the link to the github repository
The possibilities are really endless This is just a small demo project of what you can do with the chatbots. You can do a whole lot more once you recognize that the backend is just python.
 One idea is to run a chatbot script on all the servers I have to run system commands straight from telegram. We can use os.system to run any system command. Bye Bye SSH.
 You can make chatbots to do some daily tasks by using simple keyword-based intents. It is just simple logic. Find out the weather, find out cricket scores or maybe newly released movies. Whatever floats your boat.
 Or maybe try to integrate Telegram based Chatbot in your website. See livechatbot
 Or maybe just try to have fun with it.
    Conclusion Here we learned how to create a simple chatbot. And it works well. We can improve a whole lot on this present chatbot by increasing classifier accuracy, handling edge cases, making it respond faster or maybe adding more logic to handle more use cases. But the fact remains the same. The AI in chatbots is just simple human logic and nothing magic.
In this post, I closely followed one of the projects from this course to create this chatbot. Do check out this course if you get confused, or tell me your problems in the comments I will certainly try to help.
Follow me up at Medium or Subscribe to my blog to be informed about my next posts.
Till then Ciao!!
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Why Sublime Text for Data Science is Hotter than Jennifer Lawrence?</title>
      <link>https://mlwhiz.com/blog/2019/03/31/sublime_ds_post/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/03/31/sublime_ds_post/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/sublime_ds/sublime_tool.jpeg"></media:content>
      

      
      <description>Just Kidding, Nothing is hotter than Jennifer Lawrence. But as you are here, let&amp;amp;rsquo;s proceed.
For a practitioner in any field, they turn out as good as the tools they use. Data Scientists are no different. But sometimes we don&amp;amp;rsquo;t even know which tools we need and also if we need them. We are not able to fathom if there could be a more natural way to solve the problem we face.</description>

      <content:encoded>  
        
        <![CDATA[    Just Kidding, Nothing is hotter than Jennifer Lawrence. But as you are here, let&amp;rsquo;s proceed.
For a practitioner in any field, they turn out as good as the tools they use. Data Scientists are no different. But sometimes we don&amp;rsquo;t even know which tools we need and also if we need them. We are not able to fathom if there could be a more natural way to solve the problem we face. We could learn about Data Science using awesome MOOCs like Machine Learning by Andrew Ng but no one teaches the spanky tools of the trade. This motivated me to write about the tools and skills that one is not taught in any course in my new series of short posts - Tools For Data Science. As it is rightly said:
 We shape our tools and afterward our tools shape us.
 In this post, I will try to talk about the Sublime Text Editor in the context of Data Science.
Sublime Text is such a lifesaver, and we as data scientists don&amp;rsquo;t even realize that we need it. We are generally so happy with our Jupyter Notebooks and R studio that we never try to use another editor.
So, let me try to sway you a little bit from your Jupyter notebooks into integrating another editor in your workflow. I will try to provide some use cases below. On that note, these use cases are not at all exhaustive and are here just to demonstrate the functionality and Sublime power.
1. Create A Dictionary/List or Whatever: How many times does it happen that we want to make a list or dictionary for our Python code from a list we got in an email text? I bet numerous times. How do we do this? We haggle in Excel by loading that Text in Excel and then trying out concatenating operations. For those of us on a Mac, it is even more troublesome since Mac&amp;rsquo;s Excel is not as good as windows(to put it mildly)
So, for example, if you had information about State Name and State Short Name and you had to create a dictionary for Python, you would end up doing something like this in Excel. Or maybe you will load the CSV in pandas and then play with it in Python itself.
  Here is how you would do the same in Sublime. And see just how wonderful it looks. We ended up getting the Dictionary in one single line. It took me around 27 seconds to do. I still remember the first time I saw one of my developer friends doing this, and I was amazed. On that note, We should always learn from other domains
  So how I did this?
Here is a step by step idea. You might want to get some data in Sublime and try it out yourself. The command that you will be using most frequently is Cmd&#43;Shift&#43;L
 Select all the text in the sublime window using Cmd&#43;A Cmd&#43;Shift&#43;L to get the cursor on all lines Use Cmd and Opt with arrow keys to move these cursors to required locations. Cmd takes to beginning and end. Opt takes you token by token Do your Magic and write. Press Delete key to getting everything in one line Press Esc to get out from Multiple cursor mode Enjoy!  2. Select Selectively and Look Good while doing it: Another functionality in Sublime that I love. We all have used Replace functionality in many text editors. This functionality is Find and Replace with a twist.
So, without further ado, let me demonstrate it with an example. Let&amp;rsquo;s say we have a code snippet written in Python and we want to replace some word. We can very well do it with Find and Replace Functionality. We will find and replace each word and would end up clicking a lot of times. Sublime makes it so much easier. And it looks impressive too. You look like you know what you are doing, which will get a few brownie points in my book.
  So how I did this?
 Select the word you want to replace Press Cmd&#43;D multiple times to only select instances of the word you want to remove. When all words are selected, write the new word And that&amp;rsquo;s all    This concludes my post about one of the most efficient editors I have ever known. You can try to do a lot of things with Sublime but the above use cases are the ones which I find most useful. These simple commands will make your work much more efficient and remove the manual drudgery which is sometimes a big part of our jobs. Hope you end up using this in your Workflow. Trust me you will end up loving it.
Let me know if you liked this post. I will continue writing such Tips and Tricks in a series of posts. Also, do follow me on Medium to get notified about my future posts.
PS1: All the things above will also work with Atom text editor using the exact same commands on Mac.
PS2: For Window Users, Replace Cmd by Ctrl and Opt with Alt to get the same functionality.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>NLP  Learning Series: Part 4 - Transfer Learning Intuition for Text Classification</title>
      <link>https://mlwhiz.com/blog/2019/03/30/transfer_learning_text_classification/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/03/30/transfer_learning_text_classification/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/nlp_tl/spiderman.jpeg"></media:content>
      

      
      <description>This post is the fourth post of the NLP Text classification series. To give you a recap, I started up with an NLP text classification competition on Kaggle called Quora Question insincerity challenge. So I thought to share the knowledge via a series of blog posts on text classification. The first post talked about the different preprocessing techniques that work with Deep learning models and increasing embeddings coverage.</description>

      <content:encoded>  
        
        <![CDATA[    This post is the fourth post of the NLP Text classification series. To give you a recap, I started up with an NLP text classification competition on Kaggle called Quora Question insincerity challenge. So I thought to share the knowledge via a series of blog posts on text classification. The first post talked about the different preprocessing techniques that work with Deep learning models and increasing embeddings coverage. In the second post, I talked through some basic conventional models like TFIDF, Count Vectorizer, Hashing, etc. that have been used in text classification and tried to access their performance to create a baseline. In the third post, I delved deeper into Deep learning models and the various architectures we could use to solve the text Classification problem. In this post, I will try to use ULMFit model which is a transfer learning approach to this data.
As a side note: if you want to know more about NLP, I would like to recommend this excellent course on Natural Language Processing in the Advanced machine learning specialization. You can start for free with the 7-day Free Trial. This course covers a wide range of tasks in Natural Language Processing from basic to advanced: sentiment analysis, summarization, dialogue state tracking, to name a few. You can start for free with the 7-day Free Trial.
Before introducing the notion of transfer learning to NLP applications, we will first need to understand a little bit about Language models.
Language Models And NLP Transfer Learning Intuition: In very basic terms the objective of the language model is to predict the next word given a stream of input words. In the past, many different approaches have been used to solve this particular problem. Probabilistic models using Markov assumption is one example of this sort of models.
$$ P(W_n) = P(W_n|W_{n-1}) $$
In the recent era, people have been using RNNs/LSTMs to create such language models. They take as input a word embedding and at each time state return the probability distribution of next word probability over the dictionary words. An example of this is shown below in which the below Neural Network uses multiple stacked layers of RNN cells to learn a language model to predict the next word.
  Now why do we need the concept of Language Modeling? Or How does predicting the next word tie with the current task of text classification? The intuition ties to the way that the neural network gets trained. The neural network that can predict the next word after being trained on a massive corpus like Wikipedia already has learned a lot of structure in a particular language. Can we use this knowledge in the weights of the network for our advantage? Yes, we can, and that is where the idea of Transfer Learning in NLP stems from. So to make this intuition more concrete, Let us think that our neural network is divided into two parts -
 Language Specific: The lower part of the neural network is language specific. That is it learns the features of the language. This part could be used to transfer our knowledge from a language corpus to our current task Task Specific: I will call the upper part of our network as task specific. The weights in these layers are trained so that it learns to predict the next word.    Now as it goes in a lot of transfer learning models for Image, we stack the Language Specific part with some dense and softmax layers(Our new task) and train on our new task to achieve what we want to do.
ULMFit: Now the concept of Transfer learning in NLP is not entirely new and people already used Language models for transfer learning back in 2015-16 without good result. So what has changed now?
The thing that has changed is that people like Jeremy Howard and Sebastian Ruder have done a lot of research on how to train these networks. And so we have achieved state of the art results on many text datasets with Transfer Learning approaches.
Let&amp;rsquo;s follow up with the key research findings in the ULMFit paper written by them along with the code.
Change in the way Transfer Learning networks are trained:   Training a model as per ULMFiT we need to take these three steps:
a) Create a Base Language Model: Training the language model on a general-domain corpus that captures high-level natural language features
b) Finetune Base Language Model on Task Specific Data: Fine-tuning the pre-trained language model on target task data
c) Finetune Base Language Model Layers &#43; Task Specific Layers on Task Specific Data: Fine-tuning the classifier on target task data
So let us go through these three steps one by one along with the code that is provided to us with the FastAI library.
a) Create a Base Language Model: This task might be the most time-consuming task. This model is analogous to resnet50 or Inception for the vision task. In the paper, they use the language model AWD-LSTM, a regular LSTM architecture trained with various tuned dropout hyperparameters. This model was trained on Wikitext-103 consisting of 28,595 preprocessed Wikipedia articles and 103 million words. We won&amp;rsquo;t perform this task ourselves and will use the fabulous FastAI library to use this model as below. The code below will take our data and preprocess it for usage in the AWD_LSTM model as well as load the model.
# Language model data : We use test_df as validation for language model data_lm = TextLMDataBunch.from_df(path = &amp;#34;&amp;#34;,train_df= train_df ,valid_df = test_df) learn = language_model_learner(data_lm, AWD_LSTM, drop_mult=0.5) It is also where we preprocess the data as per the required usage for the FastAI models. For example:
print(train_df)   print(data_lm) TextLMDataBunch; Train: LabelList (1306122 items) x: LMTextList xxbos xxmaj how did xxmaj quebec nationalists see their province as a nation in the 1960s ?,xxbos xxmaj do you have an adopted dog , how would you encourage people to adopt and not shop ?,xxbos xxmaj why does velocity affect time ? xxmaj does velocity affect space geometry ?,xxbos xxmaj how did xxmaj otto von xxmaj guericke used the xxmaj magdeburg hemispheres ?,xxbos xxmaj can i convert montra xxunk d to a mountain bike by just changing the tyres ? y: LMLabelList ,,,, Path: .; Valid: LabelList (375806 items) x: LMTextList xxbos xxmaj why do so many women become so rude and arrogant when they get just a little bit of wealth and power ?,xxbos xxmaj when should i apply for xxup rv college of engineering and xxup bms college of engineering ? xxmaj should i wait for the xxup comedk result or am i supposed to apply before the result ?,xxbos xxmaj what is it really like to be a nurse practitioner ?,xxbos xxmaj who are entrepreneurs ?,xxbos xxmaj is education really making good people nowadays ? y: LMLabelList ,,,, Path: .; Test: None  The tokenized prepared data is based on a lot of research from the FastAI developers. To make this post a little bit complete, I am sharing some of the tokens definition as well.
 xxunk is for an unknown word (one that isn&amp;rsquo;t present in the current vocabulary) xxpad is the token used for padding, if we need to regroup several texts of different lengths in a batch xxbos represents the beginning of a text in your dataset xxmaj is used to indicate the next word begins with a capital in the original text xxup is used to indicate the next word is written in all caps in the original text  b) Finetune Base Language Model on Task Specific Data This task is also pretty easy when we look at the code. The specific details of how we do the training is what holds the essence.
# Learning with Discriminative fine tuning learn.fit_one_cycle(1, 1e-2) learn.unfreeze() learn.fit_one_cycle(1, 1e-3) # Save encoder Object learn.save_encoder(&amp;#39;ft_enc&amp;#39;) The paper introduced two general concepts for this learning stage:
 Discriminative fine-tuning:  The Main Idea is: As different layers capture different types of information, they should be fine-tuned to different extents. Instead of using the same learning rate for all layers of the model, discriminative fine-tuning allows us to tune each layer with different learning rates. In the paper, the authors suggest first to finetune only the last layer, and then unfreeze all the layers with a learning rate lowered by a factor of 2.6.
 Slanted triangular learning rates:    According to the authors: &amp;ldquo;For adapting its parameters to task-specific features, we would like the model to quickly converge to a suitable region of the parameter space in the beginning of training and then refine its parameters&amp;rdquo; The Main Idea is to use a high learning rate at the starting stage for increased learning and low learning rates to finetune at later stages in an epoch.
After training our Language model on the Quora dataset, we should be able to see how our model performs on the Language Model task itself. FastAI library provides us with a simple function to do that.
# check how the language model performs learn.predict(&amp;#34;What should&amp;#34;, n_words=10) &#39;What should be the likelihood of a tourist visiting Mumbai for&#39;  c) Finetune Base Language Model Layers &#43; Task Specific Layers on Task Specific Data This is the stage where task-specific learning takes place that is we add the classification layers and fine tune them.
The authors augment the pretrained language model with two additional linear blocks. Each block uses batch normalization (Ioffe and Szegedy, 2015) and dropout, with ReLU activations for the intermediate layer and a softmax activation that outputs a probability distribution over target classes at the last layer. The params of these task-specific layers are the only ones that are learned from scratch.
#Creating Classification Data data_clas = TextClasDataBunch.from_df(path =&amp;#34;&amp;#34;, train_df=train, valid_df =valid, test_df=test_df, vocab=data_lm.train_ds.vocab, bs=32,label_cols = &amp;#39;target&amp;#39;) # Creating Classifier Object learn = text_classifier_learner(data_clas, AWD_LSTM, drop_mult=0.5) # Add weights of finetuned Language model  learn.load_encoder(&amp;#39;ft_enc&amp;#39;) # Fitting Classifier Object learn.fit_one_cycle(1, 1e-2) # Fitting Classifier Object after freezing all but last 2 layers learn.freeze_to(-2) learn.fit_one_cycle(1, slice(5e-3/2., 5e-3)) # Fitting Classifier Object - discriminative learning learn.unfreeze() learn.fit_one_cycle(1, slice(2e-3/100, 2e-3)) Here also the Authors have derived a few novel methods:
 Concat Pooling:  The authors use not only the concatenation of all the hidden state but also the Maxpool and Meanpool representation of all hidden states as input to the linear layers.
$$ H = [h_1, &amp;hellip; , h_T ] $$
$$ h_c = [h_T , maxpool(H), meanpool(H)] $$
 Gradual Unfreezing:  Rather than fine-tuning all layers at once, which risks catastrophic forgetting(Forgetting everything we have learned so far from language models), the authors propose to gradually unfreeze the model starting from the last layer as this contains the least general knowledge. The Authors first unfreeze the last layer and fine-tune all unfrozen layers for one epoch. They then unfreeze the next lower frozen layer and repeat, until they finetune all layers until convergence at the last iteration. The function slice(2e-3/100, 2e-3) means that we train every layer with different learning rates ranging from max to min value.
One can get the predictions for the test data at once using:
test_preds = np.array(learn.get_preds(DatasetType.Test, ordered=True)[0])[:,1] I am a big fan of Kaggle Kernels. One could not have imagined having all that compute for free. You can find a running version of the above code in this kaggle kernel. Do try to experiment with it after forking and running the code. Also please upvote the kernel if you find it helpful.
Results: Here are the final results of all the different approaches I have tried on the Kaggle Dataset. I ran a 5 fold Stratified CV.
a. Conventional Methods:   b. Deep Learning Methods:   c. Transfer Learning Methods(ULMFIT):   The results achieved were not very good compared to deep learning methods, but I still liked the idea of the transfer learning approach, and it was so easy to implement it using fastAI. Also running the code took a lot of time at 9 hours, compared to other methods which got over in 2 hours.
Even if this approach didn&amp;rsquo;t work well for this dataset, it is a valid approach for other datasets, as the Authors of the paper have achieved pretty good results on different datasets — definitely a genuine method to try out.
PS: Note that I didn&amp;rsquo;t work on tuning the above models, so these results are only cursory. You can try to squeeze more performance by performing hyperparams tuning using hyperopt or just old fashioned Grid-search.
Conclusion: Finally, this post concludes my NLP Learning series. It took a lot of time to write, but the effort was well worth it. I hope you found it helpful in your work. I will try to write some more on this topic when I get some time. Follow me up at Medium or Subscribe to my blog to be informed about my next posts.
Also if you want to learn more about NLP here is an excellent course. You can start for free with the 7-day Free Trial.
Let me know if you think I can add something more to the post; I will try to incorporate it.
Cheers!!!
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>NLP  Learning Series: Part 3 - Attention, CNN and what not for Text Classification</title>
      <link>https://mlwhiz.com/blog/2019/03/09/deeplearning_architectures_text_classification/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/03/09/deeplearning_architectures_text_classification/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/birnn.png"></media:content>
      

      
      <description>This post is the third post of the NLP Text classification series. To give you a recap, I started up with an NLP text classification competition on Kaggle called Quora Question insincerity challenge. So I thought to share the knowledge via a series of blog posts on text classification. The first post talked about the different preprocessing techniques that work with Deep learning models and increasing embeddings coverage. In the second post, I talked through some basic conventional models like TFIDF, Count Vectorizer, Hashing, etc.</description>

      <content:encoded>  
        
        <![CDATA[  This post is the third post of the NLP Text classification series. To give you a recap, I started up with an NLP text classification competition on Kaggle called Quora Question insincerity challenge. So I thought to share the knowledge via a series of blog posts on text classification. The first post talked about the different preprocessing techniques that work with Deep learning models and increasing embeddings coverage. In the second post, I talked through some basic conventional models like TFIDF, Count Vectorizer, Hashing, etc. that have been used in text classification and tried to access their performance to create a baseline. In this post, I delve deeper into Deep learning models and the various architectures we could use to solve the text Classification problem. To make this post platform generic, I am going to code in both Keras and Pytorch. I will use various other models which we were not able to use in this competition like ULMFit transfer learning approaches in the fourth post in the series.
As a side note: if you want to know more about NLP, I would like to recommend this excellent course on Natural Language Processing in the Advanced machine learning specialization. You can start for free with the 7-day Free Trial. This course covers a wide range of tasks in Natural Language Processing from basic to advanced: sentiment analysis, summarization, dialogue state tracking, to name a few. You can start for free with the 7-day Free Trial.
So let me try to go through some of the models which people are using to perform text classification and try to provide a brief intuition for them — also, some code in Keras and Pytorch. So you can try them out for yourself.
1. TextCNN The idea of using a CNN to classify text was first presented in the paper Convolutional Neural Networks for Sentence Classification by Yoon Kim.
Representation: The central intuition about this idea is to see our documents as images. How? Let us say we have a sentence and we have maxlen = 70 and embedding size = 300. We can create a matrix of numbers with the shape 70x300 to represent this sentence. For images, we also have a matrix where individual elements are pixel values. Instead of image pixels, the input to the tasks is sentences or documents represented as a matrix. Each row of the matrix corresponds to one-word vector.
  Convolution Idea: While for an image we move our conv filter horizontally as well as vertically, for text we fix kernel size to filter_size x embed_size, i.e. (3,300) we are just going to move vertically down for the convolution taking look at three words at once since our filter size is 3 in this case. This idea seems right since our convolution filter is not splitting word embedding. It gets to look at the full embedding of each word. Also one can think of filter sizes as unigrams, bigrams, trigrams, etc. Since we are looking at a context window of 1,2,3, and 5 words respectively.
Here is the text classification network coded in Pytorch:
import torch import torch.nn as nn import torch.nn.functional as F from torch.autograd import Variable class CNN_Text(nn.Module): def __init__(self): super(CNN_Text, self).__init__() filter_sizes = [1,2,3,5] num_filters = 36 self.embedding = nn.Embedding(max_features, embed_size) self.embedding.weight = nn.Parameter(torch.tensor(embedding_matrix, dtype=torch.float32)) self.embedding.weight.requires_grad = False self.convs1 = nn.ModuleList([nn.Conv2d(1, num_filters, (K, embed_size)) for K in filter_sizes]) self.dropout = nn.Dropout(0.1) self.fc1 = nn.Linear(len(Ks)*num_filters, 1) def forward(self, x): x = self.embedding(x) x = x.unsqueeze(1) x = [F.relu(conv(x)).squeeze(3) for conv in self.convs1] x = [F.max_pool1d(i, i.size(2)).squeeze(2) for i in x] x = torch.cat(x, 1) x = self.dropout(x) logit = self.fc1(x) return logit And for the Keras enthusiasts:
# https://www.kaggle.com/yekenot/2dcnn-textclassifier def model_cnn(embedding_matrix): filter_sizes = [1,2,3,5] num_filters = 36 inp = Input(shape=(maxlen,)) x = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp) x = Reshape((maxlen, embed_size, 1))(x) maxpool_pool = [] for i in range(len(filter_sizes)): conv = Conv2D(num_filters, kernel_size=(filter_sizes[i], embed_size), kernel_initializer=&amp;#39;he_normal&amp;#39;, activation=&amp;#39;relu&amp;#39;)(x) maxpool_pool.append(MaxPool2D(pool_size=(maxlen - filter_sizes[i] &#43; 1, 1))(conv)) z = Concatenate(axis=1)(maxpool_pool) z = Flatten()(z) z = Dropout(0.1)(z) outp = Dense(1, activation=&amp;#34;sigmoid&amp;#34;)(z) model = Model(inputs=inp, outputs=outp) model.compile(loss=&amp;#39;binary_crossentropy&amp;#39;, optimizer=&amp;#39;adam&amp;#39;, metrics=[&amp;#39;accuracy&amp;#39;]) return model I am a big fan of Kaggle Kernels. One could not have imagined having all that compute for free. You can find a running version of the above two code snippets in this kaggle kernel. Do try to experiment with it after forking and running the code. Also please upvote the kernel if you find it helpful.
The Keras model and Pytorch model performed similarly with Pytorch model beating the keras model by a small margin. The Out-Of-Fold CV F1 score for the Pytorch model came out to be 0.6609 while for Keras model the same score came out to be 0.6559. I used the same preprocessing in both the models to be better able to compare the platforms.
2. BiDirectional RNN(LSTM/GRU): TextCNN works well for Text Classification. It takes care of words in close range. It can see &amp;ldquo;new york&amp;rdquo; together. However, it still can&amp;rsquo;t take care of all the context provided in a particular text sequence. It still does not learn the sequential structure of the data, where every word is dependent on the previous word. Or a word in the previous sentence.
RNN help us with that. They can remember previous information using hidden states and connect it to the current task.
Long Short Term Memory networks (LSTM) are a subclass of RNN, specialized in remembering information for an extended period. Moreover, the Bidirectional LSTM keeps the contextual information in both directions which is pretty useful in text classification task (But won&amp;rsquo;t work for a time series prediction task as we don&amp;rsquo;t have visibility into the future in this case).
  For a most simplistic explanation of Bidirectional RNN, think of RNN cell as a black box taking as input a hidden state(a vector) and a word vector and giving out an output vector and the next hidden state. This box has some weights which are to be tuned using Backpropagation of the losses. Also, the same cell is applied to all the words so that the weights are shared across the words in the sentence. This phenomenon is called weight-sharing.
   Hidden state, Word vector -&amp;gt;(RNN Cell) -&amp;gt; Output Vector , Next Hidden state  For a sequence of length 4 like &amp;ldquo;you will never believe&amp;rdquo;, The RNN cell gives 4 output vectors, which can be concatenated and then used as part of a dense feedforward architecture.
In the Bidirectional RNN, the only change is that we read the text in the usual fashion as well in reverse. So we stack two RNNs in parallel, and hence we get 8 output vectors to append.
Once we get the output vectors, we send them through a series of dense layers and finally a softmax layer to build a text classifier.
In most cases, you need to understand how to stack some layers in a neural network to get the best results. We can try out multiple bidirectional GRU/LSTM layers in the network if it performs better.
Due to the limitations of RNNs like not remembering long term dependencies, in practice, we almost always use LSTM/GRU to model long term dependencies. In such a case you can think of the RNN cell being replaced by an LSTM cell or a GRU cell in the above figure. An example model is provided below. You can use CuDNNGRU interchangeably with CuDNNLSTM when you build models. (CuDNNGRU/LSTM are just implementations of LSTM/GRU that are created to run faster on GPUs. In most cases always use them instead of the vanilla LSTM/GRU implementations)
So here is some code in Pytorch for this network.
class BiLSTM(nn.Module): def __init__(self): super(BiLSTM, self).__init__() self.hidden_size = 64 drp = 0.1 self.embedding = nn.Embedding(max_features, embed_size) self.embedding.weight = nn.Parameter(torch.tensor(embedding_matrix, dtype=torch.float32)) self.embedding.weight.requires_grad = False self.lstm = nn.LSTM(embed_size, self.hidden_size, bidirectional=True, batch_first=True) self.linear = nn.Linear(self.hidden_size*4 , 64) self.relu = nn.ReLU() self.dropout = nn.Dropout(drp) self.out = nn.Linear(64, 1) def forward(self, x): h_embedding = self.embedding(x) h_embedding = torch.squeeze(torch.unsqueeze(h_embedding, 0)) h_lstm, _ = self.lstm(h_embedding) avg_pool = torch.mean(h_lstm, 1) max_pool, _ = torch.max(h_lstm, 1) conc = torch.cat(( avg_pool, max_pool), 1) conc = self.relu(self.linear(conc)) conc = self.dropout(conc) out = self.out(conc) return out Also, here is the same code in Keras.
# BiDirectional LSTM def model_lstm_du(embedding_matrix): inp = Input(shape=(maxlen,)) x = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp) &amp;#39;&amp;#39;&amp;#39; Here 64 is the size(dim) of the hidden state vector as well as the output vector. Keeping return_sequence we want the output for the entire sequence. So what is the dimension of output for this layer? 64*70(maxlen)*2(bidirection concat) CuDNNLSTM is fast implementation of LSTM layer in Keras which only runs on GPU &amp;#39;&amp;#39;&amp;#39; x = Bidirectional(CuDNNLSTM(64, return_sequences=True))(x) avg_pool = GlobalAveragePooling1D()(x) max_pool = GlobalMaxPooling1D()(x) conc = concatenate([avg_pool, max_pool]) conc = Dense(64, activation=&amp;#34;relu&amp;#34;)(conc) conc = Dropout(0.1)(conc) outp = Dense(1, activation=&amp;#34;sigmoid&amp;#34;)(conc) model = Model(inputs=inp, outputs=outp) model.compile(loss=&amp;#39;binary_crossentropy&amp;#39;, optimizer=&amp;#39;adam&amp;#39;, metrics=[&amp;#39;accuracy&amp;#39;]) return model You can run this code in my BiLSTM with Pytorch and Keras kaggle kernel for this competition. Please do upvote the kernel if you find it helpful.
In the BiLSTM case also, Pytorch model beats the keras model by a small margin. The Out-Of-Fold CV F1 score for the Pytorch model came out to be 0.6741 while for Keras model the same score came out to be 0.6727. This score is around a 1-2% increase from the TextCNN performance which is pretty good. Also, note that it is around 6-7% better than conventional methods.
3. Attention Models Dzmitry Bahdanau et al first presented attention in their paper Neural Machine Translation by Jointly Learning to Align and Translate but I find that the paper on Hierarchical Attention Networks for Document Classification written jointly by CMU and Microsoft in 2016 is a much easier read and provides more intuition.
So let us talk about the intuition first. In the past conventional methods like TFIDF/CountVectorizer etc. we used to find features from the text by doing a keyword extraction. Some word is more helpful in determining the category of a text than others. However, in this method we sort of lost the sequential structure of the text. With LSTM and deep learning methods, while we can take care of the sequence structure, we lose the ability to give higher weight to more important words. Can we have the best of both worlds?
The answer is Yes. Actually, Attention is all you need. In the author&amp;rsquo;s words:
 Not all words contribute equally to the representation of the sentence meaning. Hence, we introduce attention mechanism to extract such words that are important to the meaning of the sentence and aggregate the representation of those informative words to form a sentence vector
   In essence, we want to create scores for every word in the text, which is the attention similarity score for a word.
To do this, we start with a weight matrix(W), a bias vector(b) and a context vector u. The optimization algorithm learns all of these weights. On this note I would like to highlight something I like a lot about neural networks - If you don&amp;rsquo;t know some params, let the network learn them. We only have to worry about creating architectures and params to tune.
Then there are a series of mathematical operations. See the figure for more clarification. We can think of u1 as nonlinearity on RNN word output. After that v1 is a dot product of u1 with a context vector u raised to exponentiation. From an intuition viewpoint, the value of v1 will be high if u and u1 are similar. Since we want the sum of scores to be 1, we divide v by the sum of v’s to get the Final Scores,s
These final scores are then multiplied by RNN output for words to weight them according to their importance. After which the outputs are summed and sent through dense layers and softmax for the task of text classification.
Here is the code in Pytorch. Do try to read through the pytorch code for attention layer. It just does what I have explained above.
class Attention(nn.Module): def __init__(self, feature_dim, step_dim, bias=True, **kwargs): super(Attention, self).__init__(**kwargs) self.supports_masking = True self.bias = bias self.feature_dim = feature_dim self.step_dim = step_dim self.features_dim = 0 weight = torch.zeros(feature_dim, 1) nn.init.kaiming_uniform_(weight) self.weight = nn.Parameter(weight) if bias: self.b = nn.Parameter(torch.zeros(step_dim)) def forward(self, x, mask=None): feature_dim = self.feature_dim step_dim = self.step_dim eij = torch.mm( x.contiguous().view(-1, feature_dim), self.weight ).view(-1, step_dim) if self.bias: eij = eij &#43; self.b eij = torch.tanh(eij) a = torch.exp(eij) if mask is not None: a = a * mask a = a / (torch.sum(a, 1, keepdim=True) &#43; 1e-10) weighted_input = x * torch.unsqueeze(a, -1) return torch.sum(weighted_input, 1) class Attention_Net(nn.Module): def __init__(self): super(Attention_Net, self).__init__() drp = 0.1 self.embedding = nn.Embedding(max_features, embed_size) self.embedding.weight = nn.Parameter(torch.tensor(embedding_matrix, dtype=torch.float32)) self.embedding.weight.requires_grad = False self.embedding_dropout = nn.Dropout2d(0.1) self.lstm = nn.LSTM(embed_size, 128, bidirectional=True, batch_first=True) self.lstm2 = nn.GRU(128*2, 64, bidirectional=True, batch_first=True) self.attention_layer = Attention(128, maxlen) self.linear = nn.Linear(64*2 , 64) self.relu = nn.ReLU() self.out = nn.Linear(64, 1) def forward(self, x): h_embedding = self.embedding(x) h_embedding = torch.squeeze(torch.unsqueeze(h_embedding, 0)) h_lstm, _ = self.lstm(h_embedding) h_lstm, _ = self.lstm2(h_lstm) h_lstm_atten = self.attention_layer(h_lstm) conc = self.relu(self.linear(h_lstm_atten)) out = self.out(conc) return out Same code for Keras.
def dot_product(x, kernel): &amp;#34;&amp;#34;&amp;#34; Wrapper for dot product operation, in order to be compatible with both Theano and Tensorflow Args: x (): input kernel (): weights Returns: &amp;#34;&amp;#34;&amp;#34; if K.backend() == &amp;#39;tensorflow&amp;#39;: return K.squeeze(K.dot(x, K.expand_dims(kernel)), axis=-1) else: return K.dot(x, kernel) class AttentionWithContext(Layer): &amp;#34;&amp;#34;&amp;#34; Attention operation, with a context/query vector, for temporal data. Supports Masking. Follows the work of Yang et al. [https://www.cs.cmu.edu/~diyiy/docs/naacl16.pdf] &amp;#34;Hierarchical Attention Networks for Document Classification&amp;#34; by using a context vector to assist the attention # Input shape 3D tensor with shape: `(samples, steps, features)`. # Output shape 2D tensor with shape: `(samples, features)`. How to use: Just put it on top of an RNN Layer (GRU/LSTM/SimpleRNN) with return_sequences=True. The dimensions are inferred based on the output shape of the RNN. Note: The layer has been tested with Keras 2.0.6 Example: model.add(LSTM(64, return_sequences=True)) model.add(AttentionWithContext()) # next add a Dense layer (for classification/regression) or whatever... &amp;#34;&amp;#34;&amp;#34; def __init__(self, W_regularizer=None, u_regularizer=None, b_regularizer=None, W_constraint=None, u_constraint=None, b_constraint=None, bias=True, **kwargs): self.supports_masking = True self.init = initializers.get(&amp;#39;glorot_uniform&amp;#39;) self.W_regularizer = regularizers.get(W_regularizer) self.u_regularizer = regularizers.get(u_regularizer) self.b_regularizer = regularizers.get(b_regularizer) self.W_constraint = constraints.get(W_constraint) self.u_constraint = constraints.get(u_constraint) self.b_constraint = constraints.get(b_constraint) self.bias = bias super(AttentionWithContext, self).__init__(**kwargs) def build(self, input_shape): assert len(input_shape) == 3 self.W = self.add_weight((input_shape[-1], input_shape[-1],), initializer=self.init, name=&amp;#39;{}_W&amp;#39;.format(self.name), regularizer=self.W_regularizer, constraint=self.W_constraint) if self.bias: self.b = self.add_weight((input_shape[-1],), initializer=&amp;#39;zero&amp;#39;, name=&amp;#39;{}_b&amp;#39;.format(self.name), regularizer=self.b_regularizer, constraint=self.b_constraint) self.u = self.add_weight((input_shape[-1],), initializer=self.init, name=&amp;#39;{}_u&amp;#39;.format(self.name), regularizer=self.u_regularizer, constraint=self.u_constraint) super(AttentionWithContext, self).build(input_shape) def compute_mask(self, input, input_mask=None): # do not pass the mask to the next layers return None def call(self, x, mask=None): uit = dot_product(x, self.W) if self.bias: uit &#43;= self.b uit = K.tanh(uit) ait = dot_product(uit, self.u) a = K.exp(ait) # apply mask after the exp. will be re-normalized next if mask is not None: # Cast the mask to floatX to avoid float64 upcasting in theano a *= K.cast(mask, K.floatx()) # in some cases especially in the early stages of training the sum may be almost zero # and this results in NaN&amp;#39;s. A workaround is to add a very small positive number ε to the sum. # a /= K.cast(K.sum(a, axis=1, keepdims=True), K.floatx()) a /= K.cast(K.sum(a, axis=1, keepdims=True) &#43; K.epsilon(), K.floatx()) a = K.expand_dims(a) weighted_input = x * a return K.sum(weighted_input, axis=1) def compute_output_shape(self, input_shape): return input_shape[0], input_shape[-1] def model_lstm_atten(embedding_matrix): inp = Input(shape=(maxlen,)) x = Embedding(max_features, embed_size, weights=[embedding_matrix], trainable=False)(inp) x = Bidirectional(CuDNNLSTM(128, return_sequences=True))(x) x = Bidirectional(CuDNNLSTM(64, return_sequences=True))(x) x = AttentionWithContext()(x) x = Dense(64, activation=&amp;#34;relu&amp;#34;)(x) x = Dense(1, activation=&amp;#34;sigmoid&amp;#34;)(x) model = Model(inputs=inp, outputs=x) model.compile(loss=&amp;#39;binary_crossentropy&amp;#39;, optimizer=&amp;#39;adam&amp;#39;, metrics=[&amp;#39;accuracy&amp;#39;]) return model Again, my Attention with Pytorch and Keras Kaggle kernel contains the working versions for this code. Please do upvote the kernel if you find it useful.
This method performed well with Pytorch CV scores reaching around 0.6758 and Keras CV scores reaching around 0.678. This score is more than what we were able to achieve with BiLSTM and TextCNN. However, please note that we didn&amp;rsquo;t work on tuning any of the given methods yet and so the scores might be different.
With this, I leave you to experiment with new architectures and playing around with stacking multiple GRU/LSTM layers to improve your network performance. You can also look at including more techniques in these network like Bucketing, handmade features, etc. Some of the tips and new techniques are mentioned here on my blog post: What my first Silver Medal taught me about Text Classification and Kaggle in general?. Also, here is another Kaggle kernel which is my silver-winning entry for this competition.
Results Here are the final results of all the different approaches I have tried on the Kaggle Dataset. I ran a 5 fold Stratified CV.
a. Conventional Methods:   b. Deep Learning Methods:   PS: Note that I didn&amp;rsquo;t work on tuning the above models, so these results are only cursory. You can try to squeeze more performance by performing hyperparams tuning using hyperopt or just old fashioned Grid-search.
Conclusion In this post, I went through with the explanations of various deep learning architectures people are using for Text classification tasks. In the next post, we will delve further into the next new phenomenon in NLP space - Transfer Learning with BERT and ULMFit. Follow me up at Medium or Subscribe to my blog to be informed about my next post.
Also if you want to learn more about NLP here is an excellent course. You can start for free with the 7-day Free Trial.
Let me know if you think I can add something more to the post; I will try to incorporate it.
Cheers!!!
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>What my first Silver Medal taught me about Text Classification and Kaggle in general?</title>
      <link>https://mlwhiz.com/blog/2019/02/19/siver_medal_kaggle_learnings/</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/02/19/siver_medal_kaggle_learnings/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/silver/CV_vs_LB.png"></media:content>
      

      
      <description>Kaggle is an excellent place for learning. And I learned a lot of things from the recently concluded competition on Quora Insincere questions classification in which I got a rank of 182/4037. In this post, I will try to provide a summary of the things I tried. I will also try to summarize the ideas which I missed but were a part of other winning solutions.
As a side note: if you want to know more about NLP, I would like to recommend this awesome course on Natural Language Processing in the Advanced machine learning specialization.</description>

      <content:encoded>  
        
        <![CDATA[    Kaggle is an excellent place for learning. And I learned a lot of things from the recently concluded competition on Quora Insincere questions classification in which I got a rank of 182/4037. In this post, I will try to provide a summary of the things I tried. I will also try to summarize the ideas which I missed but were a part of other winning solutions.
As a side note: if you want to know more about NLP, I would like to recommend this awesome course on Natural Language Processing in the Advanced machine learning specialization. You can start for free with the 7-day Free Trial. This course covers a wide range of tasks in Natural Language Processing from basic to advanced: sentiment analysis, summarization, dialogue state tracking, to name a few. You can start for free with the 7-day Free Trial.
So first a little bit of summary about the competition for the uninitiated. In this competition, we had to develop models that identify and flag insincere questions. The challenge was not only a test for performance but also a test of efficient code writing skills. As it was a kernel competition with limited outside data options, competitors were limited to use only the word embeddings provided by the competition organizers. That means we were not allowed to use State of the art models like BERT. We were also limited in the sense that all our models should run in a time of 2 hours. So say bye bye to stacking and monster ensembles though some solutions were able to do this by making their code ultra-efficient. More on this later.
Some Kaggle Learnings: There were a couple of learnings about kaggle as a whole that I would like to share before jumping into my final solution:
1. Always trust your CV   One of the things that genuinely baffled a lot of people in this competition was that a good CV score did not necessarily translate well to a good LB score. The main reason for this was small test dataset(only 65k rows) in the first stage(around 15% of total test data).
A common theme on discussion forums was focussing on which submissions we should select as the final submission:
 The one having the best local CV? or The one having the best LB?  And while it seems simple to say to trust your CV, common sense goes for a toss when you see that your LB score is going down or remaining constant whenever your Local CV score increases.
Luckily I didn&amp;rsquo;t end up making the mistake of not trusting my CV score. Owing to a lot of excellent posts on Kaggle discussion board, I selected a kernel with Public LB score of 0.697 and a Local CV of 0.701, which was around &amp;gt;1200 rank on Public LB as of the final submission. It achieved a score of 0.702 and ranked 182 on the private LB.
While this seems like a straightforward choice post-facto, it was a hard decision to make at a time when you have at your disposal some public kernels having Public LB score &amp;gt;= 0.70
2. Use the code from public kernels but check for errors This Pytorch kernel by Benjamin Minixhofer is awesome. It made the base of many of my submissions for this competition. But this kernel had a mistake. It didn&amp;rsquo;t implement spatial dropout in the right way. You can find the correct implementation of spatial dropout in my post here or on my kernel. Implementing spatial dropout in the right way gave a boost of around 0.004 to the local CV.
Nonetheless, I learned pytorch using this kernel, and I am grateful to him for the same.
3. Don&amp;rsquo;t trust everything that goes on the discussion forums   I will talk about two things here:
 Seed tuning: While in the middle of the competition, everyone was trying to get the best possible rank on the public LB. It is just human nature. A lot of discussions was around good seeds and bad seeds for neural network initialization. While it seems okay in the first look, the conversation went a stage further where people started tuning seeds in the kernel as a hyper param. Some discussions even went on to say that it was a valid strategy. And that is where a large amount of overfitting to public LB started happening. The same submission would score 0.704 from 0.699 just by changing the seed. For a reference, that meant you could go from anywhere near 400-500 rank to top 50 only by changing seed in a public kernel. And that spelled disaster. Some people did that. They went up the public LB. Went crashing out at the private stage.
 CV score disclosure on discussion forums: We always try to gauge our performance against other people. In a lot of discussions, people provided their CV scores and corresponding Public LB scores. The scores were all over the place and not comparable due to Different CV schemes, No of folds in CV, Metric reported, Overfitting or just plain Wrong implementation of Cross-Validation. But they ended up influencing a lot of starters and newcomers.
  4. On that note, be active on Discussion forums and check public kernels regularly You can learn a lot just by being part of discussion forums and following public kernels. This competition had a lot of excellent public kernels on embeddings by SRK, Models by Shujian, and Preprocessing by Theo Viel which gave everyone a headstart. As the competition progressed, the discussions also evolved. There were discussions on speeding up the code, working approaches, F1 threshold finders, and other exciting topics which kept me occupied with new ideas and improvements.
Even after the end, while reading up discussions on solutions overview, I learned a lot. And I would say it is very ** vital to check out the winning solutions.**
5. Share a lot Sharing is everything on Kaggle. People have shared their codes as well as their ideas while competing as well as after the competition ended. It is only together that we can go forward. I like blogging, so I am sharing the knowledge via a series of blog posts on text classification. The first post talked about the different preprocessing techniques that work with Deep learning models and increasing embeddings coverage. In the second post, I talked through some basic conventional models like TFIDF, Count Vectorizer, Hashing, etc. that have been used in text classification and tried to access their performance to create a baseline. In the third post, I will delve deeper into Deep learning models and the various architectures we could use to solve the text Classification problem. To make this post platform generic I will try to write code in both Keras and Pytorch. We will try to use various other models which we were not able to use in this competition like ULMFit transfer learning approaches in the fourth post in the series.
It might take me a little time to write the whole series. Till then you can take a look at my other posts too: What Kagglers are using for Text Classification, which talks about various deep learning models in use in NLP and how to switch from Keras to Pytorch.
6. Beware of trolls :) We were going along happily towards the end of the competition with two weeks left. Scores were increasing slowly. The top players were somewhat stagnant. And then came Pavel and team with a Public LB score of 0.782. The next group had an LB score of 0.713. Such a huge difference. I was so sure that there was some leakage in the data which nobody has caught yet except for Pavel. I spent nearly half a day to do EDA again.
In the end, it turned out that what they did was scraping — nicely played!
They also have some pretty awesome ideas around including additional data, which could have worked but did not in this competition.
My Final Solution:   My main focus was on meta-feature engineering and on increasing embedding coverage and quality. That means I did not play much with various Neural Net architectures. Here are the things that I included in my final submission:
 I noticed that Glove embeddings were doing good on the local CV but not on LB, while meta embeddings(mean of glove and paragram) were doing good on LB but not that good on the CV. I took a mixed approach so some of my models are trained with only glove embedding and some on meta embeddings. Included four more features in embedding. Thus my embedding was a 304-dimensional vector. The four new values corresponded to title case flag, uppercase flag, Textblob word polarity, textblob word subjectivity Found out NER tokens from the whole train and test data using spacy and kept the tokens and the entities in a dict. I used this dict to create extra features like counts of GPE, PERSON, ORG, NORP, WORK_OF_ART.Added some value and were highly correlated with the target. Other features that I used include total_length,capitals,words_vs_unique as well as some engineered features like sum_feat(sum of expletives), question_start_with_why, question_start_with_how_or_what, question_start_with_do_or_are. Might not have added much value but still kept them. My final solution consisted of a stacked ensemble for four models. I stacked the four models using Logistic regression(with positive weights and 0 intercept) and gave the weights as a list in the final kernel.  You can find the kernel for my final submission here.
Tips and Tricks used in other solutions: 1. Increasing Embeddings Coverage: In the third place solution kernel, wowfattie uses stemming, lemmatization, capitalize, lower, uppercase, as well as embedding of the nearest word using a spell checker to get embeddings for all words in his vocab. Such a great idea. I liked this solution the best as it can do what I was trying to do and finished at a pretty good place. Also, the code is very clean.
from nltk.stem import PorterStemmer ps = PorterStemmer() from nltk.stem.lancaster import LancasterStemmer lc = LancasterStemmer() from nltk.stem import SnowballStemmer sb = SnowballStemmer(&amp;#34;english&amp;#34;) def load_glove(word_dict, lemma_dict): EMBEDDING_FILE = &amp;#39;../input/embeddings/glove.840B.300d/glove.840B.300d.txt&amp;#39; def get_coefs(word,*arr): return word, np.asarray(arr, dtype=&amp;#39;float32&amp;#39;) embeddings_index = dict(get_coefs(*o.split(&amp;#34; &amp;#34;)) for o in open(EMBEDDING_FILE)) embed_size = 300 nb_words = len(word_dict)&#43;1 embedding_matrix = np.zeros((nb_words, embed_size), dtype=np.float32) unknown_vector = np.zeros((embed_size,), dtype=np.float32) - 1. print(unknown_vector[:5]) for key in tqdm(word_dict): word = key embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue word = key.lower() embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue word = key.upper() embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue word = key.capitalize() embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue word = ps.stem(key) embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue word = lc.stem(key) embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue word = sb.stem(key) embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue word = lemma_dict[key] embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue if len(key) &amp;gt; 1: word = correction(key) embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue embedding_matrix[word_dict[key]] = unknown_vector return embedding_matrix, nb_words  2. Checkpoint Ensembling: Get a lot of models at no cost. Most of the winning solutions have some version of checkpoint ensembling. For the third place solution, the predictions are a weighted average of predictions after the 4th epoch and predictions after the 5th epoch. I got this idea but forgot to implement it in my ensemble based kernel submission.
3. Meta Embeddings: A lot of winning solutions ended up using weighted meta embeddings where they provided a higher weight to the Glove embedding. Some solutions also used concatenated embeddings.
4. Model Architecture: One surprising thing I saw people doing was to use a 1Dconv layer just after the Bidirectional layer. For example, This is the architecture used by the team that placed first in the competition.
  5. Bucketing/Variable Sequence Length and increased hidden units: Another thing I noticed is the increased number of hidden units as compared to many public kernels. Most of the public kernels used a hidden unit size of 60 due to time constraints. I used 80 units at the cost of training one less network. A lot of high scoring kernels were able to use a higher number of hidden units owing to variable sequence length idea or bucketing. From the 1st place kernel discussion:
 We do not pad sequences to the same length based on the whole data, but just on a batch level. That means we conduct padding and truncation on the data generator level for each batch separately, so that length of the sentences in a batch can vary in size. Additionally, we further improved this by not truncating based on the length of the longest sequence in the batch but based on the 95% percentile of lengths within the sequence. This improved runtime heavily and kept accuracy quite robust on single model level, and improved it by being able to average more models.
 Also from 7th place discussion:
 Bucketing is to make a minibatch from instances that have similar lengths to alleviate the cost of padding. This makes the training speed more than 3x faster, and thus I can run 9 epochs for each split of 5-fold.
 Thus the use of this technique also allowed some competitors to fit many more epochs in less time and run more models at the same time. Pretty Neat!
6. For those winners who didn&amp;rsquo;t use bucketing, Maxlen = 72 was too large: Most of us saw a distribution of question length and took the length that covered maximum questions fully as the maxlen parameter. I never tried to tune it, but it seems like it could have been tuned. One of the tricks was to use maxlen ranging from 35 to 60. This made the kernels run a lot faster.
7. Time taking models/complex architectures like Capsule were mostly not used: Most of the winning solutions didn&amp;rsquo;t use capsule networks as they took a lot of time to train.
8. Backprop errors on embeddings weights in last few epochs: Another thing I saw was in the 18th place kernel which uses a single model
if epoch &amp;gt;= 3: model.embedding.embeddings.weight.requires_grad = True Conclusion: It was a good and long 2-month competition, and I learned a lot about Text and NLP during this time. I want to emphasize here is that I ended up trying a lot of things that didn&amp;rsquo;t work before reaching my final solution. It was a little frustrating at times, but in the end, I was happy that I ended up with the best data science practices. Would also like to thank Kaggle master Kazanova who along with some of his friends released a “How to win a data science competition” Coursera course. I learned a lot from this course.
Let me know in the comments if you think something is missing/wrong or if I could add more tips/tricks for this competition.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>NLP  Learning Series: Part 2 - Conventional Methods for Text Classification</title>
      <link>https://mlwhiz.com/blog/2019/02/08/deeplearning_nlp_conventional_methods/</link>
      <pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/02/08/deeplearning_nlp_conventional_methods/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/tfidf.png"></media:content>
      

      
      <description>This is the second post of the NLP Text classification series. To give you a recap, recently I started up with an NLP text classification competition on Kaggle called Quora Question insincerity challenge. And I thought to share the knowledge via a series of blog posts on text classification. The first post talked about the various preprocessing techniques that work with Deep learning models and increasing embeddings coverage. In this post, I will try to take you through some basic conventional models like TFIDF, Count Vectorizer, Hashing etc.</description>

      <content:encoded>  
        
        <![CDATA[  This is the second post of the NLP Text classification series. To give you a recap, recently I started up with an NLP text classification competition on Kaggle called Quora Question insincerity challenge. And I thought to share the knowledge via a series of blog posts on text classification. The first post talked about the various preprocessing techniques that work with Deep learning models and increasing embeddings coverage. In this post, I will try to take you through some basic conventional models like TFIDF, Count Vectorizer, Hashing etc. that have been used in text classification and try to access their performance to create a baseline. We will delve deeper into Deep learning models in the third post which will focus on different architectures for solving the text classification problem. We will try to use various other models which we were not able to use in this competition like ULMFit transfer learning approaches in the fourth post in the series.
As a side note: if you want to know more about NLP, I would like to recommend this awesome course on Natural Language Processing in the Advanced machine learning specialization. You can start for free with the 7-day Free Trial. This course covers a wide range of tasks in Natural Language Processing from basic to advanced: sentiment analysis, summarization, dialogue state tracking, to name a few. You can start for free with the 7-day Free Trial.
It might take me a little time to write the whole series. Till then you can take a look at my other posts too: What Kagglers are using for Text Classification, which talks about various deep learning models in use in NLP and how to switch from Keras to Pytorch.
So again we start with the first step: Preprocessing.
Basic Preprocessing Techniques for text data(Continued) So in the last post, we talked about various preprocessing methods for text for deep learning purpose. Most of the preprocessing for conventional methods remains the same. We will still remove special characters, punctuations, and contractions. But We also may want to do stemming/lemmatization when it comes to conventional methods. Let us talk about them.
 For grammatical reasons, documents are going to use different forms of a word, such as organize, organizes, and organizing. Additionally, there are families of derivationally related words with similar meanings, such as democracy, democratic, and democratization.
 Since we are going to create features for words in the feature creation step, it makes sense to reduce words to a common denominator so that &amp;lsquo;organize&amp;rsquo;,&amp;lsquo;organizes&amp;rsquo; and &amp;lsquo;organizing&amp;rsquo; could be referred to by a single word &amp;lsquo;organize&amp;rsquo;
a) Stemming Stemming is the process of converting words to their base forms using crude Heuristic rules. For example, one rule could be to remove &amp;rsquo;s&amp;rsquo; from the end of any word, so that &amp;lsquo;cats&amp;rsquo; becomes &amp;lsquo;cat&amp;rsquo;. or another rule could be to replace &amp;lsquo;ies&amp;rsquo; with &amp;lsquo;i&amp;rsquo; so that &amp;lsquo;ponies becomes &amp;lsquo;poni&amp;rsquo;. One of the main point to note here is that when we stem the word we might get a nonsense word like &amp;lsquo;poni&amp;rsquo;. But it will still work for our use case as we count the number of occurrences of a particular word and not focus on the meanings of these words in conventional methods. It doesn&amp;rsquo;t work with deep learning for precisely the same reason.
  We can do this pretty simply by using this function in python.
from nltk.stem import SnowballStemmer from nltk.tokenize.toktok import ToktokTokenizer def stem_text(text): tokenizer = ToktokTokenizer() stemmer = SnowballStemmer(&amp;#39;english&amp;#39;) tokens = tokenizer.tokenize(text) tokens = [token.strip() for token in tokens] tokens = [stemmer.stem(token) for token in tokens] return &amp;#39; &amp;#39;.join(tokens) b) Lemmatization Lemmatization is very similar to stemming but it aims to remove endings only if the base form is present in a dictionary.
from nltk.stem import WordNetLemmatizer from nltk.tokenize.toktok import ToktokTokenizer def lemma_text(text): tokenizer = ToktokTokenizer() tokens = tokenizer.tokenize(text) tokens = [token.strip() for token in tokens] tokens = [wordnet_lemmatizer.lemmatize(token) for token in tokens] return &amp;#39; &amp;#39;.join(tokens) Once we are done with processing a text, our text will necessarily go through these following steps.
def clean_sentence(x): x = x.lower() x = clean_text(x) x = clean_numbers(x) x = replace_typical_misspell(x) x = remove_stopwords(x) x = replace_contractions(x) x = lemma_text(x) x = x.replace(&amp;#34;&amp;#39;&amp;#34;,&amp;#34;&amp;#34;) return x Text Representation In Conventional Machine learning methods, we ought to create features for a text. There are a lot of representations that are present to achieve this. Let us talk about them one by one.
a) Bag of Words - Countvectorizer Features Suppose we have a series of sentences(documents)
X = [ &amp;#39;This is good&amp;#39;, &amp;#39;This is bad&amp;#39;, &amp;#39;This is awesome&amp;#39; ]    Bag of words will create a dictionary of the most common words in all the sentences. For the example above the dictionary would look like:
word_index {&amp;#39;this&amp;#39;:0,&amp;#39;is&amp;#39;:1,&amp;#39;good&amp;#39;:2,&amp;#39;bad&amp;#39;:3,&amp;#39;awesome&amp;#39;:4} And then encode the sentences using the above dict.
This is good - [1,1,1,0,0] This is bad - [1,1,0,1,0] This is awesome - [1,1,0,0,1] We could do this pretty simply in Python by using the CountVectorizer class from Python. Don&amp;rsquo;t worry much about the heavy name, it just does what I explained above. It has a lot of parameters most significant of which are:
 ngram_range: I specify in the code (1,3). This means that unigrams, bigrams, and trigrams will be taken into account while creating features. min_df: Minimum no of time an ngram should appear in a corpus to be used as a feature.  cnt_vectorizer = CountVectorizer(dtype=np.float32, strip_accents=&amp;#39;unicode&amp;#39;, analyzer=&amp;#39;word&amp;#39;,token_pattern=r&amp;#39;\w{1,}&amp;#39;, ngram_range=(1, 3),min_df=3) # we fit count vectorizer to get ngrams from both train and test data. cnt_vectorizer.fit(list(train_df.cleaned_text.values) &#43; list(test_df.cleaned_text.values)) xtrain_cntv = cnt_vectorizer.transform(train_df.cleaned_text.values) xtest_cntv = cnt_vectorizer.transform(test_df.cleaned_text.values) We could then use these features with any machine learning classification model like Logistic Regression, Naive Bayes, SVM or LightGBM as we would like. For example:
# Fitting a simple Logistic Regression on CV Feats clf = LogisticRegression(C=1.0) clf.fit(xtrain_cntv,y_train) Here is a link to a kernel where I tried these features on the Quora Dataset. If you like it please don&amp;rsquo;t forget to upvote.
b) TFIDF Features TFIDF is a simple technique to find features from sentences. While in Count features we take count of all the words/ngrams present in a document, with TFIDF we take features only for the significant words. How do we do that? If you think of a document in a corpus, we will consider two things about any word in that document:
   Term Frequency: How important is the word in the document?  $$TF(word\ in\ a\ document) = \dfrac{No\ of\ occurances\ of\ that\ word\ in\ document}{No\ of\ words\ in\ document}$$
 Inverse Document Frequency: How important the term is in the whole corpus?  $$IDF(word\ in\ a\ corpus) = -log(ratio\ of\ documents\ that\ include\ the\ word)$$
TFIDF then is just multiplication of these two scores.
Intuitively, One can understand that a word is important if it occurs many times in a document. But that creates a problem. Words like &amp;ldquo;a&amp;rdquo;, &amp;ldquo;the&amp;rdquo; occur many times in sentence. Their TF score will always be high. We solve that by using Inverse Document frequency, which is high if the word is rare, and low if the word is common across the corpus.
In essence, we want to find important words in a document which are also not very common.
We could do this pretty simply in Python by using the TFIDFVectorizer class from Python. It has a lot of parameters most significant of which are:
 ngram_range: I specify in the code (1,3). This means that unigrams, bigrams, and trigrams will be taken into account while creating features. min_df: Minimum no of time an ngram should appear in a corpus to be used as a feature.  # Always start with these features. They work (almost) everytime! tfv = TfidfVectorizer(dtype=np.float32, min_df=3, max_features=None, strip_accents=&amp;#39;unicode&amp;#39;, analyzer=&amp;#39;word&amp;#39;,token_pattern=r&amp;#39;\w{1,}&amp;#39;, ngram_range=(1, 3), use_idf=1,smooth_idf=1,sublinear_tf=1, stop_words = &amp;#39;english&amp;#39;) # Fitting TF-IDF to both training and test sets (semi-supervised learning) tfv.fit(list(train_df.cleaned_text.values) &#43; list(test_df.cleaned_text.values)) xtrain_tfv = tfv.transform(train_df.cleaned_text.values) xvalid_tfv = tfv.transform(test_df.cleaned_text.values) Again, we could use these features with any machine learning classification model like Logistic Regression, Naive Bayes, SVM or LightGBM as we would like. Here is a link to a kernel where I tried these features on the Quora Dataset. If you like it please don&amp;rsquo;t forget to upvote.
c) Hashing Features Normally there will be a lot of ngrams in a document corpus. The number of features that our TFIDFVectorizer generated was in excess of 2,00,000 features. This might lead to a problem on very large datasets as we have to hold a very large vocabulary dictionary in memory. One way to counter this is to use the Hash Trick.
  One can think of hashing as a single function which maps any ngram to a number range for example between 0 to 1024. Now we don&amp;rsquo;t have to store our ngrams in a dictionary. We can just use the function to get the index of any word, rather than getting the index from a dictionary.
Since there can be more than 1024 ngrams, different ngrams might map to the same number, and this is called collision. The larger the range we provide our Hashing function, the less is the chance of collisions.
We could do this pretty simply in Python by using the HashingVectorizer class from Python. It has a lot of parameters most significant of which are:
 ngram_range: I specify in the code (1,3). This means that unigrams, bigrams, and trigrams will be taken into account while creating features. n_features: No of features you want to consider. The range I gave above.  # Always start with these features. They work (almost) everytime! hv = HashingVectorizer(dtype=np.float32, strip_accents=&amp;#39;unicode&amp;#39;, analyzer=&amp;#39;word&amp;#39;, ngram_range=(1, 4),n_features=2**12,non_negative=True) # Fitting Hash Vectorizer to both training and test sets (semi-supervised learning) hv.fit(list(train_df.cleaned_text.values) &#43; list(test_df.cleaned_text.values)) xtrain_hv = hv.transform(train_df.cleaned_text.values) xvalid_hv = hv.transform(test_df.cleaned_text.values) y_train = train_df.target.values Here is a link to a kernel where I tried these features on the Quora Dataset. If you like it please don&amp;rsquo;t forget to upvote.
d) Word2vec Features We already talked a little about word2vec in the previous post. We can use the word to vec features to create sentence level feats also. We want to create a d dimensional vector for sentence. For doing this, we will simply average the word embedding of all the words in a sentence.
  We can do this in Python using the following functions.
# load the GloVe vectors in a dictionary: def load_glove_index(): EMBEDDING_FILE = &amp;#39;../input/embeddings/glove.840B.300d/glove.840B.300d.txt&amp;#39; def get_coefs(word,*arr): return word, np.asarray(arr, dtype=&amp;#39;float32&amp;#39;)[:300] embeddings_index = dict(get_coefs(*o.split(&amp;#34; &amp;#34;)) for o in open(EMBEDDING_FILE)) return embeddings_index embeddings_index = load_glove_index() print(&amp;#39;Found %sword vectors.&amp;#39; % len(embeddings_index)) from nltk.corpus import stopwords stop_words = stopwords.words(&amp;#39;english&amp;#39;) def sent2vec(s): words = str(s).lower() words = word_tokenize(words) words = [w for w in words if not w in stop_words] words = [w for w in words if w.isalpha()] M = [] for w in words: try: M.append(embeddings_index[w]) except: continue M = np.array(M) v = M.sum(axis=0) if type(v) != np.ndarray: return np.zeros(300) return v / np.sqrt((v ** 2).sum()) # create glove features xtrain_glove = np.array([sent2vec(x) for x in tqdm(train_df.cleaned_text.values)]) xtest_glove = np.array([sent2vec(x) for x in tqdm(test_df.cleaned_text.values)]) Here is a link to a kernel where I tried these features on the Quora Dataset. If you like it please don&amp;rsquo;t forget to upvote.
Results Here are the results of different approaches on the Kaggle Dataset. I ran a 5 fold Stratified CV.
  Here is the code. If you like it please don&amp;rsquo;t forget to upvote. Also note that I didn&amp;rsquo;t work on tuning the models, so these results are only cursory. You can try to squeeze more performance by performing hyperparams tuning using hyperopt or just old fashioned Grid-search and the performance of models may change after that substantially.
Conclusion While Deep Learning works a lot better for NLP classification task, it still makes sense to have an understanding of how these problems were solved in the past, so that we can appreciate the nature of the problem. I have tried to provide a perspective on the conventional methods and one should experiment with them too to create baselines before moving to Deep Learning methods. If you want to learn more about NLP here is an awesome course. You can start for free with the 7-day Free Trial. If you think I can add something to the flow, do mention it in the comments.
Endnotes and References This post is a result of an effort of a lot of excellent Kagglers and I will try to reference them in this section. If I leave out someone, do understand that it was not my intention to do so.
 Approaching (Almost) Any NLP Problem on Kaggle How to: Preprocessing when using embeddings  ]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>NLP  Learning Series: Part 1 - Text Preprocessing Methods for Deep Learning</title>
      <link>https://mlwhiz.com/blog/2019/01/17/deeplearning_nlp_preprocess/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/01/17/deeplearning_nlp_preprocess/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/text_processing_flow_1.png"></media:content>
      

      
      <description>Recently, I started up with an NLP competition on Kaggle called Quora Question insincerity challenge. It is an NLP Challenge on text classification and as the problem has become more clear after working through the competition as well as by going through the invaluable kernels put up by the kaggle experts, I thought of sharing the knowledge.
Since we have a large amount of material to cover, I am splitting this post into a series of posts.</description>

      <content:encoded>  
        
        <![CDATA[  Recently, I started up with an NLP competition on Kaggle called Quora Question insincerity challenge. It is an NLP Challenge on text classification and as the problem has become more clear after working through the competition as well as by going through the invaluable kernels put up by the kaggle experts, I thought of sharing the knowledge.
Since we have a large amount of material to cover, I am splitting this post into a series of posts. The first post i.e. this one will be based on preprocessing techniques that work with Deep learning models and we will also talk about increasing embeddings coverage. In the second post, I will try to take you through some basic conventional models like TFIDF, Count Vectorizer, Hashing etc. that have been used in text classification and try to access their performance to create a baseline. We will delve deeper into Deep learning models in the third post which will focus on different architectures for solving the text classification problem. We will try to use various other models which we were not able to use in this competition like ULMFit transfer learning approaches in the fourth post in the series.
As a side note: if you want to know more about NLP, I would like to recommend this awesome course on Natural Language Processing in the Advanced machine learning specialization. You can start for free with the 7-day Free Trial. This course covers a wide range of tasks in Natural Language Processing from basic to advanced: sentiment analysis, summarization, dialogue state tracking, to name a few. You can start for free with the 7-day Free Trial.
It might take me a little time to write the whole series. Till then you can take a look at my other posts: What Kagglers are using for Text Classification, which talks about various deep learning models in use in NLP and how to switch from Keras to Pytorch.
So first let me start with explaining a little more about the text classification problem. Text classification is a common task in natural language processing, which transforms a sequence of a text of indefinite length into a category of text. How could you use that?
 To find the sentiment of a review. Find toxic comments on a platform like Facebook Find Insincere questions on Quora. A current ongoing competition on kaggle Find fake reviews on websites Will a text advert get clicked or not?  Now each of these problems has something in common. From a Machine Learning perspective, these are essentially the same problem with just the target labels changing and nothing else. With that said, the addition of business knowledge can help make these models more robust and that is what we want to incorporate while preprocessing the data for test classification. While the preprocessing pipeline I am focussing on in this post is mainly centered around Deep Learning but most of it will also be applicable to conventional machine learning models too.
But let me first go through the flow of a deep learning pipeline for text data before going through all the steps to get a higher level perspective about the whole process.
  We normally start with cleaning up the text data and performing basic EDA. Here we try to improve our data quality by cleaning up the data. We also try to improve the quality of our word2vec embeddings by removing OOV(Out-of-Vocabulary) words. These first two steps normally don&amp;rsquo;t have much order between them and I generally go back and forth between these two steps. Next, we create a representation for text that could be fed into a deep learning model. We then start with creating our models and training them. Finally, we evaluate the models using appropriate metrics and get approval from respective shareholders to deploy our models. Don&amp;rsquo;t worry if these terms don&amp;rsquo;t make much sense now. I will try to explain them through the course of this article.
Here at this junction, let us take a little detour to talk a little about word embeddings. We will have to think about them while preprocessing data for our Deep Learning models.
A Primer on word2vec embeddings: We need to have a way to represent words in a vocab. One way to do that could be to use One hot encoding of word vectors but that is not really a good choice. One of the major reasons is that the one-hot word vectors cannot accurately express the similarity between different words, such as the cosine similarity.
$$\frac{\boldsymbol{x}^\top \boldsymbol{y}}{|\boldsymbol{x}| |\boldsymbol{y}|} \in [-1, 1].$$
Given the structure of one hot encoded vectors, the similarity is always going to come as 0 between different words. Another reason is that as the size of vocabulary increases these one hot encoded vectors become very large.
Word2Vec overcomes the above difficulties by providing us with a fixed length vector representation of words and by capturing the similarity and analogy relationships between different words.
  Word2vec vectors of words are learned in such a way that they allow us to learn different analogies. It enables us to do algebraic manipulations on words which were not possible before. For example: What is king - man &#43; woman? It comes out to be Queen.
Word2Vec vectors also help us to find out the similarity between words. If we try to find similar words to &amp;ldquo;good&amp;rdquo;, we will find awesome, great etc. It is this property of word2vec that makes it invaluable for text classification. Now our deep learning network understands that &amp;ldquo;good&amp;rdquo; and &amp;ldquo;great&amp;rdquo; are essentially words with similar meaning.
Thus in very simple terms, word2vec creates vectors for words. Thus we have a d dimensional vector for every word(common bigrams too) in a dictionary. We normally use pretrained word vectors which are provided to us by others after training on large corpora of texts like Wikipedia, twitter etc. The most commonly used pretrained word vectors are Glove and Fasttext with 300-dimensional word vectors. We are going to use Glove in this post.
Basic Preprocessing Techniques for text data: In most of the cases, we observe that text data is not entirely clean. Data coming from different sources have different characteristics and that makes Text Preprocessing as one of the most important steps in the classification pipeline. For example, Text data from Twitter is totally different from text data on Quora, or some news/blogging platform, and thus would need to be treated differently. Helpfully, the techniques I am going to talk about in this post are generic enough for any kind of data you might encounter in the jungles of NLP.
a) Cleaning Special Characters and Removing Punctuations: Our preprocessing pipeline depends a lot on the word2vec embeddings we are going to use for our classification task. In principle our preprocessing should match the preprocessing that was used before training the word embedding. Since most of the embeddings don&amp;rsquo;t provide vector values for punctuations and other special chars, the first thing you want to do is to get rid of is the special characters in your text data. These are some of the special chars that were there in the Quora Question data and we use replace function to get rid of these special chars.
# Some preprocesssing that will be common to all the text classification methods you will see.  puncts = [&amp;#39;,&amp;#39;, &amp;#39;.&amp;#39;, &amp;#39;&amp;#34;&amp;#39;, &amp;#39;:&amp;#39;, &amp;#39;)&amp;#39;, &amp;#39;(&amp;#39;, &amp;#39;-&amp;#39;, &amp;#39;!&amp;#39;, &amp;#39;?&amp;#39;, &amp;#39;|&amp;#39;, &amp;#39;;&amp;#39;, &amp;#34;&amp;#39;&amp;#34;, &amp;#39;$&amp;#39;, &amp;#39;&amp;amp;&amp;#39;, &amp;#39;/&amp;#39;, &amp;#39;[&amp;#39;, &amp;#39;]&amp;#39;, &amp;#39;&amp;gt;&amp;#39;, &amp;#39;%&amp;#39;, &amp;#39;=&amp;#39;, &amp;#39;#&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;&#43;&amp;#39;, &amp;#39;\\&amp;#39;, &amp;#39;•&amp;#39;, &amp;#39;~&amp;#39;, &amp;#39;@&amp;#39;, &amp;#39;£&amp;#39;, &amp;#39;·&amp;#39;, &amp;#39;_&amp;#39;, &amp;#39;{&amp;#39;, &amp;#39;}&amp;#39;, &amp;#39;©&amp;#39;, &amp;#39;^&amp;#39;, &amp;#39;®&amp;#39;, &amp;#39;`&amp;#39;, &amp;#39;&amp;lt;&amp;#39;, &amp;#39;→&amp;#39;, &amp;#39;°&amp;#39;, &amp;#39;€&amp;#39;, &amp;#39;™&amp;#39;, &amp;#39;›&amp;#39;, &amp;#39;♥&amp;#39;, &amp;#39;←&amp;#39;, &amp;#39;×&amp;#39;, &amp;#39;§&amp;#39;, &amp;#39;″&amp;#39;, &amp;#39;′&amp;#39;, &amp;#39;Â&amp;#39;, &amp;#39;█&amp;#39;, &amp;#39;½&amp;#39;, &amp;#39;à&amp;#39;, &amp;#39;…&amp;#39;, &amp;#39;“&amp;#39;, &amp;#39;★&amp;#39;, &amp;#39;”&amp;#39;, &amp;#39;–&amp;#39;, &amp;#39;●&amp;#39;, &amp;#39;â&amp;#39;, &amp;#39;►&amp;#39;, &amp;#39;−&amp;#39;, &amp;#39;¢&amp;#39;, &amp;#39;²&amp;#39;, &amp;#39;¬&amp;#39;, &amp;#39;░&amp;#39;, &amp;#39;¶&amp;#39;, &amp;#39;↑&amp;#39;, &amp;#39;±&amp;#39;, &amp;#39;¿&amp;#39;, &amp;#39;▾&amp;#39;, &amp;#39;═&amp;#39;, &amp;#39;¦&amp;#39;, &amp;#39;║&amp;#39;, &amp;#39;―&amp;#39;, &amp;#39;¥&amp;#39;, &amp;#39;▓&amp;#39;, &amp;#39;—&amp;#39;, &amp;#39;‹&amp;#39;, &amp;#39;─&amp;#39;, &amp;#39;▒&amp;#39;, &amp;#39;：&amp;#39;, &amp;#39;¼&amp;#39;, &amp;#39;⊕&amp;#39;, &amp;#39;▼&amp;#39;, &amp;#39;▪&amp;#39;, &amp;#39;†&amp;#39;, &amp;#39;■&amp;#39;, &amp;#39;’&amp;#39;, &amp;#39;▀&amp;#39;, &amp;#39;¨&amp;#39;, &amp;#39;▄&amp;#39;, &amp;#39;♫&amp;#39;, &amp;#39;☆&amp;#39;, &amp;#39;é&amp;#39;, &amp;#39;¯&amp;#39;, &amp;#39;♦&amp;#39;, &amp;#39;¤&amp;#39;, &amp;#39;▲&amp;#39;, &amp;#39;è&amp;#39;, &amp;#39;¸&amp;#39;, &amp;#39;¾&amp;#39;, &amp;#39;Ã&amp;#39;, &amp;#39;⋅&amp;#39;, &amp;#39;‘&amp;#39;, &amp;#39;∞&amp;#39;, &amp;#39;∙&amp;#39;, &amp;#39;）&amp;#39;, &amp;#39;↓&amp;#39;, &amp;#39;、&amp;#39;, &amp;#39;│&amp;#39;, &amp;#39;（&amp;#39;, &amp;#39;»&amp;#39;, &amp;#39;，&amp;#39;, &amp;#39;♪&amp;#39;, &amp;#39;╩&amp;#39;, &amp;#39;╚&amp;#39;, &amp;#39;³&amp;#39;, &amp;#39;・&amp;#39;, &amp;#39;╦&amp;#39;, &amp;#39;╣&amp;#39;, &amp;#39;╔&amp;#39;, &amp;#39;╗&amp;#39;, &amp;#39;▬&amp;#39;, &amp;#39;❤&amp;#39;, &amp;#39;ï&amp;#39;, &amp;#39;Ø&amp;#39;, &amp;#39;¹&amp;#39;, &amp;#39;≤&amp;#39;, &amp;#39;‡&amp;#39;, &amp;#39;√&amp;#39;, ] def clean_text(x): x = str(x) for punct in puncts: if punct in x: x = x.replace(punct, f&amp;#39; {punct} &amp;#39;) return x This could also have been done with the help of a simple regex. But I normally like the above way of doing things as it helps to understand the sort of characters we are removing from our data.
def clean_text(x): pattern = r&amp;#39;[^a-zA-z0-9\s]&amp;#39; text = re.sub(pattern, &amp;#39;&amp;#39;, x) return x b) Cleaning Numbers: Why do we want to replace numbers with #s? Because most embeddings have preprocessed their text like this.
Small Python Trick: We use an if statement in the code below to check beforehand if a number exists in a text. It is as an if is always fast than a re.sub command and most of our text doesn&amp;rsquo;t contain numbers.
def clean_numbers(x): if bool(re.search(r&amp;#39;\d&amp;#39;, x)): x = re.sub(&amp;#39;[0-9]{5,}&amp;#39;, &amp;#39;#####&amp;#39;, x) x = re.sub(&amp;#39;[0-9]{4}&amp;#39;, &amp;#39;####&amp;#39;, x) x = re.sub(&amp;#39;[0-9]{3}&amp;#39;, &amp;#39;###&amp;#39;, x) x = re.sub(&amp;#39;[0-9]{2}&amp;#39;, &amp;#39;##&amp;#39;, x) return x c) Removing Misspells: It always helps to find out misspells in the data. As those word embeddings are not present in the word2vec, we should replace words with their correct spellings to get better embedding coverage. The following code artifact is an adaptation of Peter Norvig&amp;rsquo;s spell checker. It uses word2vec ordering of words to approximate word probabilities. As Google word2vec apparently orders words in decreasing order of frequency in the training corpus. You can use this to find out some misspelled words in the data you have.
# This comes from CPMP script in the Quora questions similarity challenge.  import re from collections import Counter import gensim import heapq from operator import itemgetter from multiprocessing import Pool model = gensim.models.KeyedVectors.load_word2vec_format(&amp;#39;../input/embeddings/GoogleNews-vectors-negative300/GoogleNews-vectors-negative300.bin&amp;#39;, binary=True) words = model.index2word w_rank = {} for i,word in enumerate(words): w_rank[word] = i WORDS = w_rank def words(text): return re.findall(r&amp;#39;\w&#43;&amp;#39;, text.lower()) def P(word): &amp;#34;Probability of `word`.&amp;#34; # use inverse of rank as proxy # returns 0 if the word isn&amp;#39;t in the dictionary return - WORDS.get(word, 0) def correction(word): &amp;#34;Most probable spelling correction for word.&amp;#34; return max(candidates(word), key=P) def candidates(word): &amp;#34;Generate possible spelling corrections for word.&amp;#34; return (known([word]) or known(edits1(word)) or known(edits2(word)) or [word]) def known(words): &amp;#34;The subset of `words` that appear in the dictionary of WORDS.&amp;#34; return set(w for w in words if w in WORDS) def edits1(word): &amp;#34;All edits that are one edit away from `word`.&amp;#34; letters = &amp;#39;abcdefghijklmnopqrstuvwxyz&amp;#39; splits = [(word[:i], word[i:]) for i in range(len(word) &#43; 1)] deletes = [L &#43; R[1:] for L, R in splits if R] transposes = [L &#43; R[1] &#43; R[0] &#43; R[2:] for L, R in splits if len(R)&amp;gt;1] replaces = [L &#43; c &#43; R[1:] for L, R in splits if R for c in letters] inserts = [L &#43; c &#43; R for L, R in splits for c in letters] return set(deletes &#43; transposes &#43; replaces &#43; inserts) def edits2(word): &amp;#34;All edits that are two edits away from `word`.&amp;#34; return (e2 for e1 in edits1(word) for e2 in edits1(e1)) def build_vocab(texts): sentences = texts.apply(lambda x: x.split()).values vocab = {} for sentence in sentences: for word in sentence: try: vocab[word] &#43;= 1 except KeyError: vocab[word] = 1 return vocab vocab = build_vocab(train.question_text) top_90k_words = dict(heapq.nlargest(90000, vocab.items(), key=itemgetter(1))) pool = Pool(4) corrected_words = pool.map(correction,list(top_90k_words.keys())) for word,corrected_word in zip(top_90k_words,corrected_words): if word!=corrected_word: print(word,&amp;#34;:&amp;#34;,corrected_word) Once we are through with finding misspelled data, the next thing remains to replace them using a misspell mapping and regex functions.
mispell_dict = {&amp;#39;colour&amp;#39;: &amp;#39;color&amp;#39;, &amp;#39;centre&amp;#39;: &amp;#39;center&amp;#39;, &amp;#39;favourite&amp;#39;: &amp;#39;favorite&amp;#39;, &amp;#39;travelling&amp;#39;: &amp;#39;traveling&amp;#39;, &amp;#39;counselling&amp;#39;: &amp;#39;counseling&amp;#39;, &amp;#39;theatre&amp;#39;: &amp;#39;theater&amp;#39;, &amp;#39;cancelled&amp;#39;: &amp;#39;canceled&amp;#39;, &amp;#39;labour&amp;#39;: &amp;#39;labor&amp;#39;, &amp;#39;organisation&amp;#39;: &amp;#39;organization&amp;#39;, &amp;#39;wwii&amp;#39;: &amp;#39;world war 2&amp;#39;, &amp;#39;citicise&amp;#39;: &amp;#39;criticize&amp;#39;, &amp;#39;youtu &amp;#39;: &amp;#39;youtube &amp;#39;, &amp;#39;Qoura&amp;#39;: &amp;#39;Quora&amp;#39;, &amp;#39;sallary&amp;#39;: &amp;#39;salary&amp;#39;, &amp;#39;Whta&amp;#39;: &amp;#39;What&amp;#39;, &amp;#39;narcisist&amp;#39;: &amp;#39;narcissist&amp;#39;, &amp;#39;howdo&amp;#39;: &amp;#39;how do&amp;#39;, &amp;#39;whatare&amp;#39;: &amp;#39;what are&amp;#39;, &amp;#39;howcan&amp;#39;: &amp;#39;how can&amp;#39;, &amp;#39;howmuch&amp;#39;: &amp;#39;how much&amp;#39;, &amp;#39;howmany&amp;#39;: &amp;#39;how many&amp;#39;, &amp;#39;whydo&amp;#39;: &amp;#39;why do&amp;#39;, &amp;#39;doI&amp;#39;: &amp;#39;do I&amp;#39;, &amp;#39;theBest&amp;#39;: &amp;#39;the best&amp;#39;, &amp;#39;howdoes&amp;#39;: &amp;#39;how does&amp;#39;, &amp;#39;mastrubation&amp;#39;: &amp;#39;masturbation&amp;#39;, &amp;#39;mastrubate&amp;#39;: &amp;#39;masturbate&amp;#39;, &amp;#34;mastrubating&amp;#34;: &amp;#39;masturbating&amp;#39;, &amp;#39;pennis&amp;#39;: &amp;#39;penis&amp;#39;, &amp;#39;Etherium&amp;#39;: &amp;#39;Ethereum&amp;#39;, &amp;#39;narcissit&amp;#39;: &amp;#39;narcissist&amp;#39;, &amp;#39;bigdata&amp;#39;: &amp;#39;big data&amp;#39;, &amp;#39;2k17&amp;#39;: &amp;#39;2017&amp;#39;, &amp;#39;2k18&amp;#39;: &amp;#39;2018&amp;#39;, &amp;#39;qouta&amp;#39;: &amp;#39;quota&amp;#39;, &amp;#39;exboyfriend&amp;#39;: &amp;#39;ex boyfriend&amp;#39;, &amp;#39;airhostess&amp;#39;: &amp;#39;air hostess&amp;#39;, &amp;#34;whst&amp;#34;: &amp;#39;what&amp;#39;, &amp;#39;watsapp&amp;#39;: &amp;#39;whatsapp&amp;#39;, &amp;#39;demonitisation&amp;#39;: &amp;#39;demonetization&amp;#39;, &amp;#39;demonitization&amp;#39;: &amp;#39;demonetization&amp;#39;, &amp;#39;demonetisation&amp;#39;: &amp;#39;demonetization&amp;#39;} def _get_mispell(mispell_dict): mispell_re = re.compile(&amp;#39;(%s)&amp;#39; % &amp;#39;|&amp;#39;.join(mispell_dict.keys())) return mispell_dict, mispell_re mispellings, mispellings_re = _get_mispell(mispell_dict) def replace_typical_misspell(text): def replace(match): return mispellings[match.group(0)] return mispellings_re.sub(replace, text) # Usage replace_typical_misspell(&amp;#34;Whta is demonitisation&amp;#34;) d) Removing Contractions: Contractions are words that we write with an apostrophe. Examples of contractions are words like &amp;ldquo;ain&amp;rsquo;t&amp;rdquo; or &amp;ldquo;aren&amp;rsquo;t&amp;rdquo;. Since we want to standardize our text, it makes sense to expand these contractions. Below we have done this using a contraction mapping and regex functions.
contraction_dict = {&amp;#34;ain&amp;#39;t&amp;#34;: &amp;#34;is not&amp;#34;, &amp;#34;aren&amp;#39;t&amp;#34;: &amp;#34;are not&amp;#34;,&amp;#34;can&amp;#39;t&amp;#34;: &amp;#34;cannot&amp;#34;, &amp;#34;&amp;#39;cause&amp;#34;: &amp;#34;because&amp;#34;, &amp;#34;could&amp;#39;ve&amp;#34;: &amp;#34;could have&amp;#34;, &amp;#34;couldn&amp;#39;t&amp;#34;: &amp;#34;could not&amp;#34;, &amp;#34;didn&amp;#39;t&amp;#34;: &amp;#34;did not&amp;#34;, &amp;#34;doesn&amp;#39;t&amp;#34;: &amp;#34;does not&amp;#34;, &amp;#34;don&amp;#39;t&amp;#34;: &amp;#34;do not&amp;#34;, &amp;#34;hadn&amp;#39;t&amp;#34;: &amp;#34;had not&amp;#34;, &amp;#34;hasn&amp;#39;t&amp;#34;: &amp;#34;has not&amp;#34;, &amp;#34;haven&amp;#39;t&amp;#34;: &amp;#34;have not&amp;#34;, &amp;#34;he&amp;#39;d&amp;#34;: &amp;#34;he would&amp;#34;,&amp;#34;he&amp;#39;ll&amp;#34;: &amp;#34;he will&amp;#34;, &amp;#34;he&amp;#39;s&amp;#34;: &amp;#34;he is&amp;#34;, &amp;#34;how&amp;#39;d&amp;#34;: &amp;#34;how did&amp;#34;, &amp;#34;how&amp;#39;d&amp;#39;y&amp;#34;: &amp;#34;how do you&amp;#34;, &amp;#34;how&amp;#39;ll&amp;#34;: &amp;#34;how will&amp;#34;, &amp;#34;how&amp;#39;s&amp;#34;: &amp;#34;how is&amp;#34;, &amp;#34;I&amp;#39;d&amp;#34;: &amp;#34;I would&amp;#34;, &amp;#34;I&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;I would have&amp;#34;, &amp;#34;I&amp;#39;ll&amp;#34;: &amp;#34;I will&amp;#34;, &amp;#34;I&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;I will have&amp;#34;,&amp;#34;I&amp;#39;m&amp;#34;: &amp;#34;I am&amp;#34;, &amp;#34;I&amp;#39;ve&amp;#34;: &amp;#34;I have&amp;#34;, &amp;#34;i&amp;#39;d&amp;#34;: &amp;#34;i would&amp;#34;, &amp;#34;i&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;i would have&amp;#34;, &amp;#34;i&amp;#39;ll&amp;#34;: &amp;#34;i will&amp;#34;, &amp;#34;i&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;i will have&amp;#34;,&amp;#34;i&amp;#39;m&amp;#34;: &amp;#34;i am&amp;#34;, &amp;#34;i&amp;#39;ve&amp;#34;: &amp;#34;i have&amp;#34;, &amp;#34;isn&amp;#39;t&amp;#34;: &amp;#34;is not&amp;#34;, &amp;#34;it&amp;#39;d&amp;#34;: &amp;#34;it would&amp;#34;, &amp;#34;it&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;it would have&amp;#34;, &amp;#34;it&amp;#39;ll&amp;#34;: &amp;#34;it will&amp;#34;, &amp;#34;it&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;it will have&amp;#34;,&amp;#34;it&amp;#39;s&amp;#34;: &amp;#34;it is&amp;#34;, &amp;#34;let&amp;#39;s&amp;#34;: &amp;#34;let us&amp;#34;, &amp;#34;ma&amp;#39;am&amp;#34;: &amp;#34;madam&amp;#34;, &amp;#34;mayn&amp;#39;t&amp;#34;: &amp;#34;may not&amp;#34;, &amp;#34;might&amp;#39;ve&amp;#34;: &amp;#34;might have&amp;#34;,&amp;#34;mightn&amp;#39;t&amp;#34;: &amp;#34;might not&amp;#34;,&amp;#34;mightn&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;might not have&amp;#34;, &amp;#34;must&amp;#39;ve&amp;#34;: &amp;#34;must have&amp;#34;, &amp;#34;mustn&amp;#39;t&amp;#34;: &amp;#34;must not&amp;#34;, &amp;#34;mustn&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;must not have&amp;#34;, &amp;#34;needn&amp;#39;t&amp;#34;: &amp;#34;need not&amp;#34;, &amp;#34;needn&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;need not have&amp;#34;,&amp;#34;o&amp;#39;clock&amp;#34;: &amp;#34;of the clock&amp;#34;, &amp;#34;oughtn&amp;#39;t&amp;#34;: &amp;#34;ought not&amp;#34;, &amp;#34;oughtn&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;ought not have&amp;#34;, &amp;#34;shan&amp;#39;t&amp;#34;: &amp;#34;shall not&amp;#34;, &amp;#34;sha&amp;#39;n&amp;#39;t&amp;#34;: &amp;#34;shall not&amp;#34;, &amp;#34;shan&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;shall not have&amp;#34;, &amp;#34;she&amp;#39;d&amp;#34;: &amp;#34;she would&amp;#34;, &amp;#34;she&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;she would have&amp;#34;, &amp;#34;she&amp;#39;ll&amp;#34;: &amp;#34;she will&amp;#34;, &amp;#34;she&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;she will have&amp;#34;, &amp;#34;she&amp;#39;s&amp;#34;: &amp;#34;she is&amp;#34;, &amp;#34;should&amp;#39;ve&amp;#34;: &amp;#34;should have&amp;#34;, &amp;#34;shouldn&amp;#39;t&amp;#34;: &amp;#34;should not&amp;#34;, &amp;#34;shouldn&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;should not have&amp;#34;, &amp;#34;so&amp;#39;ve&amp;#34;: &amp;#34;so have&amp;#34;,&amp;#34;so&amp;#39;s&amp;#34;: &amp;#34;so as&amp;#34;, &amp;#34;this&amp;#39;s&amp;#34;: &amp;#34;this is&amp;#34;,&amp;#34;that&amp;#39;d&amp;#34;: &amp;#34;that would&amp;#34;, &amp;#34;that&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;that would have&amp;#34;, &amp;#34;that&amp;#39;s&amp;#34;: &amp;#34;that is&amp;#34;, &amp;#34;there&amp;#39;d&amp;#34;: &amp;#34;there would&amp;#34;, &amp;#34;there&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;there would have&amp;#34;, &amp;#34;there&amp;#39;s&amp;#34;: &amp;#34;there is&amp;#34;, &amp;#34;here&amp;#39;s&amp;#34;: &amp;#34;here is&amp;#34;,&amp;#34;they&amp;#39;d&amp;#34;: &amp;#34;they would&amp;#34;, &amp;#34;they&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;they would have&amp;#34;, &amp;#34;they&amp;#39;ll&amp;#34;: &amp;#34;they will&amp;#34;, &amp;#34;they&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;they will have&amp;#34;, &amp;#34;they&amp;#39;re&amp;#34;: &amp;#34;they are&amp;#34;, &amp;#34;they&amp;#39;ve&amp;#34;: &amp;#34;they have&amp;#34;, &amp;#34;to&amp;#39;ve&amp;#34;: &amp;#34;to have&amp;#34;, &amp;#34;wasn&amp;#39;t&amp;#34;: &amp;#34;was not&amp;#34;, &amp;#34;we&amp;#39;d&amp;#34;: &amp;#34;we would&amp;#34;, &amp;#34;we&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;we would have&amp;#34;, &amp;#34;we&amp;#39;ll&amp;#34;: &amp;#34;we will&amp;#34;, &amp;#34;we&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;we will have&amp;#34;, &amp;#34;we&amp;#39;re&amp;#34;: &amp;#34;we are&amp;#34;, &amp;#34;we&amp;#39;ve&amp;#34;: &amp;#34;we have&amp;#34;, &amp;#34;weren&amp;#39;t&amp;#34;: &amp;#34;were not&amp;#34;, &amp;#34;what&amp;#39;ll&amp;#34;: &amp;#34;what will&amp;#34;, &amp;#34;what&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;what will have&amp;#34;, &amp;#34;what&amp;#39;re&amp;#34;: &amp;#34;what are&amp;#34;, &amp;#34;what&amp;#39;s&amp;#34;: &amp;#34;what is&amp;#34;, &amp;#34;what&amp;#39;ve&amp;#34;: &amp;#34;what have&amp;#34;, &amp;#34;when&amp;#39;s&amp;#34;: &amp;#34;when is&amp;#34;, &amp;#34;when&amp;#39;ve&amp;#34;: &amp;#34;when have&amp;#34;, &amp;#34;where&amp;#39;d&amp;#34;: &amp;#34;where did&amp;#34;, &amp;#34;where&amp;#39;s&amp;#34;: &amp;#34;where is&amp;#34;, &amp;#34;where&amp;#39;ve&amp;#34;: &amp;#34;where have&amp;#34;, &amp;#34;who&amp;#39;ll&amp;#34;: &amp;#34;who will&amp;#34;, &amp;#34;who&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;who will have&amp;#34;, &amp;#34;who&amp;#39;s&amp;#34;: &amp;#34;who is&amp;#34;, &amp;#34;who&amp;#39;ve&amp;#34;: &amp;#34;who have&amp;#34;, &amp;#34;why&amp;#39;s&amp;#34;: &amp;#34;why is&amp;#34;, &amp;#34;why&amp;#39;ve&amp;#34;: &amp;#34;why have&amp;#34;, &amp;#34;will&amp;#39;ve&amp;#34;: &amp;#34;will have&amp;#34;, &amp;#34;won&amp;#39;t&amp;#34;: &amp;#34;will not&amp;#34;, &amp;#34;won&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;will not have&amp;#34;, &amp;#34;would&amp;#39;ve&amp;#34;: &amp;#34;would have&amp;#34;, &amp;#34;wouldn&amp;#39;t&amp;#34;: &amp;#34;would not&amp;#34;, &amp;#34;wouldn&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;would not have&amp;#34;, &amp;#34;y&amp;#39;all&amp;#34;: &amp;#34;you all&amp;#34;, &amp;#34;y&amp;#39;all&amp;#39;d&amp;#34;: &amp;#34;you all would&amp;#34;,&amp;#34;y&amp;#39;all&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;you all would have&amp;#34;,&amp;#34;y&amp;#39;all&amp;#39;re&amp;#34;: &amp;#34;you all are&amp;#34;,&amp;#34;y&amp;#39;all&amp;#39;ve&amp;#34;: &amp;#34;you all have&amp;#34;,&amp;#34;you&amp;#39;d&amp;#34;: &amp;#34;you would&amp;#34;, &amp;#34;you&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;you would have&amp;#34;, &amp;#34;you&amp;#39;ll&amp;#34;: &amp;#34;you will&amp;#34;, &amp;#34;you&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;you will have&amp;#34;, &amp;#34;you&amp;#39;re&amp;#34;: &amp;#34;you are&amp;#34;, &amp;#34;you&amp;#39;ve&amp;#34;: &amp;#34;you have&amp;#34;} def _get_contractions(contraction_dict): contraction_re = re.compile(&amp;#39;(%s)&amp;#39; % &amp;#39;|&amp;#39;.join(contraction_dict.keys())) return contraction_dict, contraction_re contractions, contractions_re = _get_contractions(contraction_dict) def replace_contractions(text): def replace(match): return contractions[match.group(0)] return contractions_re.sub(replace, text) # Usage replace_contractions(&amp;#34;this&amp;#39;s a text with contraction&amp;#34;) Apart from the above techniques, there are other preprocessing techniques of text like Stemming, Lemmatization and Stopword Removal. Since these techniques are not used along with Deep Learning NLP models, we won&amp;rsquo;t talk about them.
Representation: Sequence Creation One of the things that have made Deep Learning the goto choice for NLP is the fact that we don&amp;rsquo;t really have to hand-engineer features from the text data. The deep learning algorithms take as input a sequence of text to learn the structure of text just like a human does. Since Machine cannot understand words they expect their data in numerical form. So we would like to represent out text data as a series of numbers. To understand how this is done we need to understand a little about the Keras Tokenizer function. One can use any other tokenizer also but keras tokenizer seems like a good choice for me.
a) Tokenizer: In simple words, a tokenizer is a utility function to split a sentence into words. keras.preprocessing.text.Tokenizer tokenizes(splits) the texts into tokens(words) while keeping only the most occurring words in the text corpus.
#Signature: Tokenizer(num_words=None, filters=&amp;#39;!&amp;#34;#$%&amp;amp;()*&#43;,-./:;&amp;lt;=&amp;gt;?@[\\]^_`{|}~\t\n&amp;#39;, lower=True, split=&amp;#39; &amp;#39;, char_level=False, oov_token=None, document_count=0, **kwargs) The num_words parameter keeps a prespecified number of words in the text only. This is helpful as we don&amp;rsquo;t want our models to get a lot of noise by considering words that occur very infrequently. In real-world data, most of the words we leave using num_words param are normally misspells. The tokenizer also filters some non-wanted tokens by default and converts the text into lowercase.
The tokenizer once fitted to the data also keeps an index of words(dictionary of words which we can use to assign a unique number to a word) which can be accessed by tokenizer.word_index. The words in the indexed dictionary are ranked in order of frequencies.
  So the whole code to use tokenizer is as follows:
from keras.preprocessing.text import Tokenizer ## Tokenize the sentences tokenizer = Tokenizer(num_words=max_features) tokenizer.fit_on_texts(list(train_X)&#43;list(test_X)) train_X = tokenizer.texts_to_sequences(train_X) test_X = tokenizer.texts_to_sequences(test_X) where train_X and test_X are lists of documents in the corpus.
b) Pad Sequence: Normally our model expects that each sequence(each training example) will be of the same length(same number of words/tokens). We can control this using the maxlen parameter.
For example:  
train_X = pad_sequences(train_X, maxlen=maxlen) test_X = pad_sequences(test_X, maxlen=maxlen) Now our train data contains a list of list of numbers. Each list has the same length. And we also have the word_index which is a dictionary of most occuring words in the text corpus.
Embedding Enrichment: As I said I will be using GLoVE Word2Vec embeddings to explain the enrichment. GLoVE pretrained vectors are trained on the Wikipedia corpus. (You can download them here). That means some of the words that might be present in your data might not be present in the embeddings. How could we deal with that? Let&amp;rsquo;s first load the Glove Embeddings first.
def load_glove_index(): EMBEDDING_FILE = &amp;#39;../input/embeddings/glove.840B.300d/glove.840B.300d.txt&amp;#39; def get_coefs(word,*arr): return word, np.asarray(arr, dtype=&amp;#39;float32&amp;#39;)[:300] embeddings_index = dict(get_coefs(*o.split(&amp;#34; &amp;#34;)) for o in open(EMBEDDING_FILE)) return embeddings_index glove_embedding_index = load_glove_index() Be sure to put the path of the folder where you download these GLoVE vectors. What does this glove_embedding_index contain? It is just a dictionary in which the key is the word and the value is the word vector, a np.array of length 300. The length of this dictionary is somewhere around a billion. Since we only want the embeddings of words that are in our word_index, we will create a matrix which just contains required embeddings.
  def create_glove(word_index,embeddings_index): emb_mean,emb_std = -0.005838499,0.48782197 all_embs = np.stack(embeddings_index.values()) embed_size = all_embs.shape[1] nb_words = min(max_features, len(word_index)) embedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size)) count_found = nb_words for word, i in tqdm(word_index.items()): if i &amp;gt;= max_features: continue embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[i] = embedding_vector else: count_found-=1 print(&amp;#34;Got embedding for &amp;#34;,count_found,&amp;#34; words.&amp;#34;) return embedding_matrix The above code works fine but is there a way that we can use the preprocessing in GLoVE to our advantage? Yes. When preprocessing was done for glove, the creators didn&amp;rsquo;t convert the words to lowercase. That means that it contains multiple variations of a word like &amp;lsquo;USA&amp;rsquo;, &amp;lsquo;usa&amp;rsquo; and &amp;lsquo;Usa&amp;rsquo;. That also means that in some cases while a word like &amp;lsquo;Word&amp;rsquo; is present, its analog in lowercase i.e. &amp;lsquo;word&amp;rsquo; is not present. We can get through this situation by using the below code.
def create_glove(word_index,embeddings_index): emb_mean,emb_std = -0.005838499,0.48782197 all_embs = np.stack(embeddings_index.values()) embed_size = all_embs.shape[1] nb_words = min(max_features, len(word_index)) embedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size)) count_found = nb_words for word, i in tqdm(word_index.items()): if i &amp;gt;= max_features: continue embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[i] = embedding_vector else: if word.islower(): # try to get the embedding of word in titlecase if lowercase is not present embedding_vector = embeddings_index.get(word.capitalize()) if embedding_vector is not None: embedding_matrix[i] = embedding_vector else: count_found-=1 else: count_found-=1 print(&amp;#34;Got embedding for &amp;#34;,count_found,&amp;#34; words.&amp;#34;) return embedding_matrix The above was just an example of how we can use our knowledge of an embedding to get better coverage. Sometimes depending on the problem, one might also derive value by adding extra information to the embeddings using some domain knowledge and NLP skills. For example, we can add external knowledge to the embeddings themselves by adding polarity and subjectivity of a word from the TextBlob package in Python.
from textblob import TextBlob word_sent = TextBlob(&amp;#34;good&amp;#34;).sentiment print(word_sent.polarity,word_sent.subjectivity) # 0.7 0.6 We can get the polarity and subjectivity of any word using TextBlob. Pretty neat. So let us try to add this extra information to our embeddings.
def create_glove(word_index,embeddings_index): emb_mean,emb_std = -0.005838499,0.48782197 all_embs = np.stack(embeddings_index.values()) embed_size = all_embs.shape[1] nb_words = min(max_features, len(word_index)) embedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size&#43;4)) count_found = nb_words for word, i in tqdm(word_index.items()): if i &amp;gt;= max_features: continue embedding_vector = embeddings_index.get(word) word_sent = TextBlob(word).sentiment # Extra information we are passing to our embeddings extra_embed = [word_sent.polarity,word_sent.subjectivity] if embedding_vector is not None: embedding_matrix[i] = np.append(embedding_vector,extra_embed) else: if word.islower(): embedding_vector = embeddings_index.get(word.capitalize()) if embedding_vector is not None: embedding_matrix[i] = np.append(embedding_vector,extra_embed) else: embedding_matrix[i,300:] = extra_embed count_found-=1 else: embedding_matrix[i,300:] = extra_embed count_found-=1 print(&amp;#34;Got embedding for &amp;#34;,count_found,&amp;#34; words.&amp;#34;) return embedding_matrix Engineering embeddings is an essential part of getting better performance from the Deep learning models at a later stage. Generally, I revisit this part of code multiple times during the stage of a project while trying to improve my models even further. You can show up a lot of creativity here to improve coverage over your word_index and to include extra features in your embedding.
More Engineered Features   One can always add sentence specific features like sentence length, number of unique words etc. as another input layer to give extra information to the Deep Neural Network. For example: I created these extra features as part of a feature engineering pipeline for Quora Insincerity Classification Challenge.
def add_features(df): df[&amp;#39;question_text&amp;#39;] = df[&amp;#39;question_text&amp;#39;].progress_apply(lambda x:str(x)) df[&amp;#34;lower_question_text&amp;#34;] = df[&amp;#34;question_text&amp;#34;].apply(lambda x: x.lower()) df[&amp;#39;total_length&amp;#39;] = df[&amp;#39;question_text&amp;#39;].progress_apply(len) df[&amp;#39;capitals&amp;#39;] = df[&amp;#39;question_text&amp;#39;].progress_apply(lambda comment: sum(1 for c in comment if c.isupper())) df[&amp;#39;caps_vs_length&amp;#39;] = df.progress_apply(lambda row: float(row[&amp;#39;capitals&amp;#39;])/float(row[&amp;#39;total_length&amp;#39;]), axis=1) df[&amp;#39;num_words&amp;#39;] = df.question_text.str.count(&amp;#39;\S&#43;&amp;#39;) df[&amp;#39;num_unique_words&amp;#39;] = df[&amp;#39;question_text&amp;#39;].progress_apply(lambda comment: len(set(w for w in comment.split()))) df[&amp;#39;words_vs_unique&amp;#39;] = df[&amp;#39;num_unique_words&amp;#39;] / df[&amp;#39;num_words&amp;#39;] return df Conclusion: NLP is still a very interesting problem in Deep Learning space and thus I would encourage you to do a lot of experimentation to see what works and what doesn&amp;rsquo;t. I have tried to provide a wholesome perspective of the preprocessing steps for a Deep Learning Neural network for any NLP problem. But that doesn&amp;rsquo;t mean it is definitive. If you want to learn more about NLP here is an awesome course. You can start for free with the 7-day Free Trial. If you think we can add something to the flow, do mention it in the comments.
Endnotes and References This post is a result of an effort of a lot of excellent Kagglers and I will try to reference them in this section. If I leave out someone, do understand that it was not my intention to do so.
 How to: Preprocessing when using embeddings Improve your Score with some Text Preprocessing Pytorch baseline Pytorch starter  ]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>A Layman guide to moving from Keras to Pytorch</title>
      <link>https://mlwhiz.com/blog/2019/01/06/pytorch_keras_conversion/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/01/06/pytorch_keras_conversion/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.comimages/artificial-neural-network.png"></media:content>
      

      
      <description>Recently I started up with a competition on kaggle on text classification, and as a part of the competition, I had to somehow move to Pytorch to get deterministic results. Now I have always worked with Keras in the past and it has given me pretty good results, but somehow I got to know that the CuDNNGRU/CuDNNLSTM layers in keras are not deterministic, even after setting the seeds.</description>

      <content:encoded>  
        
        <![CDATA[    Recently I started up with a competition on kaggle on text classification, and as a part of the competition, I had to somehow move to Pytorch to get deterministic results. Now I have always worked with Keras in the past and it has given me pretty good results, but somehow I got to know that the CuDNNGRU/CuDNNLSTM layers in keras are not deterministic, even after setting the seeds. So Pytorch did come to rescue. And am I glad that I moved.
As a side note: if you want to know more about NLP, I would like to recommend this awesome course on Natural Language Processing in the Advanced machine learning specialization. You can start for free with the 7-day Free Trial. This course covers a wide range of tasks in Natural Language Processing from basic to advanced: Sentiment Analysis, summarization, dialogue state tracking, to name a few.
Also take a look at my other post: Text Preprocessing Methods for Deep Learning, which talks about different preprocessing techniques you can use for your NLP task and What Kagglers are using for Text Classification, which talks about various deep learning models in use in NLP.
Ok back to the task at hand. While Keras is great to start with deep learning, with time you are going to resent some of its limitations. I sort of thought about moving to Tensorflow. It seemed like a good transition as TF is the backend of Keras. But was it hard? With the whole session.run commands and tensorflow sessions, I was sort of confused. It was not Pythonic at all.
Pytorch helps in that since it seems like the python way to do things. You have things under your control and you are not losing anything on the performance front. In the words of Andrej Karpathy:
I&amp;#39;ve been using PyTorch a few months now and I&amp;#39;ve never felt better. I have more energy. My skin is clearer. My eye sight has improved.
&amp;mdash; Andrej Karpathy (@karpathy) May 26, 2017 
So without further ado let me translate Keras to Pytorch for you.
The Classy way to write your network?   Ok, let us create an example network in keras first which we will try to port into Pytorch. Here I would like to give a piece of advice too. When you try to move from Keras to Pytorch take any network you have and try porting it to Pytorch. It will make you understand Pytorch in a much better way. Here I am trying to write one of the networks that gave pretty good results in the Quora Insincere questions classification challenge for me. This model has all the bells and whistles which at least any Text Classification deep learning network could contain with its GRU, LSTM and embedding layers and also a meta input layer. And thus would serve as a good example. Also if you want to read up more on how the BiLSTM/GRU and Attention model work do visit my post here.
def get_model(features,clipvalue=1.,num_filters=40,dropout=0.1,embed_size=501): features_input = Input(shape=(features.shape[1],)) inp = Input(shape=(maxlen, )) # Layer 1: Word2Vec Embeddings. x = Embedding(max_features, embed_size, weights=[embedding_matrix], trainable=False)(inp) # Layer 2: SpatialDropout1D(0.1) x = SpatialDropout1D(dropout)(x) # Layer 3: Bidirectional CuDNNLSTM x = Bidirectional(LSTM(num_filters, return_sequences=True))(x) # Layer 4: Bidirectional CuDNNGRU x, x_h, x_c = Bidirectional(GRU(num_filters, return_sequences=True, return_state = True))(x) # Layer 5: some pooling operations avg_pool = GlobalAveragePooling1D()(x) max_pool = GlobalMaxPooling1D()(x) # Layer 6: A concatenation of the last state, maximum pool, average pool and  # additional features x = concatenate([avg_pool, x_h, max_pool,features_input]) # Layer 7: A dense layer x = Dense(16, activation=&amp;#34;relu&amp;#34;)(x) # Layer 8: A dropout layer x = Dropout(0.1)(x) # Layer 9: Output dense layer with one output for our Binary Classification problem. outp = Dense(1, activation=&amp;#34;sigmoid&amp;#34;)(x) # Some keras model creation and compiling model = Model(inputs=[inp,features_input], outputs=outp) adam = optimizers.adam(clipvalue=clipvalue) model.compile(loss=&amp;#39;binary_crossentropy&amp;#39;, optimizer=adam, metrics=[&amp;#39;accuracy&amp;#39;]) return model So a model in pytorch is defined as a class(therefore a little more classy) which inherits from nn.module . Every class necessarily contains an __init__ procedure block and a block for the forward pass.
 In the __init__ part the user defines all the layers the network is going to have but doesn&amp;rsquo;t yet define how those layers would be connected to each other
 In the forward pass block, the user defines how data flows from one layer to another inside the network.
  Why is this Classy? Obviously classy because of Classes. Duh! But jokes apart, I found it beneficial due to a couple of reasons:
1) It gives you a lot of control on how your network is built.
2) You understand a lot about the network when you are building it since you have to specify input and output dimensions. So ** fewer chances of error**. (Although this one is really up to the skill level)
3) Easy to debug networks. Any time you find any problem with the network just use something like print(&amp;quot;avg_pool&amp;quot;, avg_pool.size()) in the forward pass to check the sizes of the layer and you will debug the network easily
4) You can return multiple outputs from the forward layer. This is pretty helpful in the Encoder-Decoder architecture where you can return both the encoder and decoder output. Or in the case of autoencoder where you can return the output of the model and the hidden layer embedding for the data.
5) Pytorch tensors work in a very similar manner to numpy arrays. For example, I could have used Pytorch Maxpool function to write the maxpool layer but max_pool, _ = torch.max(h_gru, 1) will also work.
6) You can set up different layers with different initialization schemes. Something you won&amp;rsquo;t be able to do in Keras. For example, in the below network I have changed the initialization scheme of my LSTM layer. The LSTM layer has different initializations for biases, input layer weights, and hidden layer weights.
7) Wait until you see the training loop in Pytorch You will be amazed at the sort of control it provides.
Now the same model in Pytorch will look like something like this. Do go through the code comments to understand more on how to port.
class Alex_NeuralNet_Meta(nn.Module): def __init__(self,hidden_size,lin_size, embedding_matrix=embedding_matrix): super(Alex_NeuralNet_Meta, self).__init__() # Initialize some parameters for your model self.hidden_size = hidden_size drp = 0.1 # Layer 1: Word2Vec Embeddings. self.embedding = nn.Embedding(max_features, embed_size) self.embedding.weight = nn.Parameter(torch.tensor(embedding_matrix, dtype=torch.float32)) self.embedding.weight.requires_grad = False # Layer 2: Dropout1D(0.1) self.embedding_dropout = nn.Dropout2d(0.1) # Layer 3: Bidirectional CuDNNLSTM self.lstm = nn.LSTM(embed_size, hidden_size, bidirectional=True, batch_first=True) for name, param in self.lstm.named_parameters(): if &amp;#39;bias&amp;#39; in name: nn.init.constant_(param, 0.0) elif &amp;#39;weight_ih&amp;#39; in name: nn.init.kaiming_normal_(param) elif &amp;#39;weight_hh&amp;#39; in name: nn.init.orthogonal_(param) # Layer 4: Bidirectional CuDNNGRU self.gru = nn.GRU(hidden_size*2, hidden_size, bidirectional=True, batch_first=True) for name, param in self.gru.named_parameters(): if &amp;#39;bias&amp;#39; in name: nn.init.constant_(param, 0.0) elif &amp;#39;weight_ih&amp;#39; in name: nn.init.kaiming_normal_(param) elif &amp;#39;weight_hh&amp;#39; in name: nn.init.orthogonal_(param) # Layer 7: A dense layer self.linear = nn.Linear(hidden_size*6 &#43; features.shape[1], lin_size) self.relu = nn.ReLU() # Layer 8: A dropout layer  self.dropout = nn.Dropout(drp) # Layer 9: Output dense layer with one output for our Binary Classification problem. self.out = nn.Linear(lin_size, 1) def forward(self, x): &amp;#39;&amp;#39;&amp;#39; here x[0] represents the first element of the input that is going to be passed. We are going to pass a tuple where first one contains the sequences(x[0]) and the second one is a additional feature vector(x[1]) &amp;#39;&amp;#39;&amp;#39; h_embedding = self.embedding(x[0]) # Based on comment by Ivank to integrate spatial dropout.  embeddings = h_embedding.unsqueeze(2) # (N, T, 1, K) embeddings = embeddings.permute(0, 3, 2, 1) # (N, K, 1, T) embeddings = self.embedding_dropout(embeddings) # (N, K, 1, T), some features are masked embeddings = embeddings.permute(0, 3, 2, 1) # (N, T, 1, K) h_embedding = embeddings.squeeze(2) # (N, T, K) #h_embedding = torch.squeeze(self.embedding_dropout(torch.unsqueeze(h_embedding, 0))) #print(&amp;#34;emb&amp;#34;, h_embedding.size()) h_lstm, _ = self.lstm(h_embedding) #print(&amp;#34;lst&amp;#34;,h_lstm.size()) h_gru, hh_gru = self.gru(h_lstm) hh_gru = hh_gru.view(-1, 2*self.hidden_size ) #print(&amp;#34;gru&amp;#34;, h_gru.size()) #print(&amp;#34;h_gru&amp;#34;, hh_gru.size()) # Layer 5: is defined dynamically as an operation on tensors. avg_pool = torch.mean(h_gru, 1) max_pool, _ = torch.max(h_gru, 1) #print(&amp;#34;avg_pool&amp;#34;, avg_pool.size()) #print(&amp;#34;max_pool&amp;#34;, max_pool.size()) # the extra features you want to give to the model f = torch.tensor(x[1], dtype=torch.float).cuda() #print(&amp;#34;f&amp;#34;, f.size()) # Layer 6: A concatenation of the last state, maximum pool, average pool and  # additional features conc = torch.cat(( hh_gru, avg_pool, max_pool,f), 1) #print(&amp;#34;conc&amp;#34;, conc.size()) # passing conc through linear and relu ops conc = self.relu(self.linear(conc)) conc = self.dropout(conc) out = self.out(conc) # return the final output return out Hope you are still there with me. One thing I would like to emphasize here is that you need to code something up in Pytorch to really understand how it works. And know that once you do that you would be glad that you put in the effort. On to the next section.
Tailored or Readymade: The Best Fit with a highly customizable Training Loop   In the above section I wrote that you will be amazed once you saw the training loop. That was an exaggeration. On the first try you will be a little baffled/confused. But as soon as you read through the loop more than once it will make a lot of intuituve sense. Once again read up the comments and the code to gain a better understanding.
This training loop does k-fold cross-validation on your training data and outputs Out-of-fold train_preds and test_preds averaged over the runs on the test data. I apologize if the flow looks something straight out of a kaggle competition, but if you understand this you would be able to create a training loop for your own workflow. And that is the beauty of Pytorch.
So a brief summary of this loop are as follows:
 Create stratified splits using train data Loop through the splits.  Convert your train and CV data to tensor and load your data to the GPU using the X_train_fold = torch.tensor(x_train[train_idx.astype(int)], dtype=torch.long).cuda() command Load the model onto the GPU using the model.cuda() command Define Loss function, Scheduler and Optimizer create train_loader and valid_loader` to iterate through batches. Start running epochs. In each epoch  Set the model mode to train using model.train(). Go through the batches in train_loader and run the forward pass Run a scheduler step to change the learning rate Compute loss Set the existing gradients in the optimizer to zero Backpropagate the losses through the network Clip the gradients Take an optimizer step to change the weights in the whole network Set the model mode to eval using model.eval(). Get predictions for the validation data using valid_loader and store in variable valid_preds_fold Calculate Loss and print  After all epochs are done. Predict the test data and store the predictions. These predictions will be averaged at the end of the split loop to get the final test_preds Get Out-of-fold(OOF) predictions for train set using train_preds[valid_idx] = valid_preds_fold These OOF predictions can then be used to calculate the Local CV score for your model.   def pytorch_model_run_cv(x_train,y_train,features,x_test, model_obj, feats = False,clip = True): seed_everything() avg_losses_f = [] avg_val_losses_f = [] # matrix for the out-of-fold predictions train_preds = np.zeros((len(x_train))) # matrix for the predictions on the test set test_preds = np.zeros((len(x_test))) splits = list(StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=SEED).split(x_train, y_train)) for i, (train_idx, valid_idx) in enumerate(splits): seed_everything(i*1000&#43;i) x_train = np.array(x_train) y_train = np.array(y_train) if feats: features = np.array(features) x_train_fold = torch.tensor(x_train[train_idx.astype(int)], dtype=torch.long).cuda() y_train_fold = torch.tensor(y_train[train_idx.astype(int), np.newaxis], dtype=torch.float32).cuda() if feats: kfold_X_features = features[train_idx.astype(int)] kfold_X_valid_features = features[valid_idx.astype(int)] x_val_fold = torch.tensor(x_train[valid_idx.astype(int)], dtype=torch.long).cuda() y_val_fold = torch.tensor(y_train[valid_idx.astype(int), np.newaxis], dtype=torch.float32).cuda() model = copy.deepcopy(model_obj) model.cuda() loss_fn = torch.nn.BCEWithLogitsLoss(reduction=&amp;#39;sum&amp;#39;) step_size = 300 base_lr, max_lr = 0.001, 0.003 optimizer = torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=max_lr) ################################################################################################ scheduler = CyclicLR(optimizer, base_lr=base_lr, max_lr=max_lr, step_size=step_size, mode=&amp;#39;exp_range&amp;#39;, gamma=0.99994) ############################################################################################### train = MyDataset(torch.utils.data.TensorDataset(x_train_fold, y_train_fold)) valid = MyDataset(torch.utils.data.TensorDataset(x_val_fold, y_val_fold)) train_loader = torch.utils.data.DataLoader(train, batch_size=batch_size, shuffle=True) valid_loader = torch.utils.data.DataLoader(valid, batch_size=batch_size, shuffle=False) print(f&amp;#39;Fold {i &#43; 1}&amp;#39;) for epoch in range(n_epochs): start_time = time.time() model.train() avg_loss = 0. for i, (x_batch, y_batch, index) in enumerate(train_loader): if feats: f = kfold_X_features[index] y_pred = model([x_batch,f]) else: y_pred = model(x_batch) if scheduler: scheduler.batch_step() # Compute and print loss. loss = loss_fn(y_pred, y_batch) optimizer.zero_grad() loss.backward() if clip: nn.utils.clip_grad_norm_(model.parameters(),1) optimizer.step() avg_loss &#43;= loss.item() / len(train_loader) model.eval() valid_preds_fold = np.zeros((x_val_fold.size(0))) test_preds_fold = np.zeros((len(x_test))) avg_val_loss = 0. for i, (x_batch, y_batch,index) in enumerate(valid_loader): if feats: f = kfold_X_valid_features[index] y_pred = model([x_batch,f]).detach() else: y_pred = model(x_batch).detach() avg_val_loss &#43;= loss_fn(y_pred, y_batch).item() / len(valid_loader) valid_preds_fold[index] = sigmoid(y_pred.cpu().numpy())[:, 0] elapsed_time = time.time() - start_time print(&amp;#39;Epoch {}/{} \tloss={:.4f} \tval_loss={:.4f} \ttime={:.2f}s&amp;#39;.format( epoch &#43; 1, n_epochs, avg_loss, avg_val_loss, elapsed_time)) avg_losses_f.append(avg_loss) avg_val_losses_f.append(avg_val_loss) # predict all samples in the test set batch per batch for i, (x_batch,) in enumerate(test_loader): if feats: f = test_features[i * batch_size:(i&#43;1) * batch_size] y_pred = model([x_batch,f]).detach() else: y_pred = model(x_batch).detach() test_preds_fold[i * batch_size:(i&#43;1) * batch_size] = sigmoid(y_pred.cpu().numpy())[:, 0] train_preds[valid_idx] = valid_preds_fold test_preds &#43;= test_preds_fold / len(splits) print(&amp;#39;All \tloss={:.4f} \tval_loss={:.4f} \t&amp;#39;.format(np.average(avg_losses_f),np.average(avg_val_losses_f))) return train_preds, test_preds But Why? Why so much code? Okay. I get it. That was probably a handful. What you could have done with a simple.fit in keras, takes a lot of code to accomplish in Pytorch. But understand that you get a lot of power too. Some use cases for you to understand:
 While in Keras you have prespecified schedulers like ReduceLROnPlateau (and it is a task to write them), in Pytorch you can experiment like crazy. If you know how to write Python you are going to get along just fine Want to change the structure of your model between the epochs. Yeah you can do it. Changing the input size for convolution networks on the fly. And much more. It is only your imagination that will stop you.  Wanna Run it Yourself?   So another small confession here. The code above will not run as is as there are some code artifacts which I have not shown here. I did this in favor of making the post more readable. Like you see the seed_everything, MyDataset and CyclicLR (From Jeremy Howard Course) functions and classes in the code above which are not really included with Pytorch. But fret not my friend. I have tried to write a Kaggle Kernel with the whole running code. You can see the code here and include it in your projects.
If you liked this post, please don&amp;rsquo;t forget to upvote the Kernel too. I will be obliged.
Endnotes and References This post is a result of an effort of a lot of excellent Kagglers and I will try to reference them in this section. If I leave out someone, do understand that it was not my intention to do so.
 Discussion on 3rd Place winner model in Toxic comment 3rd Place model in Keras by Larry Freeman Pytorch starter Capsule model How to: Preprocessing when using embeddings Improve your Score with some Text Preprocessing Pytorch baseline Pytorch starter  ]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>What Kagglers are using for Text Classification</title>
      <link>https://mlwhiz.com/blog/2018/12/17/text_classification/</link>
      <pubDate>Mon, 17 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2018/12/17/text_classification/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.comimages/text_convolution.png"></media:content>
      

      
      <description>With the problem of Image Classification is more or less solved by Deep learning, Text Classification is the next new developing theme in deep learning. For those who don&amp;amp;rsquo;t know, Text classification is a common task in natural language processing, which transforms a sequence of text of indefinite length into a category of text. How could you use that?
 To find sentiment of a review. Find toxic comments in a platform like Facebook Find Insincere questions on Quora.</description>

      <content:encoded>  
        
        <![CDATA[  With the problem of Image Classification is more or less solved by Deep learning, Text Classification is the next new developing theme in deep learning. For those who don&amp;rsquo;t know, Text classification is a common task in natural language processing, which transforms a sequence of text of indefinite length into a category of text. How could you use that?
 To find sentiment of a review. Find toxic comments in a platform like Facebook Find Insincere questions on Quora. A current ongoing competition on kaggle Find fake reviews on websites Will a text advert get clicked or not  And much more. The whole internet is filled with text and to categorise that information algorithmically will only give us incremental benefits to say the least in the field of AI.
Here I am going to use the data from Quora&amp;rsquo;s Insincere questions to talk about the different models that people are building and sharing to perform this task. Obviously these standalone models are not going to put you on the top of the leaderboard, yet I hope that this ensuing discussion would be helpful for people who want to learn more about text classification. This is going to be a long post in that regard.
As a side note: if you want to know more about NLP, I would like to recommend this awesome course on Natural Language Processing in the Advanced machine learning specialization. You can start for free with the 7-day Free Trial. This course covers a wide range of tasks in Natural Language Processing from basic to advanced: sentiment analysis, summarization, dialogue state tracking, to name a few.
Also take a look at my other post: Text Preprocessing Methods for Deep Learning, which talks about different preprocessing techniques you can use for your NLP task and how to switch from Keras to Pytorch.
So let me try to go through some of the models which people are using to perform text classification and try to provide a brief intuition for them.
1. TextCNN: The idea of using a CNN to classify text was first presented in the paper Convolutional Neural Networks for Sentence Classification by Yoon Kim. Instead of image pixels, the input to the tasks are sentences or documents represented as a matrix. Each row of the matrix corresponds to one word vector. That is, each row is word-vector that represents a word. Thus a sequence of max length 70 gives us a image of 70(max sequence length)x300(embedding size)
  Now for some intuition. While for a image we move our conv filter horizontally also since here we have fixed our kernel size to filter_size x embed_size i.e. (3,300) we are just going to move down for the convolution taking look at three words at once since our filter size is 3 in this case.Also one can think of filter sizes as unigrams, bigrams, trigrams etc. Since we are looking at a context window of 1,2,3, and 5 words respectively. Here is the text classification network coded in Keras:
# https://www.kaggle.com/yekenot/2dcnn-textclassifier def model_cnn(embedding_matrix): filter_sizes = [1,2,3,5] num_filters = 36 inp = Input(shape=(maxlen,)) x = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp) x = Reshape((maxlen, embed_size, 1))(x) maxpool_pool = [] for i in range(len(filter_sizes)): conv = Conv2D(num_filters, kernel_size=(filter_sizes[i], embed_size), kernel_initializer=&amp;#39;he_normal&amp;#39;, activation=&amp;#39;elu&amp;#39;)(x) maxpool_pool.append(MaxPool2D(pool_size=(maxlen - filter_sizes[i] &#43; 1, 1))(conv)) z = Concatenate(axis=1)(maxpool_pool) z = Flatten()(z) z = Dropout(0.1)(z) outp = Dense(1, activation=&amp;#34;sigmoid&amp;#34;)(z) model = Model(inputs=inp, outputs=outp) model.compile(loss=&amp;#39;binary_crossentropy&amp;#39;, optimizer=&amp;#39;adam&amp;#39;, metrics=[&amp;#39;accuracy&amp;#39;]) return model I have written a simplified and well commented code to run this network(taking input from a lot of other kernels) on a kaggle kernel for this competition. Do take a look there to learn the preprocessing steps, and the word to vec embeddings usage in this model. You will learn something. Please do upvote the kernel if you find it helpful. This kernel scored around 0.661 on the public leaderboard.
2. BiDirectional RNN(LSTM/GRU): TextCNN takes care of a lot of things. For example it takes care of words in close range. It is able to see &amp;ldquo;new york&amp;rdquo; together. But it still can&amp;rsquo;t take care of all the context provided in a particular text sequence. It still does not learn the seem to learn the sequential structure of the data, where every word is dependednt on the previous word. Or a word in the previous sentence.
RNN help us with that. They are able to remember previous information using hidden states and connect it to the current task.
Long Short Term Memory networks (LSTM) are a subclass of RNN, specialized in remembering information for a long period of time. More over the Bidirectional LSTM keeps the contextual information in both directions which is pretty useful in text classification task (But won&amp;rsquo;t work for a time sweries prediction task).
  For a most simplistic explanation of Bidirectional RNN, think of RNN cell as taking as input a hidden state(a vector) and the word vector and giving out an output vector and the next hidden state.
 Hidden state, Word vector -&amp;gt;(RNN Cell) -&amp;gt; Output Vector , Next Hidden state  For a sequence of length 4 like &amp;lsquo;you will never believe&amp;rsquo;, The RNN cell will give 4 output vectors. Which can be concatenated and then used as part of a dense feedforward architecture.
In the Bidirectional RNN the only change is that we read the text in the normal fashion as well in reverse. So we stack two RNNs in parallel and hence we get 8 output vectors to append.
Once we get the output vectors we send them through a series of dense layers and finally a softmax layer to build a text classifier.
Due to the limitations of RNNs like not remembering long term dependencies, in practice we almost always use LSTM/GRU to model long term dependencies. In such a case you can just think of the RNN cell being replaced by a LSTM cell or a GRU cell in the above figure. An example model is provided below. You can use CuDNNGRU interchangably with CuDNNLSTM, when you build models.
# BiDirectional LSTM def model_lstm_du(embedding_matrix): inp = Input(shape=(maxlen,)) x = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp) &amp;#39;&amp;#39;&amp;#39; Here 64 is the size(dim) of the hidden state vector as well as the output vector. Keeping return_sequence we want the output for the entire sequence. So what is the dimension of output for this layer? 64*70(maxlen)*2(bidirection concat) CuDNNLSTM is fast implementation of LSTM layer in Keras which only runs on GPU &amp;#39;&amp;#39;&amp;#39; x = Bidirectional(CuDNNLSTM(64, return_sequences=True))(x) avg_pool = GlobalAveragePooling1D()(x) max_pool = GlobalMaxPooling1D()(x) conc = concatenate([avg_pool, max_pool]) conc = Dense(64, activation=&amp;#34;relu&amp;#34;)(conc) conc = Dropout(0.1)(conc) outp = Dense(1, activation=&amp;#34;sigmoid&amp;#34;)(conc) model = Model(inputs=inp, outputs=outp) model.compile(loss=&amp;#39;binary_crossentropy&amp;#39;, optimizer=&amp;#39;adam&amp;#39;, metrics=[&amp;#39;accuracy&amp;#39;]) return model I have written a simplified and well commented code to run this network(taking input from a lot of other kernels) on a kaggle kernel for this competition. Do take a look there to learn the preprocessing steps, and the word to vec embeddings usage in this model. You will learn something. Please do upvote the kernel if you find it helpful. This kernel scored around 0.671 on the public leaderboard.
3. Attention Models The concept of Attention is relatively new as it comes from Hierarchical Attention Networks for Document Classification paper written jointly by CMU and Microsoft guys in 2016.
So in the past we used to find features from text by doing a keyword extraction. Some word are more helpful in determining the category of a text than others. But in this method we sort of lost the sequential structure of text. With LSTM and deep learning methods while we are able to take case of the sequence structure we lose the ability to give higher weightage to more important words. Can we have the best of both worlds?
And that is attention for you. In the author&amp;rsquo;s words:
 Not all words contribute equally to the representation of the sentence meaning. Hence, we introduce attention mechanism to extract such words that are important to the meaning of the sentence and aggregate the representation of those informative words to form a sentence vector
   In essense we want to create scores for every word in the text, which are the attention similarity score for a word.
To do this we start with a weight matrix(W), a bias vector(b) and a context vector u. All of them will be learned by the optimmization algorithm.
Then there are a series of mathematical operations. See the figure for more clarification. We can think of u1 as non linearity on RNN word output. After that v1 is a dot product of u1 with a context vector u raised to an exponentiation. From an intuition viewpoint, the value of v1 will be high if u and u1 are similar. Since we want the sum of scores to be 1, we divide v by the sum of v’s to get the Final Scores,s
These final scores are then multiplied by RNN output for words to weight them according to their importance. After which the outputs are summed and sent through dense layers and softmax for the task of text classification.
def dot_product(x, kernel): &amp;#34;&amp;#34;&amp;#34; Wrapper for dot product operation, in order to be compatible with both Theano and Tensorflow Args: x (): input kernel (): weights Returns: &amp;#34;&amp;#34;&amp;#34; if K.backend() == &amp;#39;tensorflow&amp;#39;: return K.squeeze(K.dot(x, K.expand_dims(kernel)), axis=-1) else: return K.dot(x, kernel) class AttentionWithContext(Layer): &amp;#34;&amp;#34;&amp;#34; Attention operation, with a context/query vector, for temporal data. Supports Masking. Follows the work of Yang et al. [https://www.cs.cmu.edu/~diyiy/docs/naacl16.pdf] &amp;#34;Hierarchical Attention Networks for Document Classification&amp;#34; by using a context vector to assist the attention # Input shape 3D tensor with shape: `(samples, steps, features)`. # Output shape 2D tensor with shape: `(samples, features)`. How to use: Just put it on top of an RNN Layer (GRU/LSTM/SimpleRNN) with return_sequences=True. The dimensions are inferred based on the output shape of the RNN. Note: The layer has been tested with Keras 2.0.6 Example: model.add(LSTM(64, return_sequences=True)) model.add(AttentionWithContext()) # next add a Dense layer (for classification/regression) or whatever... &amp;#34;&amp;#34;&amp;#34; def __init__(self, W_regularizer=None, u_regularizer=None, b_regularizer=None, W_constraint=None, u_constraint=None, b_constraint=None, bias=True, **kwargs): self.supports_masking = True self.init = initializers.get(&amp;#39;glorot_uniform&amp;#39;) self.W_regularizer = regularizers.get(W_regularizer) self.u_regularizer = regularizers.get(u_regularizer) self.b_regularizer = regularizers.get(b_regularizer) self.W_constraint = constraints.get(W_constraint) self.u_constraint = constraints.get(u_constraint) self.b_constraint = constraints.get(b_constraint) self.bias = bias super(AttentionWithContext, self).__init__(**kwargs) def build(self, input_shape): assert len(input_shape) == 3 self.W = self.add_weight((input_shape[-1], input_shape[-1],), initializer=self.init, name=&amp;#39;{}_W&amp;#39;.format(self.name), regularizer=self.W_regularizer, constraint=self.W_constraint) if self.bias: self.b = self.add_weight((input_shape[-1],), initializer=&amp;#39;zero&amp;#39;, name=&amp;#39;{}_b&amp;#39;.format(self.name), regularizer=self.b_regularizer, constraint=self.b_constraint) self.u = self.add_weight((input_shape[-1],), initializer=self.init, name=&amp;#39;{}_u&amp;#39;.format(self.name), regularizer=self.u_regularizer, constraint=self.u_constraint) super(AttentionWithContext, self).build(input_shape) def compute_mask(self, input, input_mask=None): # do not pass the mask to the next layers return None def call(self, x, mask=None): uit = dot_product(x, self.W) if self.bias: uit &#43;= self.b uit = K.tanh(uit) ait = dot_product(uit, self.u) a = K.exp(ait) # apply mask after the exp. will be re-normalized next if mask is not None: # Cast the mask to floatX to avoid float64 upcasting in theano a *= K.cast(mask, K.floatx()) # in some cases especially in the early stages of training the sum may be almost zero # and this results in NaN&amp;#39;s. A workaround is to add a very small positive number ε to the sum. # a /= K.cast(K.sum(a, axis=1, keepdims=True), K.floatx()) a /= K.cast(K.sum(a, axis=1, keepdims=True) &#43; K.epsilon(), K.floatx()) a = K.expand_dims(a) weighted_input = x * a return K.sum(weighted_input, axis=1) def compute_output_shape(self, input_shape): return input_shape[0], input_shape[-1] def model_lstm_atten(embedding_matrix): inp = Input(shape=(maxlen,)) x = Embedding(max_features, embed_size, weights=[embedding_matrix], trainable=False)(inp) x = Bidirectional(CuDNNLSTM(128, return_sequences=True))(x) x = Bidirectional(CuDNNLSTM(64, return_sequences=True))(x) x = AttentionWithContext()(x) x = Dense(64, activation=&amp;#34;relu&amp;#34;)(x) x = Dense(1, activation=&amp;#34;sigmoid&amp;#34;)(x) model = Model(inputs=inp, outputs=x) model.compile(loss=&amp;#39;binary_crossentropy&amp;#39;, optimizer=&amp;#39;adam&amp;#39;, metrics=[&amp;#39;accuracy&amp;#39;]) return model I have written a simplified and well commented code to run this network(taking input from a lot of other kernels) on a kaggle kernel for this competition. Do take a look there to learn the preprocessing steps, and the word to vec embeddings usage in this model. You will learn something. Please do upvote the kernel if you find it helpful. This kernel scored around 0.682 on the public leaderboard.
Hope that Helps! Do checkout the kernels for all the networks and see the comments too. I will try to write a part 2 of this post where I would like to talk about capsule networks and more techniques as they get used in this competition.
Here are the kernel links again: TextCNN,BiLSTM/GRU,Attention
Do upvote the kenels if you find them helpful.
References:  CNN for NLP https://en.diveintodeeplearning.org/d2l-en.pdf https://gist.github.com/cbaziotis/7ef97ccf71cbc14366835198c09809d2 http://univagora.ro/jour/index.php/ijccc/article/view/3142 Shujian&amp;rsquo;s kernel on Kaggle  ]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>To all Data Scientists - The one Graph Algorithm you need to know</title>
      <link>https://mlwhiz.com/blog/2018/12/07/connected_components/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2018/12/07/connected_components/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.comhttps://upload.wikimedia.org/wikipedia/commons/8/85/Pseudoforest.svg"></media:content>
      

      
      <description>Graphs provide us with a very useful data structure. They can help us to find structure within our data. With the advent of Machine learning and big data we need to get as much information as possible about our data. Learning a little bit of graph theory can certainly help us with that.
Here is a Graph Analytics for Big Data course on Coursera by UCSanDiego which I highly recommend to learn the basics of graph theory.</description>

      <content:encoded>  
        
        <![CDATA[  Graphs provide us with a very useful data structure. They can help us to find structure within our data. With the advent of Machine learning and big data we need to get as much information as possible about our data. Learning a little bit of graph theory can certainly help us with that.
Here is a Graph Analytics for Big Data course on Coursera by UCSanDiego which I highly recommend to learn the basics of graph theory. You can start for free with the 7-day Free Trial.
One of the algorithms I am going to focus in the current post is called Connected Components. Why it is important. We all know clustering.
You can think of Connected Components in very layman&amp;rsquo;s terms as sort of a hard clustering algorithm which finds clusters/islands in related/connected data. As a concrete example: Say you have data about roads joining any two cities in the world. And you need to find out all the continents in the world and which city they contain.
How will you achieve that? Come on give some thought.
To put a Retail Perspective: Lets say, we have a lot of customers using a lot of accounts. One way in which we can use the Connected components algorithm is to find out distinct families in our dataset. We can assume edges(roads) between CustomerIDs based on same credit card usage, or same address or same mobile number etc. Once we have those connections, we can then run the connected component algorithm on the same to create individual clusters to which we can then assign a family ID. We can use these family IDs to provide personalized recommendations based on a family needs. We can also use this family ID to fuel our classification algorithms by creating grouped features based on family.
In Finance Perspective: Another use case would be to capture fraud using these family IDs. If an account has done fraud in past, it is highly probable that the connected accounts are also susceptible to fraud.
So enough of use cases. Lets start with a simple graph class written in Python to start up our exploits with code.
This post will revolve more around code from here onwards.
&amp;#34;&amp;#34;&amp;#34; A Python Class A simple Python graph class, demonstrating the essential facts and functionalities of graphs. Taken from https://www.python-course.eu/graphs_python.php Changed the implementation a little bit to include weighted edges &amp;#34;&amp;#34;&amp;#34; class Graph(object): def __init__(self, graph_dict=None): &amp;#34;&amp;#34;&amp;#34; initializes a graph object If no dictionary or None is given, an empty dictionary will be used &amp;#34;&amp;#34;&amp;#34; if graph_dict == None: graph_dict = {} self.__graph_dict = graph_dict def vertices(self): &amp;#34;&amp;#34;&amp;#34; returns the vertices of a graph &amp;#34;&amp;#34;&amp;#34; return list(self.__graph_dict.keys()) def edges(self): &amp;#34;&amp;#34;&amp;#34; returns the edges of a graph &amp;#34;&amp;#34;&amp;#34; return self.__generate_edges() def add_vertex(self, vertex): &amp;#34;&amp;#34;&amp;#34; If the vertex &amp;#34;vertex&amp;#34; is not in self.__graph_dict, a key &amp;#34;vertex&amp;#34; with an empty dict as a value is added to the dictionary. Otherwise nothing has to be done. &amp;#34;&amp;#34;&amp;#34; if vertex not in self.__graph_dict: self.__graph_dict[vertex] = {} def add_edge(self, edge,weight=1): &amp;#34;&amp;#34;&amp;#34; assumes that edge is of type set, tuple or list &amp;#34;&amp;#34;&amp;#34; edge = set(edge) (vertex1, vertex2) = tuple(edge) if vertex1 in self.__graph_dict: self.__graph_dict[vertex1][vertex2] = weight else: self.__graph_dict[vertex1] = {vertex2:weight} if vertex2 in self.__graph_dict: self.__graph_dict[vertex2][vertex1] = weight else: self.__graph_dict[vertex2] = {vertex1:weight} def __generate_edges(self): &amp;#34;&amp;#34;&amp;#34; A static method generating the edges of the graph &amp;#34;graph&amp;#34;. Edges are represented as sets with one (a loop back to the vertex) or two vertices &amp;#34;&amp;#34;&amp;#34; edges = [] for vertex in self.__graph_dict: for neighbour,weight in self.__graph_dict[vertex].iteritems(): if (neighbour, vertex, weight) not in edges: edges.append([vertex, neighbour, weight]) return edges def __str__(self): res = &amp;#34;vertices: &amp;#34; for k in self.__graph_dict: res &#43;= str(k) &#43; &amp;#34; &amp;#34; res &#43;= &amp;#34;\nedges: &amp;#34; for edge in self.__generate_edges(): res &#43;= str(edge) &#43; &amp;#34; &amp;#34; return res def adj_mat(self): return self.__graph_dict You can certainly play with our new graph class.Here we try to build some graphs.
g = { &amp;#34;a&amp;#34; : {&amp;#34;d&amp;#34;:2}, &amp;#34;b&amp;#34; : {&amp;#34;c&amp;#34;:2}, &amp;#34;c&amp;#34; : {&amp;#34;b&amp;#34;:5, &amp;#34;d&amp;#34;:3, &amp;#34;e&amp;#34;:5} } graph = Graph(g) print(&amp;#34;Vertices of graph:&amp;#34;) print(graph.vertices()) print(&amp;#34;Edges of graph:&amp;#34;) print(graph.edges()) print(&amp;#34;Add vertex:&amp;#34;) graph.add_vertex(&amp;#34;z&amp;#34;) print(&amp;#34;Vertices of graph:&amp;#34;) print(graph.vertices()) print(&amp;#34;Add an edge:&amp;#34;) graph.add_edge({&amp;#34;a&amp;#34;,&amp;#34;z&amp;#34;}) print(&amp;#34;Vertices of graph:&amp;#34;) print(graph.vertices()) print(&amp;#34;Edges of graph:&amp;#34;) print(graph.edges()) print(&amp;#39;Adding an edge {&amp;#34;x&amp;#34;,&amp;#34;y&amp;#34;} with new vertices:&amp;#39;) graph.add_edge({&amp;#34;x&amp;#34;,&amp;#34;y&amp;#34;}) print(&amp;#34;Vertices of graph:&amp;#34;) print(graph.vertices()) print(&amp;#34;Edges of graph:&amp;#34;) print(graph.edges()) Vertices of graph: [&#39;a&#39;, &#39;c&#39;, &#39;b&#39;] Edges of graph: [[&#39;a&#39;, &#39;d&#39;, 2], [&#39;c&#39;, &#39;b&#39;, 5], [&#39;c&#39;, &#39;e&#39;, 5], [&#39;c&#39;, &#39;d&#39;, 3], [&#39;b&#39;, &#39;c&#39;, 2]] Add vertex: Vertices of graph: [&#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;z&#39;] Add an edge: Vertices of graph: [&#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;z&#39;] Edges of graph: [[&#39;a&#39;, &#39;z&#39;, 1], [&#39;a&#39;, &#39;d&#39;, 2], [&#39;c&#39;, &#39;b&#39;, 5], [&#39;c&#39;, &#39;e&#39;, 5], [&#39;c&#39;, &#39;d&#39;, 3], [&#39;b&#39;, &#39;c&#39;, 2], [&#39;z&#39;, &#39;a&#39;, 1]] Adding an edge {&#34;x&#34;,&#34;y&#34;} with new vertices: Vertices of graph: [&#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;y&#39;, &#39;x&#39;, &#39;z&#39;] Edges of graph: [[&#39;a&#39;, &#39;z&#39;, 1], [&#39;a&#39;, &#39;d&#39;, 2], [&#39;c&#39;, &#39;b&#39;, 5], [&#39;c&#39;, &#39;e&#39;, 5], [&#39;c&#39;, &#39;d&#39;, 3], [&#39;b&#39;, &#39;c&#39;, 2], [&#39;y&#39;, &#39;x&#39;, 1], [&#39;x&#39;, &#39;y&#39;, 1], [&#39;z&#39;, &#39;a&#39;, 1]]  Lets do something interesting now.
We will use the above graph class for our understanding purpose. There are many Modules in python which we can use to do whatever I am going to do next,but to understand the methods we will write everything from scratch. Lets start with an example graph which we can use for our purpose.
  g = {&amp;#39;Frankfurt&amp;#39;: {&amp;#39;Mannheim&amp;#39;:85, &amp;#39;Wurzburg&amp;#39;:217, &amp;#39;Kassel&amp;#39;:173}, &amp;#39;Mannheim&amp;#39;: {&amp;#39;Frankfurt&amp;#39;:85, &amp;#39;Karlsruhe&amp;#39;:80}, &amp;#39;Karlsruhe&amp;#39;: {&amp;#39;Augsburg&amp;#39;:250, &amp;#39;Mannheim&amp;#39;:80}, &amp;#39;Augsburg&amp;#39;: {&amp;#39;Karlsruhe&amp;#39;:250, &amp;#39;Munchen&amp;#39;:84}, &amp;#39;Wurzburg&amp;#39;: {&amp;#39;Erfurt&amp;#39;:186, &amp;#39;Numberg&amp;#39;:103,&amp;#39;Frankfurt&amp;#39;:217}, &amp;#39;Erfurt&amp;#39;: {&amp;#39;Wurzburg&amp;#39;:186}, &amp;#39;Numberg&amp;#39;: {&amp;#39;Wurzburg&amp;#39;:103, &amp;#39;Stuttgart&amp;#39;:183,&amp;#39;Munchen&amp;#39;:167}, &amp;#39;Munchen&amp;#39;: {&amp;#39;Numberg&amp;#39;:167, &amp;#39;Augsburg&amp;#39;:84,&amp;#39;Kassel&amp;#39;:502}, &amp;#39;Kassel&amp;#39;: {&amp;#39;Frankfurt&amp;#39;:173, &amp;#39;Munchen&amp;#39;:502}, &amp;#39;Stuttgart&amp;#39;: {&amp;#39;Numberg&amp;#39;:183} } graph = Graph(g) print(&amp;#34;Vertices of graph:&amp;#34;) print(graph.vertices()) print(&amp;#34;Edges of graph:&amp;#34;) print(graph.edges()) Vertices of graph: [&#39;Mannheim&#39;, &#39;Erfurt&#39;, &#39;Munchen&#39;, &#39;Numberg&#39;, &#39;Stuttgart&#39;, &#39;Augsburg&#39;, &#39;Kassel&#39;, &#39;Frankfurt&#39;, &#39;Wurzburg&#39;, &#39;Karlsruhe&#39;] Edges of graph: [[&#39;Mannheim&#39;, &#39;Frankfurt&#39;, 85], [&#39;Mannheim&#39;, &#39;Karlsruhe&#39;, 80], [&#39;Erfurt&#39;, &#39;Wurzburg&#39;, 186], [&#39;Munchen&#39;, &#39;Numberg&#39;, 167], [&#39;Munchen&#39;, &#39;Augsburg&#39;, 84], [&#39;Munchen&#39;, &#39;Kassel&#39;, 502], [&#39;Numberg&#39;, &#39;Stuttgart&#39;, 183], [&#39;Numberg&#39;, &#39;Wurzburg&#39;, 103], [&#39;Numberg&#39;, &#39;Munchen&#39;, 167], [&#39;Stuttgart&#39;, &#39;Numberg&#39;, 183], [&#39;Augsburg&#39;, &#39;Munchen&#39;, 84], [&#39;Augsburg&#39;, &#39;Karlsruhe&#39;, 250], [&#39;Kassel&#39;, &#39;Munchen&#39;, 502], [&#39;Kassel&#39;, &#39;Frankfurt&#39;, 173], [&#39;Frankfurt&#39;, &#39;Mannheim&#39;, 85], [&#39;Frankfurt&#39;, &#39;Wurzburg&#39;, 217], [&#39;Frankfurt&#39;, &#39;Kassel&#39;, 173], [&#39;Wurzburg&#39;, &#39;Numberg&#39;, 103], [&#39;Wurzburg&#39;, &#39;Erfurt&#39;, 186], [&#39;Wurzburg&#39;, &#39;Frankfurt&#39;, 217], [&#39;Karlsruhe&#39;, &#39;Mannheim&#39;, 80], [&#39;Karlsruhe&#39;, &#39;Augsburg&#39;, 250]]  Lets say we are given a graph with the cities of Germany and respective distance between them. You want to find out how to go from Frankfurt (The starting node) to Munchen. There might be many ways in which you can traverse the graph but you need to find how many cities you will need to visit on a minimum to go from frankfurt to Munchen) This problem is analogous to finding out distance between nodes in an unweighted graph.
The algorithm that we use here is called as Breadth First Search.
def min_num_edges_between_nodes(graph,start_node): distance = 0 shortest_path = [] queue = [start_node] #FIFO levels = {} levels[start_node] = 0 shortest_paths = {} shortest_paths[start_node] = &amp;#34;:&amp;#34; visited = [start_node] while len(queue)!=0: start = queue.pop(0) neighbours = graph[start] for neighbour,_ in neighbours.iteritems(): if neighbour not in visited: queue.append(neighbour) visited.append(neighbour) levels[neighbour] = levels[start]&#43;1 shortest_paths[neighbour] = shortest_paths[start] &#43;&amp;#34;-&amp;gt;&amp;#34;&#43; start return levels, shortest_paths What we do in the above piece of code is create a queue and traverse it based on levels. We start with Frankfurt as starting node. We loop through its neighbouring cities(Menheim, Wurzburg and Kassel) and push them into the queue. We keep track of what level they are at and also the path through which we reached them. Since we are popping a first element of a queue we are sure we will visit cities in the order of their level.
Checkout this good post about BFS to understand more about queues and BFS.
min_num_edges_between_nodes(g,&amp;#39;Frankfurt&amp;#39;) ({&#39;Augsburg&#39;: 3, &#39;Erfurt&#39;: 2, &#39;Frankfurt&#39;: 0, &#39;Karlsruhe&#39;: 2, &#39;Kassel&#39;: 1, &#39;Mannheim&#39;: 1, &#39;Munchen&#39;: 2, &#39;Numberg&#39;: 2, &#39;Stuttgart&#39;: 3, &#39;Wurzburg&#39;: 1}, {&#39;Augsburg&#39;: &#39;:-Frankfurt-Mannheim-Karlsruhe&#39;, &#39;Erfurt&#39;: &#39;:-Frankfurt-Wurzburg&#39;, &#39;Frankfurt&#39;: &#39;:&#39;, &#39;Karlsruhe&#39;: &#39;:-Frankfurt-Mannheim&#39;, &#39;Kassel&#39;: &#39;:-Frankfurt&#39;, &#39;Mannheim&#39;: &#39;:-Frankfurt&#39;, &#39;Munchen&#39;: &#39;:-Frankfurt-Kassel&#39;, &#39;Numberg&#39;: &#39;:-Frankfurt-Wurzburg&#39;, &#39;Stuttgart&#39;: &#39;:-Frankfurt-Wurzburg-Numberg&#39;, &#39;Wurzburg&#39;: &#39;:-Frankfurt&#39;})  I did this example to show how BFS algorithm works. We can extend this algorithm to find out connected components in an unconnected graph. Lets say we need to find groups of unconnected vertices in the graph.
For example: the below graph has 3 unconnected sub-graphs. Can we find what nodes belong to a particular subgraph?
  #We add another countries in the loop  graph = Graph(g) graph.add_edge((&amp;#34;Mumbai&amp;#34;, &amp;#34;Delhi&amp;#34;),400) graph.add_edge((&amp;#34;Delhi&amp;#34;, &amp;#34;Kolkata&amp;#34;),500) graph.add_edge((&amp;#34;Kolkata&amp;#34;, &amp;#34;Bangalore&amp;#34;),600) graph.add_edge((&amp;#34;TX&amp;#34;, &amp;#34;NY&amp;#34;),1200) graph.add_edge((&amp;#34;ALB&amp;#34;, &amp;#34;NY&amp;#34;),800) g = graph.adj_mat() def bfs_connected_components(graph): connected_components = [] nodes = graph.keys() while len(nodes)!=0: start_node = nodes.pop() queue = [start_node] #FIFO visited = [start_node] while len(queue)!=0: start = queue[0] queue.remove(start) neighbours = graph[start] for neighbour,_ in neighbours.iteritems(): if neighbour not in visited: queue.append(neighbour) visited.append(neighbour) nodes.remove(neighbour) connected_components.append(visited) return connected_components print bfs_connected_components(g) The above code is similar to the previous BFS code. We keep all the vertices of the graph in the nodes list. We take a node from the nodes list and start BFS on it. as we visit a node we remove that node from the nodes list. Whenever the BFS completes we start again with another node in the nodes list until the nodes list is empty.
[[&#39;Kassel&#39;, &#39;Munchen&#39;, &#39;Frankfurt&#39;, &#39;Numberg&#39;, &#39;Augsburg&#39;, &#39;Mannheim&#39;, &#39;Wurzburg&#39;, &#39;Stuttgart&#39;, &#39;Karlsruhe&#39;, &#39;Erfurt&#39;], [&#39;Bangalore&#39;, &#39;Kolkata&#39;, &#39;Delhi&#39;, &#39;Mumbai&#39;], [&#39;NY&#39;, &#39;ALB&#39;, &#39;TX&#39;]]  As you can see we are able to find distinct components in our data. Just by using Edges and Vertices. This algorithm could be run on different data to satisfy any use case I presented above.
But Normally using Connected Components for a retail case will involve a lot of data and you will need to scale this algorithm.
Connected Components in PySpark Below is an implementation from this paper on Connected Components in MapReduce and Beyond from Google Research. Read the PPT to understand the implementation better. Some ready to use code for you.
def create_edges(line): a = [int(x) for x in line.split(&amp;#34; &amp;#34;)] edges_list=[] for i in range(0, len(a)-1): for j in range(i&#43;1 ,len(a)): edges_list.append((a[i],a[j])) edges_list.append((a[j],a[i])) return edges_list # adj_list.txt is a txt file containing adjacency list of the graph. adjacency_list = sc.textFile(&amp;#34;adj_list.txt&amp;#34;) edges_rdd = adjacency_list.flatMap(lambda line : create_edges(line)).distinct() def largeStarInit(record): a, b = record yield (a,b) yield (b,a) def largeStar(record): a, b = record t_list = list(b) t_list.append(a) list_min = min(t_list) for x in b: if a &amp;lt; x: yield (x,list_min) def smallStarInit(record): a, b = record if b&amp;lt;=a: yield (a,b) else: yield (b,a) def smallStar(record): a, b = record t_list = list(b) t_list.append(a) list_min = min(t_list) for x in t_list: if x!=list_min: yield (x,list_min) #Handle case for single nodes def single_vertex(line): a = [int(x) for x in line.split(&amp;#34; &amp;#34;)] edges_list=[] if len(a)==1: edges_list.append((a[0],a[0])) return edges_list iteration_num =0 while 1==1: if iteration_num==0: print &amp;#34;iter&amp;#34;, iteration_num large_star_rdd = edges_rdd.groupByKey().flatMap(lambda x : largeStar(x)) small_star_rdd = large_star_rdd.flatMap(lambda x : smallStarInit(x)).groupByKey().flatMap(lambda x : smallStar(x)).distinct() iteration_num &#43;= 1 else: print &amp;#34;iter&amp;#34;, iteration_num large_star_rdd = small_star_rdd.flatMap(lambda x: largeStarInit(x)).groupByKey().flatMap(lambda x : largeStar(x)).distinct() small_star_rdd = large_star_rdd.flatMap(lambda x : smallStarInit(x)).groupByKey().flatMap(lambda x : smallStar(x)).distinct() iteration_num &#43;= 1 #check Convergence changes = (large_star_rdd.subtract(small_star_rdd).union(small_star_rdd.subtract(large_star_rdd))).collect() if len(changes) == 0 : break single_vertex_rdd = adjacency_list.flatMap(lambda line : single_vertex(line)).distinct() answer = single_vertex_rdd.collect() &#43; large_star_rdd.collect() print answer[:10] Or Use GraphFrames in PySpark To Install graphframes:
I ran on command line: pyspark &amp;ndash;packages graphframes:graphframes:0.5.0-spark2.1-s_2.11 which opened up my notebook and installed graphframes after i try to import in my notebook.
The string to be formatted as : graphframes:(latest version)-spark(your spark version)-s_(your scala version).
Checkout this guide on how to use GraphFrames for more information.
from graphframes import * def vertices(line): vert = [int(x) for x in line.split(&amp;#34; &amp;#34;)] return vert vertices = adjacency_list.flatMap(lambda x: vertices(x)).distinct().collect() vertices = sqlContext.createDataFrame([[x] for x in vertices], [&amp;#34;id&amp;#34;]) def create_edges(line): a = [int(x) for x in line.split(&amp;#34; &amp;#34;)] edges_list=[] if len(a)==1: edges_list.append((a[0],a[0])) for i in range(0, len(a)-1): for j in range(i&#43;1 ,len(a)): edges_list.append((a[i],a[j])) edges_list.append((a[j],a[i])) return edges_list edges = adjacency_list.flatMap(lambda x: create_edges(x)).distinct().collect() edges = sqlContext.createDataFrame(edges, [&amp;#34;src&amp;#34;, &amp;#34;dst&amp;#34;]) g = GraphFrame(vertices, edges) sc.setCheckpointDir(&amp;#34;.&amp;#34;) # graphframes uses the same paper we referenced apparently cc = g.connectedComponents() print cc.show() The GraphFrames library implements the CC algorithm as well as a variety of other graph algorithms.
The above post was a lot of code but hope it was helpful. It took me a lot of time to implement the algorithm so wanted to make it easy for the folks.
If you want to read up more on Graph Algorithms here is an Graph Analytics for Big Data course on Coursera by UCSanDiego which I highly recommend to learn the basics of graph theory.
References  Graphs in Python A Gentle Intoduction to Graph Theory Blog Graph Analytics for Big Data course on Coursera by UCSanDiego  ]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Object Detection: An End to End Theoretical Perspective</title>
      <link>https://mlwhiz.com/blog/2018/09/22/object_detection/</link>
      <pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2018/09/22/object_detection/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.comimages/id1.png"></media:content>
      

      
      <description>We all know about the image classification problem. Given an image can you find out the class the image belongs to? We can solve any new image classification problem with ConvNets and Transfer Learning using pre-trained nets. ConvNet as fixed feature extractor. Take a ConvNet pretrained on ImageNet, remove the last fully-connected layer (this layer&amp;amp;rsquo;s outputs are the 1000 class scores for a different task like ImageNet), then treat the rest of the ConvNet as a fixed feature extractor for the new dataset.</description>

      <content:encoded>  
        
        <![CDATA[  We all know about the image classification problem. Given an image can you find out the class the image belongs to? We can solve any new image classification problem with ConvNets and Transfer Learning using pre-trained nets. ConvNet as fixed feature extractor. Take a ConvNet pretrained on ImageNet, remove the last fully-connected layer (this layer&amp;rsquo;s outputs are the 1000 class scores for a different task like ImageNet), then treat the rest of the ConvNet as a fixed feature extractor for the new dataset. In an AlexNet, this would compute a 4096-D vector for every image that contains the activations of the hidden layer immediately before the classifier. We call these features CNN codes. It is important for performance that these codes are ReLUd (i.e. thresholded at zero) if they were also thresholded during the training of the ConvNet on ImageNet (as is usually the case). Once you extract the 4096-D codes for all images, train a linear classifier (e.g. Linear SVM or Softmax classifier) for the new dataset.  As a side note: if you want to know more about convnets and Transfer Learning I would like to recommend this awesome course on Deep Learning in Computer Vision in the Advanced machine learning specialization. You can start for free with the 7-day Free Trial. This course talks about various CNN architetures and covers a wide variety of problems in the image domain including detection and segmentation.
But there are a lot many interesting problems in the Image domain. The one which we are going to focus on today is the Segmentation, Localization and Detection problem. So what are these problems?
  So these problems are divided into 4 major buckets. In the next few lines I would try to explain each of these problems concisely before we take a deeper dive:
 Semantic Segmentation: Given an image, can we classify each pixel as belonging to a particular class? Classification&#43;Localization: We were able to classify an image as a cat. Great. Can we also get the location of the said cat in that image by drawing a bounding box around the cat? Here we assume that there is a fixed number(commonly 1) in the image. Object Detection: A More general case of the Classification&#43;Localization problem. In a real-world setting, we don&amp;rsquo;t know how many objects are in the image beforehand. So can we detect all the objects in the image and draw bounding boxes around them? Instance Segmentation: Can we create masks for each individual object in the image? It is different from semantic segmentation. How? If you look in the 4th image on the top, we won&amp;rsquo;t be able to distinguish between the two dogs using semantic segmentation procedure as it would sort of merge both the dogs together.  In this post, we will focus mainly on Object Detection.
Classification&#43;Localization So lets first try to understand how we can solve the problem when we have a single object in the image. The Classification&#43;Localization case. Pretty neatly said in the CS231n notes:
Treat localization as a regression problem!    Input Data: Lets first talk about what sort of data such sort of model expects. Normally in an image classification setting we used to have data in the form (X,y) where X is the image and y used to be the class labels. In the Classification&#43;Localization setting we will have data normally in the form (X,y), where X is still the image and y is a array containing (class_label, x,y,w,h) where,
x = bounding box top left corner x-coordinate
y = bounding box top left corner y-coordinate
w = width of bounding box in pixel
h = height of bounding box in pixel
Model: So in this setting we create a multi-output model which takes an image as the input and has (n_labels &#43; 4) output nodes. n_labels nodes for each of the output class and 4 nodes that give the predictions for (x,y,w,h).
Loss: In such a setting setting up the loss is pretty important. Normally the loss is a weighted sum of the Softmax Loss(from the Classification Problem) and the regression L2 loss(from the bounding box coordinates).
$$Loss = alpha*SoftmaxLoss &#43; (1-alpha)*L2Loss$$
Since these two losses would be on a different scale, the alpha hyper-parameter needs to be tuned.
There is one thing I would like to note here. We are trying to do object localization task but we still have our convnets in place here. We are just adding one more output layer to also predict the coordinates of the bounding box and tweaking our loss function. And here in lies the essence of the whole Deep Learning framework - Stack layers on top of each other, reuse components to create better models, and create architectures to solve your own problem. And that is what we are going to see a lot going forward.
Object Detection So how does this idea of localization using regression get mapped to Object Detection? It doesn&amp;rsquo;t. We don&amp;rsquo;t have a fixed number of objects. So we can&amp;rsquo;t have 4 outputs denoting, the bounding box coordinates.
One naive idea could be to apply a CNN to many different crops of the image, CNN classifies each crop as object class or background class. This is intractable. There could be a lot of such crops that you can create.
Region Proposals: If just there was a method(Normally called Region Proposal Network)which could find some cropped regions for us automatically, we could just run our convnet on those regions and be done with object detection. And that is what selective search (Uijlings et al, &amp;ldquo;Selective Search for Object Recognition&amp;rdquo;, IJCV 2013) provided for RCNN.
So what are Region Proposals:
 Find &amp;ldquo;blobby&amp;rdquo; image regions that are likely to contain objects Relatively fast to run; e.g. Selective Search gives 2000 region proposals in a few seconds on CPU  How the region proposals are being made?
Selective Search for Object Recognition: So this paper starts with a set of some initial regions using 13 Graph-based image segmentation techniques generally represent the problem in terms of a graph G = (V, E) where each node v ∈ V corresponds to a pixel in the image, and the edges in E connect certain pairs of neighboring pixels. A weight is associated with each edge based on some property of the pixels that it connects, such as their image intensities. Depending on the method, there may or may not be an edge connecting each pair of vertices.  In this paper they take an approach: Each edge (vi , vj )∈ E has a corresponding weight w((vi , vj )), which is a non-negative measure of the dissimilarity between neighboring elements vi and vj . In the case of image segmentation, the elements in V are pixels and the weight of an edge is some measure of the dissimilarity between the two pixels connected by that edge (e.g., the difference in intensity, color, motion, location or some other local attribute). In the graph-based approach, a segmentation S is a partition of V into components such that each component (or region) C ∈ S corresponds to a connected component in a graph.   
As you can see if we create bounding boxes around these masks we will be losing a lot of regions. We want to have the whole baseball player in a single bounding box/frame. We need to somehow group these initial regions. For that the authors of Selective Search for Object Recognition apply the Hierarchical Grouping algorithm to these initial regions. In this algorithm they merge most similar regions together based on different notions of similarity based on colour, texture, size and fill.
    RCNN The above selective search is the region proposal they used in RCNN paper. But what is RCNN and how does it use region proposals?
  Object detection system overview. Our system (1) takes an input image, (2) extracts around 2000 bottom-up region proposals, (3) computes features for each proposal using a large convolutional neural network (CNN), and then (4) classifies each region using class-specific linear SVM.  Along with this, the authors have also used a class specific bounding box regressor, that takes: Input : (Px,Py,Ph,Pw) - the location of the proposed region. Target: (Gx,Gy,Gh,Gw) - Ground truth labels for the region. The goal is to learn a transformation that maps the proposed region(P) to the Ground truth box(G) ### Training RCNN What is the input to an RCNN? So we have got an image, Region Proposals from the RPN strategy and the ground truths of the labels (labels, ground truth boxes) Next we treat all region proposals with ≥ 0.5 IoU(Intersection over union) overlap with a ground-truth box as positive training example for that box&#39;s class and the rest as negative. We train class specific SVM&#39;s So every region proposal becomes a training example. and the convnet gives a feature vector for that region proposal. We can then train our n-SVMs using the class specific data. ### Test Time RCNN At test time we predict detection boxes using class specific SVMs. We will be getting a lot of overlapping detection boxes at the time of testing. Non-maximum suppression is an integral part of the object detection pipeline. First, it sorts all detection boxes on the basis of their scores. The detection box M with the maximum score is selected and all other detection boxes with a significant overlap (using a pre-defined threshold) with M are suppressed. This process is recursively applied on the remaining boxes   Problems with RCNN: Training is slow. Inference (detection) is slow. 47s / image with VGG16 - Since the Convnet needs to be run many times.
Need for speed. Hence comes in picture by the same authors:
Fast RCNN So the next idea from the same authors: Why not create convolution map of input image and then just select the regions from that convolutional map? Do we really need to run so many convnets? What we can do is run just a single convnet and then apply region proposal crops on the features calculated by the convnet and use a simple SVM to classify those crops.  Something like:   From Paper: Fig. illustrates the Fast R-CNN architecture. A Fast R-CNN network takes as input an entire image and a set of object proposals. The network first processes the whole image with several convolutional (conv) and max pooling layers to produce a conv feature map. Then, for each object proposal a region of interest (RoI) pooling layer extracts a fixed-length feature vector from the feature map. Each feature vector is fed into a sequence of fully connected (fc) layers that finally branch into two sibling output layers: one that produces softmax probability estimates over K object classes plus a catch-all &#34;background&#34; class and another layer that outputs four real-valued numbers for each of the K object classes. Each set of 4 values encodes refined bounding-box positions for one of the K classes.  This idea depends a little upon the architecture of the model that get used too. Do we take the 4096 bottleneck layer from VGG16? So the architecture that the authors have proposed is: We experiment with three pre-trained ImageNet [4] networks, each with five max pooling layers and between five and thirteen conv layers (see Section 4.1 for network details). When a pre-trained network initializes a Fast R-CNN network, it undergoes three transformations. First, the last max pooling layer is replaced by a RoI pooling layer that is configured by setting H and W to be compatible with the net&#39;s first fully connected layer (e.g., H = W = 7 for VGG16). Second, the network&#39;s last fully connected layer and softmax (which were trained for 1000-way ImageNet classification) are replaced with the two sibling layers described earlier (a fully connected layer and softmax over K &#43; 1 categories and category-specific bounding-box regressors). Third, the network is modified to take two data inputs: a list of images and a list of RoIs in those images.  This obviously is a little confusing and &#34;hairy&#34;, let us break this down. But for that, we need to see the VGG16 architecture.   The last pooling layer is 7x7x512. This is the layer the network authors intend to replace by the ROI pooling layers. This pooling layer has got as input the location of the region proposal(xmin_roi,ymin_roi,h_roi,w_roi) and the previous feature map(14x14x512).
  Now the location of ROI coordinates are in the units of the input image i.e. 224x224 pixels. But the layer on which we have to apply the ROI pooling operation is 14x14x512. As we are using VGG we will transform image (224 x 224 x 3) into (14 x 14 x 512) - height and width is divided by 16. we can map ROIs coordinates onto the feature map just by dividing them by 16.
In its depth, the convolutional feature map has encoded all the information for the image while maintaining the location of the &#34;things&#34; it has encoded relative to the original image. For example, if there was a red square on the top left of the image and the convolutional layers activate for it, then the information for that red square would still be on the top left of the convolutional feature map.  How the ROI pooling is done?   In the above image our region proposal is (0,3,5,7) and we divide that area into 4 regions since we want to have a ROI pooling layer of 2x2.
How do you do ROI-Pooling on Areas smaller than the target size? if region proposal size is 5x5 and ROI pooling layer of size 7x7. If this happens, we resize to 35x35 just by copying 7 times each cell and then max-pooling back to 7x7.
After replacing the pooling layer, the authors also replaced the 1000 layer imagenet classification layer by a fully connected layer and softmax over K &#43; 1 categories(&#43;1 for Background) and category-specific bounding-box regressors.
Training Fast-RCNN What is the input to an Fast- RCNN?
Pretty much similar: So we have got an image, Region Proposals from the RPN strategy and the ground truths of the labels (labels, ground truth boxes)
Next we treat all region proposals with ≥ 0.5 IoU(Intersection over union) overlap with a ground-truth box as positive training example for that box&amp;rsquo;s class and the rest as negative. This time we have a dense layer on top, and we use multi task loss.
So every ROI becomes a training example. The main difference is that there is concept of multi-task loss:
A Fast R-CNN network has two sibling output layers. The first outputs a discrete probability distribution (per RoI), p = (p0, . . . , pK), over K &#43; 1 categories. As usual, p is computed by a softmax over the K&#43;1 outputs of a fully connected layer. The second sibling layer outputs bounding-box regression offsets, t= (tx , ty , tw, th), for each of the K object classes. Each training RoI is labeled with a ground-truth class u and a ground-truth bounding-box regression target v. We use a multi-task loss L on each labeled RoI to jointly train for classification and bounding-box regression
  Where Lcls is the softmax classification loss and Lloc is the regression loss. u=0 is for BG class and hence we add to loss only when we have a boundary box for any of the other class. Further:
  Problem:   Faster-RCNN The next question that got asked was : Can the network itself do region proposals?
The intuition is that: With FastRCNN we&#39;re already computing an Activation Map in the CNN, why not run the Activation Map through a few more layers to find the interesting regions, and then finish off the forward pass by predicting the classes &#43; bbox coordinates?    How does the Region Proposal Network work? One of the main idea in the paper is the idea of Anchors. Anchors are fixed bounding boxes that are placed throughout the image with different sizes and ratios that are going to be used for reference when first predicting object locations.
So first of all we define anchor centers on the image.
  The anchor centers are separated by 16 px in case of VGG16 network as the final convolution layer of (14x14x512) subsamples the image by a factor of 16(224&amp;frasl;14). This is how anchors look like:
   So we start with some predefined regions we think our objects could be with Anchors. Our RPN Classifies which regions have the object and the offset of the object bounding box. 1 if IOU for anchor with bounding box&amp;gt;0.5 0 otherwise. Non-Maximum suppression to reduce region proposals Fast RCNN detection network on top of proposals  Faster-RCNN Loss: The whole network is then jointly trained with 4 losses:
 RPN classify object / not object RPN regress box coordinates offset Final classification score (object classes) Final box coordinates offset  Results:   Disclaimer: This is my own understanding of these papers with inputs from many blogs and slides on the internet. Let me know if you find something wrong with my understanding. I will be sure to correct myself and post.
References:  Transfer Learning CS231 Object detection Lecture Slides Efficient Graph-Based Image Segmentation Rich feature hierarchies for accurate object detection and semantic segmentation(RCNN Paper) Selective Search for Object Recognition ROI Pooling Explanation Faster RCNN Blog StackOverflow Faster RCNN Blog Faster RCNN Blog Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks https://www.slideshare.net/WenjingChen7/deep-learning-for-object-detection  ]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Hyperopt - A bayesian Parameter Tuning Framework</title>
      <link>https://mlwhiz.com/blog/2017/12/28/hyperopt_tuning_ml_model/</link>
      <pubDate>Thu, 28 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2017/12/28/hyperopt_tuning_ml_model/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.comhttps://1.gravatar.com/avatar/14e38645b7816711ca19e971e879c63b?s=180d=identiconr=G"></media:content>
      

      
      <description>Recently I was working on a in-class competition from the &amp;amp;ldquo;How to win a data science competition&amp;amp;rdquo; Coursera course. You can start for free with the 7-day Free Trial. Learned a lot of new things from that about using XGBoost for time series prediction tasks.
The one thing that I tried out in this competition was the Hyperopt package - A bayesian Parameter Tuning Framework. And I was literally amazed.</description>

      <content:encoded>  
        
        <![CDATA[  Recently I was working on a in-class competition from the &amp;ldquo;How to win a data science competition&amp;rdquo; Coursera course. You can start for free with the 7-day Free Trial. Learned a lot of new things from that about using XGBoost for time series prediction tasks.
The one thing that I tried out in this competition was the Hyperopt package - A bayesian Parameter Tuning Framework. And I was literally amazed. Left the machine with hyperopt in the night. And in the morning I had my results. It was really awesome and I did avoid a lot of hit and trial.
What really is Hyperopt? From the site:
 Hyperopt is a Python library for serial and parallel optimization over awkward search spaces, which may include real-valued, discrete, and conditional dimensions.
 What the above means is that it is a optimizer that could minimize/maximize the loss function/accuracy(or whatever metric) for you.
All of us are fairly known to cross-grid search or random-grid search. Hyperopt takes as an input a space of hyperparams in which it will search, and moves according to the result of past trials.
To know more about how it does this, take a look at this paper by J Bergstra. Here is the documentation from github.
How? Let me just put the code first. This is how I define the objective function. The objective function takes space(the hyperparam space) as the input and returns the loss(The thing you want to minimize.Or negative of the thing you want to maximize)
(X,y) and (Xcv,ycv) are the train and cross validation dataframes respectively.
We have defined a hyperparam space by using the variable space which is actually just a dictionary. We could choose different distributions for different parameter values.
We use the fmin function from the hyperopt package to minimize our fn through the space.
from sklearn.metrics import mean_squared_error import xgboost as xgb from hyperopt import hp, fmin, tpe, STATUS_OK, Trials import numpy as np def objective(space): print(space) clf = xgb.XGBRegressor(n_estimators =1000,colsample_bytree=space[&amp;#39;colsample_bytree&amp;#39;], learning_rate = .3, max_depth = int(space[&amp;#39;max_depth&amp;#39;]), min_child_weight = space[&amp;#39;min_child_weight&amp;#39;], subsample = space[&amp;#39;subsample&amp;#39;], gamma = space[&amp;#39;gamma&amp;#39;], reg_lambda = space[&amp;#39;reg_lambda&amp;#39;],) eval_set = [( X, y), ( Xcv, ycv)] clf.fit(X, y, eval_set=eval_set, eval_metric=&amp;#34;rmse&amp;#34;, early_stopping_rounds=10,verbose=False) pred = clf.predict(Xcv) mse_scr = mean_squared_error(ycv, pred) print &amp;#34;SCORE:&amp;#34;, np.sqrt(mse_scr) #change the metric if you like return {&amp;#39;loss&amp;#39;:mse_scr, &amp;#39;status&amp;#39;: STATUS_OK } space ={&amp;#39;max_depth&amp;#39;: hp.quniform(&amp;#34;x_max_depth&amp;#34;, 4, 16, 1), &amp;#39;min_child_weight&amp;#39;: hp.quniform (&amp;#39;x_min_child&amp;#39;, 1, 10, 1), &amp;#39;subsample&amp;#39;: hp.uniform (&amp;#39;x_subsample&amp;#39;, 0.7, 1), &amp;#39;gamma&amp;#39; : hp.uniform (&amp;#39;x_gamma&amp;#39;, 0.1,0.5), &amp;#39;colsample_bytree&amp;#39; : hp.uniform (&amp;#39;x_colsample_bytree&amp;#39;, 0.7,1), &amp;#39;reg_lambda&amp;#39; : hp.uniform (&amp;#39;x_reg_lambda&amp;#39;, 0,1) } trials = Trials() best = fmin(fn=objective, space=space, algo=tpe.suggest, max_evals=100, trials=trials) print best Finally: Running the above gives us pretty good hyperparams for our learning algorithm. In fact I bagged up the results from multiple hyperparam settings and it gave me the best score on the LB. If you like this and would like to get more information about such things, subscribe to the mailing list on the right hand side. Also I would definitely recommend this course about winning Kaggle competitions by Kazanova, Kaggle rank 3 . Do take a look.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Using XGBoost for time series prediction tasks</title>
      <link>https://mlwhiz.com/blog/2017/12/26/win_a_data_science_competition/</link>
      <pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2017/12/26/win_a_data_science_competition/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.comimages/lboard.png"></media:content>
      

      
      <description>Recently Kaggle master Kazanova along with some of his friends released a &amp;amp;ldquo;How to win a data science competition&amp;amp;rdquo; Coursera course. You can start for free with the 7-day Free Trial. The Course involved a final project which itself was a time series prediction problem. Here I will describe how I got a top 10 position as of writing this article.
  Description of the Problem: In this competition we were given a challenging time-series dataset consisting of daily sales data, kindly provided by one of the largest Russian software firms - 1C Company.</description>

      <content:encoded>  
        
        <![CDATA[  Recently Kaggle master Kazanova along with some of his friends released a &amp;ldquo;How to win a data science competition&amp;rdquo; Coursera course. You can start for free with the 7-day Free Trial. The Course involved a final project which itself was a time series prediction problem. Here I will describe how I got a top 10 position as of writing this article.
  Description of the Problem: In this competition we were given a challenging time-series dataset consisting of daily sales data, kindly provided by one of the largest Russian software firms - 1C Company.
We were asked you to predict total sales for every product and store in the next month.
The evaluation metric was RMSE where True target values are clipped into [0,20] range. This target range will be a lot important in understanding the submissions that I will prepare.
The main thing that I noticed was that the data preparation aspect of this competition was by far the most important thing. I creted a variety of features. Here are the steps I took and the features I created.
1. Created a dataframe of all Date_block_num, Store and Item combinations: This is important because in the months we don&amp;rsquo;t have a data for an item store combination, the machine learning algorithm needs to be specifically told that the sales is zero.
from itertools import product # Create &amp;#34;grid&amp;#34; with columns index_cols = [&amp;#39;shop_id&amp;#39;, &amp;#39;item_id&amp;#39;, &amp;#39;date_block_num&amp;#39;] # For every month we create a grid from all shops/items combinations from that month grid = [] for block_num in sales[&amp;#39;date_block_num&amp;#39;].unique(): cur_shops = sales.loc[sales[&amp;#39;date_block_num&amp;#39;] == block_num, &amp;#39;shop_id&amp;#39;].unique() cur_items = sales.loc[sales[&amp;#39;date_block_num&amp;#39;] == block_num, &amp;#39;item_id&amp;#39;].unique() grid.append(np.array(list(product(*[cur_shops, cur_items, [block_num]])),dtype=&amp;#39;int32&amp;#39;)) grid = pd.DataFrame(np.vstack(grid), columns = index_cols,dtype=np.int32) 2. Cleaned up a little of sales data after some basic EDA: sales = sales[sales.item_price&amp;lt;100000] sales = sales[sales.item_cnt_day&amp;lt;=1000] 3. Created Mean Encodings: sales_m = sales.groupby([&amp;#39;date_block_num&amp;#39;,&amp;#39;shop_id&amp;#39;,&amp;#39;item_id&amp;#39;]).agg({&amp;#39;item_cnt_day&amp;#39;: &amp;#39;sum&amp;#39;,&amp;#39;item_price&amp;#39;: np.mean}).reset_index() sales_m = pd.merge(grid,sales_m,on=[&amp;#39;date_block_num&amp;#39;,&amp;#39;shop_id&amp;#39;,&amp;#39;item_id&amp;#39;],how=&amp;#39;left&amp;#39;).fillna(0) # adding the category id too sales_m = pd.merge(sales_m,items,on=[&amp;#39;item_id&amp;#39;],how=&amp;#39;left&amp;#39;) for type_id in [&amp;#39;item_id&amp;#39;,&amp;#39;shop_id&amp;#39;,&amp;#39;item_category_id&amp;#39;]: for column_id,aggregator,aggtype in [(&amp;#39;item_price&amp;#39;,np.mean,&amp;#39;avg&amp;#39;),(&amp;#39;item_cnt_day&amp;#39;,np.sum,&amp;#39;sum&amp;#39;),(&amp;#39;item_cnt_day&amp;#39;,np.mean,&amp;#39;avg&amp;#39;)]: mean_df = sales.groupby([type_id,&amp;#39;date_block_num&amp;#39;]).aggregate(aggregator).reset_index()[[column_id,type_id,&amp;#39;date_block_num&amp;#39;]] mean_df.columns = [type_id&#43;&amp;#39;_&amp;#39;&#43;aggtype&#43;&amp;#39;_&amp;#39;&#43;column_id,type_id,&amp;#39;date_block_num&amp;#39;] sales_m = pd.merge(sales_m,mean_df,on=[&amp;#39;date_block_num&amp;#39;,type_id],how=&amp;#39;left&amp;#39;) These above lines add the following 9 features :
 &amp;lsquo;item_id_avg_item_price&amp;rsquo; &amp;lsquo;item_id_sum_item_cnt_day&amp;rsquo; &amp;lsquo;item_id_avg_item_cnt_day&amp;rsquo; &amp;lsquo;shop_id_avg_item_price&amp;rsquo;, &amp;lsquo;shop_id_sum_item_cnt_day&amp;rsquo; &amp;lsquo;shop_id_avg_item_cnt_day&amp;rsquo; &amp;lsquo;item_category_id_avg_item_price&amp;rsquo; &amp;lsquo;item_category_id_sum_item_cnt_day&amp;rsquo; &amp;lsquo;item_category_id_avg_item_cnt_day&amp;rsquo;  4. Create Lag Features: Next we create lag features with diferent lag periods on the following features:
 &amp;lsquo;item_id_avg_item_price&amp;rsquo;, &amp;lsquo;item_id_sum_item_cnt_day&amp;rsquo; &amp;lsquo;item_id_avg_item_cnt_day&amp;rsquo; &amp;lsquo;shop_id_avg_item_price&amp;rsquo; &amp;lsquo;shop_id_sum_item_cnt_day&amp;rsquo; &amp;lsquo;shop_id_avg_item_cnt_day&amp;rsquo; &amp;lsquo;item_category_id_avg_item_price&amp;rsquo; &amp;lsquo;item_category_id_sum_item_cnt_day&amp;rsquo; &amp;lsquo;item_category_id_avg_item_cnt_day&amp;rsquo; &amp;lsquo;item_cnt_day&amp;rsquo;  lag_variables = list(sales_m.columns[7:])&#43;[&amp;#39;item_cnt_day&amp;#39;] lags = [1 ,2 ,3 ,4, 5, 12] for lag in lags: sales_new_df = sales_m.copy() sales_new_df.date_block_num&#43;=lag sales_new_df = sales_new_df[[&amp;#39;date_block_num&amp;#39;,&amp;#39;shop_id&amp;#39;,&amp;#39;item_id&amp;#39;]&#43;lag_variables] sales_new_df.columns = [&amp;#39;date_block_num&amp;#39;,&amp;#39;shop_id&amp;#39;,&amp;#39;item_id&amp;#39;]&#43; [lag_feat&#43;&amp;#39;_lag_&amp;#39;&#43;str(lag) for lag_feat in lag_variables] sales_means = pd.merge(sales_means, sales_new_df,on=[&amp;#39;date_block_num&amp;#39;,&amp;#39;shop_id&amp;#39;,&amp;#39;item_id&amp;#39;] ,how=&amp;#39;left&amp;#39;) 5. Fill NA with zeros: for feat in sales_means.columns: if &amp;#39;item_cnt&amp;#39; in feat: sales_means[feat]=sales_means[feat].fillna(0) elif &amp;#39;item_price&amp;#39; in feat: sales_means[feat]=sales_means[feat].fillna(sales_means[feat].median()) 6. Drop the columns that we are not going to use in training: cols_to_drop = lag_variables[:-1] &#43; [&amp;#39;item_name&amp;#39;,&amp;#39;item_price&amp;#39;] 7. Take a recent bit of data only: sales_means = sales_means[sales_means[&amp;#39;date_block_num&amp;#39;]&amp;gt;12] 8. Split in train and CV : X_train = sales_means[sales_means[&amp;#39;date_block_num&amp;#39;]&amp;lt;33].drop(cols_to_drop, axis=1) X_cv = sales_means[sales_means[&amp;#39;date_block_num&amp;#39;]==33].drop(cols_to_drop, axis=1) 9. THE MAGIC SAUCE: In the start I told that the clipping aspect of [0,20] will be important. In the next few lines I clipped the days to range[0,40]. You might ask me why 40. An intuitive answer is if I had clipped to range [0,20] there would be very few tree nodes that could give 20 as an answer. While if I increase it to 40 having a 20 becomes much more easier. Please note that We will clip our predictions in the [0,20] range in the end.
def clip(x): if x&amp;gt;40: return 40 elif x&amp;lt;0: return 0 else: return x train[&amp;#39;item_cnt_day&amp;#39;] = train.apply(lambda x: clip(x[&amp;#39;item_cnt_day&amp;#39;]),axis=1) cv[&amp;#39;item_cnt_day&amp;#39;] = cv.apply(lambda x: clip(x[&amp;#39;item_cnt_day&amp;#39;]),axis=1) 10: Modelling:  Created a XGBoost model to get the most important features(Top 42 features) Use hyperopt to tune xgboost Used top 10 models from tuned XGBoosts to generate predictions. clipped the predictions to [0,20] range Final solution was the average of these 10 predictions.  Learned a lot of new things from this awesome course. Most recommended.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Good Feature Building Techniques - Tricks for Kaggle -  My Kaggle Code Repository</title>
      <link>https://mlwhiz.com/blog/2017/09/14/kaggle_tricks/</link>
      <pubDate>Thu, 14 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2017/09/14/kaggle_tricks/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.comhttps://storage.googleapis.com/kaggle-organizations/4/thumbnail.png"></media:content>
      

      
      <description>Often times it happens that we fall short of creativity. And creativity is one of the basic ingredients of what we do. Creating features needs creativity. So here is the list of ideas I gather in day to day life, where people have used creativity to get great results on Kaggle leaderboards.
Take a look at the How to Win a Data Science Competition: Learn from Top Kagglers course in the Advanced machine learning specialization by Kazanova(Number 3 Kaggler at the time of writing).</description>

      <content:encoded>  
        
        <![CDATA[  Often times it happens that we fall short of creativity. And creativity is one of the basic ingredients of what we do. Creating features needs creativity. So here is the list of ideas I gather in day to day life, where people have used creativity to get great results on Kaggle leaderboards.
Take a look at the How to Win a Data Science Competition: Learn from Top Kagglers course in the Advanced machine learning specialization by Kazanova(Number 3 Kaggler at the time of writing). You can start for free with the 7-day Free Trial.
This post is inspired by a Kernel on Kaggle written by Beluga, one of the top Kagglers, for a knowledge based competition.
Some of the techniques/tricks I am sharing have been taken directly from that kernel so you could take a look yourself. Otherwise stay here and read on.
1. Don&amp;rsquo;t try predicting the future when you don&amp;rsquo;t have to: If both training/test comes from the same timeline, we can get really crafty with features. Although this is a case with Kaggle only, we can use this to our advantage. For example: In the Taxi Trip duration challenge the test data is randomly sampled from the train data. In this case we can use the target variable averaged over different categorical variable as a feature. Like in this case Beluga actually used the averaged the target variable over different weekdays. He then mapped the same averaged value as a variable by mapping it to test data too.
2. logloss clipping Technique: Something that I learned in the Neural Network course by Jeremy Howard. Its based on a very simple Idea. Logloss penalises a lot if we are very confident and wrong. So in case of Classification problems where we have to predict probabilities, it would be much better to clip our probabilities between 0.05-0.95 so that we are never very sure about our prediction.
3. kaggle submission in gzip format: A small piece of code that will help you save countless hours of uploading. Enjoy. df.to_csv(&amp;lsquo;submission.csv.gz&amp;rsquo;, index=False, compression=&amp;lsquo;gzip&amp;rsquo;)
4. How best to use Latitude and Longitude features - Part 1: One of the best things that I liked about the Beluga Kernel is how he used the Lat/Lon Data. So in the example we had pickup Lat/Lon and Dropoff Lat/Lon. We created features like:
A. Haversine Distance Between the Two Lat/Lons: def haversine_array(lat1, lng1, lat2, lng2): lat1, lng1, lat2, lng2 = map(np.radians, (lat1, lng1, lat2, lng2)) AVG_EARTH_RADIUS = 6371 # in km lat = lat2 - lat1 lng = lng2 - lng1 d = np.sin(lat * 0.5) ** 2 &#43; np.cos(lat1) * np.cos(lat2) * np.sin(lng * 0.5) ** 2 h = 2 * AVG_EARTH_RADIUS * np.arcsin(np.sqrt(d)) return h B. Manhattan Distance Between the two Lat/Lons: def dummy_manhattan_distance(lat1, lng1, lat2, lng2): a = haversine_array(lat1, lng1, lat1, lng2) b = haversine_array(lat1, lng1, lat2, lng1) return a &#43; b C. Bearing Between the two Lat/Lons: def bearing_array(lat1, lng1, lat2, lng2): AVG_EARTH_RADIUS = 6371 # in km lng_delta_rad = np.radians(lng2 - lng1) lat1, lng1, lat2, lng2 = map(np.radians, (lat1, lng1, lat2, lng2)) y = np.sin(lng_delta_rad) * np.cos(lat2) x = np.cos(lat1) * np.sin(lat2) - np.sin(lat1) * np.cos(lat2) * np.cos(lng_delta_rad) return np.degrees(np.arctan2(y, x)) D. Center Latitude and Longitude between Pickup and Dropoff: train.loc[:, &amp;#39;center_latitude&amp;#39;] = (train[&amp;#39;pickup_latitude&amp;#39;].values &#43; train[&amp;#39;dropoff_latitude&amp;#39;].values) / 2 train.loc[:, &amp;#39;center_longitude&amp;#39;] = (train[&amp;#39;pickup_longitude&amp;#39;].values &#43; train[&amp;#39;dropoff_longitude&amp;#39;].values) / 2 5. How best to use Latitude and Longitude features - Part 2: The Second way he used the Lat/Lon Feats was to create clusters for Pickup and Dropoff Lat/Lons. The way it worked was it created sort of Boroughs in the data by design.
from sklearn.cluster import MiniBatchKMeans coords = np.vstack((train[[&amp;#39;pickup_latitude&amp;#39;, &amp;#39;pickup_longitude&amp;#39;]].values, train[[&amp;#39;dropoff_latitude&amp;#39;, &amp;#39;dropoff_longitude&amp;#39;]].values, test[[&amp;#39;pickup_latitude&amp;#39;, &amp;#39;pickup_longitude&amp;#39;]].values, test[[&amp;#39;dropoff_latitude&amp;#39;, &amp;#39;dropoff_longitude&amp;#39;]].values)) sample_ind = np.random.permutation(len(coords))[:500000] kmeans = MiniBatchKMeans(n_clusters=100, batch_size=10000).fit(coords[sample_ind]) train.loc[:, &amp;#39;pickup_cluster&amp;#39;] = kmeans.predict(train[[&amp;#39;pickup_latitude&amp;#39;, &amp;#39;pickup_longitude&amp;#39;]]) train.loc[:, &amp;#39;dropoff_cluster&amp;#39;] = kmeans.predict(train[[&amp;#39;dropoff_latitude&amp;#39;, &amp;#39;dropoff_longitude&amp;#39;]]) test.loc[:, &amp;#39;pickup_cluster&amp;#39;] = kmeans.predict(test[[&amp;#39;pickup_latitude&amp;#39;, &amp;#39;pickup_longitude&amp;#39;]]) test.loc[:, &amp;#39;dropoff_cluster&amp;#39;] = kmeans.predict(test[[&amp;#39;dropoff_latitude&amp;#39;, &amp;#39;dropoff_longitude&amp;#39;]]) He then used these Clusters to create features like counting no of trips going out and coming in on a particular day.
6. How best to use Latitude and Longitude features - Part 3 He used PCA to transform longitude and latitude coordinates. In this case it is not about dimension reduction since he transformed 2D-&amp;gt; 2D. The rotation could help for decision tree splits, and it did actually.
pca = PCA().fit(coords) train[&amp;#39;pickup_pca0&amp;#39;] = pca.transform(train[[&amp;#39;pickup_latitude&amp;#39;, &amp;#39;pickup_longitude&amp;#39;]])[:, 0] train[&amp;#39;pickup_pca1&amp;#39;] = pca.transform(train[[&amp;#39;pickup_latitude&amp;#39;, &amp;#39;pickup_longitude&amp;#39;]])[:, 1] train[&amp;#39;dropoff_pca0&amp;#39;] = pca.transform(train[[&amp;#39;dropoff_latitude&amp;#39;, &amp;#39;dropoff_longitude&amp;#39;]])[:, 0] train[&amp;#39;dropoff_pca1&amp;#39;] = pca.transform(train[[&amp;#39;dropoff_latitude&amp;#39;, &amp;#39;dropoff_longitude&amp;#39;]])[:, 1] test[&amp;#39;pickup_pca0&amp;#39;] = pca.transform(test[[&amp;#39;pickup_latitude&amp;#39;, &amp;#39;pickup_longitude&amp;#39;]])[:, 0] test[&amp;#39;pickup_pca1&amp;#39;] = pca.transform(test[[&amp;#39;pickup_latitude&amp;#39;, &amp;#39;pickup_longitude&amp;#39;]])[:, 1] test[&amp;#39;dropoff_pca0&amp;#39;] = pca.transform(test[[&amp;#39;dropoff_latitude&amp;#39;, &amp;#39;dropoff_longitude&amp;#39;]])[:, 0] test[&amp;#39;dropoff_pca1&amp;#39;] = pca.transform(test[[&amp;#39;dropoff_latitude&amp;#39;, &amp;#39;dropoff_longitude&amp;#39;]])[:, 1] 7. Lets not forget the Normal Things you can do with your features:  Scaling by Max-Min Normalization using Standard Deviation Log based feature/Target: use log based features or log based target function. One Hot Encoding  8. Creating Intuitive Additional Features: A) Date time Features: Time based Features like &amp;ldquo;Evening&amp;rdquo;, &amp;ldquo;Noon&amp;rdquo;, &amp;ldquo;Night&amp;rdquo;, &amp;ldquo;Purchases_last_month&amp;rdquo;, &amp;ldquo;Purchases_last_week&amp;rdquo; etc.
B) Thought Features: Suppose you have shopping cart data and you want to categorize TripType (See Walmart Recruiting: Trip Type Classification on Kaggle for some background).
You could think of creating a feature like &amp;ldquo;Stylish&amp;rdquo; where you create this variable by adding together number of items that belong to category Men&amp;rsquo;s Fashion, Women&amp;rsquo;s Fashion, Teens Fashion.
You could create a feature like &amp;ldquo;Rare&amp;rdquo; which is created by tagging some items as rare, based on the data we have and then counting the number of those rare items in the shopping cart. Such features might work or might not work. From what I have observed they normally provide a lot of value.
I feel this is the way that Target&amp;rsquo;s &amp;ldquo;Pregnant Teen model&amp;rdquo; was made. They would have had a variable in which they kept all the items that a pregnant teen could buy and put it into a classification algorithm.
9 . The not so Normal Things which people do: These features are highly unintuitive and should not be created where the machine learning model needs to be interpretable.
A) Interaction Features: If you have features A and B create features A*B, A&#43;B, A/B, A-B. This explodes the feature space. If you have 10 features and you are creating two variable interactions you will be adding 10C2 * 4 features = 180 features to your model. And most of us have a lot more than 10 features.
B) Bucket Feature Using Hashing: Suppose you have a lot of features. In the order of Thousands but you don&amp;rsquo;t want to use all the thousand features because of the training times of algorithms involved. People bucket their features using some hashing algorithm to achieve this.Mostly done for text classification tasks. For example: If we have 6 features A,B,C,D,E,F. And the row of data is: A:1,B:1,C:1,D:0,E:1,F:0 I may decide to use a hashing function so that these 6 features correspond to 3 buckets and create the data using this feature hashing vector. After processing my data might look like: Bucket1:2,Bucket2:2,Bucket3:0 Which happened because A and B fell in bucket1, C and E fell in bucket2 and D and F fell in bucket 3. I summed up the observations here, but you could substitute addition with any math function you like. Now i would use Bucket1,Bucket2,Bucket3 as my variables for machine learning.
Will try to keep on expanding. Wait for more&amp;hellip;.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>The story of every distribution - Discrete Distributions</title>
      <link>https://mlwhiz.com/blog/2017/09/14/discrete_distributions/</link>
      <pubDate>Thu, 14 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2017/09/14/discrete_distributions/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.comimages/output_14_0.png"></media:content>
      

      
      <description>Distributions play an important role in the life of every Statistician. I coming from a non-statistic background am not so well versed in these and keep forgetting about the properties of these famous distributions. That is why I chose to write my own understanding in an intuitive way to keep a track. One of the most helpful way to learn more about these is the STAT110 course by Joe Blitzstein and his book.</description>

      <content:encoded>  
        
        <![CDATA[  Distributions play an important role in the life of every Statistician. I coming from a non-statistic background am not so well versed in these and keep forgetting about the properties of these famous distributions. That is why I chose to write my own understanding in an intuitive way to keep a track. One of the most helpful way to learn more about these is the STAT110 course by Joe Blitzstein and his book. You can check out this Coursera course too. Hope it could be useful to someone else too. So here goes:
1. Bernoulli Distribution: Perhaps the most simple discrete distribution of all.
Story: A Coin is tossed with probability p of heads.
PMF of Bernoulli Distribution is given by:
$$P(X=k) = \begin{cases}1-p &amp; k = 0\\p &amp; k = 1\end{cases}$$ CDF of Bernoulli Distribution is given by:
$$P(X \leq k) = \begin{cases}0 &amp; k \lt 0\\1-p &amp; 0 \leq k \lt 1 \\1 &amp; k \geq 1\end{cases}$$ Expected Value:
$$E[X] = \sum kP(X=k)$$ $$E[X] = 0*P(X=0)&#43;1*P(X=1) = p$$
Variance:
$$Var[X] = E[X^2] - E[X]^2$$ Now we find, $$E[X]^2 = p^2$$ and $$E[X^2] = \sum k^2P(X=k)$$ $$E[X^2] = 0^2P(X=0) &#43; 1^2P(X=1) = p $$ Thus, $$Var[X] = p(1-p)$$
2. Binomial Distribution:   One of the most basic distribution in the Statistician toolkit. The parameters of this distribution is n(number of trials) and p(probability of success).
Story: Probability of getting exactly k successes in n trials
PMF of binomial Distribution is given by:
$$P(X=k) = \left(\begin{array}{c}n\ k\end{array}\right) p^{k}(1-p)^{n-k}$$
CDF of binomial Distribution is given by:
$$ P(X\leq k) = \sum_{i=0}^k \left(\begin{array}{c}n\ i\end{array}\right) p^i(1-p)^{n-i} $$
Expected Value:
$$E[X] = \sum kP(X=k)$$ $$E[X] = \sum_{k=0}^n k \left(\begin{array}{c}n\ k\end{array}\right) * p^{k}(1-p)^{n-k} = np $$
A better way to solve this:
$$ X = I_{1} &#43; I_{2} &#43; ....&#43; I_{n-1}&#43; I_{n} $$ X is the sum on n Indicator Bernoulli random variables.
Thus,
 $$E[X] = E[I_{1} &#43; I_{2} &#43; ....&#43; I_{n-1}&#43; I_{n}]$$ $$E[X] = E[I_{1}] &#43; E[I_{2}] &#43; ....&#43; E[I_{n-1}]&#43; E[I_{n}]$$ $$E[X] = \underbrace{p &#43; p &#43; ....&#43; p &#43; p}_{n} = np$$ Variance:
$$ X = I_{1} &#43; I_{2} &#43; ....&#43; I_{n-1}&#43; I_{n} $$ X is the sum on n Indicator Bernoulli random variables. $$Var[X] = Var[I_{1} &#43; I_{2} &#43; ....&#43; I_{n-1}&#43; I_{n}]$$ $$Var[X] = Var[I_{1}] &#43; Var[I_{2}] &#43; ....&#43; Var[I_{n-1}]&#43; Var[I_{n}]$$ $$Var[X] = \underbrace{p(1-p) &#43; p(1-p) &#43; ....&#43; p(1-p) &#43; p(1-p)}_{n} = np(1-p)$$ 3. Geometric Distribution: The parameters of this distribution is p(probability of success).
Story: The number of failures before the first success(Heads) when a coin with probability p is tossed
PMF of Geometric Distribution is given by:
$$P(X=k) = (1-p)^kp$$
CDF of Geometric Distribution is given by:
$$ P(X\leq k) = \sum_{i=0}^k (1-p)^{i}p$$ $$ P(X\leq k) = p(1&#43;q&#43;q^2&amp;hellip;&#43;q^k)= p(1-q^k)/(1-q) = 1-(1-p)^k $$
Expected Value:
$$E[X] = \sum kP(X=k)$$ $$E[X] = \sum_{k=0}^{inf} k (1-p)^kp$$ $$E[X] = qp &#43;2q^2p &#43;3q^3p &#43;4q^4p &amp;hellip;. $$ $$E[X] = qp(1&#43;2q&#43;3q^2&#43;4q^3&#43;&amp;hellip;.)$$ $$E[X] = qp/(1-q)^2 = q/p $$
Variance:
$$Var[X] = E[X^2] - E[X]^2$$ Now we find, $$E[X]^2 = q^2/p^2$$ and $$E[X^2] = \sum_0^k k^2q^kp= qp &#43; 4q^2p &#43; 9q^3p &#43;16q^4p &amp;hellip; = qp(1&#43;4q&#43;9q^2&#43;16q^3&amp;hellip;.)$$ $$E[X^2] = qp^{-2}(1&#43;q)$$
Thus, $$Var[X] =q/p^2$$
Check Math appendix at bottom of this post for Geometric Series Proofs.
Example:
Q. A doctor is seeking an anti-depressant for a newly diagnosed patient. Suppose that, of the available anti-depressant drugs, the probability that any particular drug will be effective for a particular patient is p=0.6. What is the probability that the first drug found to be effective for this patient is the first drug tried, the second drug tried, and so on? What is the expected number of drugs that will be tried to find one that is effective?
A. Expected number of drugs that will be tried to find one that is effective = q/p = .4/.6 =.67
4. Negative Binomial Distribution: The parameters of this distribution is p(probability of success) and r(number of success).
Story: The number of failures of independent Bernoulli(p) trials before the rth success.
PMF of Negative Binomial Distribution is given by:
r successes , k failures , last attempt needs to be a success: $$P(X=k) = \left(\begin{array}{c}k&#43;r-1\ k\end{array}\right) p^r(1-p)^k$$
Expected Value:
The negative binomial RV could be stated as the sum of r Geometric RVs $$X = X^1&#43;X^2&amp;hellip;. X^{r-1} &#43;X^r$$ Thus, $$E[X] = E[X^1]&#43;E[X^2]&amp;hellip;. E[X^{r-1}] &#43;E[X^r]$$
$$E[X] = rq/p$$
Variance:
The negative binomial RV could be stated as the sum of r independent Geometric RVs $$X = X^1&#43;X^2&amp;hellip;. X^{r-1} &#43;X^r$$ Thus, $$Var[X] = Var[X^1]&#43;Var[X^2]&amp;hellip;. Var[X^{r-1}] &#43;Var[X^r]$$
$$E[X] = rq/p^2$$
Example:
Q. Pat is required to sell candy bars to raise money for the 6th grade field trip. There are thirty houses in the neighborhood, and Pat is not supposed to return home until five candy bars have been sold. So the child goes door to door, selling candy bars. At each house, there is a 0.4 probability of selling one candy bar and a 0.6 probability of selling nothing. What&amp;rsquo;s the probability of selling the last candy bar at the nth house?
A. r = 5 ; k = n - r
Probability of selling the last candy bar at the nth house = $$P(X=k) = \left(\begin{array}{c}k&#43;r-1\ k\end{array}\right) p^r(1-p)^k$$ $$P(X=k) = \left(\begin{array}{c}n-1\ n-5\end{array}\right) .4^5(.6)^{n-5}$$
5. Poisson Distribution: The parameters of this distribution is $\lambda$ the rate parameter.
Motivation: There is as such no story to this distribution but only motivation for using this distribution. The Poisson distribution is often used for applications where we count the successes of a large number of trials where the per-trial success rate is small. For example, the Poisson distribution is a good starting point for counting the number of people who email you over the course of an hour.The number of chocolate chips in a chocolate chip cookie is another good candidate for a Poisson distribution, or the number of earthquakes in a year in some particular region
PMF of Poisson Distribution is given by: $$ P(X=k) = \frac{e^{-\lambda}\lambda^k} {k!}$$
Expected Value:
$$E[X] = \sum kP(X=k)$$ $$ E[X] = \sum_{k=0}^{inf} k \frac{e^{-\lambda}\lambda^k} {k!}$$ $$ E[X] = \lambda e^{-\lambda}\sum_{k=0}^{inf} \frac{\lambda^{k-1}} {(k-1)!}$$ $$ E[X] = \lambda e^{-\lambda} e^{\lambda} = \lambda $$ Variance:
$$Var[X] = E[X^2] - E[X]^2$$ Now we find, $$E[X]^2 = \lambda &#43; \lambda^2$$ Thus, $$Var[X] = \lambda$$
Example:
Q. If electricity power failures occur according to a Poisson distribution with an average of 3 failures every twenty weeks, calculate the probability that there will not be more than one failure during a particular week?
A. Probability = P(X=0)&#43;P(X=1) =
$$e^{-3/20} &#43; e^{-3/20}3/20 = 23/20*e^{-3/20} $$ Probability of selling the last candy bar at the nth house = $$P(X=k) = \left(\begin{array}{c}k&#43;r-1\ k\end{array}\right) p^r(1-p)^k$$ $$P(X=k) = \left(\begin{array}{c}n-1\ n-5\end{array}\right) .4^5(.6)^{n-5}$$
Math Appendix: Some Math (For Geometric Distribution) :
$$a&#43;ar&#43;ar^2&#43;ar^3&#43;⋯=a/(1−r)=a(1−r)^{−1}$$ Taking the derivatives of both sides, the first derivative with respect to r must be: $$a&#43;2ar&#43;3ar^2&#43;4ar^3⋯=a(1−r)^{−2}$$ Multiplying above with r: $$ar&#43;2ar^2&#43;3ar^3&#43;4ar^4⋯=ar(1−r)^{−2}$$ Taking the derivatives of both sides, the first derivative with respect to r must be: $$a&#43;4ar&#43;9ar^2&#43;16ar^3⋯=a(1−r)^{-3}(1&#43;r)$$
Bonus - Python Graphs and Functions: # Useful Function to create graph def chart_creator(x,y,title): import matplotlib.pyplot as plt #sets up plotting under plt import seaborn as sns #sets up styles and gives us more plotting options import pandas as pd #lets us handle data as dataframes %matplotlib inline # Create a list of 100 Normal RVs data = pd.DataFrame(zip(x,y)) data.columns = [&amp;#39;x&amp;#39;,&amp;#39;y&amp;#39;] # We dont Probably need the Gridlines. Do we? If yes comment this line sns.set(style=&amp;#34;ticks&amp;#34;) # Here we create a matplotlib axes object. The extra parameters we use # &amp;#34;ci&amp;#34; to remove confidence interval # &amp;#34;marker&amp;#34; to have a x as marker. # &amp;#34;scatter_kws&amp;#34; to provide style info for the points.[s for size] # &amp;#34;line_kws&amp;#34; to provide style info for the line.[lw for line width] g = sns.regplot(x=&amp;#39;x&amp;#39;, y=&amp;#39;y&amp;#39;, data=data, ci = False, scatter_kws={&amp;#34;color&amp;#34;:&amp;#34;darkred&amp;#34;,&amp;#34;alpha&amp;#34;:0.3,&amp;#34;s&amp;#34;:90}, line_kws={&amp;#34;color&amp;#34;:&amp;#34;g&amp;#34;,&amp;#34;alpha&amp;#34;:0.5,&amp;#34;lw&amp;#34;:0},marker=&amp;#34;x&amp;#34;) # remove the top and right line in graph sns.despine() # Set the size of the graph from here g.figure.set_size_inches(12,8) # Set the Title of the graph from here g.axes.set_title(title, fontsize=34,color=&amp;#34;r&amp;#34;,alpha=0.5) # Set the xlabel of the graph from here g.set_xlabel(&amp;#34;k&amp;#34;,size = 67,color=&amp;#34;r&amp;#34;,alpha=0.5) # Set the ylabel of the graph from here g.set_ylabel(&amp;#34;pmf&amp;#34;,size = 67,color=&amp;#34;r&amp;#34;,alpha=0.5) # Set the ticklabel size and color of the graph from here g.tick_params(labelsize=14,labelcolor=&amp;#34;black&amp;#34;) And here I will generate the PMFs of the discrete distributions we just discussed above using Pythons built in functions. For more details on the upper function, please see my previous post - Create basic graph visualizations with SeaBorn. Also take a look at the documentation guide for the below functions
# Binomial : from scipy.stats import binom n=30 p=0.5 k = range(0,n) pmf = binom.pmf(k, n, p) chart_creator(k,pmf,&amp;#34;Binomial PMF&amp;#34;)   # Geometric : from scipy.stats import geom n=30 p=0.5 k = range(0,n) # -1 here is the location parameter for generating the PMF we want. pmf = geom.pmf(k, p,-1) chart_creator(k,pmf,&amp;#34;Geometric PMF&amp;#34;)   # Negative Binomial : from scipy.stats import nbinom r=5 # number of successes p=0.5 # probability of Success k = range(0,25) # number of failures # -1 here is the location parameter for generating the PMF we want. pmf = nbinom.pmf(k, r, p) chart_creator(k,pmf,&amp;#34;Nbinom PMF&amp;#34;)   #Poisson from scipy.stats import poisson lamb = .3 # Rate k = range(0,5) pmf = poisson.pmf(k, lamb) chart_creator(k,pmf,&amp;#34;Poisson PMF&amp;#34;)   References:  Introduction to Probability by Joe Blitzstein Wikipedia  Next thing I want to come up with is a same sort of post for continuous distributions too. Keep checking for the same. Till then Ciao.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Today I Learned This Part 2: Pretrained Neural Networks What are they?</title>
      <link>https://mlwhiz.com/blog/2017/04/17/deep_learning_pretrained_models/</link>
      <pubDate>Mon, 17 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2017/04/17/deep_learning_pretrained_models/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.comhttps://image.slidesharecdn.com/practicaldeeplearning-160329181459/95/practical-deep-learning-16-638.jpg"></media:content>
      

      
      <description>Deeplearning is the buzz word right now. I was working on the course for deep learning by Jeremy Howard and one thing I noticed were pretrained deep Neural Networks. In the first lesson he used the pretrained NN to predict on the Dogs vs Cats competition on Kaggle to achieve very good results.
What are pretrained Neural Networks? So let me tell you about the background a little bit. There is a challenge that happens every year in the visual recognition community - The Imagenet Challenge.</description>

      <content:encoded>  
        
        <![CDATA[  Deeplearning is the buzz word right now. I was working on the course for deep learning by Jeremy Howard and one thing I noticed were pretrained deep Neural Networks. In the first lesson he used the pretrained NN to predict on the Dogs vs Cats competition on Kaggle to achieve very good results.
What are pretrained Neural Networks? So let me tell you about the background a little bit. There is a challenge that happens every year in the visual recognition community - The Imagenet Challenge. The task there is to classify the images in 1000 categories using Image training data. People train big convolutional deep learning models for this challenge.
Now what does training a neural model actually mean? It just means that they learn the weights for a NN. What if we can get the weights they learn? We can use those weights to load them into our own NN model and predict on the test dataset. Right?
But actually we can go further than that. We can add an extra layer on top of the NN they have prepared to classify our own dataset.
In a way you can think of the intermediate features created by the Pretrained neural networks to be the features for the next layer.
Why it works? We are essentially doing the image classification task only. We need to find out edges, shapes, intensities and other features from the images that are given to us. The pretrained model is already pretty good at finding these sort of features. Forget neural nets, if we plug these features into a machine learning algorithm we should be good.
What we actually do here is replace the last layer of the neural network with a new prediction/output layer and train while keeping the weights for all the layers before the second last layer constant.
Code: I assume that you understand Keras a little. If not you can look at the docs. Let us get into coding now. First of all we will create the architecture of the neural network the VGG Team created in 2014. Then we will load the weights.
Import some stuff
import numpy as np from numpy.random import random, permutation from scipy import misc, ndimage from scipy.ndimage.interpolation import zoom import keras from keras import backend as K from keras.utils.data_utils import get_file from keras.models import Sequential, Model from keras.layers.core import Flatten, Dense, Dropout, Lambda from keras.layers import Input from keras.layers.convolutional import Convolution2D, MaxPooling2D, ZeroPadding2D from keras.optimizers import SGD, RMSprop, Adam from keras.preprocessing import image VGG has just one type of convolutional block, and one type of fully connected (&amp;lsquo;dense&amp;rsquo;) block. We start by defining the building blocks of our Deep learning model.
def ConvBlock(layers, model, filters): for i in range(layers): model.add(ZeroPadding2D((1,1))) model.add(Convolution2D(filters, 3, 3, activation=&amp;#39;relu&amp;#39;)) model.add(MaxPooling2D((2,2), strides=(2,2))) def FCBlock(model): model.add(Dense(4096, activation=&amp;#39;relu&amp;#39;)) model.add(Dropout(0.5))  Now the input of the VGG Model was images. When the VGG model was trained in 2014, the creators subtracted the average of each of the three (R,G,B) channels first, so that the data for each channel had a mean of zero. Furthermore, their software that expected the channels to be in B,G,R order, whereas Python by default uses R,G,B. We need to preprocess our data to make these two changes, so that it is compatible with the VGG model. We also add some helper functions.
#Mean of each channel as provided by VGG researchers vgg_mean = np.array([123.68, 116.779, 103.939]).reshape((3,1,1)) def vgg_preprocess(x): x = x - vgg_mean # subtract mean return x[:, ::-1] # reverse axis bgr-&amp;gt;rgb def VGG_16(): model = Sequential() model.add(Lambda(vgg_preprocess, input_shape=(3,224,224))) ConvBlock(2, model, 64) ConvBlock(2, model, 128) ConvBlock(3, model, 256) ConvBlock(3, model, 512) ConvBlock(3, model, 512) model.add(Flatten()) FCBlock(model) FCBlock(model) model.add(Dense(1000, activation=&amp;#39;softmax&amp;#39;)) return model def finetune(model, num_classes): # Drop last layer model.pop() # Make all layers untrainable. i.e fix all weights for layer in model.layers: layer.trainable=False # Add a new layer which is the new output layer model.add(Dense(num_classes, activation=&amp;#39;softmax&amp;#39;)) model.compile(optimizer=Adam(lr=0.001), loss=&amp;#39;categorical_crossentropy&amp;#39;, metrics=[&amp;#39;accuracy&amp;#39;]) return model # A way to generate batches of images def get_batches(path, dirname, gen=image.ImageDataGenerator(), shuffle=True, batch_size=64, class_mode=&amp;#39;categorical&amp;#39;): return gen.flow_from_directory(path&#43;dirname, target_size=(224,224), class_mode=class_mode, shuffle=shuffle, batch_size=batch_size) The hard part is done now. Just create a VGG object and load the weights.We will need to load pretrained weights into the model too. You can download the &amp;ldquo;VGG16_weights.h5&amp;rdquo; file here
model = VGG_16() model.load_weights(&amp;#39;VGG16_weights.h5&amp;#39;) # Since our dogs vs cat dataset is binary classification model ftmodel = finetune(model,2) print ftmodel.summary()   Showing a little bit of output here. This is how the last layers of our Neural net look after training. Now we have got a architecture which we got to train. Here we are only training to get the last layer weights. As you can see from the trainable params.
path = &amp;#34;dogscats/&amp;#34; batch_size=64 # Iterators to get our images from our datasets. The datasets are folders named train and valid. Both folder contain two directories &amp;#39;dogs&amp;#39; and &amp;#39;cats&amp;#39;. In each directory the corresponding images are kept. batches = get_batches(path,&amp;#39;train&amp;#39;, batch_size=batch_size) val_batches = get_batches(path,&amp;#39;valid&amp;#39;, batch_size=batch_size) # Now run for some epochs till the validation loss stops decreasing. no_of_epochs=1 for epoch in range(no_of_epochs): print &amp;#34;Running epoch: %d&amp;#34; % epoch ftmodel.fit_generator(batches, samples_per_epoch=batches.nb_sample, nb_epoch=1, validation_data=val_batches, nb_val_samples=val_batches.nb_sample) latest_weights_filename = &amp;#39;ft%d.h5&amp;#39; % epoch ftmodel.save_weights(latest_weights_filename) #Create Predictions on test set. The test images should be in the folder dogscats/test/test_images/ , which is a single directory containing all images. test_batches = get_batches(path, &amp;#39;test&amp;#39;, batch_size=2*batch_size, class_mode=None) preds = ftmodel.predict_generator(test_batches, test_batches.nb_sample) isdog = preds[:,1] image_id = batches.filenames final_submission = np.stack([ids,isdog], axis=1) And we are done!
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Maths Beats Intuition probably every damn time</title>
      <link>https://mlwhiz.com/blog/2017/04/16/maths_beats_intuition/</link>
      <pubDate>Sun, 16 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2017/04/16/maths_beats_intuition/</guid>
      
      

      
      <description>Newton once said that &amp;amp;ldquo;God does not play dice with the universe&amp;amp;rdquo;. But actually he does. Everything happening around us could be explained in terms of probabilities. We repeatedly watch things around us happen due to chances, yet we never learn. We always get dumbfounded by the playfulness of nature.
One of such ways intuition plays with us is with the Birthday problem.
Problem Statement: In a room full of N people, what is the probability that 2 or more people share the same birthday(Assumption: 365 days in year)?</description>

      <content:encoded>  
        
        <![CDATA[  Newton once said that &amp;ldquo;God does not play dice with the universe&amp;rdquo;. But actually he does. Everything happening around us could be explained in terms of probabilities. We repeatedly watch things around us happen due to chances, yet we never learn. We always get dumbfounded by the playfulness of nature.
One of such ways intuition plays with us is with the Birthday problem.
Problem Statement: In a room full of N people, what is the probability that 2 or more people share the same birthday(Assumption: 365 days in year)?
By the pigeonhole principle, the probability reaches 100% when the number of people reaches 366 (since there are only 365 possible birthdays).
However, the paradox is that 99.9% probability is reached with just 70 people, and 50% probability is reached with just 23 people.
Mathematical Proof: Sometimes a good strategy when trying to find out probability of an event is to look at the probability of the complement event.Here it is easier to find the probability of the complement event. We just need to count the number of cases in which no person has the same birthday.(Sampling without replacement) Since there are k ways in which birthdays can be chosen with replacement.
$P(birthday Match) = 1 - \dfrac{(365).364&amp;hellip;(365−k&#43;1)}{365^k}$
Simulation: Lets try to build around this result some more by trying to simulate this result:
%matplotlib inline import matplotlib import numpy as np import matplotlib.pyplot as plt import matplotlib.pyplot as plt #sets up plotting under plt import seaborn as sns #sets up styles and gives us more plotting options import pandas as pd #lets us handle data as dataframes import random def sim_bithday_problem(num_people_room, trials =1000): &amp;#39;&amp;#39;&amp;#39;This function takes as input the number of people in the room. Runs 1000 trials by default and returns (number of times same brthday found)/(no of trials) &amp;#39;&amp;#39;&amp;#39; same_birthdays_found = 0 for i in range(trials): # randomly sample from the birthday space which could be any of a number from 1 to 365 birthdays = [random.randint(1,365) for x in range(num_people_room)] if len(birthdays) - len(set(birthdays))&amp;gt;0: same_birthdays_found&#43;=1 return same_birthdays_found/float(trials) num_people = range(2,100) probs = [sim_bithday_problem(i) for i in num_people] data = pd.DataFrame() data[&amp;#39;num_peeps&amp;#39;] = num_people data[&amp;#39;probs&amp;#39;] = probs sns.set(style=&amp;#34;ticks&amp;#34;) g = sns.regplot(x=&amp;#34;num_peeps&amp;#34;, y=&amp;#34;probs&amp;#34;, data=data, ci = False, scatter_kws={&amp;#34;color&amp;#34;:&amp;#34;darkred&amp;#34;,&amp;#34;alpha&amp;#34;:0.3,&amp;#34;s&amp;#34;:90}, marker=&amp;#34;x&amp;#34;,fit_reg=False) sns.despine() g.figure.set_size_inches(10,6) g.axes.set_title(&amp;#39;As the Number of people in room reaches 23 the probability reaches ~0.5\nAt more than 50 people the probability is reaching 1&amp;#39;, fontsize=15,color=&amp;#34;g&amp;#34;,alpha=0.5) g.set_xlabel(&amp;#34;# of people in room&amp;#34;,size = 30,color=&amp;#34;r&amp;#34;,alpha=0.5) g.set_ylabel(&amp;#34;Probability&amp;#34;,size = 30,color=&amp;#34;r&amp;#34;,alpha=0.5) g.tick_params(labelsize=14,labelcolor=&amp;#34;black&amp;#34;)   We can see from the graph that as the Number of people in room reaches 23 the probability reaches ~ 0.5. So we have proved this fact Mathematically as well as with simulation.
Intuition: To understand it we need to think of this problem in terms of pairs. There are ${{23}\choose{2}} = 253$ pairs of people in the room when only 23 people are present. Now with that big number you should not find the probability of 0.5 too much. In the case of 70 people we are looking at ${{70}\choose{2}} = 2450$ pairs.
So thats it for now. To learn more about this go to Wikipedia which has an awesome page on this topic.
References:  Introduction to Probability by Joseph K. Blitzstein Birthday Problem on Wikipedia  ]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Today I Learned This Part I: What are word2vec Embeddings?</title>
      <link>https://mlwhiz.com/blog/2017/04/09/word_vec_embeddings_examples_understanding/</link>
      <pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2017/04/09/word_vec_embeddings_examples_understanding/</guid>
      
      

      
      <description>Recently Quora put out a Question similarity competition on Kaggle. This is the first time I was attempting an NLP problem so a lot to learn. The one thing that blew my mind away was the word2vec embeddings.
Till now whenever I heard the term word2vec I visualized it as a way to create a bag of words vector for a sentence.
For those who don&amp;amp;rsquo;t know bag of words: If we have a series of sentences(documents)</description>

      <content:encoded>  
        
        <![CDATA[  Recently Quora put out a Question similarity competition on Kaggle. This is the first time I was attempting an NLP problem so a lot to learn. The one thing that blew my mind away was the word2vec embeddings.
Till now whenever I heard the term word2vec I visualized it as a way to create a bag of words vector for a sentence.
For those who don&amp;rsquo;t know bag of words: If we have a series of sentences(documents)
 This is good - [1,1,1,0,0] This is bad - [1,1,0,1,0] This is awesome - [1,1,0,0,1]  Bag of words would encode it using 0:This 1:is 2:good 3:bad 4:awesome
But it is much more powerful than that.
What word2vec does is that it creates vectors for words. What I mean by that is that we have a 300 dimensional vector for every word(common bigrams too) in a dictionary.
How does that help? We can use this for multiple scenarios but the most common are:
A. Using word2vec embeddings we can find out similarity between words. Assume you have to answer if these two statements signify the same thing:
 President greets press in Chicago Obama speaks to media in Illinois.  If we do a sentence similarity metric or a bag of words approach to compare these two sentences we will get a pretty low score.
  But with a word encoding we can say that
 President is similar to Obama greets is similar to speaks press is similar to media Chicago is similar to Illinois  B. Encode Sentences: I read a post from Abhishek Thakur a prominent kaggler.(Must Read). What he did was he used these word embeddings to create a 300 dimensional vector for every sentence.
His Approach: Lets say the sentence is &amp;ldquo;What is this&amp;rdquo; And lets say the embedding for every word is given in 4 dimension(normally 300 dimensional encoding is given)
 what : [.25 ,.25 ,.25 ,.25] is : [ 1 , 0 , 0 , 0] this : [ .5 , 0 , 0 , .5]  Then the vector for the sentence is normalized elementwise addition of the vectors. i.e.
Elementwise addition : [.25&#43;1&#43;0.5, 0.25&#43;0&#43;0 , 0.25&#43;0&#43;0, .25&#43;0&#43;.5] = [1.75, .25, .25, .75] divided by math.sqrt(1.25^2 &#43; .25^2 &#43; .25^2 &#43; .75^2) = 1.5 gives:[1.16, .17, .17, 0.5]  Thus I can convert any sentence to a vector of a fixed dimension(decided by the embedding). To find similarity between two sentences I can use a variety of distance/similarity metrics.
C. Also It enables us to do algebraic manipulations on words which was not possible before. For example: What is king - man &#43; woman ?
Guess what it comes out to be : Queen
Application/Coding: Now lets get down to the coding part as we know a little bit of fundamentals.
First of all we download a custom word embedding from Google. There are many other embeddings too.
wget https://s3.amazonaws.com/dl4j-distribution/GoogleNews-vectors-negative300.bin.gz The above file is pretty big. Might take some time. Then moving on to coding.
from gensim.models import word2vec model = gensim.models.KeyedVectors.load_word2vec_format(&amp;#39;data/GoogleNews-vectors-negative300.bin.gz&amp;#39;, binary=True) 1. Starting simple, lets find out similar words. Want to find similar words to python? model.most_similar(&amp;#39;python&amp;#39;) [(u&#39;pythons&#39;, 0.6688377261161804),
(u&#39;Burmese_python&#39;, 0.6680364608764648),
(u&#39;snake&#39;, 0.6606293320655823),
(u&#39;crocodile&#39;, 0.6591362953186035),
(u&#39;boa_constrictor&#39;, 0.6443519592285156),
(u&#39;alligator&#39;, 0.6421656608581543),
(u&#39;reptile&#39;, 0.6387745141983032),
(u&#39;albino_python&#39;, 0.6158879995346069),
(u&#39;croc&#39;, 0.6083582639694214),
(u&#39;lizard&#39;, 0.601341724395752)]
 2. Now we can use this model to find the solution to the equation: What is king - man &#43; woman?
model.most_similar(positive = [&amp;#39;king&amp;#39;,&amp;#39;woman&amp;#39;],negative = [&amp;#39;man&amp;#39;]) [(u&#39;queen&#39;, 0.7118192315101624),
(u&#39;monarch&#39;, 0.6189674139022827),
(u&#39;princess&#39;, 0.5902431011199951),
(u&#39;crown_prince&#39;, 0.5499460697174072),
(u&#39;prince&#39;, 0.5377321839332581),
(u&#39;kings&#39;, 0.5236844420433044),
(u&#39;Queen_Consort&#39;, 0.5235946178436279),
(u&#39;queens&#39;, 0.5181134343147278),
(u&#39;sultan&#39;, 0.5098593235015869),
(u&#39;monarchy&#39;, 0.5087412595748901)]
 You can do plenty of freaky/cool things using this:
3. Lets say you wanted a girl and had a girl name like emma in mind but you got a boy. So what is the male version for emma? model.most_similar(positive = [&amp;#39;emma&amp;#39;,&amp;#39;he&amp;#39;,&amp;#39;male&amp;#39;,&amp;#39;mr&amp;#39;],negative = [&amp;#39;she&amp;#39;,&amp;#39;mrs&amp;#39;,&amp;#39;female&amp;#39;]) [(u&#39;sanchez&#39;, 0.4920658469200134),
(u&#39;kenny&#39;, 0.48300960659980774),
(u&#39;alves&#39;, 0.4684845209121704),
(u&#39;gareth&#39;, 0.4530612826347351),
(u&#39;bellamy&#39;, 0.44884198904037476),
(u&#39;gibbs&#39;, 0.445194810628891),
(u&#39;dos_santos&#39;, 0.44508373737335205),
(u&#39;gasol&#39;, 0.44387346506118774),
(u&#39;silva&#39;, 0.4424275755882263),
(u&#39;shaun&#39;, 0.44144102931022644)]
 4. Find which word doesn&amp;rsquo;t belong to a list? model.doesnt_match(&amp;#34;math shopping reading science&amp;#34;.split(&amp;#34; &amp;#34;)) I think staple doesn&amp;rsquo;t belong in this list!
Other Cool Things 1. Recommendations:   In this paper, the authors have shown that itembased CF can be cast in the same framework of word embedding.
2. Some other examples that people have seen after using their own embeddings: Library - Books = Hall
Obama &#43; Russia - USA = Putin
Iraq - Violence = Jordan
President - Power = Prime Minister (Not in India Though)
3.Seeing the above I started playing with it a little. Is this model sexist?
model.most_similar(positive = [&amp;#34;donald_trump&amp;#34;],negative = [&amp;#39;brain&amp;#39;]) [(u&#39;novak&#39;, 0.40405112504959106),
(u&#39;ozzie&#39;, 0.39440611004829407),
(u&#39;democrate&#39;, 0.39187556505203247),
(u&#39;clinton&#39;, 0.390536367893219),
(u&#39;hillary_clinton&#39;, 0.3862358033657074),
(u&#39;bnp&#39;, 0.38295692205429077),
(u&#39;klaar&#39;, 0.38228923082351685),
(u&#39;geithner&#39;, 0.380607008934021),
(u&#39;bafana_bafana&#39;, 0.3801495432853699),
(u&#39;whitman&#39;, 0.3790769875049591)]
 Whatever it is doing it surely feels like magic. Next time I will try to write more on how it works once I understand it fully.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Top Data Science Resources on the Internet right now</title>
      <link>https://mlwhiz.com/blog/2017/03/26/top_data_science_resources_on_the_internet_right_now/</link>
      <pubDate>Sun, 26 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2017/03/26/top_data_science_resources_on_the_internet_right_now/</guid>
      
      

      
      <description>I have been looking to create this list for a while now. There are many people on quora who ask me how I started in the data science field. And so I wanted to create this reference.
To be frank, when I first started learning it all looked very utopian and out of the world. The Andrew Ng course felt like black magic. And it still doesn&amp;amp;rsquo;t cease to amaze me.</description>

      <content:encoded>  
        
        <![CDATA[  I have been looking to create this list for a while now. There are many people on quora who ask me how I started in the data science field. And so I wanted to create this reference.
To be frank, when I first started learning it all looked very utopian and out of the world. The Andrew Ng course felt like black magic. And it still doesn&amp;rsquo;t cease to amaze me. After all, we are predicting the future. Take the case of Nate Silver - What else can you call his success if not Black Magic?
But it is not magic. And this is a way an aspiring guy could take to become a self-trained data scientist. Follow in order. I have tried to include everything that comes to my mind. So here goes:
1. Stat 110: Introduction to Probability: Joe Blitzstein - Harvard University The one stat course you gotta take. If not for the content then for Prof. Blitzstein sense of humor. I took this course to enhance my understanding of probability distributions and statistics, but this course taught me a lot more than that. Apart from Learning to think conditionally, this also taught me how to explain difficult concepts with a story.
This was a Hard Class but most definitely fun. The focus was not only on getting Mathematical proofs but also on understanding the intuition behind them and how intuition can help in deriving them more easily. Sometimes the same proof was done in different ways to facilitate learning of a concept.
One of the things I liked most about this course is the focus on concrete examples while explaining abstract concepts. The inclusion of ** Gambler’s Ruin Problem, Matching Problem, Birthday Problem, Monty Hall, Simpsons Paradox, St. Petersberg Paradox ** etc. made this course much much more exciting than a normal Statistics Course.
It will help you understand Discrete (Bernoulli, Binomial, Hypergeometric, Geometric, Negative Binomial, FS, Poisson) and Continuous (Uniform, Normal, expo, Beta, Gamma) Distributions and the stories behind them. Something that I was always afraid of.
He got a textbook out based on this course which is clearly a great text:
 2. Data Science CS109: - Again by Professor Blitzstein. Again an awesome course. Watch it after Stat110 as you will be able to understand everything much better with a thorough grinding in Stat110 concepts. You will learn about Python Libraries like Numpy,Pandas for data science, along with a thorough intuitive grinding for various Machine learning Algorithms. Course description from Website:
Learning from data in order to gain useful predictions and insights. This course introduces methods for five key facets of an investigation: data wrangling, cleaning, and sampling to get a suitable data set; data management to be able to access big data quickly and reliably; exploratory data analysis to generate hypotheses and intuition; prediction based on statistical methods such as regression and classification; and communication of results through visualization, stories, and interpretable summaries.  3. CS229: Andrew Ng After doing these two above courses you will gain the status of what I would like to call a &amp;ldquo;Beginner&amp;rdquo;. Congrats!!!. You know stuff, you know how to implement stuff. Yet you do not fully understand all the math and grind that goes behind all this.
Here comes the Game Changer machine learning course. Contains the maths behind many of the Machine Learning algorithms. I will put this course as the one course you gotta take as this course motivated me into getting in this field and Andrew Ng is a great instructor. Also this was the first course that I took.
Also recently Andrew Ng Released a new Book. You can get the Draft chapters by subcribing on his website here.
You are done with the three musketeers of the trade. You know Python, you understand Statistics and you have gotten the taste of the math behind ML approaches. Now it is time for the new kid on the block. D&amp;rsquo;artagnan. This kid has skills. While the three musketeers are masters in their trade, this guy brings qualities that adds a new freshness to our data science journey. Here comes Big Data for you.
4. Intro to Hadoop &amp;amp; Mapreduce - Udacity Let us first focus on the literal elephant in the room - Hadoop. Short and Easy Course. Taught the Fundamentals of Hadoop streaming with Python. Taken by Cloudera on Udacity. I am doing much more advanced stuff with python and Mapreduce now but this is one of the courses that laid the foundation there.
Once you are done through this course you would have gained quite a basic understanding of concepts and you would have installed a Hadoop VM in your own machine. You would also have solved the Basic Wordcount Problem. Read this amazing Blog Post from Michael Noll: Writing An Hadoop MapReduce Program In Python - Michael G. Noll. Just read the basic mapreduce codes. Don&amp;rsquo;t use Iterators and Generators yet. This has been a starting point for many of us Hadoop developers.
Now try to solve these two problems from the CS109 Harvard course from 2013:
A. First, grab the file word_list.txt from here. This contains a list of six-letter words. To keep things simple, all of the words consist of lower-case letters only.Write a mapreduce job that finds all anagrams in word_list.txt.
B. For the next problem, download the file baseball_friends.csv. Each row of this csv file contains the following:
 A person&amp;rsquo;s name The team that person is rooting for &amp;ndash; either &amp;ldquo;Cardinals&amp;rdquo; or &amp;ldquo;Red Sox&amp;rdquo; A list of that person&amp;rsquo;s friends, which could have arbitrary length  For example: The first line tells us that Aaden is a Red Sox friend and he has 65 friends, who are all listed here. For this problem, it&amp;rsquo;s safe to assume that all of the names are unique and that the friendship structure is symmetric (i.e. if Alannah shows up in Aaden&amp;rsquo;s friends list, then Aaden will show up in Alannah&amp;rsquo;s friends list). Write an mr job that lists each person&amp;rsquo;s name, their favorite team, the number of Red Sox fans they are friends with, and the number of Cardinals fans they are friends with.
Try to do this yourself. Don&amp;rsquo;t use the mrjob (pronounced Mr. Job) way that they use in the CS109 2013 class. Use the proper Hadoop Streaming way as taught in the Udacity class as it is much more customizable in the long run.
If you are done with these, you can safely call yourself as someone who could &amp;ldquo;think in Mapreduce&amp;rdquo; as how people like to call it.Try to do groupby, filter and joins using Hadoop. You can read up some good tricks from my blog:
Hadoop Mapreduce Streaming Tricks and Techniques
If you are someone who likes learning from a book you can get: 
5. Spark - In memory Big Data tool. Now comes the next part of your learning process. This should be undertaken after a little bit of experience with Hadoop. Spark will provide you with the speed and tools that Hadoop couldn&amp;rsquo;t.
Now Spark is used for data preparation as well as Machine learning purposes. I would encourage you to take a look at the series of courses on edX provided by Berkeley instructors. This course delivers on what it says. It teaches Spark. Total beginners will have difficulty following the course as the course progresses very fast. That said anyone with a decent understanding of how big data works will be OK.
Data Science and Engineering with Apache® Spark™
I have written a little bit about Basic data processing with Spark here. Take a look: Learning Spark using Python: Basics and Applications
Also take a look at some of the projects I did as part of course at github
If you would like a book to read: 
If you don&amp;rsquo;t go through the courses, try solving the same two problems above that you solved by Hadoop using Spark too. Otherwise the problem sets in the courses are more than enough.
6. Understand Linux Shell: Shell is a big friend for data scientists. It allows you to do simple data related tasks in the terminal itself. I couldn&amp;rsquo;t emphasize how much time shell saves for me everyday.
Read these tutorials by me for doing that:
Shell Basics every Data Scientist Should know -Part I Shell Basics every Data Scientist Should know - Part II(AWK)
If you would like a course you can go for this course on edX.
If you want a book, go for:
 Congrats you are an &amp;ldquo;Hacker&amp;rdquo; now. You have got all the main tools in your belt to be a data scientist. On to more advanced topics. From here it depends on you what you want to learn. You may want to take a totally different approach than what I took going from here. There is no particular order. &amp;ldquo;All Roads lead to Rome&amp;rdquo; as long as you are running.
7. Learn Statistical Inference and Bayesian Statistics I took the previous version of the specialization which was a single course taught by Mine Çetinkaya-Rundel. She is a great instrucor and explains the fundamentals of Statistical inference nicely. A must take course. You will learn about hypothesis testing, confidence intervals, and statistical inference methods for numerical and categorical data. You can also use these books:
  8. Deep Learning Intro - Making neural nets uncool again. An awesome Deep learning class from Kaggle Master Jeremy Howard. Entertaining and enlightening at the same time.
Advanced - A series of notes from the Stanford CS class CS231n: Convolutional Neural Networks for Visual Recognition.
Bonus - A free online book by Michael Nielsen.
Advanced Math Book - A math intensive book by Yoshua Bengio &amp;amp; Ian Goodfellow
9. Algorithms, Graph Algorithms, Recommendation Systems, Pagerank and More This course used to be there on Coursera but now only video links on youtube available. You can learn from this book too: 
Apart from that if you want to learn about Python and the basic intricacies of the language you can take the Computer Science Mini Specialization from RICE university too. This is a series of 6 short but good courses. I worked on these courses as Data science will require you to do a lot of programming. And the best way to learn programming is by doing programming. The lectures are good but the problems and assignments are awesome. If you work on this you will learn Object Oriented Programming,Graph algorithms and games in Python. Pretty cool stuff.
10. Advanced Maths: Couldn&amp;rsquo;t write enough of the importance of Math. But here are a few awesome resources that you can go for.
Linear Algebra By Gilbert Strang - A Great Class by a great Teacher. I Would definitely recommend this class to anyone who wants to learn LA.
Multivariate Calculus - MIT OCW
Convex Optimization - a MOOC on optimization from Stanford, by Steven Boyd, an authority on the subject.
The Machine learning field is evolving and new advancements are made every day. That&amp;rsquo;s why I didn&amp;rsquo;t put a third tier. The maximum I can call myself is a &amp;ldquo;Hacker&amp;rdquo; and my learning continues. Hope you do the same.
Hope you like this list. Please provide your inputs in comments on more learning resources as you see fit.
Till then. Ciao!!!
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Basics Of Linear Regression</title>
      <link>https://mlwhiz.com/blog/2017/03/23/basics_of_linear_regression/</link>
      <pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2017/03/23/basics_of_linear_regression/</guid>
      
      

      
      <description>Today we will look into the basics of linear regression. Here we go :
Contents  Simple Linear Regression (SLR) Multiple Linear Regression (MLR) Assumptions  1. Simple Linear Regression Regression is the process of building a relationship between a dependent variable and set of independent variables. Linear Regression restricts this relationship to be linear in terms of coefficients. In SLR, we consider only one independent variable.
Example: The Waist Circumference – Adipose Tissue data  Studies have shown that individuals with excess Adipose tissue (AT) in the abdominal region have a higher risk of cardio-vascular diseases</description>

      <content:encoded>  
        
        <![CDATA[  Today we will look into the basics of linear regression. Here we go :
Contents  Simple Linear Regression (SLR) Multiple Linear Regression (MLR) Assumptions  1. Simple Linear Regression Regression is the process of building a relationship between a dependent variable and set of independent variables. Linear Regression restricts this relationship to be linear in terms of coefficients. In SLR, we consider only one independent variable.
Example: The Waist Circumference – Adipose Tissue data  Studies have shown that individuals with excess Adipose tissue (AT) in the abdominal region have a higher risk of cardio-vascular diseases
 Computed Tomography, commonly called the CT Scan is the only technique that allows for the precise and reliable measurement of the AT (at any site in the body)
 The problems with using the CT scan are:
 Many physicians do not have access to this technology Irradiation of the patient (suppresses the immune system) Expensive  Is there a simpler yet reasonably accurate way to predict the AT area? i.e.
 Easily available Risk free Inexpensive  A group of researchers conducted a study with the aim of predicting abdominal AT area using simple anthropometric measurements i.e. measurements on the human body
 The Waist Circumference – Adipose Tissue data is a part of this study wherein the aim is to study how well waist circumference(WC) predicts the AT area
  # Setting working directory filepath &amp;lt;- c(&amp;#34;/Users/nkaveti/Documents/Work_Material/Statistics Learning/&amp;#34;) setwd(filepath) # Reading data Waist_AT &amp;lt;- read.csv(&amp;#34;adipose_tissue.csv&amp;#34;) cat(&amp;#34;Number of rows: &amp;#34;, nrow(Waist_AT), &amp;#34;\n&amp;#34;) head(Waist_AT) Number of rows: 109   WaistAT  74.7525.72 72.6025.89 81.8042.60 83.9542.80 74.6529.84 71.8521.68   Let&amp;rsquo;s start with a scatter plot of Waist Vs AT, to understand the relationship between these two variables.
plot(AT ~ Waist, data = Waist_AT)   Any observations from above plot?
Now the objective is to find a linear relation between Waist and AT. In otherwords, finding the amount of change in AT per one unit change (increment/decrement) in Waist.
In SLR, it is equivalent to finding an optimal straight line equation such that the sum of squares of differences between straight line and the points will be minimum. This method of estimation is called as Ordiany Least Squares (OLS).
$$AT = \beta_0 &#43; \beta_1 \ Waist &#43; \epsilon$$
$$Min_{\beta_0 , \beta_1} \ \ \epsilon^\intercal \epsilon \implies Min_{\beta_0 , \beta_1} \ \ (AT - \beta_0 - \beta_1 \ Waist)^\intercal (AT - \beta_0 - \beta_1 \ Waist)$$ Where, $\beta_1$ represents the amount of change in AT per one unit change in Waist.
Now our problem becomes an unconstrained optimization problem. We can find optimal values for $\beta_0$ and $\beta_1$ using basic calculus.
Lets re-write above regression equation in matrix form
$$ AT = X \beta &#43; \epsilon$$
Where, $ X = [1 \ \ Waist]$ 1 is a vector of ones and $\beta = (\beta_0, \ \beta_1)$
$$ \begin{equation} \begin{split} \epsilon^\intercal \epsilon &amp;amp; = {(AT - X \beta)}^\intercal {(AT - X \beta)} &amp;amp; = AT^\intercal AT - AT^\intercal X \beta - {(X \beta)}^\intercal AT &#43; {(X \beta)}^\intercal (X \beta) \end{split} \end{equation} $$
Now differentiate this w.r.t to $\beta$ and equate it to zero. Then we have, $$\hat{\beta} = (X^\intercal X)^{-1} X^\intercal AT $$
Now we can find the fitted values of model by substituting $\hat{\beta}$ in above regression equation $$\hat{AT} = X \hat{\beta}=X(X^\intercal X)^{-1} X^\intercal AT$$
Note: We are arriving to above equation through an assumption$^1$ of $E(\epsilon)=0$. What happens if this assumption violates?
Let, $X(X^\intercal X)^{-1} X^\intercal = H$ $$\hat{AT} = H \ AT$$
We call H as an hat matrix, because it transforms $AT$ into $\hat{AT}$ :D
# Lets compute the hat matrix X = cbind(1, Waist_AT$Waist) temp = solve(t(X) %*% X) %*% t(X) betahat = temp %*% Waist_AT$AT # Estimated coefficients cat(&amp;#34;Let&amp;#39;s compare the computed values with lm() output: \n \n&amp;#34;) cat(&amp;#34;Computed Coefficients: \n \n&amp;#34;) print(data.frame(Intercept = betahat[1], Waist = betahat[2])) cat(&amp;#34;======================================================================= \n&amp;#34;) #cat(&amp;#34;Optimal value for beta_0 is: &amp;#34;, betahat[1], &amp;#34;and for beta_1 is: &amp;#34;, betahat[2], &amp;#34;\n \n&amp;#34;) fit_lm = lm(AT ~ Waist, data = Waist_AT) #cat(&amp;#34;Compare our computed estimates with lm() estimates&amp;#34;, &amp;#34;\n&amp;#34;) print(fit_lm) cat(&amp;#34;======================================================================= \n \n&amp;#34;) H = X %*% temp # Computing hat matrix AThat = H %*% Waist_AT$AT # Computing predicted values cat(&amp;#34;Therefore, there is a&amp;#34;, betahat[2], &amp;#34;increment in AT per one unit change in Waist \n&amp;#34; ) Let&#39;s compare the computed values with lm() output: Computed Coefficients: Intercept Waist 1 -215.9815 3.458859 ======================================================================= Call: lm(formula = AT ~ Waist, data = Waist_AT) Coefficients: (Intercept) Waist -215.981 3.459 ======================================================================= Therefore, there is a 3.458859 increment in AT per one unit change in Waist  What&amp;rsquo;s next? We succesfully computed estimates for regression coefficients and fitted values.
 We are working on only one sample, how can we generalise these results to population?
 How to measure model&amp;rsquo;s performance quantitatively?
  ** We are working on only one sample, how can we generalise these results to population? **
Let&amp;rsquo;s focus on question 1. Our regression coefficients are computed using only one sample and these values will change, if we change the sample. But how much they vary? We need to estimate the variation for each beta coefficient to check whether the corresponding regressor is consistently explaining the same behaviour even if we change the sample.
Now the big problem is collecting multiple samples to check the above hypothesis. Hence, we use distributions to check statistical significance of regressors.
For our example, we need to test below two hypotheses.
$$ Null \ Hypothesis: \beta_{0} = 0 $$
$$ Alternative \ Hypothesis: \beta_{0} \neq 0$$
$$ Null \ Hypothesis: \beta_{1} = 0 $$
$$ Alternative \ Hypothesis: \beta_{1} \neq 0$$
Test Statistic for these hypotheses is,
$$t = \frac{\hat{\beta{i}}}{\sqrt{Var(\hat{\beta{i}})}}$$
Test statistic t follows t-distribution, assuming$^2$ dependent variable follows normal distribution
Suggestion: If your not aware of testing of hypothesis, probability distributions and p-values please browse through the Google.
Let&amp;rsquo;s recall that, $\hat{\beta} = (X^\intercal X)^{-1} X^\intercal AT$
$$\begin{equation} \begin{split} Var(\hat{\beta}) &amp;amp; = Var((X^\intercal X)^{-1} X^\intercal AT) &amp;amp; = (X^\intercal X)^{-1} X^\intercal \ Var(AT) \ X(X^\intercal X)^{-1} &amp;amp; = (X^\intercal X)^{-1} X^\intercal \ X(X^\intercal X)^{-1} \ \sigma^2 &amp;amp; = (X^\intercal X)^{-1} \sigma^2 \end{split} \end{equation} $$
Note: In the above calculations we assumed$^3$ $Var(AT) = \sigma^2$ (Constant). Where, $\sigma^2$ is variation in population AT.
Suggestion: Try solving $(X^\intercal X)^{-1}$ with $X = [1, \ x]$ where $x = (x_1, x_2, x_3 &amp;hellip; x_n)$. You will get the following expression.
$$ \ Var(\hat{\beta}) = \frac{1}{n \sum x_i^2 - (\sum x_i)^2} \begin{bmatrix} \sum_{i=1}^n x_i^2 &amp; -\sum x_i \\ -\sum x_i &amp; n \end{bmatrix} \sigma^2 \ $$ Diagonal elements of above matrix are varinaces of $\beta_0$ and $\beta_1$ respectively. Off-diagonal element is covariance between $\beta_0$ and $\beta_1$.
Hence,
 $$Var(\hat{\beta_0}) = \frac{\sigma^2 \sum_{i = 1}^n x_i^2}{n \sum_{i = 1}^n (x_i - \bar{x})^2}$$   $$Var(\hat{\beta_1}) = \frac{\sigma^2}{\sum_{i = 1}^n (x_i - \bar{x})^2}$$  One important observation from $Var(\hat{\beta})$ expressions is, $Var(x)$ is inversely proportional to $Var(\hat{\beta})$. That is, we will get more consistent estimators if there is high variation in corresponding predictors.
Recall that, $\sigma^2$ in above expression is the population variance, not the sample. Hence, we need to estimate this using the sample that we have.
$$\hat{\sigma^2} = \frac{1}{n-2} \sum_{i = 1}^n e_i^2$$
Where, $e_i = AT_i - \hat{AT}_i$
# Let&amp;#39;s compute variances of beta hat and test statistic &amp;#39;t&amp;#39; sigmasq = (1/length(AThat[-c(1:2)]))*sum((AThat - Waist_AT$AT)^2) VarBeta0 = (sigmasq * sum(Waist_AT$Waist^2))/(length(AThat) * sum((Waist_AT$Waist - mean(Waist_AT$Waist))^2)) VarBeta1 = sigmasq/sum((Waist_AT$Waist - mean(Waist_AT$Waist))^2) cat(&amp;#34;Let&amp;#39;s compare the computed values with lm() output: \n \n&amp;#34;) cat(&amp;#34;======================================================================= \n&amp;#34;) cat(&amp;#34;Computed Coefficients: \n \n&amp;#34;) res = data.frame(Estimate = betahat, Std.Error = c(sqrt(VarBeta0), sqrt(VarBeta1)), t_value = c(betahat[1]/sqrt(VarBeta0), betahat[2]/sqrt(VarBeta1))) row.names(res) = c(&amp;#34;(Intercept)&amp;#34;, &amp;#34;Waist&amp;#34;) res$p_value = 2*pt(abs(res$t_value), nrow(Waist_AT)-1, lower.tail = FALSE) print(res) cat(&amp;#34;=======================================================================&amp;#34;) summary(fit_lm) cat(&amp;#34;=======================================================================&amp;#34;) Let&#39;s compare the computed values with lm() output: ======================================================================= Computed Coefficients: Estimate Std.Error t_value p_value (Intercept) -215.981488 21.7962708 -9.909103 7.507198e-17 Waist 3.458859 0.2346521 14.740376 1.297124e-27 ======================================================================= Call: lm(formula = AT ~ Waist, data = Waist_AT) Residuals: Min 1Q Median 3Q Max -107.288 -19.143 -2.939 16.376 90.342 Coefficients: Estimate Std. Error t value Pr(&amp;gt;|t|) (Intercept) -215.9815 21.7963 -9.909 &amp;lt;2e-16 *** Waist 3.4589 0.2347 14.740 &amp;lt;2e-16 *** --- Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 33.06 on 107 degrees of freedom Multiple R-squared: 0.67, Adjusted R-squared: 0.667 F-statistic: 217.3 on 1 and 107 DF, p-value: &amp;lt; 2.2e-16 =======================================================================  Note: Residual standard error = $\sqrt{sigmasq}$
How to measure model&amp;rsquo;s performance quantitatively?
Let&amp;rsquo;s focus on question 2 (How to measure model&amp;rsquo;s performance quantitatively?). Recall that, our objective of building model is to explain the variation in AT using the variation in Waist.
Total variation in AT is, $\sum_{i=1}^n (AT - mean(AT))^2$ this can be splitted into two parts as follows:
 $$ \begin{equation} \begin{split} \sum_{i=1}^n (AT_i - \bar{AT})^2 &amp; = \sum_{i=1}^n (AT - \hat{AT_i} &#43; \hat{AT_i} - \bar{AT})^2 \\ &amp; = \sum_{i = 1}^n (\hat{AT_i} - \bar{AT})^2 &#43; \sum_{i=1}^n (AT_i - \hat{AT_i})^2 \end{split} \end{equation} $$  Where, $\sum_{i=1}^n (AT_i - \bar{AT})^2$ is the total variation in AT, $\sum_{i = 1}^n (\hat{AT_i} - \bar{AT})^2$ is the explained variation in AT, this is also called as Regression Sum of Squares and $\sum_{i=1}^n (AT_i - \hat{AT_i})^2$ is the unexplained variation in AT, this is also called as Error Sum of Squares
We can measure our model using the proportion of total variation explained by independent variable(s). That is, $\frac{Regression \ Sum \ of \ Squares}{Total \ Sum \ of \ Squares}$
The above measure is called as Multiple R-squared:
 $$Multiple \ R-squared = \frac{\sum_{i = 1}^n (\hat{AT_i} - \bar{AT})^2}{\sum_{i=1}^n (AT_i - \bar{AT})^2}$$  Interesting facts: Multiple R-squared value in SLR is equals to $r^2$ and (1 - Multiple R-squared) is equals to the variance in residuals.
Where, r is pearson&amp;rsquo;s correlation coefficient between dependent and independent variable.
# Let&amp;#39;s compute Multiple R-squared measure for our example SSR = sum((AThat - mean(Waist_AT$AT))^2) SST = sum((Waist_AT$AT - mean(Waist_AT$AT))^2) MulRSq = SSR/SST cat(&amp;#34;Compute Multiple R-squared: &amp;#34;, MulRSq, &amp;#34;\n \n&amp;#34;) cat(&amp;#34;Note that computed R squared value is matching with lm() Multiple R-squared value in above output \n \n&amp;#34;) cat(&amp;#34;======================================================================= \n \n&amp;#34;) Compute Multiple R-squared: 0.6700369 Note that computed R squared value is matching with lm() Multiple R-squared value in above output =======================================================================  What happens to the Multiple R-squared value when you add an irrelevant variable to the model?
In the below model, I am generating a random sample of uniform numbers between 1 to 100 and considering this as one of indepedent variable.
set.seed(1234) fit_lm2 = lm(AT ~ Waist &#43; runif(nrow(Waist_AT), 1, 100), data = Waist_AT) summary(fit_lm2) cat(&amp;#34;======================================================================= \n \n&amp;#34;) Call: lm(formula = AT ~ Waist &#43; runif(nrow(Waist_AT), 1, 100), data = Waist_AT) Residuals: Min 1Q Median 3Q Max -106.06 -17.53 -3.63 13.70 91.36 Coefficients: Estimate Std. Error t value Pr(&amp;gt;|t|) (Intercept) -226.2894 23.4350 -9.656 3.33e-16 *** Waist 3.5060 0.2376 14.757 &amp;lt; 2e-16 *** runif(nrow(Waist_AT), 1, 100) 0.1397 0.1181 1.183 0.239 --- Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 33 on 106 degrees of freedom Multiple R-squared: 0.6743, Adjusted R-squared: 0.6682 F-statistic: 109.7 on 2 and 106 DF, p-value: &amp;lt; 2.2e-16 =======================================================================  Multiple R-squared value increases irrespective of quality of explanation, which is incorrect. We should penalize our model performance if the quality of explanation is poor, that is why we need to adjust our R-squared value.
To penalize the explained part of AT, we inflate the unexplained part of AT with $\frac{Total \ degrees \ of \ freedom}{Error \ degrees \ of \ freedom}$. That is,
$$Adjusted \ R-squared = 1 - (1 - R^2) \frac{n-1}{n-p-1}$$
Where, n = Total number of observations; p = Total number of predictors (excluding intercept)
Adding a new independent variable will increase $\frac{n-1}{n-p-1}$ and $R^2$. If the amount of increment in $R^2$ is less than the amount of increment in $\frac{n-1}{n-p-1}$ than it will decrease the Adjusted R-squared value.
In fit_lm2 model Adjusted R-squared decreases when we add randomly generated variable into the model.
# Let&amp;#39;s compute adjusted R-squared for our example TDF = nrow(Waist_AT[-1, ]) # Total degrees of freedom EDF = nrow(Waist_AT[-1, ]) - 1 # Error degrees of freedom, where 1 is the number of predictors AdjRSq = 1 - (1 - MulRSq) * (TDF/EDF) # Adjusted R square cat(&amp;#34;Compute Multiple R-squared: &amp;#34;, AdjRSq, &amp;#34;\n \n&amp;#34;) cat(&amp;#34;Note that computed Adjusted R-squared value is matching with lm() Adjusted R-squared value in the above output \n \n&amp;#34;) cat(&amp;#34;Note: We are comparing with fit_lm model, not fit_lm2 \n&amp;#34;) cat(&amp;#34;======================================================================= \n&amp;#34;) Compute Multiple R-squared: 0.6669531 Note that computed Adjusted R-squared value is matching with lm() Adjusted R-squared value in the above output Note: We are comparing with fit_lm model, not fit_lm2 =======================================================================  Aforementioned measures (Multiple R-squared &amp;amp; Adjusted R-squared) for Goodness of fit are functions of sample and these will vary as sample changes. Similar to t-test for regression coefficeints we need some statistical test to test model&amp;rsquo;s performance for population.
Objective is to compare the Mean sum of squares due to regression and Mean sum of squares due to error. F-test is very helpful to compare the variations.
$$ F-test = \frac{\frac{1}{p-1}\sum_{i=1}^n (\hat{AT_i} - \bar{AT})^2}{\frac{1}{n-p-1} \sum_{i=1}^n (\hat{AT_i} - AT_i)^2}$$  Note: Above expression follows F distribution only if, AT follows Normal Distribution
RDF = TDF - EDF SSE = SST - SSR MSR = (1/RDF)*SSR MSE = (1/EDF)*SSE F_value = MSR/MSE cat(&amp;#34;Compute F statistic: &amp;#34;, F_value, &amp;#34;\n \n&amp;#34;) cat(&amp;#34;Note that computed F-statistic is matching with lm() F-statistic value in the above output \n \n&amp;#34;) cat(&amp;#34;Note: We are comparing with fit_lm model, not fit_lm2 \n&amp;#34;) cat(&amp;#34;======================================================================= \n&amp;#34;) Compute F statistic: 217.2787 Note that computed F-statistic is matching with lm() F-statistic value in the above output Note: We are comparing with fit_lm model, not fit_lm2 =======================================================================  2. Multiple Linear Regression (MLR) In multiple linear regression we consider more than one predictor and one dependent variable. Most of the above explanation is valid for MLR too.
Example: Car&amp;rsquo;s MPG (Miles Per Gallon) prediction Our interest is to model the MPG of a car based on the other variables.
Variable Description:
 VOL = cubic feet of cab space HP = engine horsepower MPG = average miles per gallon SP = top speed, miles per hour WT = vehicle weight, hundreds of pounds  # Reading Boston housing prices data car = read.csv(&amp;#34;Cars.csv&amp;#34;) cat(&amp;#34;Number of rows: &amp;#34;, nrow(car), &amp;#34;\n&amp;#34;, &amp;#34;Number of variables: &amp;#34;, ncol(car), &amp;#34;\n&amp;#34;) head(car) Number of rows: 81 Number of variables: 5   HPMPGVOLSPWT  49 53.7006889 104.185428.76206 55 50.0134092 105.461330.46683 55 50.0134092 105.461330.19360 70 45.6963292 113.461330.63211 53 50.5042392 104.461329.88915 70 45.6963289 113.185429.59177   Our objective is to model the variation in MPG using other independent variables. That is,
$$MPG = \beta_0 &#43; \beta_1 VOL &#43; \beta_2 HP &#43; \beta_3 SP &#43; \beta_4 WT &#43; \epsilon$$
Where, $\beta_1$ represents the amount of change in MPG per one unit change in VOL provided other variables are fixed. Let&amp;rsquo;s consider below two cases,
Case1: HP = 49; VOL = 89; SP = 104.1854; WT = 28.76206 =&amp;gt; MPG = 104.1854
Case2: HP = 49; VOL = 90; SP = 104.1854; WT = 28.76206 =&amp;gt; MPG = 105.2453
then $\beta_1 = 105.2453 - 104.1854 = 1.0599$. Similarly, $\beta_2, \beta_3, \beta_4$
The above effect is called as Ceteris Paribus Effect.
But in real world it is very difficult to collect records in above manner. That&amp;rsquo;s why we compute (function of) partial correlation coefficients to quantify the effect of one variable, keeping others constant.
# Let&amp;#39;s build MLR model to predict MPG based using other variables fit_mlr_actual = lm(MPG ~ ., data = car) summary(fit_mlr_actual) Call: lm(formula = MPG ~ ., data = car) Residuals: Min 1Q Median 3Q Max -0.94530 -0.32792 -0.04058 0.24256 1.71034 Coefficients: Estimate Std. Error t value Pr(&amp;gt;|t|) (Intercept) 7.100e-17 5.461e-02 0.000 1.0000 HP -1.285e&#43;00 2.453e-01 -5.239 1.4e-06 *** VOL -8.207e-01 1.389e&#43;00 -0.591 0.5563 SP 6.144e-01 2.458e-01 2.500 0.0146 * WT 3.287e-01 1.390e&#43;00 0.237 0.8136 --- Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 0.4915 on 76 degrees of freedom Multiple R-squared: 0.7705, Adjusted R-squared: 0.7585 F-statistic: 63.8 on 4 and 76 DF, p-value: &amp;lt; 2.2e-16  One key observation from above output is, Std. Error for VOL and WT is very huge comparing to others and this inflates t values and p value. Hence, these two variables becomes very insignificant for the model.
Let&amp;rsquo;s go into deep, what happened to $Var(\hat{\beta_{VOL}})$ and $Var(\hat{\beta_{WT}})$?
Analogy for $Var(\hat{\beta})$ in MLR is as follows:
 $$Var(\hat{\beta_{VOL}}) = \frac{\sigma^2}{n\sum_{i=1}^n (VOL_i - \bar{VOL})^2 (1 - R_{VOL}^2)}$$  Where, $R_{VOL}^2$ = Multiple R-squared value obtained by regressing VOL on all other independent variables
Task: To understand it more clearly, take few random samples from cars data and run the MLR model and observe the variation in $\hat{\beta_{VOL}}$ and $\hat{\beta_{WT}}$.
# Let&amp;#39;s regress VOL on all other independent variables&amp;#39; fit_mlr = lm(VOL ~ HP &#43; SP &#43; WT, data = car) summary(fit_mlr) Call: lm(formula = VOL ~ HP &#43; SP &#43; WT, data = car) Residuals: Min 1Q Median 3Q Max -0.068938 -0.031641 -0.008794 0.032018 0.077931 Coefficients: Estimate Std. Error t value Pr(&amp;gt;|t|) (Intercept) -6.155e-18 4.481e-03 0.000 1.000 HP 2.331e-02 1.995e-02 1.168 0.246 SP -2.294e-02 2.000e-02 -1.147 0.255 WT 9.998e-01 4.557e-03 219.396 &amp;lt;2e-16 *** --- Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 0.04033 on 77 degrees of freedom Multiple R-squared: 0.9984, Adjusted R-squared: 0.9984 F-statistic: 1.637e&#43;04 on 3 and 77 DF, p-value: &amp;lt; 2.2e-16  It&amp;rsquo;s surprising that, $R_{VOL}^2$ is 0.9984 and also only WT is significant. That is, these two predictors (VOL and WT) are highly correlated. This inflates $Var(\hat{\beta_{VOL}})$ and thus t value. We might be missing some of the important information because of high correlation between predictors. This problem is called as Multicollinearity.
One quick solution for this problem is to remove either VOL or WT from the model. Let&amp;rsquo;s compute partial correlation coeficient between MPG and VOL by removing the effect of WT (say, $r_{MV.W}$) and partial correlation coeficient between MPG and WT by removing the effect of VOL (say, $r_{MW.V}$).
To compute $r_{MV.W}$ we need to compute the correlation between (a) part of VOL which cannot be explained by WT (regress VOL on WT and take the residuals) and (b) the part of MPG which cannot be explained by WT (regress MPG on WT and take the residuals)
fit_partial = lm(VOL ~ WT, data = car) fit_partial2 = lm(MPG ~ WT, data = car) res1 = fit_partial$residual res2 = fit_partial2$residual cat(&amp;#34;Partial correlation coefficient between MPG and VOL by removing the effect of WT is: &amp;#34;, cor(res1, res2)) Partial correlation coefficient between MPG and VOL by removing the effect of WT is: -0.08008873  fit_partial3 = lm(WT ~ VOL, data = car) fit_partial4 = lm(MPG ~ VOL, data = car) res1 = fit_partia3$residual res2 = fit_partial4$residual cat(&amp;#34;Partial correlation coefficient between MPG and WT by removing the effect of VOL is: &amp;#34;, cor(res1, res2)) Partial correlation coefficient between MPG and WT by removing the effect of VOL is: 0.05538241  Since, $abs(r_{MV.W}) &amp;gt;= abs(r_{MW.V})$ we may remove WT from the model.
# Remove WT and rerun the model fit_mlr_actual2 = lm(MPG ~ .-WT, data = car) summary(fit_mlr_actual2) Call: lm(formula = MPG ~ . - WT, data = car) Residuals: Min 1Q Median 3Q Max -0.94036 -0.31695 -0.03457 0.23316 1.71570 Coefficients: Estimate Std. Error t value Pr(&amp;gt;|t|) (Intercept) 7.910e-17 5.427e-02 0.000 1.0000 HP -1.293e&#43;00 2.415e-01 -5.353 8.64e-07 *** VOL -4.925e-01 5.516e-02 -8.928 1.65e-13 *** SP 6.222e-01 2.421e-01 2.571 0.0121 * --- Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 0.4884 on 77 degrees of freedom Multiple R-squared: 0.7704, Adjusted R-squared: 0.7614 F-statistic: 86.11 on 3 and 77 DF, p-value: &amp;lt; 2.2e-16  After eliminating WT from the model there is an increment of ~0.3% in Adjusted R-squared and more importantly, VOL becomes significant at 0 los (level of significance)

3. Assumptions Linear in Parameters: We assume that there is a linear relation between dependent and set of independent variables
Zero conditional mean: $E(\epsilon \mid X) = 0$
Homoskedasticity: $Var(\epsilon \mid X) = \sigma^2$ (Constant)
No perfect Collinearity: All predecitors must be independent among themselves
No serial correlation in errors: Erros must be uncorrelated among themselves. In otherwords, observations or records must be independent of each other.
We discussed first 4 assumptions in section 1 and 2.
Here is a book that I recommend to learn more about this:
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Top advice for a Data Scientist</title>
      <link>https://mlwhiz.com/blog/2017/03/05/think_like_a_data_scientist/</link>
      <pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2017/03/05/think_like_a_data_scientist/</guid>
      
      

      
      <description>A data scientist needs to be Critical and always on a lookout of something that misses others. So here are some advices that one can include in day to day data science work to be better at their work:
1. Beware of the Clean Data Syndrome You need to ask yourself questions even before you start working on the data. Does this data make sense? Falsely assuming that the data is clean could lead you towards wrong Hypotheses.</description>

      <content:encoded>  
        
        <![CDATA[    A data scientist needs to be Critical and always on a lookout of something that misses others. So here are some advices that one can include in day to day data science work to be better at their work:
1. Beware of the Clean Data Syndrome You need to ask yourself questions even before you start working on the data. Does this data make sense? Falsely assuming that the data is clean could lead you towards wrong Hypotheses. Apart from that, you can discern a lot of important patterns by looking at discrepancies in the data. For example, if you notice that a particular column has more than 50% values missing, you might think about not using the column. Or you may think that some of the data collection instrument has some error.
Or let&amp;rsquo;s say you have a distribution of Male vs Female as 90:10 in a Female Cosmetic business. You may assume clean data and show the results as it is or you can use common sense and ask if the labels are switched.
2. Manage Outliers wisely Outliers can help you understand more about the people who are using your website/product 24 hours a day. But including them while building models will skew the models a lot.
3. Keep an eye out for the Abnormal Be on the lookout for something out of the obvious. If you find something you may have hit gold.
For example, Flickr started up as a Multiplayer game. Only when the founders noticed that people were using it as a photo upload service, did they pivot.
Another example: fab.com started up as fabulis.com, a site to help gay men meet people. One of the site&amp;rsquo;s popular features was the &amp;ldquo;Gay deal of the Day&amp;rdquo;. One day the deal was for Hamburgers - and half of the buyers were women. This caused the team to realize that there was a market for selling goods to women. So Fabulis pivoted to fab as a flash sale site for designer products.
4. Start Focussing on the right metrics  Beware of Vanity metrics For example, # of active users by itself doesn&amp;rsquo;t divulge a lot of information. I would rather say &amp;ldquo;5% MoM increase in active users&amp;rdquo; rather than saying &amp;ldquo; 10000 active users&amp;rdquo;. Even that is a vanity metric as active users would always increase. I would rather keep a track of percentage of users that are active to know how my product is performing. Try to find out a metric that ties with the business goal. For example, Average Sales/User for a particular month.   5. Statistics may lie too Be critical of everything that gets quoted to you. Statistics has been used to lie in advertisements, in workplaces and a lot of other marketing venues in the past. People will do anything to get sales or promotions.
For example: Do you remember Colgate’s claim that 80% of dentists recommended their brand?
This statistic seems pretty good at first. It turns out that at the time of surveying the dentists, they could choose several brands — not just one. So other brands could be just as popular as Colgate.
Another Example: &amp;ldquo;99 percent Accurate&amp;rdquo; doesn&amp;rsquo;t mean shit. Ask me to create a cancer prediction model and I could give you a 99 percent accurate model in a single line of code. How? Just predict &amp;ldquo;No Cancer&amp;rdquo; for each one. I will be accurate may be more than 99% of the time as Cancer is a pretty rare disease. Yet I have achieved nothing.
6. Understand how probability works It happened during the summer of 1913 in a Casino in Monaco. Gamblers watched in amazement as a casino&amp;rsquo;s roulette wheel landed on black 26 times in a row. And since the probability of a Red vs Black is exactly half, they were certain that red was &amp;ldquo;due&amp;rdquo;. It was a field day for the Casino. A perfect example of Gambler&amp;rsquo;s fallacy, aka the Monte Carlo fallacy.
And This happens in real life. People tend to avoid long strings of the same answer. Sometimes sacrificing accuracy of judgment for the sake of getting a pattern of decisions that looks fairer or probable.
For example, An admissions officer may reject the next application if he has approved three applications in a row, even if the application should have been accepted on merit.
7. Correlation Does Not Equal Causation   The Holy Grail of a Data scientist toolbox. To see something for what it is. Just because two variables move together in tandem doesn&amp;rsquo;t necessarily mean that one causes the another. There have been hilarious examples for this in the past. Some of my favorites are:
 Looking at the firehouse department data you infer that the more firemen are sent to a fire, the more damage is done.
 When investigating the cause of crime in New York City in the 80s, an academic found a strong correlation between the amount of serious crime committed and the amount of ice cream sold by street vendors! Obviously, there was an unobserved variable causing both. Summers are when the crime is the greatest and when the most ice cream is sold. So Ice cream sales don&amp;rsquo;t cause crime. Neither crime increases ice cream sales.
  8. More data may help Sometimes getting extra data may work wonders. You might be able to model the real world more closely by looking at the problem from all angles. Look for extra data sources.
For example, Crime data in a city might help banks provide a better credit line to a person living in a troubled neighborhood and in turn increase the bottom line.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Machine Learning Algorithms for Data Scientists</title>
      <link>https://mlwhiz.com/blog/2017/02/05/ml_algorithms_for_data_scientist/</link>
      <pubDate>Sun, 05 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2017/02/05/ml_algorithms_for_data_scientist/</guid>
      
      

      
      <description>As a data scientist I believe that a lot of work has to be done before Classification/Regression/Clustering methods are applied to the data you get. The data which may be messy, unwieldy and big. So here are the list of algorithms that helps a data scientist to make better models using the data they have:
1. Sampling Algorithms. In case you want to work with a sample of data.</description>

      <content:encoded>  
        
        <![CDATA[    As a data scientist I believe that a lot of work has to be done before Classification/Regression/Clustering methods are applied to the data you get. The data which may be messy, unwieldy and big. So here are the list of algorithms that helps a data scientist to make better models using the data they have:
1. Sampling Algorithms. In case you want to work with a sample of data.  Simple Random Sampling : Say you want to select a subset of a population in which each member of the subset has an equal probability of being chosen. Stratified Sampling: Assume that we need to estimate average number of votes for each candidate in an election. Assume that country has 3 towns : Town A has 1 million factory workers, Town B has 2 million workers and Town C has 3 million retirees. We can choose to get a random sample of size 60 over entire population but there is some chance that the random sample turns out to be not well balanced across these towns and hence is biased causing a significant error in estimation. Instead if we choose to take a random sample of 10, 20 and 30 from Town A, B and C respectively then we can produce a smaller error in estimation for the same total size of sample. Reservoir Sampling :Say you have a stream of items of large and unknown length that we can only iterate over once. Create an algorithm that randomly chooses an item from this stream such that each item is equally likely to be selected.  2. Map-Reduce. If you want to work with the whole data. Can be used for feature creation. For Example: I had a use case where I had a graph of 60 Million customers and 130 Million accounts. Each account was connected to other account if they had the Same SSN or Same Name&#43;DOB&#43;Address. I had to find customer ID’s for each of the accounts. On a single node parsing such a graph took more than 2 days. On a Hadoop cluster of 80 nodes running a Connected Component Algorithm took less than 24 minutes. On Spark it is even faster.
3. Graph Algorithms. Recently I was working on an optimization problem which was focussed on finding shortest distance and routes between two points in a store layout. Routes which don’t pass through different aisles, so we cannot use euclidean distances. We solved this problem by considering turning points in the store layout and the djikstra’s Algorithm.
 4. Feature Selection.  Univariate Selection. Statistical tests can be used to select those features that have the strongest relationship with the output variable. VarianceThreshold. Feature selector that removes all low-variance features. Recursive Feature Elimination. The goal of recursive feature elimination (RFE) is to select features by recursively considering smaller and smaller sets of features. First, the estimator is trained on the initial set of features and weights are assigned to each one of them. Then, features whose absolute weights are the smallest are pruned from the current set features. That procedure is recursively repeated on the pruned set until the desired number of features to select is eventually reached. Feature Importance: Methods that use ensembles of decision trees (like Random Forest or Extra Trees) can also compute the relative importance of each attribute. These importance values can be used to inform a feature selection process.  5. Algorithms to work efficiently. Apart from these above algorithms sometimes you may need to write your own algorithms. Now I think of big algorithms as a combination of small but powerful algorithms. You just need to have idea of these algorithms to make a more better/efficient product. So some of these powerful algorithms which can help you are:
 Recursive Algorithms:Binary search algorithm. Divide and Conquer Algorithms: Merge-Sort. Dynamic Programming:Solving a complex problem by breaking it down into a collection of simpler subproblems, solving each of those subproblems just once, and storing their solutions.  6. Classification/Regression Algorithms. The usual suspects. Minimum you must know:  Linear Regression - Ridge Regression, Lasso Regression, ElasticNet Logistic Regression From there you can build upon:  Decision Trees - ID3, CART, C4.5, C5.0 KNN SVM ANN - Back Propogation, CNN  And then on to Ensemble based algorithms:  Boosting: Gradient Boosted Trees Bagging: Random Forests Blending: Prediction outputs of different learning algorithms are fed into another learning algorithm.   7 . Clustering Methods.For unsupervised learning.  k-Means k-Medians Expectation Maximisation (EM) Hierarchical Clustering  8. Other algorithms you can learn about:  Apriori algorithm- Association Rule Mining Eclat algorithm - Association Rule Mining Item/User Based Similarity - Recommender Systems Reinforcement learning - Build your own robot. Graphical Models Bayesian Algorithms NLP - For language based models. Chatbots.  Hope this has been helpful&amp;hellip;..
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Things to see while buying a Mutual Fund</title>
      <link>https://mlwhiz.com/blog/2016/12/24/mutual_fund_ratios/</link>
      <pubDate>Sat, 24 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2016/12/24/mutual_fund_ratios/</guid>
      
      

      
      <description>This is a post which deviates from my pattern fo blogs that I have wrote till now but I found that Finance also uses up a lot of Statistics. So it won&amp;amp;rsquo;t be a far cry to put this on my blog here. I recently started investing in Mutual funds so thought of rersearching the area before going all in. Here is the result of some of my research.</description>

      <content:encoded>  
        
        <![CDATA[  This is a post which deviates from my pattern fo blogs that I have wrote till now but I found that Finance also uses up a lot of Statistics. So it won&amp;rsquo;t be a far cry to put this on my blog here. I recently started investing in Mutual funds so thought of rersearching the area before going all in. Here is the result of some of my research.
1. Load/No-Load: Always Buy No Load Mutual Funds
2. Regular/Direct: There are many differenct sites from where you can buy Mutual funds. Most of these sites take a commision to let you the investor buy and sell from their platform. To overcome this commision you can buy direct Mutual funds from the fund houses themselves. But that would be difficult as their are a lot of fund houses and mmanaging all of that could be quite painful. But with the advent of MFUtility you can buy direct plans from the same platform.
3. Expense Ratios: The expense ratio is a measure of what it costs an investment company to operate a mutual fund. To see how expense ratios can affect your investments over time, let’s compare the returns of several hypothetical investments that differ only in expense ratio. The following table depicts the returns on a 10,000 initial investment, assuming an average annualized gain of 10%, with different expense ratios (0.5%, 1%, 1.5%, 2% and 2.5%):
  As the table illustrates, even a small difference in expense ratio can cost you a lot of money in the long run. If you had invested 10,000 in the fund with a 2.5% expense ratio, the value of your fund would be 46,022 after 20 years. Had you instead invested your 10,000 in the fund with a lower, 0.5% expense ratio, your investment would be worth $61,159 after two decades, a 0.33% improvement over the more expensive fund. Keep in mind, this hypothetical example examines funds whose only differences are the expense ratios: all other variables, including initial investment and annualized gains, remain constant (for the example, we must assume identical taxation as well). While two funds are not likely to have the exact same performance over a 20-year period, the table illustrates the effects that small changes in expense ratio can have on your long-term returns.
 4. Avoid Mutual Funds With High Turnover Ratios: Mutual fund turnover is calculated as the value of all transactions (buying, selling) divided by two, then divided by a fund&amp;rsquo;s total holdings. In simpler terms, mutual fund turnover typically measures the replacement of holdings in a mutual fund, and is commonly presented to investors as a percentage over a one year period. If a fund has 100% turnover, the fund replaces all of its holdings over a 12-month period and that bears cost to the investment company in terms of brokerage etc.
5. Look for Ample Diversification of Assets: Simply owning four different mutual funds specializing in the financial sector (shares of banks, insurance companies, etc.) is not diversification. Don’t own funds that make heavy sector or industry bets. If you choose to despite this warning, make sure that you don’t have a huge portion of your funds invested in them. If it’s a bond fund, you typically want to avoid bets on the direction of interest rates as this is rank speculation.
6. Not Same Fund Family: Don’t keep all of your funds within the same fund family. Witness the mutual fund scandal of a few years ago where portfolio management at many firms allowed big traders to market time the funds, essentially stealing money from smaller investors. By spreading your assets out at different companies, you can mitigate the risk of internal turmoil, ethics breaches, and other localized problems.
7. Keep Track of various Risk Ratios: a. Standard deviation: Standard deviation (SD) measures the volatility the fund&amp;rsquo;s returns in relation to its average. It tells you how much the fund&amp;rsquo;s return can deviate from the historical mean return of the scheme. If a fund has a 12% average rate of return and a standard deviation of 4%, its return will range from 8-16%
Computation:
Standard Deviation (SD) = Square root of Variance (V)
Variance = (Sum of squared difference between each monthly return and its mean / number of monthly return data – 1)
b. R-Squared: R-Squared measures the relationship between a portfolio and its benchmark. It can be thought of as a percentage from 1 to 100. R-squared is not a measure of the performance of a portfolio. A great portfolio can have a very low R-squared. It is simply a measure of the correlation of the portfolio&amp;rsquo;s returns to the benchmark&amp;rsquo;s returns.
Computation:
R-Squared = Square of Correlation
Correlation(xy)= Covariance between index and portfolio/(Standard deviation of portfolio * standard deviation of index)
Significance:
 If you want a portfolio that moves like the benchmark, you&amp;rsquo;d want a portfolio with a high Rsquared.
 If you want a portfolio that doesn&amp;rsquo;t move at all like the benchmark, you&amp;rsquo;d want a low R-squared.
  General Range for R-Squared:
 70-100% = good correlation between the portfolio&amp;rsquo;s returns and the benchmark&amp;rsquo;s returns
 40-70% = average correlation between the portfolio&amp;rsquo;s returns and the benchmark&amp;rsquo;s returns
 1-40% = low correlation between the portfolio&amp;rsquo;s returns and the benchmark&amp;rsquo;s returns
 Index funds will have an R-squared very close to 100.
 R-squared can be used to ascertain the significance of a particular beta or alpha. Generally, a higher R-squared will indicate a more useful beta figure. If the R-squared is lower, then the beta is less relevant to the fund&amp;rsquo;s performance
 Values range from 1 (returns are explained 100% by the market) to 0 (returns bear no association with the market)
  c. Beta: A beta of 1.0 indicates that the investment&amp;rsquo;s price will move in lock-step with the market.
A beta of less than 1.0 indicates that the investment will be less volatile than the market, and, correspondingly, a beta of more than 1.0 indicates that the investment&amp;rsquo;s price will be more volatile than the market.
For example, if a fund portfolio&amp;rsquo;s beta is 1.2, it&amp;rsquo;s theoretically 20% more volatile than the market. Conservative investors looking to preserve capital should focus on securities and fund portfolios with low betas, whereas those investors willing to take on more risk in search of higher returns should look for high beta investments.
Computation:
Beta = (Standard Deviation of Fund x R-Square) / Standard Deviation of Benchmark
If a fund has a beta of 1.5, it means that for every 10% upside or downside, the fund&amp;rsquo;s NAV would be 15% in the respective direction.
d. Jensens Alpha: Alpha is a measure of an investment&amp;rsquo;s performance on a risk-adjusted basis.
Simply stated, alpha is often considered to represent the value that a portfolio manager adds or subtracts from a fund portfolio&amp;rsquo;s return.
A positive alpha of 1.0 means the fund has outperformed its benchmark index by 1%. Correspondingly, a similar negative alpha would indicate an underperformance of 1%.
Computation:
Alpha = {(Fund return-Risk free return) – (Funds beta) *(Benchmark return- risk free return)}
For example, assume a mutual fund realized a return of 15% last year. The appropriate market index for this fund returned 12%. The beta of the fund versus that same index is 1.2 and the risk-free rate is 3%. The fund&amp;rsquo;s alpha is calculated as:
Alpha = {(15 -3) – (1.2) *(12- 3)} = 12 - 9 x 1.2 = 12-10.8 = 1.2
Given a beta of 1.2, the mutual fund is expected to be riskier than the index, and thus earn more. A positive alpha in this example shows that the mutual fund manager earned more than enough return to be compensated for the risk he took over the course of the year. If the mutual fund only returned 13%, the calculated alpha would be -0.8. With a negative alpha, the mutual fund manager would not have earned enough return given the amount of risk he was taking.
e. Sharpe Ratio: Sharpe Ratio measures how well the fund has performed vis-a vis the risk taken by it. It is the excess return over risk-free return (usually return from treasury bills or government securities) divided by the standard deviation. The higher the Sharpe Ratio, the better the fund has performed in proportion to the risk taken by it. The Sharpe ratio is also known as Reward-to-Variability ratio and it is named after William Forsyth Sharpe.
Computation:
SR = (Total Return – Risk Free Rate) / SD Of Fund
For example: Your investor gets 7 per cent return on her investment in a scheme with a standard deviation/volatility of 0.5. We assume risk free rate is 5 per cent. Sharpe Ratio is 7-5&amp;frasl;0.5 = 4 in this case
8. And Finally Always Dollar-Cost Average: Dollar cost averaging is a technique designed to reduce market risk through the systematic purchase of securities at predetermined intervals and set amounts.Instead of investing assets in a lump sum, the investor works his way into a position by slowly buying smaller amounts over a longer period of time. This spreads the cost basis out over several years, providing insulation against changes in market price.
Every investor investment strategy differs. These are just some common guidelines to work your way through the market and making informed decisions while buying Mutual Funds. Normally I work through points 1-6 and get my list to a few mutual funds after which I generally use risk ratios to determine which of the funds I selected might be a winner. I have a bias towards long term investing when it comes to investing so whatever I wrote here must be taken with a grain of salt just as everything related to investment must be. Some of you who are doing this for a longer time than I can also tell me about the various other things I can do. I will try to include those ideas in this post as well.
To Learn more about Mutual funds and investing in general, take a look at the following two gems:
  The Editorial review of The intelligent Investor says &amp;ldquo;Among the library of investment books promising no-fail strategies for riches, Benjamin Graham&amp;rsquo;s classic, The Intelligent Investor, offers no guarantees or gimmicks but overflows with the wisdom at the core of all good portfolio management&amp;rdquo; and it rings true in every sense. A must read for everyone looking to invest seriously.
Common Sense on Mutual Funds focusses on Mutual funds exclusively. Lets you understand that investing is not difficult. For the not so involved reader.
Till than Ciao!!!
References:  https://www.thebalance.com/picking-winning-mutual-funds-357957 http://www.miraeassetmf.co.in/uploads/TermofWeek/Sharpe_Ratio.pdf http://www.miraeassetmf.co.in/uploads/TermofWeek/Beta_SD_RSquared.pdf http://www.investopedia.com  ]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Pandas For All - Some Basic Pandas Functions</title>
      <link>https://mlwhiz.com/blog/2016/10/27/baby_panda/</link>
      <pubDate>Thu, 27 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2016/10/27/baby_panda/</guid>
      
      

      
      <description>It has been quite a few days I have been working with Pandas and apparently I feel I have gotten quite good at it. (Quite a Braggard I know) So thought about adding a post about Pandas usage here. I intend to make this post quite practical and since I find the pandas syntax quite self explanatory, I won&amp;amp;rsquo;t be explaining much of the codes. Just the use cases and the code to achieve them.</description>

      <content:encoded>  
        
        <![CDATA[  It has been quite a few days I have been working with Pandas and apparently I feel I have gotten quite good at it. (Quite a Braggard I know) So thought about adding a post about Pandas usage here. I intend to make this post quite practical and since I find the pandas syntax quite self explanatory, I won&amp;rsquo;t be explaining much of the codes. Just the use cases and the code to achieve them.
1. Import Pandas We Start by importing the libraries that we will need to use.
import pandas as pd 2. Read a Datasource: # Read from csv data files # With Header df = pd.read_csv(&amp;#34;/Users/ragarw5/Downloads/SalesJan2009.csv&amp;#34;) # Without Header. sep param to provide the delimiter df = pd.read_csv(&amp;#34;/Users/ragarw5/Downloads/SalesJan2009.csv&amp;#34;, header=None, sep= &amp;#34;,&amp;#34;) # Reading from SQL Datasource import MySQLdb from pandas import DataFrame from pandas.io.sql import read_sql db = MySQLdb.connect(host=&amp;#34;localhost&amp;#34;, # your host, usually localhost user=&amp;#34;root&amp;#34;, # your username passwd=&amp;#34;password&amp;#34;, # your password db=&amp;#34;dbname&amp;#34;) # name of the data base query = &amp;#34;SELECT * FROM tablename&amp;#34; data = read_sql(query, db) # Reading from ExcelFile data = pd.read_excel(filename) For now, we will be working with the file at http://samplecsvs.s3.amazonaws.com/SalesJan2009.csv. The Sales Jan 2009 file contains some “sanitized” sales transactions during the month of January. If you want to work along you can download this file from that location.
df = pd.read_csv(&amp;#34;/Users/ragarw5/Downloads/SalesJan2009.csv&amp;#34;) 3. See few rows of data: # top 5 rows df.head() # top 50 rows df.head(50) # last 5 rows df.tail() # last 50 rows df.tail(50) 4. Getting Column Names in a list: columnnames = df.columns 5. Specifying user defined Column Names: Sometimes you want to change the column names:
df.columns = [&amp;#39;Transdate&amp;#39;, &amp;#39;Product&amp;#39;, &amp;#39;Price&amp;#39;, &amp;#39;PaymentType&amp;#39;, &amp;#39;Name&amp;#39;, &amp;#39;City&amp;#39;, &amp;#39;State&amp;#39;, &amp;#39;Country&amp;#39;, &amp;#39;AccountCreated&amp;#39;, &amp;#39;LastLogin&amp;#39;, &amp;#39;Latitude&amp;#39;, &amp;#39;Longitude&amp;#39;] 6. Subsetting specific columns: Sometimes you only need to work with specific columns in a dataframe only. You can subset the columns in the dataframe using
newDf = df[[&amp;#39;Product&amp;#39;, &amp;#39;Price&amp;#39;, &amp;#39;PaymentType&amp;#39;, &amp;#39;Name&amp;#39;, &amp;#39;City&amp;#39;, &amp;#39;State&amp;#39;, &amp;#39;Country&amp;#39;]] 7. Seeing column types: newDf.dtypes 8. Change type of a column First thing i try is this.
newDf[&amp;#39;Price&amp;#39;] = newDf[&amp;#39;Price&amp;#39;].astype(&amp;#39;int&amp;#39;) It gives error : ValueError: invalid literal for long() with base 10: &amp;lsquo;13,000&amp;rsquo;. That is you cannot cast a string with &amp;ldquo;,&amp;rdquo; to an int. To do that we first have to get rid of the comma. For that we use a particular lambda-apply functionality which lets us apply functions to each row in the data.
newDf[&amp;#39;Price&amp;#39;] = newDf.apply(lambda x: int(x[&amp;#39;Price&amp;#39;].replace(&amp;#39;,&amp;#39;, &amp;#39;&amp;#39;)),axis=1)  9. Simple Dataframe Statistics: # To get statistics of numerical columns newDf.describe() # To get maximum value of a column. When you take a single column you can think of it as a list and apply functions you would apply to a list max(newDf[&amp;#39;Price&amp;#39;]) # no of rows in dataframe len(newDf) # Shape of Dataframe newDf.shape 10. Creating a new column: # Create a column Address containing City,State and Country. Simply concat the columns. newDf[&amp;#39;Address&amp;#39;] = newDf[&amp;#39;City&amp;#39;] &#43;&amp;#34;,&amp;#34;&#43; newDf[&amp;#39;State&amp;#39;] &#43;&amp;#34;,&amp;#34;&#43; newDf[&amp;#39;Country&amp;#39;] # I like to use a function defined approach with lambda-apply as it gives me more flexibility and more options. Like if i want to create a column which is 1 if the price is greater than 1200 and 0 otherwise. def gt(x): if x&amp;gt;1200: return 1 else: return 0 newDf[&amp;#39;Pricegt1200&amp;#39;] = newDf.apply(lambda x: gt(x[&amp;#39;Price&amp;#39;]),axis=1) 11. Subset a DataFrame: # Single condition: dataframe with all entries priced greater than 1500 df_gt_1500 = newDf[newDf[&amp;#39;Price&amp;#39;]&amp;gt;1500] # Multiple conditions: AND - dataframe with all entries priced greater than 1500 and from London And_df = newDf[(newDf[&amp;#39;Price&amp;#39;]&amp;gt;1500) &amp;amp; (newDf[&amp;#39;City&amp;#39;]==&amp;#39;London&amp;#39;)] # Multiple conditions: OR - dataframe with all entries priced greater than 1500 or from London Or_df = newDf[(newDf[&amp;#39;Price&amp;#39;]&amp;gt;1500) | (newDf[&amp;#39;City&amp;#39;]==&amp;#39;London&amp;#39;)] # Multiple conditions: NOT - dataframe with all entries priced greater than 1500 or from London have to be excluded Not_df = newDf[~((newDf[&amp;#39;Price&amp;#39;]&amp;gt;1500) | (newDf[&amp;#39;City&amp;#39;]==&amp;#39;London&amp;#39;))] 12. Change the Column at particular places or impute: # In the state column the state is abbreviated as &amp;#39;TX&amp;#39;. We want the whole name &amp;#39;Texas&amp;#39; in there newDf.loc[newDf[&amp;#39;State&amp;#39;]==&amp;#39;TX&amp;#39;,&amp;#39;State&amp;#39;] = &amp;#39;Texas&amp;#39; # When City is Monaco State is not given. You want to impute &amp;#39;Monaco State&amp;#39; as state also. newDf.loc[newDf[&amp;#39;City&amp;#39;]==&amp;#39;Monaco&amp;#39;,&amp;#39;State&amp;#39;] = &amp;#39;Monaco State&amp;#39; 13. GroupBy: One of the most used functionality. One simple example
# Find out the sum of transactions by a state. reset_index() is a function that resets the index of a dataframe. I apply this function ALWAYS whenever I do a groupby and you might think of it as a default syntax for groupby operations import numpy as np newDf.groupby([&amp;#39;State&amp;#39;]).aggregate(np.sum).reset_index() # You might get a few extra columns that you dont need. Just subset the columns in the dataframe. You could just chain the commands to subset for the columns you need. newDf.groupby([&amp;#39;State&amp;#39;]).aggregate(np.sum).reset_index()[[&amp;#39;State&amp;#39;,&amp;#39;Price&amp;#39;]] # Find minimum transaction in each state newDf.groupby([&amp;#39;State&amp;#39;]).aggregate(np.min).reset_index()[[&amp;#39;State&amp;#39;,&amp;#39;Price&amp;#39;]] # You might want to groupby more than one column newDf.groupby([&amp;#39;State&amp;#39;,&amp;#39;City&amp;#39;]).aggregate(np.sum).reset_index()[[&amp;#39;State&amp;#39;,&amp;#39;City&amp;#39;,&amp;#39;Price&amp;#39;]] 14. Concat: You have two datarames df1 and df2 you need to concat. Means append one below the other you can do it using:
pd.concat([df1,df2]) 15. Merge: #Suppose in the start, you had two dataframes. One which contains city and price information: City_Price = newwDf[[&amp;#39;City&amp;#39;,&amp;#39;Price&amp;#39;]] #And another which contains &amp;#39;City&amp;#39; and &amp;#39;State&amp;#39; insformation City_State = newDf[[&amp;#39;City&amp;#39;,&amp;#39;State&amp;#39;]].drop_duplicates(keep=False).reset_index() #You need to merge these datatframes on basis of city. You need to do: City_Price_State_df = pd.merge(City_Price,City_State,on=[&amp;#39;City&amp;#39;],how=&amp;#39;left&amp;#39;) 16. Save a Dataframe to external File: # To Csv file newDf.to_csv(&amp;#34;NewDfData.csv&amp;#34;,index=False) # To Excel File from pandas import ExcelWriter writer = ExcelWriter(&amp;#39;NewDfData.xlsx&amp;#39;) newDf.to_excel(writer,&amp;#39;Sheet1&amp;#39;) writer.save() 17. Pushing Pandas Df to a sql database: from pandas.io import sql import MySQLdb db = MySQLdb.connect(host=&amp;#34;localhost&amp;#34;, # your host, usually localhost user=&amp;#34;root&amp;#34;, # your username passwd=&amp;#34;password&amp;#34;, # your password db=&amp;#34;dbname&amp;#34;) # name of the data base newDf.to_sql(con = db, name=&amp;#39;tablename&amp;#39;,if_exists=&amp;#39;append&amp;#39;,flavor=&amp;#39;mysql&amp;#39;, chunksize=10000,index=False) Hope you found this post useful and worth your time. I tried to make this as simple as possible but You may always ask me or see the documentation for doubts.
If you have any more ideas on how to use Pandas or other usecases, please suggest in the comments section.
Till then ciao!!
References  Intro to Pandas By Greg Rada What I have written is in a condensed form, If you want to get a detailed description visit Greg Rada&amp;rsquo;s 3 posts series. Pandas Documentation  ]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Deploying ML Apps using Python and Flask- Learning about Flask</title>
      <link>https://mlwhiz.com/blog/2016/01/10/deploying_ml_apps_using_python_flask/</link>
      <pubDate>Sun, 10 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2016/01/10/deploying_ml_apps_using_python_flask/</guid>
      
      

      
      <description>It has been a long time since I wrote anything on my blog. So thought about giving everyone a treat this time. Or so I think it is.
Recently I was thinking about a way to deploy all these machine learning models I create in python. I searched through the web but couldn&amp;amp;rsquo;t find anything nice and easy. Then I fell upon this book by Sebastian Rashcka and I knew that it was what I was looking for.</description>

      <content:encoded>  
        
        <![CDATA[  It has been a long time since I wrote anything on my blog. So thought about giving everyone a treat this time. Or so I think it is.
Recently I was thinking about a way to deploy all these machine learning models I create in python. I searched through the web but couldn&amp;rsquo;t find anything nice and easy. Then I fell upon this book by Sebastian Rashcka and I knew that it was what I was looking for. To tell you the truth I did had some experience in Flask earlier but this book made it a whole lot easier to deploy a machine learning model in flask.
So today I am going to give a brief intro about Flask Apps and how to deploy them using a service called Openshift.
So What is flask? Flask is a Python Web Framework that makes it easier to create webapps from python.
And Openshift? Openshift is a free service(if we only use 1 small instance) which lets us use their services to deploy our flask web-apps.
So that we don&amp;rsquo;t get lost, let me tell you the flow of this post.
 First of all we will learn about the installation* of Openshift and Flask. We will create a Hello World application using Flask. We will work on creating a very simple calculator App that operates on two numbers provided by the user. This will help us in understanding how user forms work with Flask by implementing a barebones app.  Installation:  Create your FREE OpenShift account Here Very simple sign-up email &#43; password only Install the OpenShift Client Tools. Use these directions for your particular Operating System these tools have a command line interface and allow more control over your app. The OpenShift tool requires an installation of Ruby.  Now once you do this you have installed Openshift Client tools on your system.
Helloworld So now I am going to do a lot of things in this post. But don&amp;rsquo;t get bothered much it is just code and HTML quirks. I will try to provide enough details on which parts are necessary. First of all, you will need to create a domain on Openshift platform. This can be done by using:
rhc domain create -n DomainName -l EmailAddress -p password For this example I created:
rhc domain create -n mlwhiz -l MyEmailAddress -p Mypassword In the free version for Openshift you can run 3 web-apps with a single domain. For example I can create a maximum of 3 webapps whose web address would be:
 myappname1-mlwhiz.rhcloud.com myappname2-mlwhiz.rhcloud.com myappname3-mlwhiz.rhcloud.com  Once we create a domain we need to create a webapp:
rhc app create HelloWorld python-2.7 This creates the app named helloworld for us. The app currently resides at this address on web: http://helloworld-mlwhiz.rhcloud.com/ This command also creates a folder where our app resides. cd into this folder.
cd helloworld Now get a basic template to work upon in this directory. You can think of this as a starter code for flask. We can do this by pulling and merging from Github using the following commands.
git remote add upstream -m master git://github.com/openshift/flask-example.git git pull -s recursive -X theirs upstream master Use Virtualenv to isolate Python development environments. It’s a tool that allows you setup an isolated, self-contained Python environment in a folder on your dev box. This way you can experiment with various versions of Python without affecting your system wide configurations:
brew install python-virtualenv cd helloworld/wsgi/ virtualenv venv --python=python2.7 #Activate the virtual environment . venv/bin/activate # Install all these into your virtual python environment. pip install flask flask-wtf flask-babel markdown flup Now Change the name of flaskapp.py in wsgi to run.py
put this code in run.py
import os from flask import Flask app = Flask(__name__) @app.route(&amp;#39;/&amp;#39;) def home(): &amp;#34;&amp;#34;&amp;#34;Render website&amp;#39;s home page.&amp;#34;&amp;#34;&amp;#34; return &amp;#39;Hello World!&amp;#39; if __name__ == &amp;#39;__main__&amp;#39;: app.run(debug=&amp;#34;True&amp;#34;) Also change the file named application to:
#!/usr/bin/python import os import sys sys.path.insert(0, os.path.dirname(__file__) or &amp;#39;.&amp;#39;) PY_DIR = os.path.join(os.environ[&amp;#39;OPENSHIFT_HOMEDIR&amp;#39;], &amp;#34;python&amp;#34;) virtenv = PY_DIR &#43; &amp;#39;/virtenv/&amp;#39; PY_CACHE = os.path.join(virtenv, &amp;#39;lib&amp;#39;, os.environ[&amp;#39;OPENSHIFT_PYTHON_VERSION&amp;#39;], &amp;#39;site-packages&amp;#39;) os.environ[&amp;#39;PYTHON_EGG_CACHE&amp;#39;] = os.path.join(PY_CACHE) virtualenv = os.path.join(virtenv, &amp;#39;bin/activate_this.py&amp;#39;) try: exec(open(virtualenv).read(), dict(__file__=virtualenv)) except IOError: pass from run import app as application Run this to host your app:
cd helloworld/wsgi python run.py  You should be able to see your app on: http://127.0.0.1:5000/ You can deploy this webapp to Openshift using:
cd helloworld git add . git commit -a -m &amp;#34;Initial deployment of this app to the web&amp;#34; git push Open http://helloworld-mlwhiz.rhcloud.com/ in your browser. You would see Hello World! there. Now we have got a very basic structure complete.
Our Simple Calculator App: We will now work on creating a app that operates on two numbers provided by the user. The functions possible are &#43;,- and *. You can see this web app in action here before moving on. This app will help us in understanding how user forms work with Flask and how to manage user inputs in Flask. First of all change the code in run.py to
import os from flask import Flask,render_template, request from wtforms import Form, TextAreaField, validators,SelectField app = Flask(__name__) # Code to create a WTForm with three fields. 2 text fields and 1 dropdown menu. class OutputForm(Form): myChoices=[(&amp;#39;&#43;&amp;#39;, &amp;#39;&#43;&amp;#39;), (&amp;#39;-&amp;#39;, &amp;#39;-&amp;#39;), (&amp;#39;*&amp;#39;, &amp;#39;*&amp;#39;)] num1 = TextAreaField(&amp;#39;&amp;#39;,[validators.DataRequired()]) num2 = TextAreaField(&amp;#39;&amp;#39;,[validators.DataRequired()]) Operator = SelectField(u&amp;#39;&amp;#39;, choices = myChoices, validators = [validators.DataRequired()]) # This uses the render_template method in flask to use a template first_app.html. # This html contains placeholders for the form that is provided in the kwargs argument to the function call. @app.route(&amp;#39;/&amp;#39;) def index(): #return &amp;#39;Hello World!&amp;#39; form = OutputForm(request.form) return render_template(&amp;#39;first_app.html&amp;#39;,form = form) # This is the output that is displayed. It checks if the form is validated and POST request is made. # If true it renders the output.html else renders the main index page. # Most of the work is done here. Gets the user inputs using the request.form method. @app.route(&amp;#39;/output&amp;#39;, methods=[&amp;#39;POST&amp;#39;]) def output(): form = OutputForm(request.form) if request.method == &amp;#39;POST&amp;#39; and form.validate(): num1 = request.form[&amp;#39;num1&amp;#39;] num2 = request.form[&amp;#39;num2&amp;#39;] op = request.form[&amp;#39;Operator&amp;#39;] if op==&amp;#34;&#43;&amp;#34;: name=str(int(num1)&#43;int(num2)) elif op==&amp;#34;-&amp;#34;: name=str(int(num1)-int(num2)) elif op==&amp;#34;*&amp;#34;: name=str(int(num1)*int(num2)) return render_template(&amp;#39;output.html&amp;#39;, name=name) return render_template(&amp;#39;first_app.html&amp;#39;, form=form) if __name__ == &amp;#39;__main__&amp;#39;: app.run(debug=&amp;#34;True&amp;#34;) We use WTF forms here to create a form object. We pass this form object to the HTML render_template method. We have accessed these again in the output function so that we can show them in output.html where all the major work is done for creating the app.
Now Create a folder named template in helloworld/wsgi and create a file named _formhelpers.html with this content. You really don&amp;rsquo;t need to see the content in this file.
{% macro render_field(field) %} &amp;lt;dt&amp;gt;{{ field.label }} &amp;lt;dd&amp;gt;{{ field(**kwargs)|safe }} {% if field.errors %} &amp;lt;ul class=errors&amp;gt; {% for error in field.errors %} &amp;lt;li&amp;gt;{{ error }}&amp;lt;/li&amp;gt; {% endfor %} &amp;lt;/ul&amp;gt; {% endif %} &amp;lt;/dd&amp;gt; {% endmacro %} Also add another file named first_app.html with this content. Notice how we access the wtform here.
&amp;lt;!doctype html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;First app&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;{{ url_for(&amp;#39;static&amp;#39;,filename=&amp;#39;style.css&amp;#39;) }}&amp;#34;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; {% from &amp;#34;_formhelpers.html&amp;#34; import render_field %} &amp;lt;div&amp;gt;Calculator: Please enter two numbers and a function you want to apply&amp;lt;/div&amp;gt; &amp;lt;form method=post action=&amp;#34;/output&amp;#34;&amp;gt; {{ render_field(form.num1) }}{{ render_field(form.Operator) }}{{ render_field(form.num2) }} &amp;lt;input type=submit value=&amp;#39;Result&amp;#39; name=&amp;#39;submit_btn&amp;#39;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Create a file named output.html where the final output will be shown.
&amp;lt;!doctype html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;First app&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;{{ url_for(&amp;#39;static&amp;#39;,filename=&amp;#39;style.css&amp;#39;) }}&amp;#34;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div&amp;gt;The output is: {{ name }}&amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Also add a style.css file in the static folder. You can put this in it for right now or any other thing you want.
h1 { color: blue; font-family: verdana; font-size: 300%; } p { color: red; font-family: courier; font-size: 160%; } And we are mostly done. Run run.py in the wsgi directory and you would be able to access the app at : http://127.0.0.1:5000/. Again deploy this webapp to Openshift using:
cd helloworld git add . git commit -a -m &amp;#34;Initial deployment of this app to the web&amp;#34; git push Endnotes So here we took inputs from the user and show the output using the flask App. The final app is hosted at http://helloworld-mlwhiz.rhcloud.com/ for you to see. This code provides us with a code skeletn which will be valuable when we will deploy a whole ML model, which is the main motive of this series.
References  Most of the code here is taken from this awesome book by Sebastian Raschka: Python Machine Learning https://blog.openshift.com/beginners-guide-to-writing-flask-apps-on-openshift/  ]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Shell Basics every Data Scientist Should know - Part II(AWK)</title>
      <link>https://mlwhiz.com/blog/2015/10/11/shell_basics_for_data_science_2/</link>
      <pubDate>Sun, 11 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2015/10/11/shell_basics_for_data_science_2/</guid>
      
      

      
      <description>Yesterday I got introduced to awk programming on the shell and is it cool. It lets you do stuff on the command line which you never imagined. As a matter of fact, it&amp;amp;rsquo;s a whole data analytics software in itself when you think about it. You can do selections, groupby, mean, median, sum, duplication, append. You just ask. There is no limit actually.
And it is easy to learn.</description>

      <content:encoded>  
        
        <![CDATA[  Yesterday I got introduced to awk programming on the shell and is it cool. It lets you do stuff on the command line which you never imagined. As a matter of fact, it&amp;rsquo;s a whole data analytics software in itself when you think about it. You can do selections, groupby, mean, median, sum, duplication, append. You just ask. There is no limit actually.
And it is easy to learn.
In this post, I will try to give you a brief intro about how you could add awk to your daily work-flow.
Please see my previous post if you want some background or some basic to intermediate understanding of shell commands.
Basics/ Fundamentals So let me start with an example first. Say you wanted to sum a column in a comma delimited file. How would you do that in shell?
Here is the command. The great thing about awk is that it took me nearly 5 sec to write this command. I did not have to open any text editor to write a python script.
It lets you do adhoc work quickly.
awk &amp;#39;BEGIN{ sum=0; FS=&amp;#34;,&amp;#34;} { sum &#43;= $5 } END { print sum }&amp;#39; data.txt 44662539172  See the command one more time. There is a basic structure to the awk command
BEGIN {action} pattern {action} pattern {action} . . pattern { action} END {action}   An awk program consists of:
 An optional BEGIN segment : In the begin part we initialize our variables before we even start reading from the file or the standard input.
 pattern - action pairs: In the middle part we Process the input data. You put multiple pattern action pairs when you want to do multiple things with the same line.
 An optional END segment: In the end part we do something we want to do when we have reached the end of file.
  An awk command is called on a file using:
awk &amp;#39;BEGIN{SOMETHING HERE} {SOMETHING HERE: could put Multiple Blocks Like this} END {SOMETHING HERE}&amp;#39; file.txt You also need to know about these preinitialized variables that awk keeps track of.:
 FS : field separator. Default is whitespace (1 or more spaces or tabs). If you are using any other seperator in the file you should specify it in the Begin Part. RS : record separator. Default record separator is newline. Can be changed in BEGIN action. NR : NR is the variable whose value is the number of the current record. You normally use it in the action blocks in the middle. NF : The Number of Fields after the single line has been split up using FS. Dollar variables : awk splits up the line which is coming to it by using the given FS and keeps the split parts in the $ variables. For example column 1 is in $1, column 2 is in $2. $0 is the string representation of the whole line. Note that if you want to access last column you don&amp;rsquo;t have to count. You can just use $NF. For second last column you can use $(NF-1). Pretty handy. Right.  So If you are with me till here, the hard part is done. Now the fun part starts. Lets look at the first awk command again and try to understand it.
awk &amp;#39;BEGIN{ sum=0; FS=&amp;#34;,&amp;#34;} { sum &#43;= $5 } END { print sum }&amp;#39; data.txt So there is a begin block. Remember before we read any line. We initialize sum to 0 and FS to &amp;ldquo;,&amp;rdquo;.
Now as awk reads its input line by line it increments sum by the value in column 5(as specified by $5).
Note that there is no pattern specified here so awk will do the action for every line.
When awk has completed reading the file it prints out the sum.
What if you wanted mean?
We could create a cnt Variable:
awk &amp;#39;BEGIN{ sum=0;cnt=0; FS=&amp;#34;,&amp;#34;} { sum &#43;= $5; cnt&#43;=1 } END { print sum/cnt }&amp;#39; data.txt 1.86436e&#43;06  or better yet, use our friend NR which bash is already keeping track of:
awk &amp;#39;BEGIN{ sum=0; FS=&amp;#34;,&amp;#34;} { sum &#43;= $5 } END { print sum/NR }&amp;#39; data.txt 1.86436e&#43;06  Filter a file In the mean and sum awk commands we did not put any pattern in our middle commands. Let us use a simple pattern now. Suppose we have a file Salaries.csv which contains:
head salaries.txt yearID,teamID,lgID,playerID,salary 1985,BAL,AL,murraed02,1472819 1985,BAL,AL,lynnfr01,1090000 1985,BAL,AL,ripkeca01,800000 1985,BAL,AL,lacyle01,725000 1985,BAL,AL,flanami01,641667 1985,BAL,AL,boddimi01,625000 1985,BAL,AL,stewasa01,581250 1985,BAL,AL,martide01,560000 1985,BAL,AL,roeniga01,558333  I want to filter records for players who who earn more than 22 M in 2013 just because I want to. You just do:
awk &amp;#39;BEGIN{FS=&amp;#34;,&amp;#34;} $5&amp;gt;=22000000 &amp;amp;&amp;amp; $1==2013{print $0}&amp;#39; Salaries.csv 2013,DET,AL,fieldpr01,23000000 2013,MIN,AL,mauerjo01,23000000 2013,NYA,AL,rodrial01,29000000 2013,NYA,AL,wellsve01,24642857 2013,NYA,AL,sabatcc01,24285714 2013,NYA,AL,teixema01,23125000 2013,PHI,NL,leecl02,25000000 2013,SFN,NL,linceti01,22250000  Cool right. Now let me explain it a little bit. The part in the command &amp;ldquo;$5&amp;gt;=22000000 &amp;amp;&amp;amp; $1==2013&amp;rdquo; is called a pattern. It says that print this line($0) if and only if the Salary($5) is more than 22M and(&amp;amp;&amp;amp;) year($1) is equal to 2013. If the incoming record(line) does not satisfy this pattern it never reaches the inner block.
So Now you could do basic Select SQL at the command line only if you had:
The logic Operators:
 == equality operator; returns TRUE is both sides are equal
 != inverse equality operator
 &amp;amp;&amp;amp; logical AND
 || logical OR
 ! logical NOT
 &amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;= relational operators
  Normal Arithmetic Operators: &#43;, -, /, *, %, ^
Some String Functions: length, substr, split
GroupBy Now you will say: &amp;ldquo;Hey Dude SQL without groupby is incomplete&amp;rdquo;. You are right and for that we can use the associative array. Lets just see the command first and then I will explain. So lets create another useless use case(or may be something useful to someone :)) We want to find out the number of records for each year in the file. i.e we want to find the distribution of years in the file. Here is the command:
awk &amp;#39;BEGIN{FS=&amp;#34;,&amp;#34;} {my_array[$1]=my_array[$1]&#43;1} END{ for (k in my_array){if(k!=&amp;#34;yearID&amp;#34;)print k&amp;#34;|&amp;#34;my_array[k]}; }&amp;#39; Salaries.csv 1990|867 1991|685 1996|931 1997|925 ...  Now I would like to tell you a secret. You don&amp;rsquo;t really need to declare the variables you want to use in awk. So you did not really needed to define sum, cnt variables before. I only did that because it is good practice. If you don&amp;rsquo;t declare a user defined variable in awk, awk assumes it to be null or zero depending on the context. So in the command above we don&amp;rsquo;t declare our myarray in the begin block and that is fine.
Associative Array: The variable myarray is actually an associative array. i.e. It stores data in a key value format.(Python dictionaries anyone). The same array could keep integer keys and String keys. For example, I can do this in a single code.
myarray[1]=&#34;key&#34; myarray[&#39;mlwhiz&#39;] = 1   For Loop for associative arrays: I could use a for loop to read associative array
for (k in array) { DO SOMETHING } # Assigns to k each Key of array (unordered) # Element is array[k]   If Statement:Uses a syntax like C for the if statement. the else block is optional:
if (n  0){ DO SOMETHING } else{ DO SOMETHING }   So lets dissect the above command now.
I set the File separator to &amp;ldquo;,&amp;rdquo; in the beginning. I use the first column as the key of myarray. If the key exists I increment the value by 1.
At the end, I loop through all the keys and print out key value pairs separated by &amp;ldquo;|&amp;rdquo;
I know that the header line in my file contains &amp;ldquo;yearID&amp;rdquo; in column 1 and I don&amp;rsquo;t want &amp;lsquo;yearID|1&amp;rsquo; in the output. So I only print when Key is not equal to &amp;lsquo;yearID&amp;rsquo;.
GroupBy with case statement: cat Salaries.csv | awk &amp;#39;BEGIN{FS=&amp;#34;,&amp;#34;} $5&amp;lt;100000{array5[&amp;#34;[0-100000)&amp;#34;]&#43;=1} $5&amp;gt;=100000&amp;amp;&amp;amp;$5&amp;lt;250000{array5[&amp;#34;[100000,250000)&amp;#34;]=array5[&amp;#34;[100000,250000)&amp;#34;]&#43;1} $5&amp;gt;=250000&amp;amp;&amp;amp;$5&amp;lt;500000{array5[&amp;#34;[250000-500000)&amp;#34;]=array5[&amp;#34;[250000-500000)&amp;#34;]&#43;1} $5&amp;gt;=500000&amp;amp;&amp;amp;$5&amp;lt;1000000{array5[&amp;#34;[500000-1000000)&amp;#34;]=array5[&amp;#34;[500000-1000000)&amp;#34;]&#43;1} $5&amp;gt;=1000000{array5[&amp;#34;[1000000)&amp;#34;]=array5[&amp;#34;[1000000)&amp;#34;]&#43;1} END{ print &amp;#34;VAR Distrib:&amp;#34;; for (v in array5){print v&amp;#34;|&amp;#34;array5[v]} }&amp;#39; VAR Distrib: [250000-500000)|8326 [0-100000)|2 [1000000)|23661 [100000,250000)|9480  Here we used multiple pattern-action blocks to create a case statement.
For The Brave: This is a awk code that I wrote to calculate the Mean,Median,min,max and sum of a column simultaneously. Try to go through the code and understand it.I have added comments too. Think of this as an exercise. Try to run this code and play with it. You may learn some new tricks in the process. If you don&amp;rsquo;t understand it do not worry. Just get started writing your own awk codes, you will be able to understand it in very little time.
# Create a New file named A.txt to keep only the salary column. cat Salaries.csv | cut -d &amp;#34;,&amp;#34; -f 5 &amp;gt; A.txt FILENAME=&amp;#34;A.txt&amp;#34; # The first awk counts the number of lines which are numeric. We use a regex here to check if the column is numeric or not. # &amp;#39;;&amp;#39; stands for Synchronous execution i.e sort only runs after the awk is over. # The output of both commands are given to awk command which does the whole work. # So Now the first line going to the second awk is the number of lines in the file which are numeric. # and from the second to the end line the file is sorted. (awk &amp;#39;BEGIN {c=0} $1 ~ /^[-0-9]*(\.[0-9]*)?$/ {c=c&#43;1;} END {print c;}&amp;#39; &amp;#34;$FILENAME&amp;#34;; \  sort -n &amp;#34;$FILENAME&amp;#34;) | awk &amp;#39; BEGIN { c = 0; sum = 0; med1_loc = 0; med2_loc = 0; med1_val = 0; med2_val = 0; min = 0; max = 0; } NR==1 { LINES = $1 # We check whether numlines is even or odd so that we keep only # the locations in the array where the median might be. if (LINES%2==0) {med1_loc = LINES/2-1; med2_loc = med1_loc&#43;1;} if (LINES%2!=0) {med1_loc = med2_loc = (LINES-1)/2;} } $1 ~ /^[-0-9]*(\.[0-9]*)?$/ &amp;amp;&amp;amp; NR!=1 { # setting min value if (c==0) {min = $1;} # middle two values in array if (c==med1_loc) {med1_val = $1;} if (c==med2_loc) {med2_val = $1;} c&#43;&#43; sum &#43;= $1 max = $1 } END { ave = sum / c median = (med1_val &#43; med2_val ) / 2 print &amp;#34;sum:&amp;#34; sum print &amp;#34;count:&amp;#34; c print &amp;#34;mean:&amp;#34; ave print &amp;#34;median:&amp;#34; median print &amp;#34;min:&amp;#34; min print &amp;#34;max:&amp;#34; max } &amp;#39; &amp;lt;pre style=&amp;#34;font-size:50%; padding:7px; margin:0em; background-color:#FFF112&amp;#34;&amp;gt;sum:44662539172 count:23956 mean:1.86436e&#43;06 median:507950 min:0 max:33000000 &amp;lt;/pre&amp;gt; Endnote: awk is an awesome tool and there are a lot of use-cases where it can make your life simple. There is a sort of a learning curve, but I think that it would be worth it in the long term. I have tried to give you a taste of awk and I have covered a lot of ground here in this post. To tell you a bit more there, awk is a full programming language. There are for loops, while loops, conditionals, booleans, functions and everything else that you would expect from a programming language. So you could look more still.
To learn more about awk you can use this book. This book is a free resource and you could learn more about awk and use cases.
Or if you like to have your book binded and in paper like me you can buy this book, which is a gem:
Do leave comments in case you find more use-cases for awk or if you want me to write on new use-cases. Or just comment weather you liked it or not and how I could improve as I am also new and trying to learn more of this.
Till then Ciao !!!
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Shell Basics every Data Scientist Should know -Part I</title>
      <link>https://mlwhiz.com/blog/2015/10/09/shell_basics_for_data_science/</link>
      <pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2015/10/09/shell_basics_for_data_science/</guid>
      
      

      
      <description>Shell Commands are powerful. And life would be like hell without shell is how I like to say it(And that is probably the reason that I dislike windows).
Consider a case when you have a 6 GB pipe-delimited file sitting on your laptop and you want to find out the count of distinct values in one particular column. You can probably do this in more than one way. You could put that file in a database and run SQL Commands, or you could write a python/perl script.</description>

      <content:encoded>  
        
        <![CDATA[  Shell Commands are powerful. And life would be like hell without shell is how I like to say it(And that is probably the reason that I dislike windows).
Consider a case when you have a 6 GB pipe-delimited file sitting on your laptop and you want to find out the count of distinct values in one particular column. You can probably do this in more than one way. You could put that file in a database and run SQL Commands, or you could write a python/perl script.
Probably whatever you do it won&amp;rsquo;t be simpler/less time consuming than this
cat data.txt | cut -d &amp;#34;|&amp;#34; -f 1 | sort | uniq | wc -l 30  And this will run way faster than whatever you do with perl/python script.
Now this command says
 Use the cat command to print/stream the contents of the file to stdout. Pipe the streaming contents from our cat command to the next command cut. The cut commands specifies the delimiter by the argument -d and the column by the argument -f and streams the output to stdout. Pipe the streaming content to the sort command which sorts the input and streams only the distinct values to the stdout. It takes the argument -u that specifies that we only need unique values. Pipe the output to the wc -l command which counts the number of lines in the input.  There is a lot going on here and I will try my best to ensure that you will be able to understand most of it by the end of this Blog post.Although I will also try to explain more advanced concepts than the above command in this post.
Now, I use shell commands extensively at my job. I will try to explain the usage of each of the commands based on use cases that I counter nearly daily at may day job as a data scientist.
Some Basic Commands in Shell: There are a lot of times when you just need to know a little bit about the data. You just want to see may be a couple of lines to inspect a file. One way of doing this is opening the txt/csv file in the notepad. And that is probably the best way for small files. But you could also do it in the shell using:
1. cat cat data.txt yearID|teamID|lgID|playerID|salary 1985|BAL|AL|murraed02|1472819 1985|BAL|AL|lynnfr01|1090000 1985|BAL|AL|ripkeca01|800000 1985|BAL|AL|lacyle01|725000 1985|BAL|AL|flanami01|641667 1985|BAL|AL|boddimi01|625000 1985|BAL|AL|stewasa01|581250 1985|BAL|AL|martide01|560000 1985|BAL|AL|roeniga01|558333  Now the cat command prints the whole file in the terminal window for you.I have not shown the whole file here.
But sometimes the files will be so big that you wont be able to open them up in notepad&#43;&#43; or any other software utility and there the cat command will shine.
2. Head and Tail Now you might ask me why would you print the whole file in the terminal itself? Generally I won&amp;rsquo;t. But I just wanted to tell you about the cat command. For the use case when you want only the top/bottom n lines of your data you will generally use the head/tail commands. You can use them as below.
head data.txt yearID|teamID|lgID|playerID|salary 1985|BAL|AL|murraed02|1472819 1985|BAL|AL|lynnfr01|1090000 1985|BAL|AL|ripkeca01|800000 1985|BAL|AL|lacyle01|725000 1985|BAL|AL|flanami01|641667 1985|BAL|AL|boddimi01|625000 1985|BAL|AL|stewasa01|581250 1985|BAL|AL|martide01|560000 1985|BAL|AL|roeniga01|558333  head -n 3 data.txt yearID|teamID|lgID|playerID|salary 1985|BAL|AL|murraed02|1472819 1985|BAL|AL|lynnfr01|1090000  tail data.txt 2013|WAS|NL|bernaro01|1212500 2013|WAS|NL|tracych01|1000000 2013|WAS|NL|stammcr01|875000 2013|WAS|NL|dukeza01|700000 2013|WAS|NL|espinda01|526250 2013|WAS|NL|matthry01|504500 2013|WAS|NL|lombast02|501250 2013|WAS|NL|ramoswi01|501250 2013|WAS|NL|rodrihe03|501000 2013|WAS|NL|moorety01|493000  tail -n 2 data.txt 2013|WAS|NL|rodrihe03|501000 2013|WAS|NL|moorety01|493000  Notice the structure of the shell command here.
CommandName [-arg1name] [arg1value] [-arg2name] [arg2value] filename   3. Piping Now we could have also written the same command as:
cat data.txt | head yearID|teamID|lgID|playerID|salary 1985|BAL|AL|murraed02|1472819 1985|BAL|AL|lynnfr01|1090000 1985|BAL|AL|ripkeca01|800000 1985|BAL|AL|lacyle01|725000 1985|BAL|AL|flanami01|641667 1985|BAL|AL|boddimi01|625000 1985|BAL|AL|stewasa01|581250 1985|BAL|AL|martide01|560000 1985|BAL|AL|roeniga01|558333  This brings me to one of the most important concepts of Shell usage - piping. You won&amp;rsquo;t be able to utilize the full power the shell provides without using this concept. And the concept is actually simple.
Just read the &amp;ldquo;|&amp;rdquo; in the command as &amp;ldquo;pass the data on to&amp;rdquo;
So I would read the above command as:
cat(print) the whole data to stream, pass the data on to head so that it can just give me the first few lines only.
So did you understood what piping did? It is providing us a way to use our basic commands in a consecutive manner. There are a lot of commands that are fairly basic and it lets us use these basic commands in sequence to do some fairly non trivial things.
Now let me tell you about a couple of more commands before I show you how we can chain them to do fairly advanced tasks.
4. wc wc is a fairly useful shell utility/command that lets us count the number of lines(-l), words(-w) or characters(-c) in a given file
wc -l data.txt 23957 data.txt  5. grep You may want to print all the lines in your file which have a particular word. Or as a Data case you might like to see the salaries for the team BAL in 2000. In this case we have printed all the lines in the file which contain &amp;ldquo;2000|BAL&amp;rdquo;. grep is your friend.
grep &amp;#34;2000|BAL&amp;#34; data.txt | head 2000|BAL|AL|belleal01|12868670 2000|BAL|AL|anderbr01|7127199 2000|BAL|AL|mussimi01|6786032 2000|BAL|AL|ericksc01|6620921 2000|BAL|AL|ripkeca01|6300000 2000|BAL|AL|clarkwi02|6000000 2000|BAL|AL|johnsch04|4600000 2000|BAL|AL|timlimi01|4250000 2000|BAL|AL|deshide01|4209324 2000|BAL|AL|surhobj01|4146789  you could also use regular expressions with grep.
6. sort You may want to sort your dataset on a particular column.Sort is your friend. Say you want to find out the top 10 maximum salaries given to any player in your dataset.
sort -t &amp;#34;|&amp;#34; -k 5 -r -n data.txt | head -10 2010|NYA|AL|rodrial01|33000000 2009|NYA|AL|rodrial01|33000000 2011|NYA|AL|rodrial01|32000000 2012|NYA|AL|rodrial01|30000000 2013|NYA|AL|rodrial01|29000000 2008|NYA|AL|rodrial01|28000000 2011|LAA|AL|wellsve01|26187500 2005|NYA|AL|rodrial01|26000000 2013|PHI|NL|leecl02|25000000 2013|NYA|AL|wellsve01|24642857  So there are certainly a lot of options in this command. Lets go through them one by one.
 -t: Which delimiter to use? -k: Which column to sort on? -n: If you want Numerical Sorting. Dont use this option if you want Lexographical sorting. -r: I want to sort Descending. Sorts Ascending by Default.  7. cut This command lets you select certain columns from your data. Sometimes you may want to look at just some of the columns in your data. As in you may want to look only at the year, team and salary and not the other columns. cut is the command to use.
cut -d &amp;#34;|&amp;#34; -f 1,2,5 data.txt | head yearID|teamID|salary 1985|BAL|1472819 1985|BAL|1090000 1985|BAL|800000 1985|BAL|725000 1985|BAL|641667 1985|BAL|625000 1985|BAL|581250 1985|BAL|560000 1985|BAL|558333  The options are:
 -d: Which delimiter to use? -f: Which column/columns to cut?  8. uniq uniq is a little bit tricky as in you will want to use this command in sequence with sort. This command removes sequential duplicates. So in conjunction with sort it can be used to get the distinct values in the data. For example if I wanted to find out 10 distinct teamIDs in data, I would use:
cat data.txt | cut -d &amp;#34;|&amp;#34; -f 2 | sort | uniq | head ANA ARI ATL BAL BOS CAL CHA CHN CIN CLE  This command could be used with argument -c to count the occurrence of these distinct values. Something akin to count distinct.
cat data.txt | cut -d &amp;#34;|&amp;#34; -f 2 | sort | uniq -c | head 247 ANA 458 ARI 838 ATL 855 BAL 852 BOS 368 CAL 812 CHA 821 CHN 46 CIN 867 CLE  Some Other Utility Commands for Other Operations Some Other command line tools that you could use without going in the specifics as the specifics are pretty hard.
1. Change delimiter in a file Find and Replace Magic.: You may want to replace certain characters in file with something else using the tr command.
cat data.txt | tr &amp;#39;|&amp;#39; &amp;#39;,&amp;#39; | head -4 yearID,teamID,lgID,playerID,salary 1985,BAL,AL,murraed02,1472819 1985,BAL,AL,lynnfr01,1090000 1985,BAL,AL,ripkeca01,800000  or the sed command
cat data.txt | sed -e &amp;#39;s/|/,/g&amp;#39; | head -4 yearID,teamID,lgID,playerID,salary 1985,BAL,AL,murraed02,1472819 1985,BAL,AL,lynnfr01,1090000 1985,BAL,AL,ripkeca01,800000  2. Sum of a column in a file Using the awk command you could find the sum of column in file. Divide it by the number of lines and you can get the mean.
cat data.txt | awk -F &amp;#34;|&amp;#34; &amp;#39;{ sum &#43;= $5 } END { printf sum }&amp;#39; 44662539172  awk is a powerful command which is sort of a whole language in itself. Do see the wiki page for awk for a lot of great usecases of awk. I also wrote a post on awk as a second part in this series. Check it HERE
3. Find the files in a directory that satisfy a certain condition You can do this by using the find command. Lets say you want to find all the .txt files in the current working dir that start with lowercase h.
find . -name &amp;#34;h*.txt&amp;#34; ./hamlet.txt  To find all .txt files starting with h regarless of case we could use regex.
find . -name &amp;#34;[Hh]*.txt&amp;#34; ./hamlet.txt ./Hamlet1.txt  4. Passing file list as Argument. xargs was suggested by Gaurav in the comments, so I read about it and it is actually a very nice command which you could use in a variety of use cases.
So if you just use a pipe, any command/utility receives data on STDIN (the standard input stream) as a raw pile of data that it can sort through one line at a time. However some programs don&amp;rsquo;t accept their commands on standard in. For example the rm command(which is used to remove files), touch command(used to create file with a given name) or a certain python script you wrote(which takes command line arguments). They expect it to be spelled out in the arguments to the command.
For example: rm takes a file name as a parameter on the command line like so: rm file1.txt. If I wanted to delete all &amp;lsquo;.txt&amp;rsquo; files starting with &amp;ldquo;h/H&amp;rdquo; from my working directory, the below command won&amp;rsquo;t work because rm expects a file as an input.
find . -name &amp;#34;[hH]*.txt&amp;#34; | rm usage: rm [-f | -i] [-dPRrvW] file ... unlink file  To get around it we can use the xargs command which reads the STDIN stream data and converts each line into space separated arguments to the command.
find . -name &amp;#34;[hH]*.txt&amp;#34; | xargs ./hamlet.txt ./Hamlet1.txt  Now you could use rm to remove all .txt files that start with h/H. A word of advice: Always see the output of xargs first before using rm.
find . -name &amp;#34;[hH]*.txt&amp;#34; | xargs rm Another usage of xargs could be in conjunction with grep to find all files that contain a given string.
find . -name &amp;#34;*.txt&amp;#34; | xargs grep &amp;#39;honest soldier&amp;#39; ./Data1.txt:O, farewell, honest soldier; ./Data2.txt:O, farewell, honest soldier; ./Data3.txt:O, farewell, honest soldier;  Hopefully You could come up with varied uses building up on these examples. One other use case could be to use this for passing arguments to a python script.
Other Cool Tricks Sometimes you want your data that you got by some command line utility(Shell commands/ Python scripts) not to be shown on stdout but stored in a textfile. You can use the &amp;rdquo;&amp;gt;&amp;rdquo; operator for that. For Example: You could have stored the file after replacing the delimiters in the previous example into anther file called newdata.txt as follows:
cat data.txt | tr &amp;#39;|&amp;#39; &amp;#39;,&amp;#39; &amp;gt; newdata.txt I really got confused between &amp;rdquo;|&amp;rdquo; (piping) and &amp;rdquo;&amp;gt;&amp;rdquo; (to_file) operations a lot in the beginning. One way to remember is that you should only use &amp;rdquo;&amp;gt;&amp;rdquo; when you want to write something to a file. &amp;rdquo;|&amp;rdquo; cannot be used to write to a file. Another operation you should know about is the &amp;rdquo;&amp;gt;&amp;gt;&amp;rdquo; operation. It is analogous to &amp;rdquo;&amp;gt;&amp;rdquo; but it appends to an existing file rather that replacing the file and writing over.
If you would like to know more about commandline, which I guess you would, here are some books that I would recommend for a beginner:
The first book is more of a fun read at leisure type of book. THe second book is a little more serious. Whatever suits you.
So, this is just the tip of the iceberg. Although I am not an expert in shell usage, these commands reduced my workload to a large extent. If there are some shell commands you use on a regular basis or some shell command that are cool, do tell in the comments. I would love to include it in the blogpost.
I wrote a blogpost on awk as a second part of this post. Check it Here
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Create basic graph visualizations with SeaBorn- The Most Awesome Python Library For Visualization yet</title>
      <link>https://mlwhiz.com/blog/2015/09/13/seaborn_visualizations/</link>
      <pubDate>Sun, 13 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2015/09/13/seaborn_visualizations/</guid>
      
      

      
      <description>When it comes to data preparation and getting acquainted with data, the one step we normally skip is the data visualization. While a part of it could be attributed to the lack of good visualization tools for the platforms we use, most of us also get lazy at times.
Now as we know of it Python never had any good Visualization library. For most of our plotting needs, I would read up blogs, hack up with StackOverflow solutions and haggle with Matplotlib documentation each and every time I needed to make a simple graph.</description>

      <content:encoded>  
        
        <![CDATA[  When it comes to data preparation and getting acquainted with data, the one step we normally skip is the data visualization. While a part of it could be attributed to the lack of good visualization tools for the platforms we use, most of us also get lazy at times.
Now as we know of it Python never had any good Visualization library. For most of our plotting needs, I would read up blogs, hack up with StackOverflow solutions and haggle with Matplotlib documentation each and every time I needed to make a simple graph. This led me to think that a Blog post to create common Graph types in Python is in order. But being the procrastinator that I am it always got pushed to the back of my head.
One thing that helped me in pursuit of my data visualization needs in Python was this awesome course about Data Visualization and applied plotting from University of Michigan which is a part of a pretty good Data Science Specialization with Python in itself. Highly Recommended.
But, yesterday I got introduced to Seaborn and I must say I am quite impressed with it. It makes beautiful graphs that are in my opinion better than R&amp;rsquo;s ggplot2. Gives you enough options to customize and the best part is that it is so easy to learn.
So I am finally writing this blog post with a basic purpose of creating a code base that provides me with ready to use codes which could be put into analysis in a fairly straight-forward manner.
Right. So here Goes.
We Start by importing the libraries that we will need to use.
import matplotlib.pyplot as plt #sets up plotting under plt import seaborn as sns #sets up styles and gives us more plotting options import pandas as pd #lets us handle data as dataframes To create a use case for our graphs, we will be working with the Tips data that contains the following information.
tips = sns.load_dataset(&amp;#34;tips&amp;#34;) tips.head()   Scatterplot With Regression Line Now let us work on visualizing this data. We will use the regplot option in seaborn.
# We dont Probably need the Gridlines. Do we? If yes comment this line sns.set(style=&amp;#34;ticks&amp;#34;) # Here we create a matplotlib axes object. The extra parameters we use # &amp;#34;ci&amp;#34; to remove confidence interval # &amp;#34;marker&amp;#34; to have a x as marker. # &amp;#34;scatter_kws&amp;#34; to provide style info for the points.[s for size] # &amp;#34;line_kws&amp;#34; to provide style info for the line.[lw for line width] g = sns.regplot(x=&amp;#34;tip&amp;#34;, y=&amp;#34;total_bill&amp;#34;, data=tips, ci = False, scatter_kws={&amp;#34;color&amp;#34;:&amp;#34;darkred&amp;#34;,&amp;#34;alpha&amp;#34;:0.3,&amp;#34;s&amp;#34;:90}, line_kws={&amp;#34;color&amp;#34;:&amp;#34;g&amp;#34;,&amp;#34;alpha&amp;#34;:0.5,&amp;#34;lw&amp;#34;:4},marker=&amp;#34;x&amp;#34;) # remove the top and right line in graph sns.despine() # Set the size of the graph from here g.figure.set_size_inches(12,8) # Set the Title of the graph from here g.axes.set_title(&amp;#39;Total Bill vs. Tip&amp;#39;, fontsize=34,color=&amp;#34;r&amp;#34;,alpha=0.5) # Set the xlabel of the graph from here g.set_xlabel(&amp;#34;Tip&amp;#34;,size = 67,color=&amp;#34;r&amp;#34;,alpha=0.5) # Set the ylabel of the graph from here g.set_ylabel(&amp;#34;Total Bill&amp;#34;,size = 67,color=&amp;#34;r&amp;#34;,alpha=0.5) # Set the ticklabel size and color of the graph from here g.tick_params(labelsize=14,labelcolor=&amp;#34;black&amp;#34;)   Now that required a bit of a code but i feel that it looks much better than what either Matplotlib or ggPlot2 could have rendered. We got a lot of customization without too much code.
But that is not really what actually made me like Seaborn. The plot type that actually got my attention was lmplot, which lets us use regplot in a faceted mode.
# So this function creates a faceted plot. The plot is parameterized by the following: # col : divides the data points into days and creates that many plots # palette: deep, muted, pastel, bright, dark, and colorblind. change the colors in graph. Experiment with these # col_wrap: we want 2 graphs in a row? Yes.We do # scatter_kws: attributes for points # hue: Colors on a particular column. # size: controls the size of graph g = sns.lmplot(x=&amp;#34;tip&amp;#34;, y=&amp;#34;total_bill&amp;#34;,ci=None,data=tips, col=&amp;#34;day&amp;#34;, palette=&amp;#34;muted&amp;#34;,col_wrap=2,scatter_kws={&amp;#34;s&amp;#34;: 100,&amp;#34;alpha&amp;#34;:.5}, line_kws={&amp;#34;lw&amp;#34;:4,&amp;#34;alpha&amp;#34;:0.5},hue=&amp;#34;day&amp;#34;,x_jitter=1.0,y_jitter=1.0,size=6) # remove the top and right line in graph sns.despine() # Additional line to adjust some appearance issue plt.subplots_adjust(top=0.9) # Set the Title of the graph from here g.fig.suptitle(&amp;#39;Total Bill vs. Tip&amp;#39;, fontsize=34,color=&amp;#34;r&amp;#34;,alpha=0.5) # Set the xlabel of the graph from here g.set_xlabels(&amp;#34;Tip&amp;#34;,size = 50,color=&amp;#34;r&amp;#34;,alpha=0.5) # Set the ylabel of the graph from here g.set_ylabels(&amp;#34;Total Bill&amp;#34;,size = 50,color=&amp;#34;r&amp;#34;,alpha=0.5) # Set the ticklabel size and color of the graph from here titles = [&amp;#39;Thursday&amp;#39;,&amp;#39;Friday&amp;#39;,&amp;#39;Saturday&amp;#39;,&amp;#39;Sunday&amp;#39;] for ax,title in zip(g.axes.flat,titles): ax.tick_params(labelsize=14,labelcolor=&amp;#34;black&amp;#34;)   A side Note on Palettes:
You can build your own color palettes using color_palette() function. color_palette() will accept the name of any seaborn palette or matplotlib colormap(except jet, which you should never use). It can also take a list of colors specified in any valid matplotlib format (RGB tuples, hex color codes, or HTML color names). The return value is always a list of RGB tuples. This allows you to use your own color palettes in graph.   Barplots sns.set(style=&amp;#34;ticks&amp;#34;) flatui = [&amp;#34;#9b59b6&amp;#34;, &amp;#34;#3498db&amp;#34;, &amp;#34;#95a5a6&amp;#34;, &amp;#34;#e74c3c&amp;#34;, &amp;#34;#34495e&amp;#34;, &amp;#34;#2ecc71&amp;#34;] # This Function takes as input a custom palette g = sns.barplot(x=&amp;#34;sex&amp;#34;, y=&amp;#34;tip&amp;#34;, hue=&amp;#34;day&amp;#34;, palette=sns.color_palette(flatui),data=tips,ci=None) # remove the top and right line in graph sns.despine() # Set the size of the graph from here g.figure.set_size_inches(12,7) # Set the Title of the graph from here g.axes.set_title(&amp;#39;Do We tend to \nTip high on Weekends?&amp;#39;, fontsize=34,color=&amp;#34;b&amp;#34;,alpha=0.3) # Set the xlabel of the graph from here g.set_xlabel(&amp;#34;Gender&amp;#34;,size = 67,color=&amp;#34;g&amp;#34;,alpha=0.5) # Set the ylabel of the graph from here g.set_ylabel(&amp;#34;Mean Tips&amp;#34;,size = 67,color=&amp;#34;r&amp;#34;,alpha=0.5) # Set the ticklabel size and color of the graph from here g.tick_params(labelsize=14,labelcolor=&amp;#34;black&amp;#34;)   Histograms and Distribution Diagrams They form another part of my workflow. Lets plot the normal Histogram using seaborn. For this we will use the distplot function. This function combines the matplotlib hist function (with automatic calculation of a good default bin size) with the seaborn kdeplot() function. It can also fit scipy.stats distributions and plot the estimated PDF over the data.
# Create a list of 1000 Normal RVs x = np.random.normal(size=1000) sns.set_context(&amp;#34;poster&amp;#34;) sns.set_style(&amp;#34;ticks&amp;#34;) # This Function creates a normed Histogram by default. # If we use the parameter kde=False and norm_hist=False then # we will be using a count histogram g=sns.distplot(x, kde_kws={&amp;#34;color&amp;#34;:&amp;#34;g&amp;#34;,&amp;#34;lw&amp;#34;:4,&amp;#34;label&amp;#34;:&amp;#34;KDE Estim&amp;#34;,&amp;#34;alpha&amp;#34;:0.5}, hist_kws={&amp;#34;color&amp;#34;:&amp;#34;r&amp;#34;,&amp;#34;alpha&amp;#34;:0.3,&amp;#34;label&amp;#34;:&amp;#34;Freq&amp;#34;}) # remove the top and right line in graph sns.despine() # Set the size of the graph from here g.figure.set_size_inches(12,7) # Set the Title of the graph from here g.axes.set_title(&amp;#39;Normal Simulation&amp;#39;, fontsize=34,color=&amp;#34;b&amp;#34;,alpha=0.3) # Set the xlabel of the graph from here g.set_xlabel(&amp;#34;X&amp;#34;,size = 67,color=&amp;#34;g&amp;#34;,alpha=0.5) # Set the ylabel of the graph from here g.set_ylabel(&amp;#34;Density&amp;#34;,size = 67,color=&amp;#34;r&amp;#34;,alpha=0.5) # Set the ticklabel size and color of the graph from here g.tick_params(labelsize=14,labelcolor=&amp;#34;black&amp;#34;)   import scipy.stats as stats a = 1.5 b = 1.5 x = np.arange(0.01, 1, 0.01) y = stats.beta.rvs(a,b,size=10000) y_act = stats.beta.pdf(x,a,b) g=sns.distplot(y,kde=False,norm_hist=True, kde_kws={&amp;#34;color&amp;#34;:&amp;#34;g&amp;#34;,&amp;#34;lw&amp;#34;:4,&amp;#34;label&amp;#34;:&amp;#34;KDE Estim&amp;#34;,&amp;#34;alpha&amp;#34;:0.5}, hist_kws={&amp;#34;color&amp;#34;:&amp;#34;r&amp;#34;,&amp;#34;alpha&amp;#34;:0.3,&amp;#34;label&amp;#34;:&amp;#34;Freq&amp;#34;}) # Note that we plotted on the graph using plt matlabplot function plt.plot(x,y_act) # remove the top and right line in graph sns.despine() # Set the size of the graph from here g.figure.set_size_inches(12,7) # Set the Title of the graph from here g.axes.set_title((&amp;#34;Beta Simulation vs. Calculated Beta Density\nFor a=%s,b=%s&amp;#34;) %(a,b),fontsize=34,color=&amp;#34;b&amp;#34;,alpha=0.3) # Set the xlabel of the graph from here g.set_xlabel(&amp;#34;X&amp;#34;,size = 67,color=&amp;#34;g&amp;#34;,alpha=0.5) # Set the ylabel of the graph from here g.set_ylabel(&amp;#34;Density&amp;#34;,size = 67,color=&amp;#34;r&amp;#34;,alpha=0.5) # Set the ticklabel size and color of the graph from here g.tick_params(labelsize=14,labelcolor=&amp;#34;black&amp;#34;)   PairPlots You need to see how variables vary with one another. What is the distribution of variables in the dataset. This is the graph to use with the pairplot function. Very helpful And Seaborn males it a joy to use. We will use Iris Dataset here for this example.
iris = sns.load_dataset(&amp;#34;iris&amp;#34;) iris.head()   # Create a Pairplot g = sns.pairplot(iris,hue=&amp;#34;species&amp;#34;,palette=&amp;#34;muted&amp;#34;,size=5, vars=[&amp;#34;sepal_width&amp;#34;, &amp;#34;sepal_length&amp;#34;],kind=&amp;#39;reg&amp;#39;,markers=[&amp;#39;o&amp;#39;,&amp;#39;x&amp;#39;,&amp;#39;&#43;&amp;#39;]) # To change the size of the scatterpoints in graph g = g.map_offdiag(plt.scatter, s=35,alpha=0.5) # remove the top and right line in graph sns.despine() # Additional line to adjust some appearance issue plt.subplots_adjust(top=0.9) # Set the Title of the graph from here g.fig.suptitle(&amp;#39;Relation between Sepal Width and Sepal Length&amp;#39;, fontsize=34,color=&amp;#34;b&amp;#34;,alpha=0.3)   Hope you found this post useful and worth your time. You can find the iPython notebook at github
I tried to make this as simple as possible but You may always ask me or see the documentation for doubts.
If you have any more ideas on how to use Seaborn or which graphs should i add here, please suggest in the comments section.
I will definitely try to add to this post as I start using more visualizations and encounter other libraries as good as seaborn.
Also since this is my first visualization post on this blog, I would like to call out a good course about Data Visualization and applied plotting from University of Michigan which is a part of a pretty good Data Science Specialization with Python in itself. Do check it out.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Learning Spark using Python: Basics and Applications</title>
      <link>https://mlwhiz.com/blog/2015/09/07/spark_basics_explain/</link>
      <pubDate>Mon, 07 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2015/09/07/spark_basics_explain/</guid>
      
      

      
      <description>I generally have a use case for Hadoop in my daily job. It has made my life easier in a sense that I am able to get results which I was not able to see with SQL queries. But still I find it painfully slow. I have to write procedural programs while I work. As in merge these two datasets and then filter and then merge another dataset and then filter using some condition and yada-yada.</description>

      <content:encoded>  
        
        <![CDATA[  I generally have a use case for Hadoop in my daily job. It has made my life easier in a sense that I am able to get results which I was not able to see with SQL queries. But still I find it painfully slow. I have to write procedural programs while I work. As in merge these two datasets and then filter and then merge another dataset and then filter using some condition and yada-yada. You get the gist. And in hadoop its painstakingly boring to do this. You have to write more than maybe 3 Mapreduce Jobs. One job will read the data line by line and write to the disk.
There is a lot of data movement that happens in between that further affects the speed. Another thing I hate is that there is no straight way to pass files to mappers and reducers and that generally adds up another mapreduce job to the whole sequence.
And that is just procedural tasks. To implement an iterative algorithm even after geting the whole logic of parallelization is again a challenge. There would be a lot of mapreduce tasks, a shell based driver program and a lot of unique thinking to bring everything together. And the running times are like crazy. Though sometimes it has its benefits:
  That makes me think about the whole way Hadoop is implemented. While at the time Hadoop appeared the RAM was costly. Now that is not the case. We already have 64GB machines in our Hadoop cluster. So is it really a good idea to not use a larger chunk of memory and read line by line. Also can we have something that allows us to keep a particular piece of data in the memory, So that the next time our program needs it it doesnt have to read it again and waste time. Wouldnt it be better if we have some variable that lets us keep the state our iterative algorithm is in.
The Solution? And here is where Spark comes to rescue. Now working on Spark is very different from Hadoop but when you start using it you find that it makes things so much easier. You still do have to think in the mapreduce way sort of but the way the map and reduce steps are done are a little bit different.
So lets first get Spark on our System (But keep in mind that for running spark in production environments you will need whole clusters set up. A liberty which you may or may not have at present)
The best way that I found to install Spark is following the Apache Spark installation guidelines with the Apache Spark eDx course. It lets you get Spark in your system and work with Spark with iPython notebooks. Something I prefer a lot and find the best way to code in Python.
The installation instructions can be found HERE. You may have to login in to an edX account to follow these instructions, but it is worth it.
So once you have gone through all the steps mentioned there and installed spark using these instructions, you would see something like this in your browser.
  Ahh! so you have got Spark up and running now. That&amp;rsquo;s actually like half the process. I like to learn by examples so let&amp;rsquo;s get done with the &amp;ldquo;Hello World&amp;rdquo; of Distributed computing: The WordCount Program.
lines = sc.textFile(&amp;#34;shakespeare.txt&amp;#34;) # Distribute the data - Create a RDD  counts = (lines.flatMap(lambda x: x.split(&amp;#39; &amp;#39;)) # Create a list with all words .map(lambda x: (x, 1)) # Create tuple (word,1) .reduceByKey(lambda x,y : x &#43; y)) # reduce by key i.e. the word output = counts.take(10) # get the output on local for (word, count) in output: # print output print(&amp;#34;%s: %i&amp;#34; % (word, count))   So that is a small example. Pretty small code when you compare it with Hadoop. And most of the work gets done in the second command. Don&amp;rsquo;t worry if you are not able to follow this yet as I need to tell you about the things that make Spark work.
But before we get into Spark basics, Let us refresh some of our python Basics. Understanding Spark becomes a lot easier if you have used Lambda functions in Python.
For those of you who haven&amp;rsquo;t used it, below is a brief intro.
Lambda Functions in Python Map Map is used to map a function to a array or a list. Say you want to apply some function to every element in a list. You can do this by simply using a for loop but python lambda functions let you do this in a single line in Python.
my_list = [1,2,3,4,5,6,7,8,9,10] # Lets say I want to square each term in my_list. squared_list = map(lambda x:x**2,my_list) print squared_list [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
In the above example you could think of map as a function which takes two arguments - A function and a list. It then applies the function to every element of the list. What lambda allows you to do is write an inline function. In here the part &amp;ldquo;lambda x:x**2&amp;rdquo; defines a function that takes x as input and returns x^2.
You could have also provided a proper function in place of lambda. For Example:
def squared(x): return x**2 &amp;lt;br&amp;gt;my_list = [1,2,3,4,5,6,7,8,9,10] # Lets say I want to square each term in my_list. squared_list = map(squared,my_list) print squared_list [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
The same result, but the lambda expressions make the code compact and a lot more readable.
Filter The other function that is used extensively is the filter function. This function takes two arguments - A condition and the list to filter. If you want to filter your list using some condition you use filter.
my_list = [1,2,3,4,5,6,7,8,9,10] # Lets say I want only the even numbers in my list. filtered_list = filter(lambda x:x%2==0,my_list) print filtered_list [2, 4, 6, 8, 10]
Reduce The next function is the reduce function. This function will be the workhorse in Spark. This function takes two arguments - a function to reduce that takes two arguments, and a list over which the reduce function is to be applied.
my_list = [1,2,3,4,5] # Lets say I want to sum all elements in my list. sum_list = reduce(lambda x,y:x&#43;y,my_list) print sum_list 15
Here the lambda function takes in two values x, y and returns their sum. Intuitively you can think that the reduce function works as:
Reduce function first sends 1,2 ; the lambda function returns 3 Reduce function then sends 3,3 ; the lambda function returns 6 Reduce function then sends 6,4 ; the lambda function returns 10 Reduce function finally sends 10,5 ; the lambda function returns 15  A condition on the lambda function we use in reduce is that it must be commutative that is a &#43; b = b &#43; a and associative that is (a &#43; b) &#43; c == a &#43; (b &#43; c). In the above case we used sum which is commutative as well as associative. Other functions that we could have used are max, min, multiplication etc.
Moving Again to Spark As we have now got the fundamentals of Python Functional Programming out of the way, lets again head to Spark.
But first let us delve a little bit into how spark works. Spark actually consists of two things a driver and workers. Workers normally do all the work and the driver makes them do that work.
An RDD is defined a parallelized data structure that gets distributed across the worker nodes. In our wordcount example, in the first line
lines = sc.textFile(&amp;quot;data/cs100/lab1/shakespeare.txt&amp;quot;)  We took a text file and distributed it across worker nodes so that they can work on it in parallel. We could also parallelize lists using the function
sc.parallelize  For example:
data = [1,2,3,4,5,6,7,8,9,10] new_rdd = sc.parallelize(data,4) new_rdd ParallelCollectionRDD[15] at parallelize at PythonRDD.scala:392
In Spark we classify the operations into two Basic Types: Transformations and Actions.
 Transformations : Create new datasets from existing RDDs
 Actions : Mechanism to get results out of Spark
  Understanding Transformations So lets say you have got your data in the form of an RDD. To requote your data is now accesible b all the worker machines. You want to do some transformations on the data now. You may want to filter, Apply some function etc. In Spark this is done using Transformation functions. Spark provides many transformation functions. You can see a comprehensive list here. Some of the main ones that I use frequently are:
1. Map: Applies a given function to an RDD. Note that the syntax is a little bit different from python, but it necessarily does the same thing. Don&amp;rsquo;t worry about collet yet. For now just think of it as a function that collects the data in squared_rdd back to a list.
data = [1,2,3,4,5,6,7,8,9,10] rdd = sc.parallelize(data,4) squared_rdd = rdd.map(lambda x:x**2) squared_rdd.collect() [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
2. Filter: Again no surprises here. Takes as input a condition and keeps only those elements that fulfill that condition.
data = [1,2,3,4,5,6,7,8,9,10] rdd = sc.parallelize(data,4) filtered_rdd = rdd.filter(lambda x:x%2==0) filtered_rdd.collect() [2, 4, 6, 8, 10]
3. Distinct: Returns only distinct elements in an RDD
data = [1,2,2,2,2,3,3,3,3,4,5,6,7,7,7,8,8,8,9,10] rdd = sc.parallelize(data,4) distinct_rdd = rdd.distinct() distinct_rdd.collect() [8, 4, 1, 5, 9, 2, 10, 6, 3, 7]
4. Flatmap: Similar to map, but each input item can be mapped to 0 or more output items
data = [1,2,3,4] rdd = sc.parallelize(data,4) flat_rdd = rdd.flatMap(lambda x:[x,x**3]) flat_rdd.collect() [1, 1, 2, 8, 3, 27, 4, 64]
5. Reduce By Key: The analogue to the reduce in Hadoop Mapreduce. Now Spark cannot provide the value if it just worked with Lists. In Spark there is a concept of pair RDDs that makes it a lot more flexible. Lets assume we have a data in which we have product, its category and its selling price. We can still parallelize the data.
data = [(&amp;#39;Apple&amp;#39;,&amp;#39;Fruit&amp;#39;,200),(&amp;#39;Banana&amp;#39;,&amp;#39;Fruit&amp;#39;,24),(&amp;#39;Tomato&amp;#39;,&amp;#39;Fruit&amp;#39;,56),(&amp;#39;Potato&amp;#39;,&amp;#39;Vegetable&amp;#39;,103),(&amp;#39;Carrot&amp;#39;,&amp;#39;Vegetable&amp;#39;,34)] rdd = sc.parallelize(data,4) Right now our RDD rdd holds tuples. Now we want to find out the total sum of revenue that we got from each category. To do that we have to transform our rdd to a pair rdd so that it only contatins key-value pairs/tuples.
category_price_rdd = rdd.map(lambda x: (x[1],x[2])) category_price_rdd.collect() [(&amp;lsquo;Fruit&amp;rsquo;, 200), (&amp;lsquo;Fruit&amp;rsquo;, 24), (&amp;lsquo;Fruit&amp;rsquo;, 56), (&amp;lsquo;Vegetable&amp;rsquo;, 103), (&amp;lsquo;Vegetable&amp;rsquo;, 34)]
Here we used the map function to get it in the format we wanted. When working with textfile, the rdd that gets formed has got a lot of strings. We use map to convert it into a format that we want.
So now our category_price_rdd contains the product category and the price at which the prouct sold. Now we want to reduce on the key and sum the prices. We can do this by:
category_total_price_rdd = category_price_rdd.reduceByKey(lambda x,y:x&#43;y) category_total_price_rdd.collect() [(&amp;lsquo;Vegetable&amp;rsquo;, 137), (&amp;lsquo;Fruit&amp;rsquo;, 280)]
6. Group By Key: Similar to reduce by key but does not reduce just puts all the elements in an iterator. For example if we wanted to keep as key the category and as the value all the products we would use this function.
data = [(&amp;#39;Apple&amp;#39;,&amp;#39;Fruit&amp;#39;,200),(&amp;#39;Banana&amp;#39;,&amp;#39;Fruit&amp;#39;,24),(&amp;#39;Tomato&amp;#39;,&amp;#39;Fruit&amp;#39;,56),(&amp;#39;Potato&amp;#39;,&amp;#39;Vegetable&amp;#39;,103),(&amp;#39;Carrot&amp;#39;,&amp;#39;Vegetable&amp;#39;,34)] rdd = sc.parallelize(data,4) category_product_rdd = rdd.map(lambda x: (x[1],x[0])) category_product_rdd.collect() [(&amp;lsquo;Fruit&amp;rsquo;,&amp;lsquo;Apple&amp;rsquo;),(&amp;lsquo;Fruit&amp;rsquo;,&amp;lsquo;Banana&amp;rsquo;),(&amp;lsquo;Fruit&amp;rsquo;,&amp;lsquo;Tomato&amp;rsquo;),(&amp;lsquo;Vegetable&amp;rsquo;,&amp;lsquo;Potato&amp;rsquo;),(&amp;lsquo;Vegetable&amp;rsquo;,&amp;lsquo;Carrot&amp;rsquo;)]
grouped_products_by_category_rdd = category_product_rdd.groupByKey() findata = grouped_products_by_category_rdd.collect() for data in findata: print data[0],list(data[1]) Vegetable [&amp;lsquo;Potato&amp;rsquo;, &amp;lsquo;Carrot&amp;rsquo;]
Fruit [&amp;lsquo;Apple&amp;rsquo;, &amp;lsquo;Banana&amp;rsquo;, &amp;lsquo;Tomato&amp;rsquo;]
Here the grouped by function worked and it returned the category and the list of products in that category.
Understanding Actions Now you have filtered your data, mapped some functions on it. Done your computation. Now you want to get the data on your local machine or save it to a file. You will have to use actions for that. A comprehensive list of actions is provided HERE
Some of the most common actions that I tend to use are:
1. Collect: We have already used this actio many times. It takes the whole rdd and brings it back to the driver program.
2. Reduce: Aggregate the elements of the dataset using a function func (which takes two arguments and returns one). The function should be commutative and associative so that it can be computed correctly in parallel.
rdd = sc.parallelize([1,2,3,4,5]) rdd.reduce(lambda x,y : x&#43;y) 15
3.take: Return an list with the first n elements of the dataset.
rdd = sc.parallelize([1,2,3,4,5]) rdd.take(3) [1, 2, 3]
4. takeOrdered: Return the first n elements of the RDD using either their natural order or a custom comparator.
rdd = sc.parallelize([5,3,12,23]) rdd.takeOrdered(3,lambda s:-1*s) # descending order [23, 12, 5]
rdd = sc.parallelize([(5,23),(3,34),(12,344),(23,29)]) rdd.takeOrdered(3,lambda s:-1*s[1]) # descending order [(12, 344), (3, 34), (23, 29)]
So now lets take a look at the Wordcount Again
Understanding The WordCount Example Now we sort of understand the transformations and the actions provided to us by Spark. It should not be difficult to understand the work count program now. Lets go through the program niw line by line.
The first lines creates a RDD and distributeds to the workers.
lines = sc.textFile(&amp;quot;data/cs100/lab1/shakespeare.txt&amp;quot;)  This RDD lines contains a list of strings that are actually the line in file. This RDD is of the form:
[&#39;word1 word2 word3&#39;,&#39;word4 word3 word2&#39;]  This next line is actually the workhorse function in the whole script.
counts = (lines.flatMap(lambda x: x.split(&#39; &#39;)) .map(lambda x: (x, 1)) .reduceByKey(lambda x,y : x &#43; y))  It contains a series of transformations that we do to the lines RDD. First of all we do a flatmap transformation. The flatmap transformation takes as input the lines and gives words as output. So after the flatmap transformation the RDD is of the form:
[&#39;word1&#39;,&#39;word2&#39;,&#39;word3&#39;,&#39;word4&#39;,&#39;word3&#39;,&#39;word2&#39;]  Next we do a map transformation on the flatmap output which converts the rdd to :
[(&#39;word1&#39;,1),(&#39;word2&#39;,1),(&#39;word3&#39;,1),(&#39;word4&#39;,1),(&#39;word3&#39;,1),(&#39;word2&#39;,1)]  Finally we do a reduceByKey transformation which counts the number of time each word appeared. After which the rdd approaches the final desirable form.
[(&#39;word1&#39;,1),(&#39;word2&#39;,2),(&#39;word3&#39;,2),(&#39;word4&#39;,1)]  This next line is an action that takes the first 10 elements of the resulting RDD locally.
output = counts.take(10)  This line just prints the output
for (word, count) in output: print(&amp;quot;%s: %i&amp;quot; % (word, count))  Getting Serious So till now we have talked about the Wordcount example and the basic transformations and actions that you could use in Spark. But we don&amp;rsquo;t do wordcount in real life. We have to work on bigger problems which are much more complex. Worry not! whatever we have learned till now will let us do that and more.
Lets work with a concrete example: I will work on an example in which Greg Rada Worked on Movielens Data with Pandas (BTW a great resource to learn Pandas). This example takes care of every sort of transformation that you may like to do with this data.
So lets first talk about the dataset. The movielens dataset contains a lot of files but we are going to be working with 3 files only:
1) Users: This file name is kept as &amp;ldquo;u.user&amp;rdquo;, The columns in this file are:
[&#39;user_id&#39;, &#39;age&#39;, &#39;sex&#39;, &#39;occupation&#39;, &#39;zip_code&#39;]  2) Ratings: This file name is kept as &amp;ldquo;u.data&amp;rdquo;, The columns in this file are:
[&#39;user_id&#39;, &#39;movie_id&#39;, &#39;rating&#39;, &#39;unix_timestamp&#39;]  3) Movies: This file name is kept as &amp;ldquo;u.item&amp;rdquo;, The columns in this file are:
[&#39;movie_id&#39;, &#39;title&#39;, &#39;release_date&#39;, &#39;video_release_date&#39;, &#39;imdb_url&#39;, and 18 more columns.....]  ##What are the 25 most rated movies? First of all lets load the data in different rdds. And see what the data contains.
userRDD = sc.textFile(&amp;#34;/vagrant/ml-100k/u.user&amp;#34;) ratingRDD = sc.textFile(&amp;#34;/vagrant/ml-100k/u.data&amp;#34;) movieRDD = sc.textFile(&amp;#34;/vagrant/ml-100k/u.item&amp;#34;) print &amp;#34;userRDD:&amp;#34;,userRDD.take(1) print &amp;#34;ratingRDD:&amp;#34;,ratingRDD.take(1) print &amp;#34;movieRDD:&amp;#34;,movieRDD.take(1)   Seeing the data we note that to answer this question we will need to use the ratingRdd. But the ratingRDD does not have movie name. So we would have to merge movieRDD and ratingRDD. So lets see how we would do that in Spark. Lets first do it step by step.Read the comments.
# Create a RDD from RatingRDD that only contains the two columns of interest i.e. movie_id,rating. RDD_movid_rating = ratingRDD.map(lambda x : (x.split(&amp;#34;\t&amp;#34;)[1],x.split(&amp;#34;\t&amp;#34;)[2])) print &amp;#34;RDD_movid_rating:&amp;#34;,RDD_movid_rating.take(4) # Create a RDD from MovieRDD that only contains the two columns of interest i.e. movie_id,title. RDD_movid_title = movieRDD.map(lambda x : (x.split(&amp;#34;|&amp;#34;)[0],x.split(&amp;#34;|&amp;#34;)[1])) print &amp;#34;RDD_movid_title:&amp;#34;,RDD_movid_title.take(2) # merge these two pair RDDs based on movie_id. For this we will use the transformation leftOuterJoin() rdd_movid_title_rating = RDD_movid_rating.leftOuterJoin(RDD_movid_title) print &amp;#34;rdd_movid_title_rating:&amp;#34;,rdd_movid_title_rating.take(1) # use the RDD in previous step to create (movie,1) tuple pair RDD rdd_title_rating = rdd_movid_title_rating.map(lambda x: (x[1][1],1 )) print &amp;#34;rdd_title_rating:&amp;#34;,rdd_title_rating.take(2) # Use the reduceByKey transformation to reduce on the basis of movie_title rdd_title_ratingcnt = rdd_title_rating.reduceByKey(lambda x,y: x&#43;y) print &amp;#34;rdd_title_ratingcnt:&amp;#34;,rdd_title_ratingcnt.take(2) # Get the final answer by using takeOrdered Transformation print &amp;#34;#####################################&amp;#34; print &amp;#34;25 most rated movies:&amp;#34;,rdd_title_ratingcnt.takeOrdered(25,lambda x:-x[1]) print &amp;#34;#####################################&amp;#34;   We could have done all this in a single command using the below command but the code is a little messy now. I did this to show that you can do things sequentially with Spark and you could bypass the process of variable creation.
print (((ratingRDD.map(lambda x : (x.split(&amp;#34;\t&amp;#34;)[1],x.split(&amp;#34;\t&amp;#34;)[2]))). leftOuterJoin(movieRDD.map(lambda x : (x.split(&amp;#34;|&amp;#34;)[0],x.split(&amp;#34;|&amp;#34;)[1])))). map(lambda x: (x[1][1],1)). reduceByKey(lambda x,y: x&#43;y). takeOrdered(25,lambda x:-x[1])) &amp;lt;div style=&amp;#34;margin-top: 9px; margin-bottom: 10px;&amp;#34;&amp;gt; &amp;lt;center&amp;gt;&amp;lt;img src=&amp;#34;/images/result_rating_cnt_25_2.png&amp;#34;&amp;gt;&amp;lt;/center&amp;gt; &amp;lt;/div&amp;gt; ##Which movies are most highly rated? Now we want to find the most highly rated 25 movvies using the same dataset. We actually want only those movies which have been rated atleast 100 times. Lets do this using Spark:
# We already have the RDD rdd_movid_title_rating: [(u&amp;#39;429&amp;#39;, (u&amp;#39;5&amp;#39;, u&amp;#39;Day the Earth Stood Still, The (1951)&amp;#39;))] # We create an RDD that contains sum of all the ratings for a particular movie rdd_title_ratingsum = (rdd_movid_title_rating. map(lambda x: (x[1][1],int(x[1][0]))). reduceByKey(lambda x,y:x&#43;y)) print &amp;#34;rdd_title_ratingsum:&amp;#34;,rdd_title_ratingsum.take(2) # Merge this data with the RDD rdd_title_ratingcnt we created in the last step  # And use Map function to divide ratingsum by rating count. rdd_title_ratingmean_rating_count = (rdd_title_ratingsum. leftOuterJoin(rdd_title_ratingcnt). map(lambda x:(x[0],(float(x[1][0])/x[1][1],x[1][1])))) print &amp;#34;rdd_title_ratingmean_rating_count:&amp;#34;,rdd_title_ratingmean_rating_count.take(1) # We could use take ordered here only but we want to only get the movies which have count # of ratings more than or equal to 100 so lets filter the data RDD. rdd_title_rating_rating_count_gt_100 = (rdd_title_ratingmean_rating_count. filter(lambda x: x[1][1]&amp;gt;=100)) print &amp;#34;rdd_title_rating_rating_count_gt_100:&amp;#34;,rdd_title_rating_rating_count_gt_100.take(1) # Get the final answer by using takeOrdered Transformation print &amp;#34;#####################################&amp;#34; print &amp;#34;25 highly rated movies:&amp;#34;, print rdd_title_rating_rating_count_gt_100.takeOrdered(25,lambda x:-x[1][0]) print &amp;#34;#####################################&amp;#34;   Conclusion So Spark has Already provided an interface where we could apply transformations sequentially much easily than Hadoop. And it is fast. While in hadoop things are a pain to do sequentially, the infrastructure that Spark provides seem to fit naturally into the analytics use case.
Hopefully I&amp;rsquo;ve covered the basics well enough to pique your interest and help you get started with Spark. If I&amp;rsquo;ve missed something critical, feel free to let me know on Twitter or in the comments - I&amp;rsquo;d love constructive feedback.
You can find the Jupyter notebook HERE
One of the newest and best resources that you can keep an eye on is the Introduction to Big Data course in the Big Data Specialization from UCSanDiego
Look out for these two books to learn more about Spark.
  The first one of these is a bestseller. It presents 9 case studies of data analysis applications in various domains. The topics are diverse and the authors always use real world datasets. Beside learning Spark and a data science you will also have the opportunity to gain insight about topics like taxi traffic in NYC, deforestation or neuroscience. The second one is more of a reference that takes the reader on a tour of the Spark fundamentals, explaining the RDD data model in detail, after which it dives into the main functionality of Spark: Spark SQL, Spark Streaming, MLLib, SparkML, and GraphX. Later on, it covers the operational aspects of setting up a standalone Spark cluster, as well as running it on YARN and Mesos.
 ]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Behold the power of MCMC</title>
      <link>https://mlwhiz.com/blog/2015/08/21/mcmc_algorithm_cryptography/</link>
      <pubDate>Fri, 21 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2015/08/21/mcmc_algorithm_cryptography/</guid>
      
      

      
      <description>Last time I wrote an article on MCMC and how they could be useful. We learned how MCMC chains could be used to simulate from a random variable whose distribution is partially known i.e. we don&amp;amp;rsquo;t know the normalizing constant.
So MCMC Methods may sound interesting to some (for these what follows is a treat) and for those who don&amp;amp;rsquo;t really appreciate MCMC till now, I hope I will be able to pique your interest by the end of this blog post.</description>

      <content:encoded>  
        
        <![CDATA[    Last time I wrote an article on MCMC and how they could be useful. We learned how MCMC chains could be used to simulate from a random variable whose distribution is partially known i.e. we don&amp;rsquo;t know the normalizing constant.
So MCMC Methods may sound interesting to some (for these what follows is a treat) and for those who don&amp;rsquo;t really appreciate MCMC till now, I hope I will be able to pique your interest by the end of this blog post.
So here goes. This time we will cover some applications of MCMC in various areas of Computer Science using Python. If you feel the problems difficult to follow with, I would advice you to go back and read the previous post, which tries to explain MCMC Methods. We Will try to solve the following two problems:
 Breaking the Code - This problem has got somewhat of a great pedigree as this method was suggested by Persi Diaconis- The Mathemagician. So Someone comes to you with the below text. This text looks like gibberish but this is a code, Could you decrypyt it?
XZ STAVRK HXVR MYAZ OAKZM JKSSO SO MYR OKRR XDP JKSJRK XBMASD SO YAZ TWDHZ MYR JXMBYNSKF BSVRKTRM NYABY NXZ BXKRTRZZTQ OTWDH SVRK MYR AKSD ERPZMRXP KWZMTRP MYR JXTR OXBR SO X QSWDH NSIXD NXZ KXAZRP ORRETQ OKSI MYR JATTSN XDP X OXADM VSABR AIJRKORBMTQ XKMABWTXMRP MYR NSKPZ TRM IR ZRR MYR BYATP XDP PAR MYR ZWKHRSD YXP ERRD ZAMMADH NAMY YAZ OXBR MWKDRP MSNXKPZ MYR OAKR HAVADH MYR JXTIZ SO YAZ YXDPZ X NXKI XDP X KWE XTMRKDXMRTQ XZ MYR QSWDH NSIXD ZJSFR YR KSZR XDP XPVXDBADH MS MYR ERP Z YRXP ZXAP NAMY ISKR FADPDRZZ MYXD IAHYM YXVR ERRD RGJRBMRP SO YAI
 The Knapsack Problem - This problem comes from Introduction to Probability by Joseph Blitzstein. You should check out his courses STAT110 and CS109 as they are awesome. Also as it turns out Diaconis was the advisor of Joseph. So you have Bilbo a Thief who goes to Smaug&amp;rsquo;s Lair. He finds M treasures. Each treasure has some Weight and some Gold value. But Bilbo cannot really take all of that. He could only carry a certain Maximum Weight. But being a smart hobbit, he wants to Maximize the value of the treasures he takes. Given the values for weights and value of the treasures and the maximum weight that Bilbo could carry, could you find a good solution? This is known as the Knapsack Problem in Computer Science.
  Breaking the Code   So we look at the data and form a hypothesis that the data has been scrambled using a Substitution Cipher. We don&amp;rsquo;t know the encryption key, and we would like to know the Decryption Key so that we can decrypt the data and read the code.
To create this example, this data has actually been taken from Oliver Twist. We scrambled the data using a random encryption key, which we forgot after encrypting and we would like to decrypt this encrypted text using MCMC Chains. The real decryption key actually is &amp;ldquo;ICZNBKXGMPRQTWFDYEOLJVUAHS&amp;rdquo;
So lets think about this problem for a little bit. The decryption key could be any 26 letter string with all alphabets appearing exactly once. How many string permutations are there like that? That number would come out to be $26! \approx 10^{26}$ permutations. That is a pretty large number. If we go for using a brute force approach we are screwed. So what could we do? MCMC Chains come to rescue.
We will devise a Chain whose states theoritically could be any of these permutations. Then we will:
 Start by picking up a random current state. Create a proposal for a new state by swapping two random letters in the current state. Use a Scoring Function which calculates the score of the current state $Score_C$ and the proposed State $Score_P$. If the score of the proposed state is more than current state, Move to Proposed State. Else flip a coin which has a probability of Heads $Score_P/Score_C$. If it comes heads move to proposed State. Repeat from 2nd State.  If we get lucky we may reach a steady state where the chain has the stationary distribution of the needed states and the state that the chain is at could be used as a solution.
So the Question is what is the scoring function that we will want to use. We want to use a scoring function for each state(Decryption key) which assigns a positive score to each decryption key. This score intuitively should be more if the encrypted text looks more like actual english if decrypted using this decryption key.
So how can we quantify such a function. We will check a long text and calculate some statistics. See how many times one alphabet comes after another in a legitimate long text like War and Peace. For example we want to find out how many times does &amp;lsquo;BA&amp;rsquo; appears in the text or how many times &amp;lsquo;TH&amp;rsquo; occurs in the text.
For each pair of characters $\beta_1$ and $\beta_2$ (e.g. $\beta_1$ = T and $\beta_2$ =H), we let $R(\beta_1,\beta_2)$ record the number of times that specific pair(e.g. &amp;ldquo;TH&amp;rdquo;) appears consecutively in the reference text.
Similarly, for a putative decryption key x, we let $F_x(\beta_1,\beta_2)$ record the number of times that pair appears when the cipher text is decrypted using the decryption key x.
We then Score a particular decryption key x using:
$$Score(x) = \prod R(\beta_1,\beta_2)^{F_x(\beta_1,\beta_2)}$$ This function can be thought of as multiplying, for each consecutive pair of letters in the decrypted text, the number of times that pair occurred in the reference text. Intuitively, the score function is higher when the pair frequencies in the decrypted text most closely match those of the reference text, and the decryption key is thus most likely to be correct.
To make life easier with calculations we will calculate $log(Score(x))$
So lets start working through the problem step by step.
# AIM: To Decrypt a text using MCMC approach. i.e. find decryption key which we will call cipher from now on. import string import math import random # This function takes as input a decryption key and creates a dict for key where each letter in the decryption key # maps to a alphabet For example if the decryption key is &amp;#34;DGHJKL....&amp;#34; this function will create a dict like {D:A,G:B,H:C....}  def create_cipher_dict(cipher): cipher_dict = {} alphabet_list = list(string.ascii_uppercase) for i in range(len(cipher)): cipher_dict[alphabet_list[i]] = cipher[i] return cipher_dict # This function takes a text and applies the cipher/key on the text and returns text. def apply_cipher_on_text(text,cipher): cipher_dict = create_cipher_dict(cipher) text = list(text) newtext = &amp;#34;&amp;#34; for elem in text: if elem.upper() in cipher_dict: newtext&#43;=cipher_dict[elem.upper()] else: newtext&#43;=&amp;#34; &amp;#34; return newtext # This function takes as input a path to a long text and creates scoring_params dict which contains the  # number of time each pair of alphabet appears together # Ex. {&amp;#39;AB&amp;#39;:234,&amp;#39;TH&amp;#39;:2343,&amp;#39;CD&amp;#39;:23 ..} def create_scoring_params_dict(longtext_path): scoring_params = {} alphabet_list = list(string.ascii_uppercase) with open(longtext_path) as fp: for line in fp: data = list(line.strip()) for i in range(len(data)-1): alpha_i = data[i].upper() alpha_j = data[i&#43;1].upper() if alpha_i not in alphabet_list and alpha_i != &amp;#34; &amp;#34;: alpha_i = &amp;#34; &amp;#34; if alpha_j not in alphabet_list and alpha_j != &amp;#34; &amp;#34;: alpha_j = &amp;#34; &amp;#34; key = alpha_i&#43;alpha_j if key in scoring_params: scoring_params[key]&#43;=1 else: scoring_params[key]=1 return scoring_params # This function takes as input a text and creates scoring_params dict which contains the  # number of time each pair of alphabet appears together # Ex. {&amp;#39;AB&amp;#39;:234,&amp;#39;TH&amp;#39;:2343,&amp;#39;CD&amp;#39;:23 ..} def score_params_on_cipher(text): scoring_params = {} alphabet_list = list(string.ascii_uppercase) data = list(text.strip()) for i in range(len(data)-1): alpha_i =data[i].upper() alpha_j = data[i&#43;1].upper() if alpha_i not in alphabet_list and alpha_i != &amp;#34; &amp;#34;: alpha_i = &amp;#34; &amp;#34; if alpha_j not in alphabet_list and alpha_j != &amp;#34; &amp;#34;: alpha_j = &amp;#34; &amp;#34; key = alpha_i&#43;alpha_j if key in scoring_params: scoring_params[key]&#43;=1 else: scoring_params[key]=1 return scoring_params # This function takes the text to be decrypted and a cipher to score the cipher. # This function returns the log(score) metric def get_cipher_score(text,cipher,scoring_params): cipher_dict = create_cipher_dict(cipher) decrypted_text = apply_cipher_on_text(text,cipher) scored_f = score_params_on_cipher(decrypted_text) cipher_score = 0 for k,v in scored_f.iteritems(): if k in scoring_params: cipher_score &#43;= v*math.log(scoring_params[k]) return cipher_score # Generate a proposal cipher by swapping letters at two random location def generate_cipher(cipher): pos1 = random.randint(0, len(list(cipher))-1) pos2 = random.randint(0, len(list(cipher))-1) if pos1 == pos2: return generate_cipher(cipher) else: cipher = list(cipher) pos1_alpha = cipher[pos1] pos2_alpha = cipher[pos2] cipher[pos1] = pos2_alpha cipher[pos2] = pos1_alpha return &amp;#34;&amp;#34;.join(cipher) # Toss a random coin with robability of head p. If coin comes head return true else false. def random_coin(p): unif = random.uniform(0,1) if unif&amp;gt;=p: return False else: return True # Takes as input a text to decrypt and runs a MCMC algorithm for n_iter. Returns the state having maximum score and also # the last few states  def MCMC_decrypt(n_iter,cipher_text,scoring_params): current_cipher = string.ascii_uppercase # Generate a random cipher to start state_keeper = set() best_state = &amp;#39;&amp;#39; score = 0 for i in range(n_iter): state_keeper.add(current_cipher) proposed_cipher = generate_cipher(current_cipher) score_current_cipher = get_cipher_score(cipher_text,current_cipher,scoring_params) score_proposed_cipher = get_cipher_score(cipher_text,proposed_cipher,scoring_params) acceptance_probability = min(1,math.exp(score_proposed_cipher-score_current_cipher)) if score_current_cipher&amp;gt;score: best_state = current_cipher if random_coin(acceptance_probability): current_cipher = proposed_cipher if i%500==0: print &amp;#34;iter&amp;#34;,i,&amp;#34;:&amp;#34;,apply_cipher_on_text(cipher_text,current_cipher)[0:99] return state_keeper,best_state ## Run the Main Program: scoring_params = create_scoring_params_dict(&amp;#39;war_and_peace.txt&amp;#39;) plain_text = &amp;#34;As Oliver gave this first proof of the free and proper action of his lungs, \ the patchwork coverlet which was carelessly flung over the iron bedstead, rustled; \ the pale face of a young woman was raised feebly from the pillow; and a faint voice imperfectly \ articulated the words, Let me see the child, and die. \ The surgeon had been sitting with his face turned towards the fire: giving the palms of his hands a warm \ and a rub alternately. As the young woman spoke, he rose, and advancing to the bed&amp;#39;s head, said, with more kindness \ than might have been expected of him: &amp;#34; encryption_key = &amp;#34;XEBPROHYAUFTIDSJLKZMWVNGQC&amp;#34; cipher_text = apply_cipher_on_text(plain_text,encryption_key) decryption_key = &amp;#34;ICZNBKXGMPRQTWFDYEOLJVUAHS&amp;#34; print&amp;#34;Text To Decode:&amp;#34;, cipher_text print &amp;#34;\n&amp;#34; states,best_state = MCMC_decrypt(10000,cipher_text,scoring_params) print &amp;#34;\n&amp;#34; print &amp;#34;Decoded Text:&amp;#34;,apply_cipher_on_text(cipher_text,best_state) print &amp;#34;\n&amp;#34; print &amp;#34;MCMC KEY FOUND:&amp;#34;,best_state print &amp;#34;ACTUAL DECRYPTION KEY:&amp;#34;,decryption_key   This chain converges around the 2000th iteration and we are able to unscramble the code. That&amp;rsquo;s awesome!!! Now as you see the MCMC Key found is not exactly the encryption key. So the solution is not a deterministic one, but we can see that it does not actually decrease any of the value that the MCMC Methods provide. Now Lets Help Bilbo :)
The Knapsack Problem Restating, we have Bilbo a Thief who goes to Smaug&amp;rsquo;s Lair. He finds M treasures. Each treasure has some Weight and some Gold value. But Bilbo cannot really take all of that. He could only carry a certain Maximum Weight. But being a smart hobbit, he wants to Maximize the value of the treasures he takes. Given the values for weights and value of the treasures and the maximum weight that Bilbo could carry, could you find a good solution?
So in this problem we have an $1$x$M$ array of Weight Values W, Gold Values G and a value for the maximum weight $w_{MAX}$ that Bilbo can carry. We want to find out an $1$x$M$ array $X$ of 1&amp;rsquo;s and 0&amp;rsquo;s, which holds weather Bilbo Carries a particular treasure or not. This array needs to follow the constraint $WX^T &amp;lt; w_{MAX}$ and we want to maximize $GX^T$ for a particular state X.(Here the T means transpose)
So lets first discuss as to how we will create a proposal from a previous state.
 Pick a random index from the state and toggle the index value. Check if we satisfy our constraint. If yes this state is the proposal state. Else pick up another random index and repeat.  We also need to think about the Scoring Function. We need to give high values to states with high gold value. We will use: $$Score(X)=e^{\beta GX^T}$$ We give exponentially more value to higher score. The Beta here is a &#43;ve constant. But how to choose it? If $\beta$ is big we will give very high score to good solutions and the chain will not be able to try new solutions as it can get stuck in local optimas. If we give a small value the chain will not converge to very good solutions. So weuse an Optimization Technique called Simulated Annealing i.e. we will start with a small value of $\beta$ and increase as no of iterations go up. That way the chain will explore in the starting stages and stay at the best solution in the later stages.
So now we have everything we need to get started
import numpy as np W = [20,40,60,12,34,45,67,33,23,12,34,56,23,56] G = [120,420,610,112,341,435,657,363,273,812,534,356,223,516] W_max = 150 # This function takes a state X , The gold vector G and a Beta Value and return the Log of score def score_state_log(X,G,Beta): return Beta*np.dot(X,G) # This function takes as input a state X and the number of treasures M, The weight vector W and the maximum weight W_max # and returns a proposal state def create_proposal(X,W,W_max): M = len(W) random_index = random.randint(0,M-1) #print random_index proposal = list(X) proposal[random_index] = 1 - proposal[random_index] #Toggle #print proposal if np.dot(proposal,W)&amp;lt;=W_max: return proposal else: return create_proposal(X,W,W_max) # Takes as input a text to decrypt and runs a MCMC algorithm for n_iter. Returns the state having maximum score and also # the last few states  def MCMC_Golddigger(n_iter,W,G,W_max, Beta_start = 0.05, Beta_increments=.02): M = len(W) Beta = Beta_start current_X = [0]*M # We start with all 0&amp;#39;s state_keeper = [] best_state = &amp;#39;&amp;#39; score = 0 for i in range(n_iter): state_keeper.append(current_X) proposed_X = create_proposal(current_X,W,W_max) score_current_X = score_state_log(current_X,G,Beta) score_proposed_X = score_state_log(proposed_X,G,Beta) acceptance_probability = min(1,math.exp(score_proposed_X-score_current_X)) if score_current_X&amp;gt;score: best_state = current_X if random_coin(acceptance_probability): current_X = proposed_X if i%500==0: Beta &#43;= Beta_increments # You can use these below two lines to tune value of Beta #if i%20==0: # print &amp;#34;iter:&amp;#34;,i,&amp;#34; |Beta=&amp;#34;,Beta,&amp;#34; |Gold Value=&amp;#34;,np.dot(current_X,G) return state_keeper,best_state Running the Main program:
max_state_value =0 Solution_MCMC = [0] for i in range(10): state_keeper,best_state = MCMC_Golddigger(50000,W,G,W_max,0.0005, .0005) state_value=np.dot(best_state,G) if state_value&amp;gt;max_state_value: max_state_value = state_value Solution_MCMC = best_state print &amp;#34;MCMC Solution is :&amp;#34; , str(Solution_MCMC) , &amp;#34;with Gold Value:&amp;#34;, str(max_state_value) MCMC Solution is : [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0] with Gold Value: 2435  Now I won&amp;rsquo;t say that this is the best solution. The deterministic solution using DP will be the best for such use case but sometimes when the problems gets large, having such techniques at disposal becomes invaluable.
So tell me What do you think about MCMC Methods?
Also, If you find any good applications or would like to apply these techniques to some area, I would really be glad to know about them and help if possible.
The codes for both examples are sourced at Github
References and Sources:  Introduction to Probability Joseph K Blitzstein, Jessica Hwang Wikipedia The Markov Chain Monte Carlo Revolution, Persi Diaconis Decrypting Classical Cipher Text Using Markov Chain Monte Carlo, Jian Chen and Jeffrey S. Rosenthal  One of the newest and best resources that you can keep an eye on is the Bayesian Methods for Machine Learning course in the Advanced machine learning specialization created jointly by Kazanova(Number 3 Kaggler at the time of writing)
Apart from that I also found a course on Bayesian Statistics on Coursera. In the process of doing it right now so couldn&amp;rsquo;t really comment on it. But since I had done an course on Inferential Statistics taught by the same professor before(Mine Çetinkaya-Rundel), I am very hopeful for this course. Let&amp;rsquo;s see.
Also look out for these two books to learn more about MCMC. I have not yet read them whole but still I liked whatever I read:
  Both these books are pretty high level and hard on math. But these are the best texts out there too. :)
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>My Tryst With MCMC Algorithms</title>
      <link>https://mlwhiz.com/blog/2015/08/19/mcmc_algorithms_b_distribution/</link>
      <pubDate>Wed, 19 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2015/08/19/mcmc_algorithms_b_distribution/</guid>
      
      

      
      <description>The things that I find hard to understand push me to my limits. One of the things that I have always found hard is Markov Chain Monte Carlo Methods. When I first encountered them, I read a lot about them but mostly it ended like this.
  The meaning is normally hidden in deep layers of Mathematical noise and not easy to decipher. This blog post is intended to clear up the confusion around MCMC methods, Know what they are actually useful for and Get hands on with some applications.</description>

      <content:encoded>  
        
        <![CDATA[  The things that I find hard to understand push me to my limits. One of the things that I have always found hard is Markov Chain Monte Carlo Methods. When I first encountered them, I read a lot about them but mostly it ended like this.
  The meaning is normally hidden in deep layers of Mathematical noise and not easy to decipher. This blog post is intended to clear up the confusion around MCMC methods, Know what they are actually useful for and Get hands on with some applications.
So what really are MCMC Methods? First of all we have to understand what are Monte Carlo Methods!!!
Monte Carlo methods derive their name from Monte Carlo Casino in Monaco. There are many card games that need probability of winning against the dealer. Sometimes calculating this probability can be mathematically complex or highly intractable. But we can always run a computer simulation to simulate the whole game many times and see the probability as the number of wins divided by the number of games played.
So that is all you need to know about Monte carlo Methods. Yes it is just a simple simulation technique with a Fancy Name.
So as we have got the first part of MCMC, we also need to understand what are Markov Chains. Before Jumping onto Markov Chains let us learn a little bit about Markov Property.
Suppose you have a system of $M$ possible states, and you are hopping from one state to another. Markov Property says that given a process which is at a state $X_n$ at a particular point of time, the probability of $X_{n&#43;1} = k$, where $k$ is any of the $M$ states the process can hop to, will only be dependent on which state it is at the given moment of time. And not on how it reached the current state.
Mathematically speaking:
 $$P(X_{n&#43;1}=k | X_n=k_n,X_{n-1}=k_{n-1},....,X_1=k_1) = P(X_{n&#43;1}=k|X_n=k_n)$$ If a process exhibits the Markov Property than it is known as a Markov Process.
Now Why is a Markov Chain important? It is important because of its stationary distribution.
So what is a Stationary Distribution?
Assume you have a markov process like below. You start from any state $X_i$ and want to find out the state Probability distribution at $X_{i&#43;1}$.
  You have a matrix of transition probability  
which defines the probability of going from a state $X_i$ to $X_j$. You start calculating the Probability distribution for the next state. If you are at Bull Market State at time $i$ , you have a state Probability distribution as [0,1,0]
you want to get the state pdf at $X_{i&#43;1}$. That is given by
$$s_{i&#43;1} = s_{i}Q$$ $$ s_{i&#43;1}=\left[ {\begin{array}{cc} .15 &amp; .8 &amp; .05 \end{array} } \right]$$ And the next state distribution could be found out by $$s_{i&#43;1} = s_iQ^2$$div and so on. Eventually you will reach a stationary state s where: $$sQ=s$$ For this transition matrix Q the Stationary distribution $s$ is $$ s_{i&#43;1}=\left[ {\begin{array}{cc} .625 &amp; .3125 &amp; .0625 \end{array} } \right]$$ The stationary state distribution is important because it lets you define the probability for every state of a system at a random time. That is for this particular example we can say that 62.5% of the times market will be in a bull market state, 31.25% of weeks it will be a bear market and 6.25% of weeks it will be stagnant
Intuitively you can think of it as an random walk on a chain. You might visit some nodes more often than others based on node probabilities. In the Google Pagerank problem you might think of a node as a page, and the probability of a page in the stationary distribution as its relative importance.
Woah! That was a lot of information and we have yet not started talking about the MCMC Methods. Well if you are with me till now, we can now get on to the real topic now.
So What is MCMC? According to Wikipedia:
 **Markov Chain Monte Carlo** (MCMC) methods are a class of algorithms for **sampling from a probability distribution** based on constructing a Markov chain that has the desired distribution as its stationary distribution. The state of the chain after a number of steps is then used as a sample of the desired distribution. The quality of the sample improves as a function of the number of steps.  So let&amp;rsquo;s explain this with an example: Assume that we want to sample from a Beta distribution. The PDF is:
$$f(x) = Cx^{\alpha -1}(1-x)^{\beta -1}$$ where $C$ is the normalizing constant (which we actually don&amp;rsquo;t need to Sample from the distribution as we will see later).
This is a fairly difficult problem with the Beta Distribution if not intractable. In reality you might need to work with a lot harder Distribution Functions and sometimes you won&amp;rsquo;t actually know the normalizing constants.
MCMC methods make life easier for us by providing us with algorithms that could create a Markov Chain which has the Beta distribution as its stationary distribution given that we can sample from a uniform distribution(which is fairly easy).
If we start from a random state and traverse to the next state based on some algorithm repeatedly, we will end up creating a Markov Chain which has the Beta distribution as its stationary distribution and the states we are at after a long time could be used as sample from the Beta Distribution.
One such MCMC Algorithm is the Metropolis Hastings Algorithm
Metropolis Hastings Algorithm Let $s=(s_1,s_2,&amp;hellip;.,s_M)$ be the desired stationary distribution. We want to create a Markov Chain that has this stationary distribution. We start with an arbitrary Markov Chain $P$ with $M$ states with transition matrix $Q$, so that $Q_{ij}$ represents the probability of going from state $i$ to $j$. Intuitively we know how to wander around this Markov Chain but this Markov Chain does not have the required Stationary Distribution. This chain does have some stationary distribution(which is not of our use)
Our Goal is to change the way we wander on the this Markov Chain $P$ so that this chain has the desired Stationary distribution.
To do this we:
 Start at a random initial State $i$. Randomly pick a new Proposal State by looking at the transition probabilities in the ith row of the transition matrix Q. Compute an measure called the Acceptance Probability which is defined as: $a_{ij} = min(s_jp_{ji}/s_{i}p_{ij},1)$ Now Flip a coin that lands head with probability $a_{ij}$. If the coin comes up heads, accept the proposal i.e move to next state else reject the proposal i.e. stay at the current state. Repeat for a long time  After a long time this chain will converge and will have a stationary distribution $s$. We can then use the states of the chain as the sample from any distribution.
While doing this to sample the Beta Distribution, the only time we are using the PDF is to find the acceptance probability and in that we divide $s_j$ by $s_i$, i.e. the normalizing constant $C$ gets cancelled.
Now Let&amp;rsquo;s Talk about the intuition. For the Intuition I am quoting an Answer from the site Stack Exchange,as this was the best intuitive explanation that I could find:  I think there&amp;rsquo;s a nice and simple intuition to be gained from the (independence-chain) Metropolis-Hastings algorithm. First, what&amp;rsquo;s the goal? The goal of MCMC is to draw samples from some probability distribution without having to know its exact height at any point(We don&amp;rsquo;t need to know C). The way MCMC achieves this is to &amp;ldquo;wander around&amp;rdquo; on that distribution in such a way that the amount of time spent in each location is proportional to the height of the distribution. If the &amp;ldquo;wandering around&amp;rdquo; process is set up correctly, you can make sure that this proportionality (between time spent and height of the distribution) is achieved. Intuitively, what we want to do is to to walk around on some (lumpy) surface in such a way that the amount of time we spend (or # samples drawn) in each location is proportional to the height of the surface at that location. So, e.g., we&amp;rsquo;d like to spend twice as much time on a hilltop that&amp;rsquo;s at an altitude of 100m as we do on a nearby hill that&amp;rsquo;s at an altitude of 50m. The nice thing is that we can do this even if we don&amp;rsquo;t know the absolute heights of points on the surface: all we have to know are the relative heights. e.g., if one hilltop A is twice as high as hilltop B, then we&amp;rsquo;d like to spend twice as much time at A as we spend at B. The simplest variant of the Metropolis-Hastings algorithm (independence chain sampling) achieves this as follows: assume that in every (discrete) time-step, we pick a random new &amp;ldquo;proposed&amp;rdquo; location (selected uniformly across the entire surface). If the proposed location is higher than where we&amp;rsquo;re standing now, move to it. If the proposed location is lower, then move to the new location with probability p, where p is the ratio of the height of that point to the height of the current location. (i.e., flip a coin with a probability p of getting heads; if it comes up heads, move to the new location; if it comes up tails, stay where we are). Keep a list of the locations you&amp;rsquo;ve been at on every time step, and that list will (asyptotically) have the right proportion of time spent in each part of the surface. (And for the A and B hills described above, you&amp;rsquo;ll end up with twice the probability of moving from B to A as you have of moving from A to B). There are more complicated schemes for proposing new locations and the rules for accepting them, but the basic idea is still: (1) pick a new &amp;ldquo;proposed&amp;rdquo; location; (2) figure out how much higher or lower that location is compared to your current location; (3) probabilistically stay put or move to that location in a way that respects the overall goal of spending time proportional to height of the location. 
Sampling from Beta Distribution Now Let&amp;rsquo;s Move on to the problem of Simulating from Beta Distribution. Now Beta Distribution is a continuous Distribution on [0,1] and it can have infinite states on [0,1].
Lets Assume an arbitrary Markov Chain P with infinite states on [0,1] having transition Matrix Q such that $Q_{ij} = Q_{ji} = $ All entries in Matrix. We don&amp;rsquo;t really need the Matrix Q as we will see later, But I want to keep the problem description as close to the algorihm we suggested.
 Start at a random initial State $i$ given by Unif(0,1). Randomly pick a new Proposal State by looking at the transition probabilities in the ith row of the transition matrix Q. Lets say we pick up another Unif(0,1) state as a proposal state $j$. Compute an measure called the Acceptance Probability :  $$a_{ij} = min(s_jp_{ji}/s_{i}p_{ij},1)$$ which is, $$a_{ij} = min(s_j/s_i,1)$$ where, $$s_i = Ci^{\alpha -1}(1-i)^{\beta -1}$$ and, $$s_j = Cj^{\alpha -1}(1-j)^{\beta -1}$$  Now Flip a coin that lands head with probability $a_{ij}$. If the coin comes up heads, accept the proposal i.e move to next state else reject the proposal i.e. stay at the current state. Repeat for a long time  So enough with theory, Let&amp;rsquo;s Move on to python to create our Beta Simulations Now&amp;hellip;.
import random # Lets define our Beta Function to generate s for any particular state. We don&amp;#39;t care for the normalizing constant here. def beta_s(w,a,b): return w**(a-1)*(1-w)**(b-1) # This Function returns True if the coin with probability P of heads comes heads when flipped. def random_coin(p): unif = random.uniform(0,1) if unif&amp;gt;=p: return False else: return True # This Function runs the MCMC chain for Beta Distribution. def beta_mcmc(N_hops,a,b): states = [] cur = random.uniform(0,1) for i in range(0,N_hops): states.append(cur) next = random.uniform(0,1) ap = min(beta_s(next,a,b)/beta_s(cur,a,b),1) # Calculate the acceptance probability if random_coin(ap): cur = next return states[-1000:] # Returns the last 100 states of the chain Let us check our results of the MCMC Sampled Beta distribution against the actual beta distribution.
import numpy as np import pylab as pl import scipy.special as ss %matplotlib inline pl.rcParams[&amp;#39;figure.figsize&amp;#39;] = (17.0, 4.0) # Actual Beta PDF. def beta(a, b, i): e1 = ss.gamma(a &#43; b) e2 = ss.gamma(a) e3 = ss.gamma(b) e4 = i ** (a - 1) e5 = (1 - i) ** (b - 1) return (e1/(e2*e3)) * e4 * e5 # Create a function to plot Actual Beta PDF with the Beta Sampled from MCMC Chain. def plot_beta(a, b): Ly = [] Lx = [] i_list = np.mgrid[0:1:100j] for i in i_list: Lx.append(i) Ly.append(beta(a, b, i)) pl.plot(Lx, Ly, label=&amp;#34;Real Distribution: a=&amp;#34;&#43;str(a)&#43;&amp;#34;, b=&amp;#34;&#43;str(b)) pl.hist(beta_mcmc(100000,a,b),normed=True,bins =25, histtype=&amp;#39;step&amp;#39;,label=&amp;#34;Simulated_MCMC: a=&amp;#34;&#43;str(a)&#43;&amp;#34;, b=&amp;#34;&#43;str(b)) pl.legend() pl.show() plot_beta(0.1, 0.1) plot_beta(1, 1) plot_beta(2, 3)  As we can see our sampled beta values closely resemble the beta distribution.
So MCMC Methods are useful for the following basic problems.
 Simulating from a Random Variable PDF. Example: Simulate from a Beta(0.5,0.5) or from a Normal(0,1). Solve problems with a large state space.For Example: Knapsack Problem, Encrytion Cipher etc. We will work on this in the Next Blog Post as this one has already gotten bigger than what I expected.  Till Then Ciao!!!!!!
References and Sources:  Introduction to Probability Joseph K Blitzstein, Jessica Hwang Wikipedia StackExchange  One of the newest and best resources that you can keep an eye on is the Bayesian Methods for Machine Learning course in the Advanced machine learning specialization created jointly by Kazanova(Number 3 Kaggler at the time of writing)
Apart from that I also found a course on Bayesian Statistics on Coursera. In the process of doing it right now so couldn&amp;rsquo;t really comment on it. But since I had done an course on Inferential Statistics taught by the same professor before(Mine Çetinkaya-Rundel), I am very hopeful for this course. Let&amp;rsquo;s see.
Also look out for these two books to learn more about MCMC. I have not yet read them whole but still I liked whatever I read:
  Both these books are pretty high level and hard on math. But these are the best texts out there too. :)
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Hadoop Mapreduce Streaming Tricks and Techniques</title>
      <link>https://mlwhiz.com/blog/2015/05/09/hadoop_mapreduce_streaming_tricks_and_technique/</link>
      <pubDate>Sat, 09 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2015/05/09/hadoop_mapreduce_streaming_tricks_and_technique/</guid>
      
      

      
      <description>I have been using Hadoop a lot now a days and thought about writing some of the novel techniques that a user could use to get the most out of the Hadoop Ecosystem.
Using Shell Scripts to run your Programs I am not a fan of large bash commands. The ones where you have to specify the whole path of the jar files and the such. You can effectively organize your workflow by using shell scripts.</description>

      <content:encoded>  
        
        <![CDATA[  I have been using Hadoop a lot now a days and thought about writing some of the novel techniques that a user could use to get the most out of the Hadoop Ecosystem.
Using Shell Scripts to run your Programs I am not a fan of large bash commands. The ones where you have to specify the whole path of the jar files and the such. You can effectively organize your workflow by using shell scripts. Now Shell scripts are not as formidable as they sound. We wont be doing programming perse using these shell scripts(Though they are pretty good at that too), we will just use them to store commands that we need to use sequentially.
Below is a sample of the shell script I use to run my Mapreduce Codes.
#!/bin/bash #Defining program variables IP=&amp;#34;/data/input&amp;#34; OP=&amp;#34;/data/output&amp;#34; HADOOP_JAR_PATH=&amp;#34;/opt/cloudera/parcels/CDH/lib/hadoop-0.20-mapreduce/contrib/streaming/hadoop-streaming-2.0.0-mr1-cdh4.5.0.jar&amp;#34; MAPPER=&amp;#34;test_m.py&amp;#34; REDUCER=&amp;#34;test_r.py&amp;#34; hadoop fs -rmr -skipTrash&amp;amp;nbsp;$OP hadoop jar&amp;amp;nbsp;$HADOOP_JAR_PATH \ -file&amp;amp;nbsp;$MAPPER -mapper &amp;#34;python test_m.py&amp;#34; \ -file&amp;amp;nbsp;$REDUCER -reducer &amp;#34;python test_r.py&amp;#34; \ -input&amp;amp;nbsp;$IP -output&amp;amp;nbsp;$OP I generally save them as test_s.sh and whenever i need to run them i simply type sh test_s.sh. This helps in three ways.  It helps me to store hadoop commands in a manageable way.   It is easy to run the mapreduce code using the shell script.   If the code fails, I do not have to manually delete the output directory 
  The simplification of anything is always sensational.  Gilbert K. Chesterton  Using Distributed Cache to provide mapper with a dictionary Often times it happens that you want that your Hadoop Mapreduce program is able to access some static file. This static file could be a dictionary, could be parameters for the program or could be anything. What distributed cache does is that it provides this file to all the mapper nodes so that you can use that file in any way across all your mappers. Now this concept although simple would help you to think about Mapreduce in a whole new light. Lets start with an example. Supppose you have to create a sample Mapreduce program that reads a big file containing the information about all the characters in Game of Thrones stored as &amp;rdquo;/data/characters/&amp;rdquo;:   Cust_ID User_Name House     1 Daenerys Targaryen Targaryen   2 Tyrion Lannister Lannister   3 Cersei Lannister Lannister  4 Robert Baratheon Baratheon  5 Robb Stark Stark    
But you dont want to use the dead characters in the file for the analysis you want to do. You want to count the number of living characters in Game of Thrones grouped by their House. (I know its easy!!!!!) One thing you could do is include an if statement in your Mapper Code which checks if the persons ID is 4 then exclude it from the mapper and such. But the problem is that you would have to do it again and again for the same analysis as characters die like flies when it comes to George RR Martin.(Also where is the fun in that) So you create a file which contains the Ids of all the dead characters at &amp;rdquo;/data/dead_characters.txt&amp;rdquo;:
  Died     4   5     Whenever you have to run the analysis you can just add to this file and you wont have to change anything in the code. Also sometimes this file would be long and you would not want to clutter your code with IDs and such.
So How Would we do it. Let&amp;rsquo;s go in a step by step way around this. We will create a shell script, a mapper script and a reducer script for this task.
1) Shell Script #!/bin/bash #Defining program variables DC=&amp;#34;/data/dead_characters.txt&amp;#34; IP=&amp;#34;/data/characters&amp;#34; OP=&amp;#34;/data/output&amp;#34; HADOOP_JAR_PATH=&amp;#34;/opt/cloudera/parcels/CDH/lib/hadoop-0.20-mapreduce/contrib/streaming/hadoop-streaming-2.0.0-mr1-cdh4.5.0.jar&amp;#34; MAPPER=&amp;#34;got_living_m.py&amp;#34; REDUCER=&amp;#34;got_living_r.py&amp;#34; hadoop jar&amp;amp;nbsp;$HADOOP_JAR_PATH \ -file&amp;amp;nbsp;$MAPPER -mapper &amp;#34;python got_living_m.py&amp;#34; \ -file&amp;amp;nbsp;$REDUCER -reducer &amp;#34;python got_living_r.py&amp;#34; \ -cacheFile&amp;amp;nbsp;$DC#ref \ -input&amp;amp;nbsp;$IP -output&amp;amp;nbsp;$OP Note how we use the &amp;rdquo;-cacheFile&amp;rdquo; option here. We have specified that we will refer to the file that has been provided in the Distributed cache as #ref.
Next is our Mapper Script.
2) Mapper Script import sys dead_ids = set() def read_cache(): for line in open(&amp;#39;ref&amp;#39;): id = line.strip() dead_ids.add(id) read_cache() for line in sys.stdin: rec = line.strip().split(&amp;#34;|&amp;#34;) # Split using Delimiter &amp;#34;|&amp;#34; id = rec[0] house = rec[2] if id not in dead_ids: print &amp;#34;%s\t%s&amp;#34; % (house,1) And our Reducer Script.
3) Reducer Script import sys current_key = None key = None count = 0 for line in sys.stdin: line = line.strip() rec = line.split(&amp;#39;\t&amp;#39;) key = rec[0]	value = int(rec[1]) if current_key == key: count &#43;= value else: if current_key: print &amp;#34;%s:%s&amp;#34; %(key,str(count))	current_key = key count = value if current_key == key: print &amp;#34;%s:%s&amp;#34; %(key,str(count))	 This was a simple program and the output will be just what you expected and not very exciting. But the Technique itself solves a variety of common problems. You can use it to pass any big dictionary to your Mapreduce Program. Atleast thats what I use this feature mostly for. Hope You liked it. Will try to expand this post with more tricks.
The codes for this post are posted at github here.
Other Great Learning Resources For Hadoop:   Michael Noll&amp;rsquo;s Hadoop Mapreduce Tutorial   Apache&amp;rsquo;s Hadoop Streaming Documentation  
Also I like these books a lot. Must have for a Hadooper&amp;hellip;.
  The first book is a guide for using Hadoop as well as spark with Python. While the second one contains a detailed overview of all the things in Hadoop. Its the definitive guide.
 ]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Exploring Vowpal Wabbit with the Avazu Clickthrough Prediction Challenge</title>
      <link>https://mlwhiz.com/blog/2014/12/01/exploring_vowpal_wabbit_avazu/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2014/12/01/exploring_vowpal_wabbit_avazu/</guid>
      
      

      
      <description>In online advertising, click-through rate (CTR) is a very important metric for evaluating ad performance. As a result, click prediction systems are essential and widely used for sponsored search and real-time bidding.
For this competition, we have provided 11 days worth of Avazu data to build and test prediction models. Can you find a strategy that beats standard classification algorithms? The winning models from this competition will be released under an open-source license.</description>

      <content:encoded>  
        
        <![CDATA[  In online advertising, click-through rate (CTR) is a very important metric for evaluating ad performance. As a result, click prediction systems are essential and widely used for sponsored search and real-time bidding.
For this competition, we have provided 11 days worth of Avazu data to build and test prediction models. Can you find a strategy that beats standard classification algorithms? The winning models from this competition will be released under an open-source license.
Data Fields id: ad identifier click: 0/1 for non-click/click hour: format is YYMMDDHH, so 14091123 means 23:00 on Sept. 11, 2014 UTC. C1 -- anonymized categorical variable banner_pos site_id site_domain site_category app_id app_domain app_category device_id device_ip device_model device_type device_conn_type C14-C21 -- anonymized categorical variables  Loading Data ## Loading the data  import pandas as pd import numpy as np import string as stri #too large data not keeping it in memory. # will be using line by line scripting. #data = pd.read_csv(&amp;#34;/Users/RahulAgarwal/kaggle_cpr/train&amp;#34;) Since the data is too large around 6 gb , we will proceed by doing line by line analysis of data. We will try to use vowpal wabbit first of all as it is an online model and it also gives us the option of minimizing log loss as a default. It is also very fast to run and will give us quite an intuition as to how good our prediction can be.
I will use all the variables in the first implementation and we will rediscover things as we move on
Running Vowpal Wabbit Creating data in vowpal format (One Time Only) from datetime import datetime def csv_to_vw(loc_csv, loc_output, train=True): start = datetime.now() print(&amp;#34;\nTurning %sinto %s. Is_train_set? %s&amp;#34;%(loc_csv,loc_output,train)) i = open(loc_csv, &amp;#34;r&amp;#34;) j = open(loc_output, &amp;#39;wb&amp;#39;) counter=0 with i as infile: line_count=0 for line in infile: # to counter the header if line_count==0: line_count=1 continue # The data has all categorical features #numerical_features = &amp;#34;&amp;#34; categorical_features = &amp;#34;&amp;#34; counter = counter&#43;1 #print counter line = line.split(&amp;#34;,&amp;#34;) if train: #working on the date column. We will take day , hour a = line[2] new_date= datetime(int(&amp;#34;20&amp;#34;&#43;a[0:2]),int(a[2:4]),int(a[4:6])) day = new_date.strftime(&amp;#34;%A&amp;#34;) hour= a[6:8] categorical_features &#43;= &amp;#34; |hr %s&amp;#34; % hour categorical_features &#43;= &amp;#34; |day %s&amp;#34; % day # 24 columns in data  for i in range(3,24): if line[i] != &amp;#34;&amp;#34;: categorical_features &#43;= &amp;#34;|c%s%s&amp;#34; % (str(i),line[i]) else: a = line[1] new_date= datetime(int(&amp;#34;20&amp;#34;&#43;a[0:2]),int(a[2:4]),int(a[4:6])) day = new_date.strftime(&amp;#34;%A&amp;#34;) hour= a[6:8] categorical_features &#43;= &amp;#34; |hr %s&amp;#34; % hour categorical_features &#43;= &amp;#34; |day %s&amp;#34; % day for i in range(2,23): if line[i] != &amp;#34;&amp;#34;: categorical_features &#43;= &amp;#34; |c%s%s&amp;#34; % (str(i&#43;1),line[i]) #Creating the labels #print &amp;#34;a&amp;#34; if train: #we care about labels if line[1] == &amp;#34;1&amp;#34;: label = 1 else: label = -1 #we set negative label to -1 #print (numerical_features) #print categorical_features j.write( &amp;#34;%s&amp;#39;%s%s\n&amp;#34; % (label,line[0],categorical_features)) else: #we dont care about labels #print ( &amp;#34;1 &amp;#39;%s |i%s |c%s\n&amp;#34; % (line[0],numerical_features,categorical_features) ) j.write( &amp;#34;1 &amp;#39;%s%s\n&amp;#34; % (line[0],categorical_features) ) #Reporting progress #print counter if counter % 1000000 == 0: print(&amp;#34;%s\t%s&amp;#34;%(counter, str(datetime.now() - start))) print(&amp;#34;\n%sTask execution time:\n\t%s&amp;#34;%(counter, str(datetime.now() - start))) #csv_to_vw(&amp;#34;/Users/RahulAgarwal/kaggle_cpr/train&amp;#34;, &amp;#34;/Users/RahulAgarwal/kaggle_cpr/click.train_original_data.vw&amp;#34;,train=True) #csv_to_vw(&amp;#34;/Users/RahulAgarwal/kaggle_cpr/test&amp;#34;, &amp;#34;/Users/RahulAgarwal/kaggle_cpr/click.test_original_data.vw&amp;#34;,train=False) Running Vowpal Wabbit on the data The Vowpal Wabbit will be run on the command line itself.
Training VW:
vw click.train_original_data.vw -f click.model.vw --loss_function logistic Testing VW:
vw click.test_original_data.vw -t -i click.model.vw -p click.preds.txt Creating Kaggle Submission File import math def zygmoid(x): return 1 / (1 &#43; math.exp(-x)) with open(&amp;#34;kaggle.click.submission.csv&amp;#34;,&amp;#34;wb&amp;#34;) as outfile: outfile.write(&amp;#34;id,click\n&amp;#34;) for line in open(&amp;#34;click.preds.txt&amp;#34;): row = line.strip().split(&amp;#34; &amp;#34;) try: outfile.write(&amp;#34;%s,%f\n&amp;#34;%(row[1],zygmoid(float(row[0])))) except: pass This solution ranked 211&amp;frasl;371 submissions at the time and the leaderboard score was 0.4031825 while the best leaderboard score was 0.3901120
Next Steps  Create a better VW model
 Shuffle the data before making the model as the VW algorithm is an online learner and might have given more preference to the latest data provide high weights for clicks as data is skewed. How Much? tune VW algorithm using vw-hypersearch. What should be tuned? Use categorical features like |C1 &amp;ldquo;C1&amp;rdquo;&amp;amp;&amp;ldquo;1&amp;rdquo;  Create a XGBoost Model.
 Create a Sofia-ML Model and see how it works on this data.
   ]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Data Science 101 : Playing with Scraping in Python</title>
      <link>https://mlwhiz.com/blog/2014/10/02/data_science_101_python_pattern/</link>
      <pubDate>Thu, 02 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2014/10/02/data_science_101_python_pattern/</guid>
      
      

      
      <description>This is a simple illustration of using Pattern Module to scrape web data using Python. We will be scraping the data from imdb for the top TV Series along with their ratings
We will be using this link for this:
http://www.imdb.com/search/title?count=100&amp;amp;num_votes=5000,&amp;amp;ref_=gnr_tv_hr&amp;amp;sort=user_rating,desc&amp;amp;start=1&amp;amp;title_type=tv_series,mini_series  This URL gives a list of top Rated TV Series which have number of votes atleast 5000. The Thing to note in this URL is the &amp;amp;ldquo;&amp;amp;amp;start=&amp;amp;rdquo; parameter where we can specify which review should the list begin with.</description>

      <content:encoded>  
        
        <![CDATA[  This is a simple illustration of using Pattern Module to scrape web data using Python. We will be scraping the data from imdb for the top TV Series along with their ratings
We will be using this link for this:
http://www.imdb.com/search/title?count=100&amp;num_votes=5000,&amp;ref_=gnr_tv_hr&amp;sort=user_rating,desc&amp;start=1&amp;title_type=tv_series,mini_series  This URL gives a list of top Rated TV Series which have number of votes atleast 5000. The Thing to note in this URL is the &amp;ldquo;&amp;amp;start=&amp;rdquo; parameter where we can specify which review should the list begin with. If we specify 1 we will get reviews starting from 1-100, if we specify 101 we get reviews from 101-200 and so on.
Lets Start by importing some Python Modules that will be needed for Scraping Data:
import requests # This is a module that is used for getting html data from a webpage in the text format from pattern import web # We use this module to parse through the dtaa that we loaded using requests Loading the data using requests and pattern So the modules are loaded at this point, next we will try to catch the url using python and put this into a dict in python. We will start with a single URL and then try to parse it using pattern module
url= &amp;#34;http://www.imdb.com/search/title?count=100&amp;amp;num_votes=5000,&amp;amp;ref_=gnr_tv_hr&amp;amp;sort=user_rating,desc&amp;amp;start=1&amp;amp;title_type=tv_series,mini_series&amp;#34; html_data = requests.get(url).text dom=web.Element(html_data) Parsing the data This is the data of Interest found out after some nspection of the html code. This is for a single TV Series Band of brothers, but if you are able to parse this you just have to move hrough a loop.
&amp;lt;html&amp;gt; &amp;lt;td class=&amp;#34;title&amp;#34;&amp;gt; &amp;lt;span class=&amp;#34;wlb_wrapper&amp;#34; data-tconst=&amp;#34;tt0185906&amp;#34; data-size=&amp;#34;small&amp;#34; data-caller-name=&amp;#34;search&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;a href=&amp;#34;/title/tt0185906/&amp;#34;&amp;gt;Band of Brothers&amp;lt;/a&amp;gt; &amp;lt;span class=&amp;#34;year_type&amp;#34;&amp;gt;(2001 Mini-Series)&amp;lt;/span&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;div class=&amp;#34;user_rating&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;rating rating-list&amp;#34; data-auth=&amp;#34;BCYm-Mk2Ros7BTxsLNL2XJX_icfZVahNr1bE9-5Ajb2N3381yxcaNN4ZQqyrX7KgEFGqHWmwv10lv7lAnXyC8CCkh9hPqQfzwVTumCeRzjpnndW4_ft97qQkBYLUvFxYnFgR&amp;#34; id=&amp;#34;tt0185906|imdb|9.6|9.6|advsearch&amp;#34; data-ga-identifier=&amp;#34;advsearch&amp;#34; title=&amp;#34;Users rated this 9.6/10 (156,073 votes) - click stars to rate&amp;#34;&amp;gt; &amp;lt;span class=&amp;#34;rating-bg&amp;#34;&amp;gt;&amp;amp;nbsp;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;#34;rating-imdb&amp;#34; style=&amp;#34;width: 134px&amp;#34;&amp;gt;&amp;amp;nbsp;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;#34;rating-stars&amp;#34;&amp;gt; &amp;lt;a href=&amp;#34;/register/login?why=vote&amp;#34; title=&amp;#34;Register or login to rate this title&amp;#34; rel=&amp;#34;nofollow&amp;#34;&amp;gt;&amp;lt;span&amp;gt;1&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;/register/login?why=vote&amp;#34; title=&amp;#34;Register or login to rate this title&amp;#34; rel=&amp;#34;nofollow&amp;#34;&amp;gt;&amp;lt;span&amp;gt;2&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;/register/login?why=vote&amp;#34; title=&amp;#34;Register or login to rate this title&amp;#34; rel=&amp;#34;nofollow&amp;#34;&amp;gt;&amp;lt;span&amp;gt;3&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;/register/login?why=vote&amp;#34; title=&amp;#34;Register or login to rate this title&amp;#34; rel=&amp;#34;nofollow&amp;#34;&amp;gt;&amp;lt;span&amp;gt;4&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;/register/login?why=vote&amp;#34; title=&amp;#34;Register or login to rate this title&amp;#34; rel=&amp;#34;nofollow&amp;#34;&amp;gt;&amp;lt;span&amp;gt;5&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;/register/login?why=vote&amp;#34; title=&amp;#34;Register or login to rate this title&amp;#34; rel=&amp;#34;nofollow&amp;#34;&amp;gt;&amp;lt;span&amp;gt;6&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;/register/login?why=vote&amp;#34; title=&amp;#34;Register or login to rate this title&amp;#34; rel=&amp;#34;nofollow&amp;#34;&amp;gt;&amp;lt;span&amp;gt;7&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;/register/login?why=vote&amp;#34; title=&amp;#34;Register or login to rate this title&amp;#34; rel=&amp;#34;nofollow&amp;#34;&amp;gt;&amp;lt;span&amp;gt;8&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;/register/login?why=vote&amp;#34; title=&amp;#34;Register or login to rate this title&amp;#34; rel=&amp;#34;nofollow&amp;#34;&amp;gt;&amp;lt;span&amp;gt;9&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;/register/login?why=vote&amp;#34; title=&amp;#34;Register or login to rate this title&amp;#34; rel=&amp;#34;nofollow&amp;#34;&amp;gt;&amp;lt;span&amp;gt;10&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;span class=&amp;#34;rating-rating&amp;#34;&amp;gt;&amp;lt;span class=&amp;#34;value&amp;#34;&amp;gt;9.6&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;#34;grey&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;#34;grey&amp;#34;&amp;gt;10&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;#34;rating-cancel&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;/title/tt0185906/vote?v=X;k=BCYm-Mk2Ros7BTxsLNL2XJX_icfZVahNr1bE9-5Ajb2N3381yxcaNN4ZQqyrX7KgEFGqHWmwv10lv7lAnXyC8CCkh9hPqQfzwVTumCeRzjpnndW4_ft97qQkBYLUvFxYnFgR&amp;#34; title=&amp;#34;Delete&amp;#34; rel=&amp;#34;nofollow&amp;#34;&amp;gt;&amp;lt;span&amp;gt;X&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt; &amp;amp;nbsp;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;span class=&amp;#34;outline&amp;#34;&amp;gt;The story of Easy Company of the US Army 101st Airborne division and their mission in WWII Europe from Operation Overlord through V-J Day.&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;#34;credit&amp;#34;&amp;gt; With: &amp;lt;a href=&amp;#34;/name/nm0342241/&amp;#34;&amp;gt;Scott Grimes&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;#34;/name/nm0500614/&amp;#34;&amp;gt;Matthew Leitch&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;#34;/name/nm0507073/&amp;#34;&amp;gt;Damian Lewis&amp;lt;/a&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;span class=&amp;#34;genre&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;/genre/action&amp;#34;&amp;gt;Action&amp;lt;/a&amp;gt; | &amp;lt;a href=&amp;#34;/genre/drama&amp;#34;&amp;gt;Drama&amp;lt;/a&amp;gt; | &amp;lt;a href=&amp;#34;/genre/history&amp;#34;&amp;gt;History&amp;lt;/a&amp;gt; | &amp;lt;a href=&amp;#34;/genre/war&amp;#34;&amp;gt;War&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;#34;certificate&amp;#34;&amp;gt;&amp;lt;span title=&amp;#34;TV_MA&amp;#34; class=&amp;#34;us_tv_ma titlePageSprite&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;#34;runtime&amp;#34;&amp;gt;705 mins.&amp;lt;/span&amp;gt; &amp;lt;/td&amp;gt; Now we have loaded the data we need to parse it using the functions from pattern module. The main function in pattern module is the by_tag() function which lets you get all the elements with that particular tagname. For us the main interest is this &amp;ldquo;td&amp;rdquo; tag with class as &amp;ldquo;title&amp;rdquo;. This &amp;ldquo;td&amp;rdquo; tag contains:
 Title in the &amp;ldquo;a&amp;rdquo; tag Rating in the &amp;ldquo;span&amp;rdquo; tag with class &amp;ldquo;value&amp;rdquo; Genres in the &amp;ldquo;span&amp;rdquo; tag with class &amp;ldquo;genre&amp;rdquo; and then looping through the &amp;ldquo;a&amp;rdquo; tags Runtime in &amp;ldquo;span&amp;rdquo; tag with class &amp;ldquo;runtime&amp;rdquo; Artists in &amp;ldquo;span&amp;rdquo; tag with class &amp;ldquo;credit&amp;rdquo; loop through &amp;ldquo;a&amp;rdquo; tags  Now lets write some code to parse this data.
for tv_series in dom.by_tag(&amp;#39;td.title&amp;#39;): title = tv_series.by_tag(&amp;#39;a&amp;#39;)[0].content genres = tv_series.by_tag(&amp;#39;span.genre&amp;#39;)[0].by_tag(&amp;#39;a&amp;#39;) genres = [g.content for g in genres] try: runtime = tv_series.by_tag(&amp;#39;span.runtime&amp;#39;)[0].content except: runtime = &amp;#34;NA&amp;#34; rating = tv_series.by_tag(&amp;#39;span.value&amp;#39;)[0].content artists = tv_series.by_tag(&amp;#39;span.credit&amp;#39;)[0].by_tag(&amp;#39;a&amp;#39;) artists = [a.content for a in artists] print title, genres, runtime, rating, artists Band of Brothers [u&#39;Action&#39;, u&#39;Drama&#39;, u&#39;History&#39;, u&#39;War&#39;] 705 mins. 9.6 [u&#39;Scott Grimes&#39;, u&#39;Matthew Leitch&#39;, u&#39;Damian Lewis&#39;] Breaking Bad [u&#39;Crime&#39;, u&#39;Drama&#39;, u&#39;Thriller&#39;] 45 mins. 9.6 [u&#39;Bryan Cranston&#39;, u&#39;Aaron Paul&#39;, u&#39;Anna Gunn&#39;] Game of Thrones [u&#39;Adventure&#39;, u&#39;Drama&#39;, u&#39;Fantasy&#39;] 55 mins. 9.5 [u&#39;Lena Headey&#39;, u&#39;Peter Dinklage&#39;, u&#39;Maisie Williams&#39;] So finally we are OK with parsing. We have understood the structure of the webpage, the tags and classes we will need to use and how to use pattern module to find data for a single page. Now lets use the power of for loops to get all the data.
Getting Whole Data Lets Go through it the pythonic way. We will create functions and try to execute small chunks of code rather than doing it all at once. Lets first create a funcion that takes a start_val(for the start parameter) and returns a dom element.
def get_dom(start_val): url= &amp;#34;http://www.imdb.com/search/title?count=100&amp;amp;num_votes=5000,&amp;amp;ref_=gnr_tv_hr&amp;amp;sort=user_rating,desc&amp;amp;start=&amp;#34;&#43;str(start_val)&#43;&amp;#34;&amp;amp;title_type=tv_series,mini_series&amp;#34; html_data = requests.get(url).text dom=web.Element(html_data) return dom Now lets create a function parse_dom that takes as input dom an throws out a list containing all the data. The list is like this : [ [&amp;lsquo;Band of Brothers&amp;rsquo;,&amp;lsquo;Action|Drama|History|War&amp;rsquo;,&amp;lsquo;705 mins.&amp;rsquo;,&amp;lsquo;9.6&amp;rsquo;,&amp;lsquo;Scott Grimes|Matthew Leitch|Damian Lewis&amp;rsquo;], [&amp;lsquo;Breaking Bad&amp;rsquo;,&amp;lsquo;Crime|Drama|Thriller&amp;rsquo;,&amp;lsquo;45 mins.&amp;rsquo;, &amp;lsquo;9.6&amp;rsquo; ,&amp;lsquo;Bryan Cranston|Aaron Paul|Anna Gunn&amp;rsquo;],&amp;hellip;.. ]

def parse_dom(dom): result=[] for tv_series in dom.by_tag(&amp;#39;td.title&amp;#39;): title = tv_series.by_tag(&amp;#39;a&amp;#39;)[0].content genres = tv_series.by_tag(&amp;#39;span.genre&amp;#39;)[0].by_tag(&amp;#39;a&amp;#39;) genres = &amp;#34;|&amp;#34;.join([g.content for g in genres]) try: runtime = tv_series.by_tag(&amp;#39;span.runtime&amp;#39;)[0].content except: runtime = &amp;#34;NA&amp;#34; rating = tv_series.by_tag(&amp;#39;span.value&amp;#39;)[0].content artists = tv_series.by_tag(&amp;#39;span.credit&amp;#39;)[0].by_tag(&amp;#39;a&amp;#39;) artists = &amp;#34;|&amp;#34;.join([a.content for a in artists]) temp_res=[] temp_res.extend([title, genres, runtime, rating, artists]) result.append(temp_res) return result Now Lets Use these functions and a simple while loop to scrap all the pages
i=1 all_data = [] while True: dom = get_dom(i) datalist=parse_dom(dom) if len(datalist)==0: break all_data = all_data &#43; parse_dom(dom) i &#43;= 100 print &amp;#34;Total Elements:&amp;#34; &#43; str(len(all_data)) print &amp;#34;First Five Elements :&amp;#34; &#43; str(all_data[1:5]) Total Elements:898 First Five Elements :[[u&#39;Breaking Bad&#39;, u&#39;Crime|Drama|Thriller&#39;, u&#39;45 mins.&#39;, u&#39;9.6&#39;, u&#39;Bryan Cranston|Aaron Paul|Anna Gunn&#39;], [u&#39;Game of Thrones&#39;, u&#39;Adventure|Drama|Fantasy&#39;, u&#39;55 mins.&#39;, u&#39;9.5&#39;, u&#39;Lena Headey|Peter Dinklage|Maisie Williams&#39;], [u&#39;Planet Earth&#39;, u&#39;Documentary&#39;, u&#39;570 mins.&#39;, u&#39;9.5&#39;, u&#39;David Attenborough|Sigourney Weaver|Huw Cordey&#39;], [u&#39;Cosmos: A SpaceTime Odyssey&#39;, u&#39;Documentary&#39;, u&#39;60 mins.&#39;, u&#39;9.5&#39;, u&#39;Neil deGrasse Tyson|Stoney Emshwiller|Piotr Michael&#39;]]  Voila!!! The number of elements we had to scrap were 898 and We got all of them. And to tell you, IMDB is one of the worst written HTML&amp;rsquo;s. So that&amp;rsquo;s Great.
In the next part of the tutorial we will run exploratory data analysis on this data using pandas and maplotlib.
Till then keep learning.
 ]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Dictvectorizer for One Hot Encoding of Categorical Data</title>
      <link>https://mlwhiz.com/blog/2014/09/30/dictvectorizer_one_hot_encoding/</link>
      <pubDate>Tue, 30 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2014/09/30/dictvectorizer_one_hot_encoding/</guid>
      
      

      
      <description>THE PROBLEM: Recently I was working on the Criteo Advertising Competition on Kaggle. The competition was a classification problem which basically involved predicting the click through rates based on several features provided in the train data. Seeing the size of the data (11 GB Train), I felt that going with Vowpal Wabbit might be a better option.
But after getting to an CV error of .47 on the Kaggle LB and being stuck there , I felt the need to go back to Scikit learn.</description>

      <content:encoded>  
        
        <![CDATA[  THE PROBLEM: Recently I was working on the Criteo Advertising Competition on Kaggle. The competition was a classification problem which basically involved predicting the click through rates based on several features provided in the train data. Seeing the size of the data (11 GB Train), I felt that going with Vowpal Wabbit might be a better option.
But after getting to an CV error of .47 on the Kaggle LB and being stuck there , I felt the need to go back to Scikit learn. While SciKit learn seemed to have a partial_fit method in SGDClassifier, I still could not find a partial_fit method in the OneHotEncoder or DictVectorizer class which made me look to the internet again. Now while I could find many advices on how to use OneHotEncoding and DictVectorizer on small data, I cannot find something relate to data too big to store in the memory. How do I OneHotEncode such a large data file?
DICTVECTORIZER How does a DictVectorizer works. There is a lot of stuff around the net for this but I dint get to understand much around it. This blog from Zygmuntz of Fastml came to rescue then. Although still it didn’t resolve how to apply that to such large amount of data.
from sklearn.feature_extraction import DictVectorizer as DV # Create Vectorizer vectorizer = DV( sparse = False ) # Read the whole Data traindata = pd.read_csv(train_file, header=None, sep=&amp;#39;,&amp;#39;, names = colnames) # Retain the categorical Columns train_df = traindata[cat_col] # Convert Panda Data frame to Dict train_dict = train_df.T.to_dict().values() # Create Fit vectorizer.fit(test_dict) THE DATA The data was basically comprised of 40 Features with: 1. First two Columns as ID, Label 2. Next 13 columns Continuous columns labelled I1-I13 3. Next 26 Columns Categorical labelled C1-C26 Further the categorical columns were very sparse and some of the categorical variables could take more than a million different values.
THE WORKAROUNDS The main problem that I faced was that I could not fit that much data in a DataFrame, even when I have a machine of 16GB, and that lead me to think that do I have a need for such a large data frame. And that lead me to the first part of the solution. I don’t need to load the whole data at once. I just needed to create another dictionary with all the possible combinations and then fit my dictvectorizer on it.
I know that it is a lot to take in, so let’s take an example to understand it: Let’s say we have a data of infinite size, which has 3 categorical variables: C1 could take values 1-100 C2 could take values 1-3 C3 could take values 1-1000 Then we just have to find which category could take the maximum number of values (i.e. C3 in the above case) and make a dict which contains other categories replicated to contain as many values In other words, we need to make a dict like: {C1 : [1,2,3,……,97,98,99,100]*10 , C2 : [1,2,3]*333&#43;[1] , C3: [1….1000]} Notice the star sign at the last of the list. That means that for every key in the dict the number of values is now 1000(i.e. the maximum number of features).
And so that is what I did. After we have the Vectorizer Fit, the next task was to transform the data. I took the data transformed it and sent it to my model line by line. P.S. Don’t store the transformed data as around a 100000 records takes ~ 10GB of Hard Disk Space due to the high number of features.
Hope you find it Informative and happy learning.
 ]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Learning pyspark – Installation – Part 1</title>
      <link>https://mlwhiz.com/blog/2014/09/28/learning_pyspark/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2014/09/28/learning_pyspark/</guid>
      
      

      
      <description>This is part one of a learning series of pyspark, which is a python binding to the spark program written in Scala.
The installation is pretty simple. These steps were done on Mac OS Mavericks but should work for Linux too. Here are the steps for the installation:
1. Download the Binaries: Spark : http://spark.apache.org/downloads.html Scala : http://www.scala-lang.org/download/ Dont use Latest Version of Scala, Use Scala 2.10.x 2. Add these lines to your .</description>

      <content:encoded>  
        
        <![CDATA[  This is part one of a learning series of pyspark, which is a python binding to the spark program written in Scala.
The installation is pretty simple. These steps were done on Mac OS Mavericks but should work for Linux too. Here are the steps for the installation:
1. Download the Binaries: Spark : http://spark.apache.org/downloads.html Scala : http://www.scala-lang.org/download/ Dont use Latest Version of Scala, Use Scala 2.10.x 2. Add these lines to your .bash_profile: export SCALA_HOME=your_path_to_scala export SPARK_HOME=your_path_to_spark 3. Build Spark(This will take time): brew install sbt cd $SPARK_HOME sbt/sbt assembly 4. Start the Pyspark Shell: $SPARK_HOME/bin/pyspark And Voila. You are running pyspark on your Machine
To check that everything is properly installed, Lets run a simple program:
test = sc.parallelize([1,2,3]) test.count() This should return 3. So Now Just Run Hadoop On your Machine and then run pyspark Using:
cd /usr/local/hadoop/ bin/start-all.sh jps $SPARK_HOME/bin/pyspark  ]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Hadoop, Mapreduce and More – Part 1</title>
      <link>https://mlwhiz.com/blog/2014/09/27/hadoop_mapreduce/</link>
      <pubDate>Sat, 27 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2014/09/27/hadoop_mapreduce/</guid>
      
      

      
      <description>It has been some time since I was stalling learning Hadoop. Finally got some free time and realized that Hadoop may not be so difficult after all. What I understood finally is that Hadoop is basically comprised of 3 elements:
 A File System Map – Reduce Its many individual Components.  Let’s go through each of them one by one.
1. Hadoop as a File System: One of the main things that Hadoop provides is cheap data storage.</description>

      <content:encoded>  
        
        <![CDATA[  It has been some time since I was stalling learning Hadoop. Finally got some free time and realized that Hadoop may not be so difficult after all. What I understood finally is that Hadoop is basically comprised of 3 elements:
 A File System Map – Reduce Its many individual Components.  Let’s go through each of them one by one.
1. Hadoop as a File System: One of the main things that Hadoop provides is cheap data storage. What happens intrinsically is that the Hadoop system takes a file, cuts it into chunks and keeps those chunks at different places in a cluster. Suppose you have a big big file in your local system and you want that file to be:
 On the cloud for easy access Processable in human time  The one thing you can look forward to is Hadoop.
Assuming that you have got hadoop installed on the amazon cluster you are working on.
Start the Hadoop Cluster: You need to run the following commands to start the hadoop cluster(Based on location of hadoop installation directory):
cd /usr/local/hadoop/ bin/start-all.sh jps Adding File to HDFS: Every command in Hadoop starts with hadoop fs and the rest of it works like the UNIX syntax. To add a file “purchases.txt” to the hdfs system:
hadoop fs -put purchases.txt /usr/purchases.txt 2. Hadoop for Map-Reduce: MapReduce is a programming model and an associated implementation for processing and generating large data sets with a parallel, distributed algorithm on a cluster.
While Hadoop is implemented in Java, you can use almost any language to do map-reduce in hadoop using hadoop streaming. Suppose you have a big file containing the Name of store and sales of store each hour. And you want to find out the sales per store using map-reduce. Lets Write a sample code for that:
InputFile
A,300,12:00 B,234,1:00 C,234,2:00 D,123,3:00 A,123,1:00 B,346,2:00  Mapper.py
import sys def mapper(): # The Mapper takes inputs from stdin and prints out store name and value for line in sys.stdin: data = line.strip().split(&amp;#34;,&amp;#34;) storeName,Value,time=data print &amp;#34;{0},{1}&amp;#34;.format(storeName,Value) Reducer.py
import sys def reducer(): # The reducer takes inputs from mapper and prints out aggregated store name and value salesTotal = 0 oldKey = None for line in sys.stdin: data = line.strip().split(&amp;#34;,&amp;#34;) #Adding a little bit of Defensive programming if len(data) != 2: continue curKey,curVal = data if oldKey adn oldKey != curKey: print &amp;#34;{0},{1}&amp;#34;.format(oldKey,salesTotal) salesTotal=0 oldKey=curKey salesTotal &#43;= curVal if oldkey!=None: print &amp;#34;{0},{1}&amp;#34;.format(oldKey,salesTotal) Running the program on shell using pipes
textfile.txt | ./mapper.py | sort | ./reducer.py Running the program on mapreduce using Hadoop Streaming
hadoop jar contrib/streaming/hadoop-*streaming*.jar / -file mapper.py -mapper mapper.py / -file reducer.py -reducer reducer.py / -input /inputfile -output /outputfile 3. Hadoop Components: Now if you have been following Hadoop you might have heard about Apache, Cloudera, HortonWorks etc. All of these are Hadoop vendors who provide Hadoop Along with its components. I will talk about the main component of Hadoop here – Hive. So what exactly is Hive: Hive is a SQL like interface to map-reduce queries. So if you don’t understand all the hocus-pocus of map-reduce but know SQL, you can do map-reduce via Hive. Seems Promising? It is. While the syntax is mainly SQL, it is still a little different and there are some quirks that we need to understand to work with Hive. First of all lets open hive command prompt: For that you just have to type “hive”, and voila you are in. Here are some general commands
show databases # -- See all Databases use database # -- Use a particular Database show tables # -- See all tables in a particular Database describe table  Creating an external table:
CREATE EXTERNAL TABLE IF NOT EXISTS BXDataSet (ISBN STRING,BookTitle STRING, ImageURLL STRING) ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘;’ STORED AS TEXTFILE; LOAD DATA INPATH ‘/user/book.csv’ OVERWRITE INTO TABLE BXDataSet; The query commands work the same way as in SQL. You can do all the group by and hive will automatically convert it in map-reduce:
select * from tablename; Stay Tuned for Part 2 – Where we will talk about another components of Hadoop – PIG To learn more about hadoop in the meantime these are the books I recommend:
  ]]>
        
      </content:encoded>
      
      
      
    </item>
    
  </channel>
</rss>