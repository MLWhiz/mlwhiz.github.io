def model_lstm_du(embedding_matrix):
    inp = Input(shape=(maxlen,))
    x = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp)
    x = Bidirectional(CuDNNLSTM(64, return_sequences=True))(x)
    avg_pool = GlobalAveragePooling1D()(x)
    max_pool = GlobalMaxPooling1D()(x)
    new_layer_name = concatenate([avg_pool, max_pool])
    new_layer_name = Dense(64, activation="relu")(new_layer_name)
    new_layer_name = Dropout(0.1)(new_layer_name)
    outp = Dense(1, activation="sigmoid")(new_layer_name)
    model = Model(inputs=inp, outputs=outp)
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model