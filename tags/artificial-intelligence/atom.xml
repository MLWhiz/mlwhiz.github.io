<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1" xmlns:content="http://purl.org/rss/1.0/modules/content" xmlns:media="http://search.yahoo.com/mrss/" >

  
  <channel>
    <title>Artificial Intelligence on MLWhiz</title>
    <link>https://mlwhiz.com/tags/artificial-intelligence/</link>
    <description>Recent content in Artificial Intelligence on MLWhiz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Apr 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://mlwhiz.com/tags/artificial-intelligence/atom.xml" rel="self" type="application/rss+xml" />
    

    

    <item>
      <title>Chatbots  aren&#39;t as difficult to make as You Think</title>
      <link>https://mlwhiz.com/blog/2019/04/15/chatbot/</link>
      <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/04/15/chatbot/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/chatbot/dvader.jpeg"></media:content>
      

      
      <description>Chatbots are the in thing now. Every website must implement it. Every Data Scientist must know about them. Anytime we talk about AI; Chatbots must be discussed. But they look intimidating to someone very new to the field. We struggle with a lot of questions before we even begin to start working on them. Are they hard to create? What technologies should I know before attempting to work on them?</description>

      <content:encoded>  
        
        <![CDATA[  Chatbots are the in thing now. Every website must implement it. Every Data Scientist must know about them. Anytime we talk about AI; Chatbots must be discussed. But they look intimidating to someone very new to the field. We struggle with a lot of questions before we even begin to start working on them. Are they hard to create? What technologies should I know before attempting to work on them? In the end, we end up discouraged reading through many posts on the internet and effectively accomplishing nothing.
  Let me assure you this is not going to be &amp;ldquo;that kind of a post&amp;rdquo;.
I will try to distill some of the knowledge I acquired while working through a project in the Natural Language Processing course in the Advanced machine learning specialization.
So before I start, let me first say it for once that don&amp;rsquo;t be intimidated by the hype and the enigma surrounding Chatbots. They are pretty much using pretty simple NLP techniques which most of us already know. If you don&amp;rsquo;t, you are welcome to check out my NLP Learning Series, where I go through the problem of text classification in fair detail using Conventional, Deep Learning and Transfer Learning methods.
A Very brief Intro to Chatbots We can logically divide of Chatbots in the following two categories.
 Database/FAQ based - We have a database with some questions and answers, and we would like that a user can query that using Natural Language. This is the sort of Chatbots you find at most of the Banking websites for answering FAQs.
 Chit-Chat Based - Simulate dialogue with the user. These are the kind of chatbots that bring the cool in chatbots. We can use Seq-2-Seq models to create such bots.
  The Chatbot we will be creating We will be creating a dialogue chat bot, which will be able to:
 Answer programming-related questions (using StackOverflow dataset) Chit-Chat and simulate dialogue on all non-programming related questions  Once we will have it up and running our final chatbot should look like this.
  Seems quite fun.
We will be taking help of resources like Telegram and Chatterbot to build our Chatbot. So before we start, I think I should get you up and running with these two tools.
1. Telegram: From the website:
 Telegram is a messaging app with a focus on speed and security, it’s super-fast, simple and free. You can use Telegram on all your devices at the same time — your messages sync seamlessly across any number of your phones, tablets or computers.
 For us, Telegram provides us with an easy way to create a Chatbot UI. It provides us with an access token which we will use to connect to the Telegram App backend and run our chatbot logic. Naturally, we need to have a window where we will write our questions to the chatbot, for us that is provided by Telegram. Also, telegram powers the chatbot by communicating with our chatbot logic. The above screenshot is taken from the telegram app only.
Set up Telegram: Don&amp;rsquo;t worry if you don&amp;rsquo;t understand how it works yet; I will try to give step by step instructions as we go forward.
 Step 1: Download and Install Telegram App on your Laptop.
 Step 2: Talk with BotFather by opening this link in Chrome and subsequently your Telegram App.
 Step 3: The above steps will take you to a Chatbot called Botfather which can help you create a new bot. Inception Anyone? It will look something like this.
 Set up a new bot using command &amp;ldquo;/newbot&amp;rdquo; Create a name for Your bot. Create a username for your bot.      Step 4: You will get an access token for the bot. Copy the Token at a safe place. Step 5: Click on the &amp;ldquo;t.me/MLWhizbot&amp;rdquo; link to open Chat with your chatbot in a new window.  Right now if you try to communicate with the chatbot, you won&amp;rsquo;t receive any answers. And that is how it should be.
  But that&amp;rsquo;s not at all fun. Is it? Let&amp;rsquo;s do some python magic to make it responsive.
Making our Telegram Chatbot responsive Create a file main.py and put the following code in it. Don&amp;rsquo;t worry most of the code here is Boilerplate code to make our Chatbot communicate with Telegram using the Access token. We need to worry about implementing the class SimpleDialogueManager. This class contains a function called generate_answer which is where we will write our bot logic.
#!/usr/bin/env python3 import requests import time import argparse import os import json from requests.compat import urljoin class BotHandler(object): &amp;#34;&amp;#34;&amp;#34; BotHandler is a class which implements all back-end of the bot. It has three main functions: &amp;#39;get_updates&amp;#39; — checks for new messages &amp;#39;send_message&amp;#39; – posts new message to user &amp;#39;get_answer&amp;#39; — computes the most relevant on a user&amp;#39;s question &amp;#34;&amp;#34;&amp;#34; def __init__(self, token, dialogue_manager): self.token = token self.api_url = &amp;#34;https://api.telegram.org/bot{}/&amp;#34;.format(token) self.dialogue_manager = dialogue_manager def get_updates(self, offset=None, timeout=30): params = {&amp;#34;timeout&amp;#34;: timeout, &amp;#34;offset&amp;#34;: offset} raw_resp = requests.get(urljoin(self.api_url, &amp;#34;getUpdates&amp;#34;), params) try: resp = raw_resp.json() except json.decoder.JSONDecodeError as e: print(&amp;#34;Failed to parse response {}: {}.&amp;#34;.format(raw_resp.content, e)) return [] if &amp;#34;result&amp;#34; not in resp: return [] return resp[&amp;#34;result&amp;#34;] def send_message(self, chat_id, text): params = {&amp;#34;chat_id&amp;#34;: chat_id, &amp;#34;text&amp;#34;: text} return requests.post(urljoin(self.api_url, &amp;#34;sendMessage&amp;#34;), params) def get_answer(self, question): if question == &amp;#39;/start&amp;#39;: return &amp;#34;Hi, I am your project bot. How can I help you today?&amp;#34; return self.dialogue_manager.generate_answer(question) def is_unicode(text): return len(text) == len(text.encode()) class SimpleDialogueManager(object): &amp;#34;&amp;#34;&amp;#34; This is a simple dialogue manager to test the telegram bot. The main part of our bot will be written here. &amp;#34;&amp;#34;&amp;#34; def generate_answer(self, question): if &amp;#34;Hi&amp;#34; in question: return &amp;#34;Hello, You&amp;#34; else: return &amp;#34;Don&amp;#39;t be rude. Say Hi first.&amp;#34; def main(): # Put your own Telegram Access token here... token = &amp;#39;839585958:AAEfTDo2X6PgHb9IEdb62ueS4SmdpCkhtmc&amp;#39; simple_manager = SimpleDialogueManager() bot = BotHandler(token, simple_manager) ############################################################### print(&amp;#34;Ready to talk!&amp;#34;) offset = 0 while True: updates = bot.get_updates(offset=offset) for update in updates: print(&amp;#34;An update received.&amp;#34;) if &amp;#34;message&amp;#34; in update: chat_id = update[&amp;#34;message&amp;#34;][&amp;#34;chat&amp;#34;][&amp;#34;id&amp;#34;] if &amp;#34;text&amp;#34; in update[&amp;#34;message&amp;#34;]: text = update[&amp;#34;message&amp;#34;][&amp;#34;text&amp;#34;] if is_unicode(text): print(&amp;#34;Update content: {}&amp;#34;.format(update)) bot.send_message(chat_id, bot.get_answer(update[&amp;#34;message&amp;#34;][&amp;#34;text&amp;#34;])) else: bot.send_message(chat_id, &amp;#34;Hmm, you are sending some weird characters to me...&amp;#34;) offset = max(offset, update[&amp;#39;update_id&amp;#39;] &#43; 1) time.sleep(1) if __name__ == &amp;#34;__main__&amp;#34;: main() You can run the file main.py in the terminal window to make your bot responsive.
$ python main.py   Nice. It is following simple logic. But the good thing is that our bot now does something.
Also, take a look at the terminal window where we have run our main.py File. Whenever a user asks a question, we get the sort of dictionary below containing Unique Chat ID, Chat Text, User Information, etc.
Update content: {&#39;update_id&#39;: 484689748, &#39;message&#39;: {&#39;message_id&#39;: 115, &#39;from&#39;: {&#39;id&#39;: 844474950, &#39;is_bot&#39;: False, &#39;first_name&#39;: &#39;Rahul&#39;, &#39;last_name&#39;: &#39;Agarwal&#39;, &#39;language_code&#39;: &#39;en&#39;}, &#39;chat&#39;: {&#39;id&#39;: 844474950, &#39;first_name&#39;: &#39;Rahul&#39;, &#39;last_name&#39;: &#39;Agarwal&#39;, &#39;type&#39;: &#39;private&#39;}, &#39;date&#39;: 1555266010, &#39;text&#39;: &#39;What is 2&#43;2&#39;}}  Until now whatever we had done was sort of setting up and engineering sort of work.
Only if we can write some sound Data Science logic in the generate_answer function in our main.py we should have a decent chatbot.
2. ChatterBot From the Documentation:
 ChatterBot is a Python library that makes it easy to generate automated responses to a user’s input. ChatterBot uses a selection of machine learning algorithms to produce different types of reactions. This makes it easy for developers to create chat bots and automate conversations with users.
 Simply. It is a Blackbox system which can provide us with responses for Chitchat type questions for our Chatbot. And the best part about it is that it is pretty easy to integrate with our current flow. We could also have trained a SeqtoSeq model to do the same thing. Might be I will do it in a later post. I digress.
So, install it with:
$ pip install chatterbot And change the SimpleDialogueManager Class in main.py to the following. We can have a bot that can talk to the user and answer random queries.
class SimpleDialogueManager(object): &amp;#34;&amp;#34;&amp;#34; This is a simple dialogue manager to test the telegram bot. The main part of our bot will be written here. &amp;#34;&amp;#34;&amp;#34; def __init__(self): from chatterbot import ChatBot from chatterbot.trainers import ChatterBotCorpusTrainer chatbot = ChatBot(&amp;#39;MLWhizChatterbot&amp;#39;) trainer = ChatterBotCorpusTrainer(chatbot) trainer.train(&amp;#39;chatterbot.corpus.english&amp;#39;) self.chitchat_bot = chatbot def generate_answer(self, question): response = self.chitchat_bot.get_response(question) return response The code in init instantiates a chatbot using chatterbot and trains it on the provided english corpus data. The data is pretty small, but you can always train it on your dataset too. Just see the documentation. We can then give our responses using the Chatterbot chatbot in the generate_answer function.
  Not too &amp;ldquo;ba a a a a a d&amp;rdquo; , I must say.
Creating our StackOverFlow ChatBot Ok, so finally we are at a stage where we can do something we love. Use Data Science to power our Application/Chatbot. Let us start with creating a rough architecture of what we are going to do next.
  We will need to create two classifiers and save them as .pkl files.
 Intent-Classifier: This classifier will predict if it a question is a Stack-Overflow question or not. If it is not a Stack-overflow question, we let Chatterbot handle it.
 Programming-Language(Tag) Classifier: This classifier will predict which language a question belongs to if the question is a Stack-Overflow question. We do this so that we can search for those language questions in our database only.
  To keep it simple we will create simple TFIDF models. We will need to save these TFIDF vectorizers.
We will also need to store word vectors for every question for similarity calculations later.
Let us go through the process step by step. You can get the full code in this jupyter notebook in my project repository.
Step 1. Reading and Visualizing the Data dialogues = pd.read_csv(&amp;#34;data/dialogues.tsv&amp;#34;,sep=&amp;#34;\t&amp;#34;) posts = pd.read_csv(&amp;#34;data/tagged_posts.tsv&amp;#34;,sep=&amp;#34;\t&amp;#34;)dialogues.head()  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: left; }    text tag     0 Okay -- you&#39;re gonna need to learn how to lie. dialogue   1 I&#39;m kidding. You know how sometimes you just ... dialogue   2 Like my fear of wearing pastels? dialogue   3 I figured you&#39;d get to the good stuff eventually. dialogue   4 Thank God! If I had to hear one more story ab... dialogue     posts.head()  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    post_id title tag     0 9 Calculate age in C# c#   1 16 Filling a DataSet or DataTable from a LINQ que... c#   2 39 Reliable timer in a console application c#   3 42 Best way to allow plugins for a PHP application php   4 59 How do I get a distinct, ordered list of names... c#     print(&amp;#34;Num Posts:&amp;#34;,len(posts)) print(&amp;#34;Num Dialogues:&amp;#34;,len(dialogues)) Num Posts: 2171575 Num Dialogues: 218609  Step 2: Create training data for intent classifier - Chitchat/StackOverflow Question We will be creating a TFIDF model with Logistic regression to do this. If you want to know about the TFIDF model you can read it here.
We could also have used one of the Deep Learning models or transfer learning approaches to do this, but since the main objective of this post is to get a chatbot up and running and not worry too much about the accuracy we sort of work with the TFIDF based model only.
texts = list(dialogues[:200000].text.values) &#43; list(posts[:200000].title.values) labels = [&amp;#39;dialogue&amp;#39;]*200000 &#43; [&amp;#39;stackoverflow&amp;#39;]*200000 data = pd.DataFrame({&amp;#39;text&amp;#39;:texts,&amp;#39;target&amp;#39;:labels}) def text_prepare(text): &amp;#34;&amp;#34;&amp;#34;Performs tokenization and simple preprocessing.&amp;#34;&amp;#34;&amp;#34; replace_by_space_re = re.compile(&amp;#39;[/(){}\[\]\|@,;]&amp;#39;) bad_symbols_re = re.compile(&amp;#39;[^0-9a-z #&#43;_]&amp;#39;) stopwords_set = set(stopwords.words(&amp;#39;english&amp;#39;)) text = text.lower() text = replace_by_space_re.sub(&amp;#39; &amp;#39;, text) text = bad_symbols_re.sub(&amp;#39;&amp;#39;, text) text = &amp;#39; &amp;#39;.join([x for x in text.split() if x and x not in stopwords_set]) return text.strip() # Doing some data cleaning data[&amp;#39;text&amp;#39;] = data[&amp;#39;text&amp;#39;].apply(lambda x : text_prepare(x)) X_train, X_test, y_train, y_test = train_test_split(data[&amp;#39;text&amp;#39;],data[&amp;#39;target&amp;#39;],test_size = .1 , random_state=0) print(&amp;#39;Train size = {}, test size = {}&amp;#39;.format(len(X_train), len(X_test))) Train size = 360000, test size = 40000  Step 3. Create Intent classifier Here we Create a TFIDF Vectorizer to create features and also train a Logistic regression model to create the intent_classifier. Please note how we are saving TFIDF Vectorizer to resources/tfidf.pkl and intent_classifier to resources/intent_clf.pkl. We will need these files once we are going to write the SimpleDialogueManager class for our final Chatbot.
# We will keep our models and vectorizers in this folder !mkdir resources def tfidf_features(X_train, X_test, vectorizer_path): &amp;#34;&amp;#34;&amp;#34;Performs TF-IDF transformation and dumps the model.&amp;#34;&amp;#34;&amp;#34; tfv = TfidfVectorizer(dtype=np.float32, min_df=3, max_features=None, strip_accents=&amp;#39;unicode&amp;#39;, analyzer=&amp;#39;word&amp;#39;,token_pattern=r&amp;#39;\w{1,}&amp;#39;, ngram_range=(1, 3), use_idf=1,smooth_idf=1,sublinear_tf=1, stop_words = &amp;#39;english&amp;#39;) X_train = tfv.fit_transform(X_train) X_test = tfv.transform(X_test) pickle.dump(tfv,vectorizer_path) return X_train, X_test X_train_tfidf, X_test_tfidf = tfidf_features(X_train, X_test, open(&amp;#34;resources/tfidf.pkl&amp;#34;,&amp;#39;wb&amp;#39;)) intent_recognizer = LogisticRegression(C=10,random_state=0) intent_recognizer.fit(X_train_tfidf,y_train) pickle.dump(intent_recognizer, open(&amp;#34;resources/intent_clf.pkl&amp;#34; , &amp;#39;wb&amp;#39;)) # Check test accuracy. y_test_pred = intent_recognizer.predict(X_test_tfidf) test_accuracy = accuracy_score(y_test, y_test_pred) print(&amp;#39;Test accuracy = {}&amp;#39;.format(test_accuracy)) Test accuracy = 0.989825  The Intent Classifier has a pretty good test accuracy of 98%. TFIDF is not so bad.
Step 4: Create Programming Language classifier Let us first create the data for Programming Language classifier and then train a Logistic Regression model using TFIDF features. We save this tag Classifier at the location resources/tag_clf.pkl. We do this step mostly because we don&amp;rsquo;t want to do similarity calculations over the whole database of questions but only on the subset of questions by the language tag.
# creating the data for Programming Language classifier  X = posts[&amp;#39;title&amp;#39;].values y = posts[&amp;#39;tag&amp;#39;].values X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) print(&amp;#39;Train size = {}, test size = {}&amp;#39;.format(len(X_train), len(X_test))) Train size = 1737260, test size = 434315  vectorizer = pickle.load(open(&amp;#34;resources/tfidf.pkl&amp;#34;, &amp;#39;rb&amp;#39;)) X_train_tfidf, X_test_tfidf = vectorizer.transform(X_train), vectorizer.transform(X_test) tag_classifier = OneVsRestClassifier(LogisticRegression(C=5,random_state=0)) tag_classifier.fit(X_train_tfidf,y_train) pickle.dump(tag_classifier, open(&amp;#34;resources/tag_clf.pkl&amp;#34;, &amp;#39;wb&amp;#39;)) # Check test accuracy. y_test_pred = tag_classifier.predict(X_test_tfidf) test_accuracy = accuracy_score(y_test, y_test_pred) print(&amp;#39;Test accuracy = {}&amp;#39;.format(test_accuracy)) Test accuracy = 0.8043816124241622  Not Bad again.
Step 5: Store Question database Embeddings One can use pre-trained word vectors from Google or get a better result by training their embeddings using their data. Since again accuracy and precision is not the primary goal of this post, we will use pretrained vectors.
# Load Google&amp;#39;s pre-trained Word2Vec model. model = gensim.models.KeyedVectors.load_word2vec_format(&amp;#39;GoogleNews-vectors-negative300.bin&amp;#39;, binary=True)  We want to convert every question to an embedding and store them so that we don&amp;rsquo;t calculate the embeddings for the whole dataset every time. In essence, whenever the user asks a Stack Overflow question, we want to use some distance similarity measure to get the most similar question.
def question_to_vec(question, embeddings, dim=300): &amp;#34;&amp;#34;&amp;#34; question: a string embeddings: dict where the key is a word and a value is its&amp;#39; embedding dim: size of the representation result: vector representation for the question &amp;#34;&amp;#34;&amp;#34; word_tokens = question.split(&amp;#34; &amp;#34;) question_len = len(word_tokens) question_mat = np.zeros((question_len,dim), dtype = np.float32) for idx, word in enumerate(word_tokens): if word in embeddings: question_mat[idx,:] = embeddings[word] # remove zero-rows which stand for OOV words  question_mat = question_mat[~np.all(question_mat == 0, axis = 1)] # Compute the mean of each word along the sentence if question_mat.shape[0] &amp;gt; 0: vec = np.array(np.mean(question_mat, axis = 0), dtype = np.float32).reshape((1,dim)) else: vec = np.zeros((1,dim), dtype = np.float32) return vec counts_by_tag = posts.groupby(by=[&amp;#39;tag&amp;#39;])[&amp;#34;tag&amp;#34;].count().reset_index(name = &amp;#39;count&amp;#39;).sort_values([&amp;#39;count&amp;#39;], ascending = False) counts_by_tag = list(zip(counts_by_tag[&amp;#39;tag&amp;#39;],counts_by_tag[&amp;#39;count&amp;#39;])) print(counts_by_tag) [(&#39;c#&#39;, 394451), (&#39;java&#39;, 383456), (&#39;javascript&#39;, 375867), (&#39;php&#39;, 321752), (&#39;c_cpp&#39;, 281300), (&#39;python&#39;, 208607), (&#39;ruby&#39;, 99930), (&#39;r&#39;, 36359), (&#39;vb&#39;, 35044), (&#39;swift&#39;, 34809)]  We save the embeddings in a folder aptly named resources/embeddings_folder. This folder will contain a .pkl file for every tag. For example one of the files will be python.pkl.
! mkdir resources/embeddings_folder for tag, count in counts_by_tag: tag_posts = posts[posts[&amp;#39;tag&amp;#39;] == tag] tag_post_ids = tag_posts[&amp;#39;post_id&amp;#39;].values tag_vectors = np.zeros((count, 300), dtype=np.float32) for i, title in enumerate(tag_posts[&amp;#39;title&amp;#39;]): tag_vectors[i, :] = question_to_vec(title, model, 300) # Dump post ids and vectors to a file. filename = &amp;#39;resources/embeddings_folder/&amp;#39;&#43; tag &#43; &amp;#39;.pkl&amp;#39; pickle.dump((tag_post_ids, tag_vectors), open(filename, &amp;#39;wb&amp;#39;)) We are nearing the end now. We need to have a function to get most similar question&amp;rsquo;s post id in the dataset given we know the programming Language of the question. Here it is:
def get_similar_question(question,tag): # get the path where all question embeddings are kept and load the post_ids and post_embeddings embeddings_path = &amp;#39;resources/embeddings_folder/&amp;#39; &#43; tag &#43; &amp;#34;.pkl&amp;#34; post_ids, post_embeddings = pickle.load(open(embeddings_path, &amp;#39;rb&amp;#39;)) # Get the embeddings for the question question_vec = question_to_vec(question, model, 300) # find index of most similar post best_post_index = pairwise_distances_argmin(question_vec, post_embeddings) # return best post id return post_ids[best_post_index] get_similar_question(&amp;#34;how to use list comprehension in python?&amp;#34;,&amp;#39;python&amp;#39;) array([5947137])  we can use this post ID and find this question at https://stackoverflow.com/questions/5947137
The question the similarity checker suggested has the actual text: &amp;ldquo;How can I use a list comprehension to extend a list in python? [duplicate]&amp;rdquo;
Not too bad. It could have been better if we train our embeddings or use starspace embeddings.
Assemble the Puzzle - SimpleDialogueManager Class Finally, we have reached the end of the whole exercise, and we have to fit all the pieces in the puzzle in our SimpleDialogueManager Class. Here is the code for that. Go in the main.py file again to paste this code and see if it works or not.
Go through the comments to understand how the pieces are fitting together to build one wholesome logic.
import gensim import pickle import re import nltk from nltk.corpus import stopwords import numpy as np from sklearn.metrics.pairwise import pairwise_distances_argmin # We will need this function to prepare text at prediction time def text_prepare(text): &amp;#34;&amp;#34;&amp;#34;Performs tokenization and simple preprocessing.&amp;#34;&amp;#34;&amp;#34; replace_by_space_re = re.compile(&amp;#39;[/(){}\[\]\|@,;]&amp;#39;) bad_symbols_re = re.compile(&amp;#39;[^0-9a-z #&#43;_]&amp;#39;) stopwords_set = set(stopwords.words(&amp;#39;english&amp;#39;)) text = text.lower() text = replace_by_space_re.sub(&amp;#39; &amp;#39;, text) text = bad_symbols_re.sub(&amp;#39;&amp;#39;, text) text = &amp;#39; &amp;#39;.join([x for x in text.split() if x and x not in stopwords_set]) return text.strip() # need this to convert questions asked by user to vectors def question_to_vec(question, embeddings, dim=300): &amp;#34;&amp;#34;&amp;#34; question: a string embeddings: dict where the key is a word and a value is its&amp;#39; embedding dim: size of the representation result: vector representation for the question &amp;#34;&amp;#34;&amp;#34; word_tokens = question.split(&amp;#34; &amp;#34;) question_len = len(word_tokens) question_mat = np.zeros((question_len,dim), dtype = np.float32) for idx, word in enumerate(word_tokens): if word in embeddings: question_mat[idx,:] = embeddings[word] # remove zero-rows which stand for OOV words  question_mat = question_mat[~np.all(question_mat == 0, axis = 1)] # Compute the mean of each word along the sentence if question_mat.shape[0] &amp;gt; 0: vec = np.array(np.mean(question_mat, axis = 0), dtype = np.float32).reshape((1,dim)) else: vec = np.zeros((1,dim), dtype = np.float32) return vec class SimpleDialogueManager(object): &amp;#34;&amp;#34;&amp;#34; This is a simple dialogue manager to test the telegram bot. The main part of our bot will be written here. &amp;#34;&amp;#34;&amp;#34; def __init__(self): # Instantiate all the models and TFIDF Objects. print(&amp;#34;Loading resources...&amp;#34;) # Instantiate a Chatterbot for Chitchat type questions from chatterbot import ChatBot from chatterbot.trainers import ChatterBotCorpusTrainer chatbot = ChatBot(&amp;#39;MLWhizChatterbot&amp;#39;) trainer = ChatterBotCorpusTrainer(chatbot) trainer.train(&amp;#39;chatterbot.corpus.english&amp;#39;) self.chitchat_bot = chatbot print(&amp;#34;Loading Word2vec model...&amp;#34;) # Instantiate the Google&amp;#39;s pre-trained Word2Vec model. self.model = gensim.models.KeyedVectors.load_word2vec_format(&amp;#39;GoogleNews-vectors-negative300.bin&amp;#39;, binary=True) print(&amp;#34;Loading Classifier objects...&amp;#34;) # Load the intent classifier and tag classifier self.intent_recognizer = pickle.load(open(&amp;#39;resources/intent_clf.pkl&amp;#39;, &amp;#39;rb&amp;#39;)) self.tag_classifier = pickle.load(open(&amp;#39;resources/tag_clf.pkl&amp;#39;, &amp;#39;rb&amp;#39;)) # Load the TFIDF vectorizer object self.tfidf_vectorizer = pickle.load(open(&amp;#39;resources/tfidf.pkl&amp;#39;, &amp;#39;rb&amp;#39;)) print(&amp;#34;Finished Loading Resources&amp;#34;) # We created this function just above. We just need to have a function to get most similar question&amp;#39;s *post id* in the dataset given we know the programming Language of the question. Here it is: def get_similar_question(self,question,tag): # get the path where all question embeddings are kept and load the post_ids and post_embeddings embeddings_path = &amp;#39;resources/embeddings_folder/&amp;#39; &#43; tag &#43; &amp;#34;.pkl&amp;#34; post_ids, post_embeddings = pickle.load(open(embeddings_path, &amp;#39;rb&amp;#39;)) # Get the embeddings for the question question_vec = question_to_vec(question, self.model, 300) # find index of most similar post best_post_index = pairwise_distances_argmin(question_vec, post_embeddings) # return best post id return post_ids[best_post_index] def generate_answer(self, question): prepared_question = text_prepare(question) features = self.tfidf_vectorizer.transform([prepared_question]) # find intent intent = self.intent_recognizer.predict(features)[0] # Chit-chat part:  if intent == &amp;#39;dialogue&amp;#39;: response = self.chitchat_bot.get_response(question) # Stack Overflow Question else: # find programming language tag = self.tag_classifier.predict(features)[0] # find most similar question post id post_id = self.get_similar_question(question,tag)[0] # respond with  response = &amp;#39;I think its about %s\nThis thread might help you: https://stackoverflow.com/questions/%s&amp;#39; % (tag, post_id) return response Here is the code for the whole main.py for you to use and see. Just run the whole main.py using
$ python main.py And we will have our bot up and running.
Again, here is the link to the github repository
The possibilities are really endless This is just a small demo project of what you can do with the chatbots. You can do a whole lot more once you recognize that the backend is just python.
 One idea is to run a chatbot script on all the servers I have to run system commands straight from telegram. We can use os.system to run any system command. Bye Bye SSH.
 You can make chatbots to do some daily tasks by using simple keyword-based intents. It is just simple logic. Find out the weather, find out cricket scores or maybe newly released movies. Whatever floats your boat.
 Or maybe try to integrate Telegram based Chatbot in your website. See livechatbot
 Or maybe just try to have fun with it.
    Conclusion Here we learned how to create a simple chatbot. And it works well. We can improve a whole lot on this present chatbot by increasing classifier accuracy, handling edge cases, making it respond faster or maybe adding more logic to handle more use cases. But the fact remains the same. The AI in chatbots is just simple human logic and nothing magic.
In this post, I closely followed one of the projects from this course to create this chatbot. Do check out this course if you get confused, or tell me your problems in the comments I will certainly try to help.
Follow me up at Medium or Subscribe to my blog to be informed about my next posts.
Till then Ciao!!
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>NLP  Learning Series: Part 4 - Transfer Learning Intuition for Text Classification</title>
      <link>https://mlwhiz.com/blog/2019/03/30/transfer_learning_text_classification/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/03/30/transfer_learning_text_classification/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/nlp_tl/spiderman.jpeg"></media:content>
      

      
      <description>This post is the fourth post of the NLP Text classification series. To give you a recap, I started up with an NLP text classification competition on Kaggle called Quora Question insincerity challenge. So I thought to share the knowledge via a series of blog posts on text classification. The first post talked about the different preprocessing techniques that work with Deep learning models and increasing embeddings coverage.</description>

      <content:encoded>  
        
        <![CDATA[    This post is the fourth post of the NLP Text classification series. To give you a recap, I started up with an NLP text classification competition on Kaggle called Quora Question insincerity challenge. So I thought to share the knowledge via a series of blog posts on text classification. The first post talked about the different preprocessing techniques that work with Deep learning models and increasing embeddings coverage. In the second post, I talked through some basic conventional models like TFIDF, Count Vectorizer, Hashing, etc. that have been used in text classification and tried to access their performance to create a baseline. In the third post, I delved deeper into Deep learning models and the various architectures we could use to solve the text Classification problem. In this post, I will try to use ULMFit model which is a transfer learning approach to this data.
As a side note: if you want to know more about NLP, I would like to recommend this excellent course on Natural Language Processing in the Advanced machine learning specialization. You can start for free with the 7-day Free Trial. This course covers a wide range of tasks in Natural Language Processing from basic to advanced: sentiment analysis, summarization, dialogue state tracking, to name a few. You can start for free with the 7-day Free Trial.
Before introducing the notion of transfer learning to NLP applications, we will first need to understand a little bit about Language models.
Language Models And NLP Transfer Learning Intuition: In very basic terms the objective of the language model is to predict the next word given a stream of input words. In the past, many different approaches have been used to solve this particular problem. Probabilistic models using Markov assumption is one example of this sort of models.
$$ P(W_n) = P(W_n|W_{n-1}) $$
In the recent era, people have been using RNNs/LSTMs to create such language models. They take as input a word embedding and at each time state return the probability distribution of next word probability over the dictionary words. An example of this is shown below in which the below Neural Network uses multiple stacked layers of RNN cells to learn a language model to predict the next word.
  Now why do we need the concept of Language Modeling? Or How does predicting the next word tie with the current task of text classification? The intuition ties to the way that the neural network gets trained. The neural network that can predict the next word after being trained on a massive corpus like Wikipedia already has learned a lot of structure in a particular language. Can we use this knowledge in the weights of the network for our advantage? Yes, we can, and that is where the idea of Transfer Learning in NLP stems from. So to make this intuition more concrete, Let us think that our neural network is divided into two parts -
 Language Specific: The lower part of the neural network is language specific. That is it learns the features of the language. This part could be used to transfer our knowledge from a language corpus to our current task Task Specific: I will call the upper part of our network as task specific. The weights in these layers are trained so that it learns to predict the next word.    Now as it goes in a lot of transfer learning models for Image, we stack the Language Specific part with some dense and softmax layers(Our new task) and train on our new task to achieve what we want to do.
ULMFit: Now the concept of Transfer learning in NLP is not entirely new and people already used Language models for transfer learning back in 2015-16 without good result. So what has changed now?
The thing that has changed is that people like Jeremy Howard and Sebastian Ruder have done a lot of research on how to train these networks. And so we have achieved state of the art results on many text datasets with Transfer Learning approaches.
Let&amp;rsquo;s follow up with the key research findings in the ULMFit paper written by them along with the code.
Change in the way Transfer Learning networks are trained:   Training a model as per ULMFiT we need to take these three steps:
a) Create a Base Language Model: Training the language model on a general-domain corpus that captures high-level natural language features
b) Finetune Base Language Model on Task Specific Data: Fine-tuning the pre-trained language model on target task data
c) Finetune Base Language Model Layers &#43; Task Specific Layers on Task Specific Data: Fine-tuning the classifier on target task data
So let us go through these three steps one by one along with the code that is provided to us with the FastAI library.
a) Create a Base Language Model: This task might be the most time-consuming task. This model is analogous to resnet50 or Inception for the vision task. In the paper, they use the language model AWD-LSTM, a regular LSTM architecture trained with various tuned dropout hyperparameters. This model was trained on Wikitext-103 consisting of 28,595 preprocessed Wikipedia articles and 103 million words. We won&amp;rsquo;t perform this task ourselves and will use the fabulous FastAI library to use this model as below. The code below will take our data and preprocess it for usage in the AWD_LSTM model as well as load the model.
# Language model data : We use test_df as validation for language model data_lm = TextLMDataBunch.from_df(path = &amp;#34;&amp;#34;,train_df= train_df ,valid_df = test_df) learn = language_model_learner(data_lm, AWD_LSTM, drop_mult=0.5) It is also where we preprocess the data as per the required usage for the FastAI models. For example:
print(train_df)   print(data_lm) TextLMDataBunch; Train: LabelList (1306122 items) x: LMTextList xxbos xxmaj how did xxmaj quebec nationalists see their province as a nation in the 1960s ?,xxbos xxmaj do you have an adopted dog , how would you encourage people to adopt and not shop ?,xxbos xxmaj why does velocity affect time ? xxmaj does velocity affect space geometry ?,xxbos xxmaj how did xxmaj otto von xxmaj guericke used the xxmaj magdeburg hemispheres ?,xxbos xxmaj can i convert montra xxunk d to a mountain bike by just changing the tyres ? y: LMLabelList ,,,, Path: .; Valid: LabelList (375806 items) x: LMTextList xxbos xxmaj why do so many women become so rude and arrogant when they get just a little bit of wealth and power ?,xxbos xxmaj when should i apply for xxup rv college of engineering and xxup bms college of engineering ? xxmaj should i wait for the xxup comedk result or am i supposed to apply before the result ?,xxbos xxmaj what is it really like to be a nurse practitioner ?,xxbos xxmaj who are entrepreneurs ?,xxbos xxmaj is education really making good people nowadays ? y: LMLabelList ,,,, Path: .; Test: None  The tokenized prepared data is based on a lot of research from the FastAI developers. To make this post a little bit complete, I am sharing some of the tokens definition as well.
 xxunk is for an unknown word (one that isn&amp;rsquo;t present in the current vocabulary) xxpad is the token used for padding, if we need to regroup several texts of different lengths in a batch xxbos represents the beginning of a text in your dataset xxmaj is used to indicate the next word begins with a capital in the original text xxup is used to indicate the next word is written in all caps in the original text  b) Finetune Base Language Model on Task Specific Data This task is also pretty easy when we look at the code. The specific details of how we do the training is what holds the essence.
# Learning with Discriminative fine tuning learn.fit_one_cycle(1, 1e-2) learn.unfreeze() learn.fit_one_cycle(1, 1e-3) # Save encoder Object learn.save_encoder(&amp;#39;ft_enc&amp;#39;) The paper introduced two general concepts for this learning stage:
 Discriminative fine-tuning:  The Main Idea is: As different layers capture different types of information, they should be fine-tuned to different extents. Instead of using the same learning rate for all layers of the model, discriminative fine-tuning allows us to tune each layer with different learning rates. In the paper, the authors suggest first to finetune only the last layer, and then unfreeze all the layers with a learning rate lowered by a factor of 2.6.
 Slanted triangular learning rates:    According to the authors: &amp;ldquo;For adapting its parameters to task-specific features, we would like the model to quickly converge to a suitable region of the parameter space in the beginning of training and then refine its parameters&amp;rdquo; The Main Idea is to use a high learning rate at the starting stage for increased learning and low learning rates to finetune at later stages in an epoch.
After training our Language model on the Quora dataset, we should be able to see how our model performs on the Language Model task itself. FastAI library provides us with a simple function to do that.
# check how the language model performs learn.predict(&amp;#34;What should&amp;#34;, n_words=10) &#39;What should be the likelihood of a tourist visiting Mumbai for&#39;  c) Finetune Base Language Model Layers &#43; Task Specific Layers on Task Specific Data This is the stage where task-specific learning takes place that is we add the classification layers and fine tune them.
The authors augment the pretrained language model with two additional linear blocks. Each block uses batch normalization (Ioffe and Szegedy, 2015) and dropout, with ReLU activations for the intermediate layer and a softmax activation that outputs a probability distribution over target classes at the last layer. The params of these task-specific layers are the only ones that are learned from scratch.
#Creating Classification Data data_clas = TextClasDataBunch.from_df(path =&amp;#34;&amp;#34;, train_df=train, valid_df =valid, test_df=test_df, vocab=data_lm.train_ds.vocab, bs=32,label_cols = &amp;#39;target&amp;#39;) # Creating Classifier Object learn = text_classifier_learner(data_clas, AWD_LSTM, drop_mult=0.5) # Add weights of finetuned Language model  learn.load_encoder(&amp;#39;ft_enc&amp;#39;) # Fitting Classifier Object learn.fit_one_cycle(1, 1e-2) # Fitting Classifier Object after freezing all but last 2 layers learn.freeze_to(-2) learn.fit_one_cycle(1, slice(5e-3/2., 5e-3)) # Fitting Classifier Object - discriminative learning learn.unfreeze() learn.fit_one_cycle(1, slice(2e-3/100, 2e-3)) Here also the Authors have derived a few novel methods:
 Concat Pooling:  The authors use not only the concatenation of all the hidden state but also the Maxpool and Meanpool representation of all hidden states as input to the linear layers.
$$ H = [h_1, &amp;hellip; , h_T ] $$
$$ h_c = [h_T , maxpool(H), meanpool(H)] $$
 Gradual Unfreezing:  Rather than fine-tuning all layers at once, which risks catastrophic forgetting(Forgetting everything we have learned so far from language models), the authors propose to gradually unfreeze the model starting from the last layer as this contains the least general knowledge. The Authors first unfreeze the last layer and fine-tune all unfrozen layers for one epoch. They then unfreeze the next lower frozen layer and repeat, until they finetune all layers until convergence at the last iteration. The function slice(2e-3/100, 2e-3) means that we train every layer with different learning rates ranging from max to min value.
One can get the predictions for the test data at once using:
test_preds = np.array(learn.get_preds(DatasetType.Test, ordered=True)[0])[:,1] I am a big fan of Kaggle Kernels. One could not have imagined having all that compute for free. You can find a running version of the above code in this kaggle kernel. Do try to experiment with it after forking and running the code. Also please upvote the kernel if you find it helpful.
Results: Here are the final results of all the different approaches I have tried on the Kaggle Dataset. I ran a 5 fold Stratified CV.
a. Conventional Methods:   b. Deep Learning Methods:   c. Transfer Learning Methods(ULMFIT):   The results achieved were not very good compared to deep learning methods, but I still liked the idea of the transfer learning approach, and it was so easy to implement it using fastAI. Also running the code took a lot of time at 9 hours, compared to other methods which got over in 2 hours.
Even if this approach didn&amp;rsquo;t work well for this dataset, it is a valid approach for other datasets, as the Authors of the paper have achieved pretty good results on different datasets — definitely a genuine method to try out.
PS: Note that I didn&amp;rsquo;t work on tuning the above models, so these results are only cursory. You can try to squeeze more performance by performing hyperparams tuning using hyperopt or just old fashioned Grid-search.
Conclusion: Finally, this post concludes my NLP Learning series. It took a lot of time to write, but the effort was well worth it. I hope you found it helpful in your work. I will try to write some more on this topic when I get some time. Follow me up at Medium or Subscribe to my blog to be informed about my next posts.
Also if you want to learn more about NLP here is an excellent course. You can start for free with the 7-day Free Trial.
Let me know if you think I can add something more to the post; I will try to incorporate it.
Cheers!!!
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>NLP  Learning Series: Part 3 - Attention, CNN and what not for Text Classification</title>
      <link>https://mlwhiz.com/blog/2019/03/09/deeplearning_architectures_text_classification/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/03/09/deeplearning_architectures_text_classification/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/birnn.png"></media:content>
      

      
      <description>This post is the third post of the NLP Text classification series. To give you a recap, I started up with an NLP text classification competition on Kaggle called Quora Question insincerity challenge. So I thought to share the knowledge via a series of blog posts on text classification. The first post talked about the different preprocessing techniques that work with Deep learning models and increasing embeddings coverage. In the second post, I talked through some basic conventional models like TFIDF, Count Vectorizer, Hashing, etc.</description>

      <content:encoded>  
        
        <![CDATA[  This post is the third post of the NLP Text classification series. To give you a recap, I started up with an NLP text classification competition on Kaggle called Quora Question insincerity challenge. So I thought to share the knowledge via a series of blog posts on text classification. The first post talked about the different preprocessing techniques that work with Deep learning models and increasing embeddings coverage. In the second post, I talked through some basic conventional models like TFIDF, Count Vectorizer, Hashing, etc. that have been used in text classification and tried to access their performance to create a baseline. In this post, I delve deeper into Deep learning models and the various architectures we could use to solve the text Classification problem. To make this post platform generic, I am going to code in both Keras and Pytorch. I will use various other models which we were not able to use in this competition like ULMFit transfer learning approaches in the fourth post in the series.
As a side note: if you want to know more about NLP, I would like to recommend this excellent course on Natural Language Processing in the Advanced machine learning specialization. You can start for free with the 7-day Free Trial. This course covers a wide range of tasks in Natural Language Processing from basic to advanced: sentiment analysis, summarization, dialogue state tracking, to name a few. You can start for free with the 7-day Free Trial.
So let me try to go through some of the models which people are using to perform text classification and try to provide a brief intuition for them — also, some code in Keras and Pytorch. So you can try them out for yourself.
1. TextCNN The idea of using a CNN to classify text was first presented in the paper Convolutional Neural Networks for Sentence Classification by Yoon Kim.
Representation: The central intuition about this idea is to see our documents as images. How? Let us say we have a sentence and we have maxlen = 70 and embedding size = 300. We can create a matrix of numbers with the shape 70x300 to represent this sentence. For images, we also have a matrix where individual elements are pixel values. Instead of image pixels, the input to the tasks is sentences or documents represented as a matrix. Each row of the matrix corresponds to one-word vector.
  Convolution Idea: While for an image we move our conv filter horizontally as well as vertically, for text we fix kernel size to filter_size x embed_size, i.e. (3,300) we are just going to move vertically down for the convolution taking look at three words at once since our filter size is 3 in this case. This idea seems right since our convolution filter is not splitting word embedding. It gets to look at the full embedding of each word. Also one can think of filter sizes as unigrams, bigrams, trigrams, etc. Since we are looking at a context window of 1,2,3, and 5 words respectively.
Here is the text classification network coded in Pytorch:
import torch import torch.nn as nn import torch.nn.functional as F from torch.autograd import Variable class CNN_Text(nn.Module): def __init__(self): super(CNN_Text, self).__init__() filter_sizes = [1,2,3,5] num_filters = 36 self.embedding = nn.Embedding(max_features, embed_size) self.embedding.weight = nn.Parameter(torch.tensor(embedding_matrix, dtype=torch.float32)) self.embedding.weight.requires_grad = False self.convs1 = nn.ModuleList([nn.Conv2d(1, num_filters, (K, embed_size)) for K in filter_sizes]) self.dropout = nn.Dropout(0.1) self.fc1 = nn.Linear(len(Ks)*num_filters, 1) def forward(self, x): x = self.embedding(x) x = x.unsqueeze(1) x = [F.relu(conv(x)).squeeze(3) for conv in self.convs1] x = [F.max_pool1d(i, i.size(2)).squeeze(2) for i in x] x = torch.cat(x, 1) x = self.dropout(x) logit = self.fc1(x) return logit And for the Keras enthusiasts:
# https://www.kaggle.com/yekenot/2dcnn-textclassifier def model_cnn(embedding_matrix): filter_sizes = [1,2,3,5] num_filters = 36 inp = Input(shape=(maxlen,)) x = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp) x = Reshape((maxlen, embed_size, 1))(x) maxpool_pool = [] for i in range(len(filter_sizes)): conv = Conv2D(num_filters, kernel_size=(filter_sizes[i], embed_size), kernel_initializer=&amp;#39;he_normal&amp;#39;, activation=&amp;#39;relu&amp;#39;)(x) maxpool_pool.append(MaxPool2D(pool_size=(maxlen - filter_sizes[i] &#43; 1, 1))(conv)) z = Concatenate(axis=1)(maxpool_pool) z = Flatten()(z) z = Dropout(0.1)(z) outp = Dense(1, activation=&amp;#34;sigmoid&amp;#34;)(z) model = Model(inputs=inp, outputs=outp) model.compile(loss=&amp;#39;binary_crossentropy&amp;#39;, optimizer=&amp;#39;adam&amp;#39;, metrics=[&amp;#39;accuracy&amp;#39;]) return model I am a big fan of Kaggle Kernels. One could not have imagined having all that compute for free. You can find a running version of the above two code snippets in this kaggle kernel. Do try to experiment with it after forking and running the code. Also please upvote the kernel if you find it helpful.
The Keras model and Pytorch model performed similarly with Pytorch model beating the keras model by a small margin. The Out-Of-Fold CV F1 score for the Pytorch model came out to be 0.6609 while for Keras model the same score came out to be 0.6559. I used the same preprocessing in both the models to be better able to compare the platforms.
2. BiDirectional RNN(LSTM/GRU): TextCNN works well for Text Classification. It takes care of words in close range. It can see &amp;ldquo;new york&amp;rdquo; together. However, it still can&amp;rsquo;t take care of all the context provided in a particular text sequence. It still does not learn the sequential structure of the data, where every word is dependent on the previous word. Or a word in the previous sentence.
RNN help us with that. They can remember previous information using hidden states and connect it to the current task.
Long Short Term Memory networks (LSTM) are a subclass of RNN, specialized in remembering information for an extended period. Moreover, the Bidirectional LSTM keeps the contextual information in both directions which is pretty useful in text classification task (But won&amp;rsquo;t work for a time series prediction task as we don&amp;rsquo;t have visibility into the future in this case).
  For a most simplistic explanation of Bidirectional RNN, think of RNN cell as a black box taking as input a hidden state(a vector) and a word vector and giving out an output vector and the next hidden state. This box has some weights which are to be tuned using Backpropagation of the losses. Also, the same cell is applied to all the words so that the weights are shared across the words in the sentence. This phenomenon is called weight-sharing.
   Hidden state, Word vector -&amp;gt;(RNN Cell) -&amp;gt; Output Vector , Next Hidden state  For a sequence of length 4 like &amp;ldquo;you will never believe&amp;rdquo;, The RNN cell gives 4 output vectors, which can be concatenated and then used as part of a dense feedforward architecture.
In the Bidirectional RNN, the only change is that we read the text in the usual fashion as well in reverse. So we stack two RNNs in parallel, and hence we get 8 output vectors to append.
Once we get the output vectors, we send them through a series of dense layers and finally a softmax layer to build a text classifier.
In most cases, you need to understand how to stack some layers in a neural network to get the best results. We can try out multiple bidirectional GRU/LSTM layers in the network if it performs better.
Due to the limitations of RNNs like not remembering long term dependencies, in practice, we almost always use LSTM/GRU to model long term dependencies. In such a case you can think of the RNN cell being replaced by an LSTM cell or a GRU cell in the above figure. An example model is provided below. You can use CuDNNGRU interchangeably with CuDNNLSTM when you build models. (CuDNNGRU/LSTM are just implementations of LSTM/GRU that are created to run faster on GPUs. In most cases always use them instead of the vanilla LSTM/GRU implementations)
So here is some code in Pytorch for this network.
class BiLSTM(nn.Module): def __init__(self): super(BiLSTM, self).__init__() self.hidden_size = 64 drp = 0.1 self.embedding = nn.Embedding(max_features, embed_size) self.embedding.weight = nn.Parameter(torch.tensor(embedding_matrix, dtype=torch.float32)) self.embedding.weight.requires_grad = False self.lstm = nn.LSTM(embed_size, self.hidden_size, bidirectional=True, batch_first=True) self.linear = nn.Linear(self.hidden_size*4 , 64) self.relu = nn.ReLU() self.dropout = nn.Dropout(drp) self.out = nn.Linear(64, 1) def forward(self, x): h_embedding = self.embedding(x) h_embedding = torch.squeeze(torch.unsqueeze(h_embedding, 0)) h_lstm, _ = self.lstm(h_embedding) avg_pool = torch.mean(h_lstm, 1) max_pool, _ = torch.max(h_lstm, 1) conc = torch.cat(( avg_pool, max_pool), 1) conc = self.relu(self.linear(conc)) conc = self.dropout(conc) out = self.out(conc) return out Also, here is the same code in Keras.
# BiDirectional LSTM def model_lstm_du(embedding_matrix): inp = Input(shape=(maxlen,)) x = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp) &amp;#39;&amp;#39;&amp;#39; Here 64 is the size(dim) of the hidden state vector as well as the output vector. Keeping return_sequence we want the output for the entire sequence. So what is the dimension of output for this layer? 64*70(maxlen)*2(bidirection concat) CuDNNLSTM is fast implementation of LSTM layer in Keras which only runs on GPU &amp;#39;&amp;#39;&amp;#39; x = Bidirectional(CuDNNLSTM(64, return_sequences=True))(x) avg_pool = GlobalAveragePooling1D()(x) max_pool = GlobalMaxPooling1D()(x) conc = concatenate([avg_pool, max_pool]) conc = Dense(64, activation=&amp;#34;relu&amp;#34;)(conc) conc = Dropout(0.1)(conc) outp = Dense(1, activation=&amp;#34;sigmoid&amp;#34;)(conc) model = Model(inputs=inp, outputs=outp) model.compile(loss=&amp;#39;binary_crossentropy&amp;#39;, optimizer=&amp;#39;adam&amp;#39;, metrics=[&amp;#39;accuracy&amp;#39;]) return model You can run this code in my BiLSTM with Pytorch and Keras kaggle kernel for this competition. Please do upvote the kernel if you find it helpful.
In the BiLSTM case also, Pytorch model beats the keras model by a small margin. The Out-Of-Fold CV F1 score for the Pytorch model came out to be 0.6741 while for Keras model the same score came out to be 0.6727. This score is around a 1-2% increase from the TextCNN performance which is pretty good. Also, note that it is around 6-7% better than conventional methods.
3. Attention Models Dzmitry Bahdanau et al first presented attention in their paper Neural Machine Translation by Jointly Learning to Align and Translate but I find that the paper on Hierarchical Attention Networks for Document Classification written jointly by CMU and Microsoft in 2016 is a much easier read and provides more intuition.
So let us talk about the intuition first. In the past conventional methods like TFIDF/CountVectorizer etc. we used to find features from the text by doing a keyword extraction. Some word is more helpful in determining the category of a text than others. However, in this method we sort of lost the sequential structure of the text. With LSTM and deep learning methods, while we can take care of the sequence structure, we lose the ability to give higher weight to more important words. Can we have the best of both worlds?
The answer is Yes. Actually, Attention is all you need. In the author&amp;rsquo;s words:
 Not all words contribute equally to the representation of the sentence meaning. Hence, we introduce attention mechanism to extract such words that are important to the meaning of the sentence and aggregate the representation of those informative words to form a sentence vector
   In essence, we want to create scores for every word in the text, which is the attention similarity score for a word.
To do this, we start with a weight matrix(W), a bias vector(b) and a context vector u. The optimization algorithm learns all of these weights. On this note I would like to highlight something I like a lot about neural networks - If you don&amp;rsquo;t know some params, let the network learn them. We only have to worry about creating architectures and params to tune.
Then there are a series of mathematical operations. See the figure for more clarification. We can think of u1 as nonlinearity on RNN word output. After that v1 is a dot product of u1 with a context vector u raised to exponentiation. From an intuition viewpoint, the value of v1 will be high if u and u1 are similar. Since we want the sum of scores to be 1, we divide v by the sum of v’s to get the Final Scores,s
These final scores are then multiplied by RNN output for words to weight them according to their importance. After which the outputs are summed and sent through dense layers and softmax for the task of text classification.
Here is the code in Pytorch. Do try to read through the pytorch code for attention layer. It just does what I have explained above.
class Attention(nn.Module): def __init__(self, feature_dim, step_dim, bias=True, **kwargs): super(Attention, self).__init__(**kwargs) self.supports_masking = True self.bias = bias self.feature_dim = feature_dim self.step_dim = step_dim self.features_dim = 0 weight = torch.zeros(feature_dim, 1) nn.init.kaiming_uniform_(weight) self.weight = nn.Parameter(weight) if bias: self.b = nn.Parameter(torch.zeros(step_dim)) def forward(self, x, mask=None): feature_dim = self.feature_dim step_dim = self.step_dim eij = torch.mm( x.contiguous().view(-1, feature_dim), self.weight ).view(-1, step_dim) if self.bias: eij = eij &#43; self.b eij = torch.tanh(eij) a = torch.exp(eij) if mask is not None: a = a * mask a = a / (torch.sum(a, 1, keepdim=True) &#43; 1e-10) weighted_input = x * torch.unsqueeze(a, -1) return torch.sum(weighted_input, 1) class Attention_Net(nn.Module): def __init__(self): super(Attention_Net, self).__init__() drp = 0.1 self.embedding = nn.Embedding(max_features, embed_size) self.embedding.weight = nn.Parameter(torch.tensor(embedding_matrix, dtype=torch.float32)) self.embedding.weight.requires_grad = False self.embedding_dropout = nn.Dropout2d(0.1) self.lstm = nn.LSTM(embed_size, 128, bidirectional=True, batch_first=True) self.lstm2 = nn.GRU(128*2, 64, bidirectional=True, batch_first=True) self.attention_layer = Attention(128, maxlen) self.linear = nn.Linear(64*2 , 64) self.relu = nn.ReLU() self.out = nn.Linear(64, 1) def forward(self, x): h_embedding = self.embedding(x) h_embedding = torch.squeeze(torch.unsqueeze(h_embedding, 0)) h_lstm, _ = self.lstm(h_embedding) h_lstm, _ = self.lstm2(h_lstm) h_lstm_atten = self.attention_layer(h_lstm) conc = self.relu(self.linear(h_lstm_atten)) out = self.out(conc) return out Same code for Keras.
def dot_product(x, kernel): &amp;#34;&amp;#34;&amp;#34; Wrapper for dot product operation, in order to be compatible with both Theano and Tensorflow Args: x (): input kernel (): weights Returns: &amp;#34;&amp;#34;&amp;#34; if K.backend() == &amp;#39;tensorflow&amp;#39;: return K.squeeze(K.dot(x, K.expand_dims(kernel)), axis=-1) else: return K.dot(x, kernel) class AttentionWithContext(Layer): &amp;#34;&amp;#34;&amp;#34; Attention operation, with a context/query vector, for temporal data. Supports Masking. Follows the work of Yang et al. [https://www.cs.cmu.edu/~diyiy/docs/naacl16.pdf] &amp;#34;Hierarchical Attention Networks for Document Classification&amp;#34; by using a context vector to assist the attention # Input shape 3D tensor with shape: `(samples, steps, features)`. # Output shape 2D tensor with shape: `(samples, features)`. How to use: Just put it on top of an RNN Layer (GRU/LSTM/SimpleRNN) with return_sequences=True. The dimensions are inferred based on the output shape of the RNN. Note: The layer has been tested with Keras 2.0.6 Example: model.add(LSTM(64, return_sequences=True)) model.add(AttentionWithContext()) # next add a Dense layer (for classification/regression) or whatever... &amp;#34;&amp;#34;&amp;#34; def __init__(self, W_regularizer=None, u_regularizer=None, b_regularizer=None, W_constraint=None, u_constraint=None, b_constraint=None, bias=True, **kwargs): self.supports_masking = True self.init = initializers.get(&amp;#39;glorot_uniform&amp;#39;) self.W_regularizer = regularizers.get(W_regularizer) self.u_regularizer = regularizers.get(u_regularizer) self.b_regularizer = regularizers.get(b_regularizer) self.W_constraint = constraints.get(W_constraint) self.u_constraint = constraints.get(u_constraint) self.b_constraint = constraints.get(b_constraint) self.bias = bias super(AttentionWithContext, self).__init__(**kwargs) def build(self, input_shape): assert len(input_shape) == 3 self.W = self.add_weight((input_shape[-1], input_shape[-1],), initializer=self.init, name=&amp;#39;{}_W&amp;#39;.format(self.name), regularizer=self.W_regularizer, constraint=self.W_constraint) if self.bias: self.b = self.add_weight((input_shape[-1],), initializer=&amp;#39;zero&amp;#39;, name=&amp;#39;{}_b&amp;#39;.format(self.name), regularizer=self.b_regularizer, constraint=self.b_constraint) self.u = self.add_weight((input_shape[-1],), initializer=self.init, name=&amp;#39;{}_u&amp;#39;.format(self.name), regularizer=self.u_regularizer, constraint=self.u_constraint) super(AttentionWithContext, self).build(input_shape) def compute_mask(self, input, input_mask=None): # do not pass the mask to the next layers return None def call(self, x, mask=None): uit = dot_product(x, self.W) if self.bias: uit &#43;= self.b uit = K.tanh(uit) ait = dot_product(uit, self.u) a = K.exp(ait) # apply mask after the exp. will be re-normalized next if mask is not None: # Cast the mask to floatX to avoid float64 upcasting in theano a *= K.cast(mask, K.floatx()) # in some cases especially in the early stages of training the sum may be almost zero # and this results in NaN&amp;#39;s. A workaround is to add a very small positive number ε to the sum. # a /= K.cast(K.sum(a, axis=1, keepdims=True), K.floatx()) a /= K.cast(K.sum(a, axis=1, keepdims=True) &#43; K.epsilon(), K.floatx()) a = K.expand_dims(a) weighted_input = x * a return K.sum(weighted_input, axis=1) def compute_output_shape(self, input_shape): return input_shape[0], input_shape[-1] def model_lstm_atten(embedding_matrix): inp = Input(shape=(maxlen,)) x = Embedding(max_features, embed_size, weights=[embedding_matrix], trainable=False)(inp) x = Bidirectional(CuDNNLSTM(128, return_sequences=True))(x) x = Bidirectional(CuDNNLSTM(64, return_sequences=True))(x) x = AttentionWithContext()(x) x = Dense(64, activation=&amp;#34;relu&amp;#34;)(x) x = Dense(1, activation=&amp;#34;sigmoid&amp;#34;)(x) model = Model(inputs=inp, outputs=x) model.compile(loss=&amp;#39;binary_crossentropy&amp;#39;, optimizer=&amp;#39;adam&amp;#39;, metrics=[&amp;#39;accuracy&amp;#39;]) return model Again, my Attention with Pytorch and Keras Kaggle kernel contains the working versions for this code. Please do upvote the kernel if you find it useful.
This method performed well with Pytorch CV scores reaching around 0.6758 and Keras CV scores reaching around 0.678. This score is more than what we were able to achieve with BiLSTM and TextCNN. However, please note that we didn&amp;rsquo;t work on tuning any of the given methods yet and so the scores might be different.
With this, I leave you to experiment with new architectures and playing around with stacking multiple GRU/LSTM layers to improve your network performance. You can also look at including more techniques in these network like Bucketing, handmade features, etc. Some of the tips and new techniques are mentioned here on my blog post: What my first Silver Medal taught me about Text Classification and Kaggle in general?. Also, here is another Kaggle kernel which is my silver-winning entry for this competition.
Results Here are the final results of all the different approaches I have tried on the Kaggle Dataset. I ran a 5 fold Stratified CV.
a. Conventional Methods:   b. Deep Learning Methods:   PS: Note that I didn&amp;rsquo;t work on tuning the above models, so these results are only cursory. You can try to squeeze more performance by performing hyperparams tuning using hyperopt or just old fashioned Grid-search.
Conclusion In this post, I went through with the explanations of various deep learning architectures people are using for Text classification tasks. In the next post, we will delve further into the next new phenomenon in NLP space - Transfer Learning with BERT and ULMFit. Follow me up at Medium or Subscribe to my blog to be informed about my next post.
Also if you want to learn more about NLP here is an excellent course. You can start for free with the 7-day Free Trial.
Let me know if you think I can add something more to the post; I will try to incorporate it.
Cheers!!!
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>What my first Silver Medal taught me about Text Classification and Kaggle in general?</title>
      <link>https://mlwhiz.com/blog/2019/02/19/siver_medal_kaggle_learnings/</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/02/19/siver_medal_kaggle_learnings/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/silver/CV_vs_LB.png"></media:content>
      

      
      <description>Kaggle is an excellent place for learning. And I learned a lot of things from the recently concluded competition on Quora Insincere questions classification in which I got a rank of 182/4037. In this post, I will try to provide a summary of the things I tried. I will also try to summarize the ideas which I missed but were a part of other winning solutions.
As a side note: if you want to know more about NLP, I would like to recommend this awesome course on Natural Language Processing in the Advanced machine learning specialization.</description>

      <content:encoded>  
        
        <![CDATA[    Kaggle is an excellent place for learning. And I learned a lot of things from the recently concluded competition on Quora Insincere questions classification in which I got a rank of 182/4037. In this post, I will try to provide a summary of the things I tried. I will also try to summarize the ideas which I missed but were a part of other winning solutions.
As a side note: if you want to know more about NLP, I would like to recommend this awesome course on Natural Language Processing in the Advanced machine learning specialization. You can start for free with the 7-day Free Trial. This course covers a wide range of tasks in Natural Language Processing from basic to advanced: sentiment analysis, summarization, dialogue state tracking, to name a few. You can start for free with the 7-day Free Trial.
So first a little bit of summary about the competition for the uninitiated. In this competition, we had to develop models that identify and flag insincere questions. The challenge was not only a test for performance but also a test of efficient code writing skills. As it was a kernel competition with limited outside data options, competitors were limited to use only the word embeddings provided by the competition organizers. That means we were not allowed to use State of the art models like BERT. We were also limited in the sense that all our models should run in a time of 2 hours. So say bye bye to stacking and monster ensembles though some solutions were able to do this by making their code ultra-efficient. More on this later.
Some Kaggle Learnings: There were a couple of learnings about kaggle as a whole that I would like to share before jumping into my final solution:
1. Always trust your CV   One of the things that genuinely baffled a lot of people in this competition was that a good CV score did not necessarily translate well to a good LB score. The main reason for this was small test dataset(only 65k rows) in the first stage(around 15% of total test data).
A common theme on discussion forums was focussing on which submissions we should select as the final submission:
 The one having the best local CV? or The one having the best LB?  And while it seems simple to say to trust your CV, common sense goes for a toss when you see that your LB score is going down or remaining constant whenever your Local CV score increases.
Luckily I didn&amp;rsquo;t end up making the mistake of not trusting my CV score. Owing to a lot of excellent posts on Kaggle discussion board, I selected a kernel with Public LB score of 0.697 and a Local CV of 0.701, which was around &amp;gt;1200 rank on Public LB as of the final submission. It achieved a score of 0.702 and ranked 182 on the private LB.
While this seems like a straightforward choice post-facto, it was a hard decision to make at a time when you have at your disposal some public kernels having Public LB score &amp;gt;= 0.70
2. Use the code from public kernels but check for errors This Pytorch kernel by Benjamin Minixhofer is awesome. It made the base of many of my submissions for this competition. But this kernel had a mistake. It didn&amp;rsquo;t implement spatial dropout in the right way. You can find the correct implementation of spatial dropout in my post here or on my kernel. Implementing spatial dropout in the right way gave a boost of around 0.004 to the local CV.
Nonetheless, I learned pytorch using this kernel, and I am grateful to him for the same.
3. Don&amp;rsquo;t trust everything that goes on the discussion forums   I will talk about two things here:
 Seed tuning: While in the middle of the competition, everyone was trying to get the best possible rank on the public LB. It is just human nature. A lot of discussions was around good seeds and bad seeds for neural network initialization. While it seems okay in the first look, the conversation went a stage further where people started tuning seeds in the kernel as a hyper param. Some discussions even went on to say that it was a valid strategy. And that is where a large amount of overfitting to public LB started happening. The same submission would score 0.704 from 0.699 just by changing the seed. For a reference, that meant you could go from anywhere near 400-500 rank to top 50 only by changing seed in a public kernel. And that spelled disaster. Some people did that. They went up the public LB. Went crashing out at the private stage.
 CV score disclosure on discussion forums: We always try to gauge our performance against other people. In a lot of discussions, people provided their CV scores and corresponding Public LB scores. The scores were all over the place and not comparable due to Different CV schemes, No of folds in CV, Metric reported, Overfitting or just plain Wrong implementation of Cross-Validation. But they ended up influencing a lot of starters and newcomers.
  4. On that note, be active on Discussion forums and check public kernels regularly You can learn a lot just by being part of discussion forums and following public kernels. This competition had a lot of excellent public kernels on embeddings by SRK, Models by Shujian, and Preprocessing by Theo Viel which gave everyone a headstart. As the competition progressed, the discussions also evolved. There were discussions on speeding up the code, working approaches, F1 threshold finders, and other exciting topics which kept me occupied with new ideas and improvements.
Even after the end, while reading up discussions on solutions overview, I learned a lot. And I would say it is very ** vital to check out the winning solutions.**
5. Share a lot Sharing is everything on Kaggle. People have shared their codes as well as their ideas while competing as well as after the competition ended. It is only together that we can go forward. I like blogging, so I am sharing the knowledge via a series of blog posts on text classification. The first post talked about the different preprocessing techniques that work with Deep learning models and increasing embeddings coverage. In the second post, I talked through some basic conventional models like TFIDF, Count Vectorizer, Hashing, etc. that have been used in text classification and tried to access their performance to create a baseline. In the third post, I will delve deeper into Deep learning models and the various architectures we could use to solve the text Classification problem. To make this post platform generic I will try to write code in both Keras and Pytorch. We will try to use various other models which we were not able to use in this competition like ULMFit transfer learning approaches in the fourth post in the series.
It might take me a little time to write the whole series. Till then you can take a look at my other posts too: What Kagglers are using for Text Classification, which talks about various deep learning models in use in NLP and how to switch from Keras to Pytorch.
6. Beware of trolls :) We were going along happily towards the end of the competition with two weeks left. Scores were increasing slowly. The top players were somewhat stagnant. And then came Pavel and team with a Public LB score of 0.782. The next group had an LB score of 0.713. Such a huge difference. I was so sure that there was some leakage in the data which nobody has caught yet except for Pavel. I spent nearly half a day to do EDA again.
In the end, it turned out that what they did was scraping — nicely played!
They also have some pretty awesome ideas around including additional data, which could have worked but did not in this competition.
My Final Solution:   My main focus was on meta-feature engineering and on increasing embedding coverage and quality. That means I did not play much with various Neural Net architectures. Here are the things that I included in my final submission:
 I noticed that Glove embeddings were doing good on the local CV but not on LB, while meta embeddings(mean of glove and paragram) were doing good on LB but not that good on the CV. I took a mixed approach so some of my models are trained with only glove embedding and some on meta embeddings. Included four more features in embedding. Thus my embedding was a 304-dimensional vector. The four new values corresponded to title case flag, uppercase flag, Textblob word polarity, textblob word subjectivity Found out NER tokens from the whole train and test data using spacy and kept the tokens and the entities in a dict. I used this dict to create extra features like counts of GPE, PERSON, ORG, NORP, WORK_OF_ART.Added some value and were highly correlated with the target. Other features that I used include total_length,capitals,words_vs_unique as well as some engineered features like sum_feat(sum of expletives), question_start_with_why, question_start_with_how_or_what, question_start_with_do_or_are. Might not have added much value but still kept them. My final solution consisted of a stacked ensemble for four models. I stacked the four models using Logistic regression(with positive weights and 0 intercept) and gave the weights as a list in the final kernel.  You can find the kernel for my final submission here.
Tips and Tricks used in other solutions: 1. Increasing Embeddings Coverage: In the third place solution kernel, wowfattie uses stemming, lemmatization, capitalize, lower, uppercase, as well as embedding of the nearest word using a spell checker to get embeddings for all words in his vocab. Such a great idea. I liked this solution the best as it can do what I was trying to do and finished at a pretty good place. Also, the code is very clean.
from nltk.stem import PorterStemmer ps = PorterStemmer() from nltk.stem.lancaster import LancasterStemmer lc = LancasterStemmer() from nltk.stem import SnowballStemmer sb = SnowballStemmer(&amp;#34;english&amp;#34;) def load_glove(word_dict, lemma_dict): EMBEDDING_FILE = &amp;#39;../input/embeddings/glove.840B.300d/glove.840B.300d.txt&amp;#39; def get_coefs(word,*arr): return word, np.asarray(arr, dtype=&amp;#39;float32&amp;#39;) embeddings_index = dict(get_coefs(*o.split(&amp;#34; &amp;#34;)) for o in open(EMBEDDING_FILE)) embed_size = 300 nb_words = len(word_dict)&#43;1 embedding_matrix = np.zeros((nb_words, embed_size), dtype=np.float32) unknown_vector = np.zeros((embed_size,), dtype=np.float32) - 1. print(unknown_vector[:5]) for key in tqdm(word_dict): word = key embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue word = key.lower() embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue word = key.upper() embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue word = key.capitalize() embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue word = ps.stem(key) embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue word = lc.stem(key) embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue word = sb.stem(key) embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue word = lemma_dict[key] embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue if len(key) &amp;gt; 1: word = correction(key) embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue embedding_matrix[word_dict[key]] = unknown_vector return embedding_matrix, nb_words  2. Checkpoint Ensembling: Get a lot of models at no cost. Most of the winning solutions have some version of checkpoint ensembling. For the third place solution, the predictions are a weighted average of predictions after the 4th epoch and predictions after the 5th epoch. I got this idea but forgot to implement it in my ensemble based kernel submission.
3. Meta Embeddings: A lot of winning solutions ended up using weighted meta embeddings where they provided a higher weight to the Glove embedding. Some solutions also used concatenated embeddings.
4. Model Architecture: One surprising thing I saw people doing was to use a 1Dconv layer just after the Bidirectional layer. For example, This is the architecture used by the team that placed first in the competition.
  5. Bucketing/Variable Sequence Length and increased hidden units: Another thing I noticed is the increased number of hidden units as compared to many public kernels. Most of the public kernels used a hidden unit size of 60 due to time constraints. I used 80 units at the cost of training one less network. A lot of high scoring kernels were able to use a higher number of hidden units owing to variable sequence length idea or bucketing. From the 1st place kernel discussion:
 We do not pad sequences to the same length based on the whole data, but just on a batch level. That means we conduct padding and truncation on the data generator level for each batch separately, so that length of the sentences in a batch can vary in size. Additionally, we further improved this by not truncating based on the length of the longest sequence in the batch but based on the 95% percentile of lengths within the sequence. This improved runtime heavily and kept accuracy quite robust on single model level, and improved it by being able to average more models.
 Also from 7th place discussion:
 Bucketing is to make a minibatch from instances that have similar lengths to alleviate the cost of padding. This makes the training speed more than 3x faster, and thus I can run 9 epochs for each split of 5-fold.
 Thus the use of this technique also allowed some competitors to fit many more epochs in less time and run more models at the same time. Pretty Neat!
6. For those winners who didn&amp;rsquo;t use bucketing, Maxlen = 72 was too large: Most of us saw a distribution of question length and took the length that covered maximum questions fully as the maxlen parameter. I never tried to tune it, but it seems like it could have been tuned. One of the tricks was to use maxlen ranging from 35 to 60. This made the kernels run a lot faster.
7. Time taking models/complex architectures like Capsule were mostly not used: Most of the winning solutions didn&amp;rsquo;t use capsule networks as they took a lot of time to train.
8. Backprop errors on embeddings weights in last few epochs: Another thing I saw was in the 18th place kernel which uses a single model
if epoch &amp;gt;= 3: model.embedding.embeddings.weight.requires_grad = True Conclusion: It was a good and long 2-month competition, and I learned a lot about Text and NLP during this time. I want to emphasize here is that I ended up trying a lot of things that didn&amp;rsquo;t work before reaching my final solution. It was a little frustrating at times, but in the end, I was happy that I ended up with the best data science practices. Would also like to thank Kaggle master Kazanova who along with some of his friends released a “How to win a data science competition” Coursera course. I learned a lot from this course.
Let me know in the comments if you think something is missing/wrong or if I could add more tips/tricks for this competition.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>NLP  Learning Series: Part 2 - Conventional Methods for Text Classification</title>
      <link>https://mlwhiz.com/blog/2019/02/08/deeplearning_nlp_conventional_methods/</link>
      <pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/02/08/deeplearning_nlp_conventional_methods/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/tfidf.png"></media:content>
      

      
      <description>This is the second post of the NLP Text classification series. To give you a recap, recently I started up with an NLP text classification competition on Kaggle called Quora Question insincerity challenge. And I thought to share the knowledge via a series of blog posts on text classification. The first post talked about the various preprocessing techniques that work with Deep learning models and increasing embeddings coverage. In this post, I will try to take you through some basic conventional models like TFIDF, Count Vectorizer, Hashing etc.</description>

      <content:encoded>  
        
        <![CDATA[  This is the second post of the NLP Text classification series. To give you a recap, recently I started up with an NLP text classification competition on Kaggle called Quora Question insincerity challenge. And I thought to share the knowledge via a series of blog posts on text classification. The first post talked about the various preprocessing techniques that work with Deep learning models and increasing embeddings coverage. In this post, I will try to take you through some basic conventional models like TFIDF, Count Vectorizer, Hashing etc. that have been used in text classification and try to access their performance to create a baseline. We will delve deeper into Deep learning models in the third post which will focus on different architectures for solving the text classification problem. We will try to use various other models which we were not able to use in this competition like ULMFit transfer learning approaches in the fourth post in the series.
As a side note: if you want to know more about NLP, I would like to recommend this awesome course on Natural Language Processing in the Advanced machine learning specialization. You can start for free with the 7-day Free Trial. This course covers a wide range of tasks in Natural Language Processing from basic to advanced: sentiment analysis, summarization, dialogue state tracking, to name a few. You can start for free with the 7-day Free Trial.
It might take me a little time to write the whole series. Till then you can take a look at my other posts too: What Kagglers are using for Text Classification, which talks about various deep learning models in use in NLP and how to switch from Keras to Pytorch.
So again we start with the first step: Preprocessing.
Basic Preprocessing Techniques for text data(Continued) So in the last post, we talked about various preprocessing methods for text for deep learning purpose. Most of the preprocessing for conventional methods remains the same. We will still remove special characters, punctuations, and contractions. But We also may want to do stemming/lemmatization when it comes to conventional methods. Let us talk about them.
 For grammatical reasons, documents are going to use different forms of a word, such as organize, organizes, and organizing. Additionally, there are families of derivationally related words with similar meanings, such as democracy, democratic, and democratization.
 Since we are going to create features for words in the feature creation step, it makes sense to reduce words to a common denominator so that &amp;lsquo;organize&amp;rsquo;,&amp;lsquo;organizes&amp;rsquo; and &amp;lsquo;organizing&amp;rsquo; could be referred to by a single word &amp;lsquo;organize&amp;rsquo;
a) Stemming Stemming is the process of converting words to their base forms using crude Heuristic rules. For example, one rule could be to remove &amp;rsquo;s&amp;rsquo; from the end of any word, so that &amp;lsquo;cats&amp;rsquo; becomes &amp;lsquo;cat&amp;rsquo;. or another rule could be to replace &amp;lsquo;ies&amp;rsquo; with &amp;lsquo;i&amp;rsquo; so that &amp;lsquo;ponies becomes &amp;lsquo;poni&amp;rsquo;. One of the main point to note here is that when we stem the word we might get a nonsense word like &amp;lsquo;poni&amp;rsquo;. But it will still work for our use case as we count the number of occurrences of a particular word and not focus on the meanings of these words in conventional methods. It doesn&amp;rsquo;t work with deep learning for precisely the same reason.
  We can do this pretty simply by using this function in python.
from nltk.stem import SnowballStemmer from nltk.tokenize.toktok import ToktokTokenizer def stem_text(text): tokenizer = ToktokTokenizer() stemmer = SnowballStemmer(&amp;#39;english&amp;#39;) tokens = tokenizer.tokenize(text) tokens = [token.strip() for token in tokens] tokens = [stemmer.stem(token) for token in tokens] return &amp;#39; &amp;#39;.join(tokens) b) Lemmatization Lemmatization is very similar to stemming but it aims to remove endings only if the base form is present in a dictionary.
from nltk.stem import WordNetLemmatizer from nltk.tokenize.toktok import ToktokTokenizer def lemma_text(text): tokenizer = ToktokTokenizer() tokens = tokenizer.tokenize(text) tokens = [token.strip() for token in tokens] tokens = [wordnet_lemmatizer.lemmatize(token) for token in tokens] return &amp;#39; &amp;#39;.join(tokens) Once we are done with processing a text, our text will necessarily go through these following steps.
def clean_sentence(x): x = x.lower() x = clean_text(x) x = clean_numbers(x) x = replace_typical_misspell(x) x = remove_stopwords(x) x = replace_contractions(x) x = lemma_text(x) x = x.replace(&amp;#34;&amp;#39;&amp;#34;,&amp;#34;&amp;#34;) return x Text Representation In Conventional Machine learning methods, we ought to create features for a text. There are a lot of representations that are present to achieve this. Let us talk about them one by one.
a) Bag of Words - Countvectorizer Features Suppose we have a series of sentences(documents)
X = [ &amp;#39;This is good&amp;#39;, &amp;#39;This is bad&amp;#39;, &amp;#39;This is awesome&amp;#39; ]    Bag of words will create a dictionary of the most common words in all the sentences. For the example above the dictionary would look like:
word_index {&amp;#39;this&amp;#39;:0,&amp;#39;is&amp;#39;:1,&amp;#39;good&amp;#39;:2,&amp;#39;bad&amp;#39;:3,&amp;#39;awesome&amp;#39;:4} And then encode the sentences using the above dict.
This is good - [1,1,1,0,0] This is bad - [1,1,0,1,0] This is awesome - [1,1,0,0,1] We could do this pretty simply in Python by using the CountVectorizer class from Python. Don&amp;rsquo;t worry much about the heavy name, it just does what I explained above. It has a lot of parameters most significant of which are:
 ngram_range: I specify in the code (1,3). This means that unigrams, bigrams, and trigrams will be taken into account while creating features. min_df: Minimum no of time an ngram should appear in a corpus to be used as a feature.  cnt_vectorizer = CountVectorizer(dtype=np.float32, strip_accents=&amp;#39;unicode&amp;#39;, analyzer=&amp;#39;word&amp;#39;,token_pattern=r&amp;#39;\w{1,}&amp;#39;, ngram_range=(1, 3),min_df=3) # we fit count vectorizer to get ngrams from both train and test data. cnt_vectorizer.fit(list(train_df.cleaned_text.values) &#43; list(test_df.cleaned_text.values)) xtrain_cntv = cnt_vectorizer.transform(train_df.cleaned_text.values) xtest_cntv = cnt_vectorizer.transform(test_df.cleaned_text.values) We could then use these features with any machine learning classification model like Logistic Regression, Naive Bayes, SVM or LightGBM as we would like. For example:
# Fitting a simple Logistic Regression on CV Feats clf = LogisticRegression(C=1.0) clf.fit(xtrain_cntv,y_train) Here is a link to a kernel where I tried these features on the Quora Dataset. If you like it please don&amp;rsquo;t forget to upvote.
b) TFIDF Features TFIDF is a simple technique to find features from sentences. While in Count features we take count of all the words/ngrams present in a document, with TFIDF we take features only for the significant words. How do we do that? If you think of a document in a corpus, we will consider two things about any word in that document:
   Term Frequency: How important is the word in the document?  $$TF(word\ in\ a\ document) = \dfrac{No\ of\ occurances\ of\ that\ word\ in\ document}{No\ of\ words\ in\ document}$$
 Inverse Document Frequency: How important the term is in the whole corpus?  $$IDF(word\ in\ a\ corpus) = -log(ratio\ of\ documents\ that\ include\ the\ word)$$
TFIDF then is just multiplication of these two scores.
Intuitively, One can understand that a word is important if it occurs many times in a document. But that creates a problem. Words like &amp;ldquo;a&amp;rdquo;, &amp;ldquo;the&amp;rdquo; occur many times in sentence. Their TF score will always be high. We solve that by using Inverse Document frequency, which is high if the word is rare, and low if the word is common across the corpus.
In essence, we want to find important words in a document which are also not very common.
We could do this pretty simply in Python by using the TFIDFVectorizer class from Python. It has a lot of parameters most significant of which are:
 ngram_range: I specify in the code (1,3). This means that unigrams, bigrams, and trigrams will be taken into account while creating features. min_df: Minimum no of time an ngram should appear in a corpus to be used as a feature.  # Always start with these features. They work (almost) everytime! tfv = TfidfVectorizer(dtype=np.float32, min_df=3, max_features=None, strip_accents=&amp;#39;unicode&amp;#39;, analyzer=&amp;#39;word&amp;#39;,token_pattern=r&amp;#39;\w{1,}&amp;#39;, ngram_range=(1, 3), use_idf=1,smooth_idf=1,sublinear_tf=1, stop_words = &amp;#39;english&amp;#39;) # Fitting TF-IDF to both training and test sets (semi-supervised learning) tfv.fit(list(train_df.cleaned_text.values) &#43; list(test_df.cleaned_text.values)) xtrain_tfv = tfv.transform(train_df.cleaned_text.values) xvalid_tfv = tfv.transform(test_df.cleaned_text.values) Again, we could use these features with any machine learning classification model like Logistic Regression, Naive Bayes, SVM or LightGBM as we would like. Here is a link to a kernel where I tried these features on the Quora Dataset. If you like it please don&amp;rsquo;t forget to upvote.
c) Hashing Features Normally there will be a lot of ngrams in a document corpus. The number of features that our TFIDFVectorizer generated was in excess of 2,00,000 features. This might lead to a problem on very large datasets as we have to hold a very large vocabulary dictionary in memory. One way to counter this is to use the Hash Trick.
  One can think of hashing as a single function which maps any ngram to a number range for example between 0 to 1024. Now we don&amp;rsquo;t have to store our ngrams in a dictionary. We can just use the function to get the index of any word, rather than getting the index from a dictionary.
Since there can be more than 1024 ngrams, different ngrams might map to the same number, and this is called collision. The larger the range we provide our Hashing function, the less is the chance of collisions.
We could do this pretty simply in Python by using the HashingVectorizer class from Python. It has a lot of parameters most significant of which are:
 ngram_range: I specify in the code (1,3). This means that unigrams, bigrams, and trigrams will be taken into account while creating features. n_features: No of features you want to consider. The range I gave above.  # Always start with these features. They work (almost) everytime! hv = HashingVectorizer(dtype=np.float32, strip_accents=&amp;#39;unicode&amp;#39;, analyzer=&amp;#39;word&amp;#39;, ngram_range=(1, 4),n_features=2**12,non_negative=True) # Fitting Hash Vectorizer to both training and test sets (semi-supervised learning) hv.fit(list(train_df.cleaned_text.values) &#43; list(test_df.cleaned_text.values)) xtrain_hv = hv.transform(train_df.cleaned_text.values) xvalid_hv = hv.transform(test_df.cleaned_text.values) y_train = train_df.target.values Here is a link to a kernel where I tried these features on the Quora Dataset. If you like it please don&amp;rsquo;t forget to upvote.
d) Word2vec Features We already talked a little about word2vec in the previous post. We can use the word to vec features to create sentence level feats also. We want to create a d dimensional vector for sentence. For doing this, we will simply average the word embedding of all the words in a sentence.
  We can do this in Python using the following functions.
# load the GloVe vectors in a dictionary: def load_glove_index(): EMBEDDING_FILE = &amp;#39;../input/embeddings/glove.840B.300d/glove.840B.300d.txt&amp;#39; def get_coefs(word,*arr): return word, np.asarray(arr, dtype=&amp;#39;float32&amp;#39;)[:300] embeddings_index = dict(get_coefs(*o.split(&amp;#34; &amp;#34;)) for o in open(EMBEDDING_FILE)) return embeddings_index embeddings_index = load_glove_index() print(&amp;#39;Found %sword vectors.&amp;#39; % len(embeddings_index)) from nltk.corpus import stopwords stop_words = stopwords.words(&amp;#39;english&amp;#39;) def sent2vec(s): words = str(s).lower() words = word_tokenize(words) words = [w for w in words if not w in stop_words] words = [w for w in words if w.isalpha()] M = [] for w in words: try: M.append(embeddings_index[w]) except: continue M = np.array(M) v = M.sum(axis=0) if type(v) != np.ndarray: return np.zeros(300) return v / np.sqrt((v ** 2).sum()) # create glove features xtrain_glove = np.array([sent2vec(x) for x in tqdm(train_df.cleaned_text.values)]) xtest_glove = np.array([sent2vec(x) for x in tqdm(test_df.cleaned_text.values)]) Here is a link to a kernel where I tried these features on the Quora Dataset. If you like it please don&amp;rsquo;t forget to upvote.
Results Here are the results of different approaches on the Kaggle Dataset. I ran a 5 fold Stratified CV.
  Here is the code. If you like it please don&amp;rsquo;t forget to upvote. Also note that I didn&amp;rsquo;t work on tuning the models, so these results are only cursory. You can try to squeeze more performance by performing hyperparams tuning using hyperopt or just old fashioned Grid-search and the performance of models may change after that substantially.
Conclusion While Deep Learning works a lot better for NLP classification task, it still makes sense to have an understanding of how these problems were solved in the past, so that we can appreciate the nature of the problem. I have tried to provide a perspective on the conventional methods and one should experiment with them too to create baselines before moving to Deep Learning methods. If you want to learn more about NLP here is an awesome course. You can start for free with the 7-day Free Trial. If you think I can add something to the flow, do mention it in the comments.
Endnotes and References This post is a result of an effort of a lot of excellent Kagglers and I will try to reference them in this section. If I leave out someone, do understand that it was not my intention to do so.
 Approaching (Almost) Any NLP Problem on Kaggle How to: Preprocessing when using embeddings  ]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>NLP  Learning Series: Part 1 - Text Preprocessing Methods for Deep Learning</title>
      <link>https://mlwhiz.com/blog/2019/01/17/deeplearning_nlp_preprocess/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/01/17/deeplearning_nlp_preprocess/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/text_processing_flow_1.png"></media:content>
      

      
      <description>Recently, I started up with an NLP competition on Kaggle called Quora Question insincerity challenge. It is an NLP Challenge on text classification and as the problem has become more clear after working through the competition as well as by going through the invaluable kernels put up by the kaggle experts, I thought of sharing the knowledge.
Since we have a large amount of material to cover, I am splitting this post into a series of posts.</description>

      <content:encoded>  
        
        <![CDATA[  Recently, I started up with an NLP competition on Kaggle called Quora Question insincerity challenge. It is an NLP Challenge on text classification and as the problem has become more clear after working through the competition as well as by going through the invaluable kernels put up by the kaggle experts, I thought of sharing the knowledge.
Since we have a large amount of material to cover, I am splitting this post into a series of posts. The first post i.e. this one will be based on preprocessing techniques that work with Deep learning models and we will also talk about increasing embeddings coverage. In the second post, I will try to take you through some basic conventional models like TFIDF, Count Vectorizer, Hashing etc. that have been used in text classification and try to access their performance to create a baseline. We will delve deeper into Deep learning models in the third post which will focus on different architectures for solving the text classification problem. We will try to use various other models which we were not able to use in this competition like ULMFit transfer learning approaches in the fourth post in the series.
As a side note: if you want to know more about NLP, I would like to recommend this awesome course on Natural Language Processing in the Advanced machine learning specialization. You can start for free with the 7-day Free Trial. This course covers a wide range of tasks in Natural Language Processing from basic to advanced: sentiment analysis, summarization, dialogue state tracking, to name a few. You can start for free with the 7-day Free Trial.
It might take me a little time to write the whole series. Till then you can take a look at my other posts: What Kagglers are using for Text Classification, which talks about various deep learning models in use in NLP and how to switch from Keras to Pytorch.
So first let me start with explaining a little more about the text classification problem. Text classification is a common task in natural language processing, which transforms a sequence of a text of indefinite length into a category of text. How could you use that?
 To find the sentiment of a review. Find toxic comments on a platform like Facebook Find Insincere questions on Quora. A current ongoing competition on kaggle Find fake reviews on websites Will a text advert get clicked or not?  Now each of these problems has something in common. From a Machine Learning perspective, these are essentially the same problem with just the target labels changing and nothing else. With that said, the addition of business knowledge can help make these models more robust and that is what we want to incorporate while preprocessing the data for test classification. While the preprocessing pipeline I am focussing on in this post is mainly centered around Deep Learning but most of it will also be applicable to conventional machine learning models too.
But let me first go through the flow of a deep learning pipeline for text data before going through all the steps to get a higher level perspective about the whole process.
  We normally start with cleaning up the text data and performing basic EDA. Here we try to improve our data quality by cleaning up the data. We also try to improve the quality of our word2vec embeddings by removing OOV(Out-of-Vocabulary) words. These first two steps normally don&amp;rsquo;t have much order between them and I generally go back and forth between these two steps. Next, we create a representation for text that could be fed into a deep learning model. We then start with creating our models and training them. Finally, we evaluate the models using appropriate metrics and get approval from respective shareholders to deploy our models. Don&amp;rsquo;t worry if these terms don&amp;rsquo;t make much sense now. I will try to explain them through the course of this article.
Here at this junction, let us take a little detour to talk a little about word embeddings. We will have to think about them while preprocessing data for our Deep Learning models.
A Primer on word2vec embeddings: We need to have a way to represent words in a vocab. One way to do that could be to use One hot encoding of word vectors but that is not really a good choice. One of the major reasons is that the one-hot word vectors cannot accurately express the similarity between different words, such as the cosine similarity.
$$\frac{\boldsymbol{x}^\top \boldsymbol{y}}{|\boldsymbol{x}| |\boldsymbol{y}|} \in [-1, 1].$$
Given the structure of one hot encoded vectors, the similarity is always going to come as 0 between different words. Another reason is that as the size of vocabulary increases these one hot encoded vectors become very large.
Word2Vec overcomes the above difficulties by providing us with a fixed length vector representation of words and by capturing the similarity and analogy relationships between different words.
  Word2vec vectors of words are learned in such a way that they allow us to learn different analogies. It enables us to do algebraic manipulations on words which were not possible before. For example: What is king - man &#43; woman? It comes out to be Queen.
Word2Vec vectors also help us to find out the similarity between words. If we try to find similar words to &amp;ldquo;good&amp;rdquo;, we will find awesome, great etc. It is this property of word2vec that makes it invaluable for text classification. Now our deep learning network understands that &amp;ldquo;good&amp;rdquo; and &amp;ldquo;great&amp;rdquo; are essentially words with similar meaning.
Thus in very simple terms, word2vec creates vectors for words. Thus we have a d dimensional vector for every word(common bigrams too) in a dictionary. We normally use pretrained word vectors which are provided to us by others after training on large corpora of texts like Wikipedia, twitter etc. The most commonly used pretrained word vectors are Glove and Fasttext with 300-dimensional word vectors. We are going to use Glove in this post.
Basic Preprocessing Techniques for text data: In most of the cases, we observe that text data is not entirely clean. Data coming from different sources have different characteristics and that makes Text Preprocessing as one of the most important steps in the classification pipeline. For example, Text data from Twitter is totally different from text data on Quora, or some news/blogging platform, and thus would need to be treated differently. Helpfully, the techniques I am going to talk about in this post are generic enough for any kind of data you might encounter in the jungles of NLP.
a) Cleaning Special Characters and Removing Punctuations: Our preprocessing pipeline depends a lot on the word2vec embeddings we are going to use for our classification task. In principle our preprocessing should match the preprocessing that was used before training the word embedding. Since most of the embeddings don&amp;rsquo;t provide vector values for punctuations and other special chars, the first thing you want to do is to get rid of is the special characters in your text data. These are some of the special chars that were there in the Quora Question data and we use replace function to get rid of these special chars.
# Some preprocesssing that will be common to all the text classification methods you will see.  puncts = [&amp;#39;,&amp;#39;, &amp;#39;.&amp;#39;, &amp;#39;&amp;#34;&amp;#39;, &amp;#39;:&amp;#39;, &amp;#39;)&amp;#39;, &amp;#39;(&amp;#39;, &amp;#39;-&amp;#39;, &amp;#39;!&amp;#39;, &amp;#39;?&amp;#39;, &amp;#39;|&amp;#39;, &amp;#39;;&amp;#39;, &amp;#34;&amp;#39;&amp;#34;, &amp;#39;$&amp;#39;, &amp;#39;&amp;amp;&amp;#39;, &amp;#39;/&amp;#39;, &amp;#39;[&amp;#39;, &amp;#39;]&amp;#39;, &amp;#39;&amp;gt;&amp;#39;, &amp;#39;%&amp;#39;, &amp;#39;=&amp;#39;, &amp;#39;#&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;&#43;&amp;#39;, &amp;#39;\\&amp;#39;, &amp;#39;•&amp;#39;, &amp;#39;~&amp;#39;, &amp;#39;@&amp;#39;, &amp;#39;£&amp;#39;, &amp;#39;·&amp;#39;, &amp;#39;_&amp;#39;, &amp;#39;{&amp;#39;, &amp;#39;}&amp;#39;, &amp;#39;©&amp;#39;, &amp;#39;^&amp;#39;, &amp;#39;®&amp;#39;, &amp;#39;`&amp;#39;, &amp;#39;&amp;lt;&amp;#39;, &amp;#39;→&amp;#39;, &amp;#39;°&amp;#39;, &amp;#39;€&amp;#39;, &amp;#39;™&amp;#39;, &amp;#39;›&amp;#39;, &amp;#39;♥&amp;#39;, &amp;#39;←&amp;#39;, &amp;#39;×&amp;#39;, &amp;#39;§&amp;#39;, &amp;#39;″&amp;#39;, &amp;#39;′&amp;#39;, &amp;#39;Â&amp;#39;, &amp;#39;█&amp;#39;, &amp;#39;½&amp;#39;, &amp;#39;à&amp;#39;, &amp;#39;…&amp;#39;, &amp;#39;“&amp;#39;, &amp;#39;★&amp;#39;, &amp;#39;”&amp;#39;, &amp;#39;–&amp;#39;, &amp;#39;●&amp;#39;, &amp;#39;â&amp;#39;, &amp;#39;►&amp;#39;, &amp;#39;−&amp;#39;, &amp;#39;¢&amp;#39;, &amp;#39;²&amp;#39;, &amp;#39;¬&amp;#39;, &amp;#39;░&amp;#39;, &amp;#39;¶&amp;#39;, &amp;#39;↑&amp;#39;, &amp;#39;±&amp;#39;, &amp;#39;¿&amp;#39;, &amp;#39;▾&amp;#39;, &amp;#39;═&amp;#39;, &amp;#39;¦&amp;#39;, &amp;#39;║&amp;#39;, &amp;#39;―&amp;#39;, &amp;#39;¥&amp;#39;, &amp;#39;▓&amp;#39;, &amp;#39;—&amp;#39;, &amp;#39;‹&amp;#39;, &amp;#39;─&amp;#39;, &amp;#39;▒&amp;#39;, &amp;#39;：&amp;#39;, &amp;#39;¼&amp;#39;, &amp;#39;⊕&amp;#39;, &amp;#39;▼&amp;#39;, &amp;#39;▪&amp;#39;, &amp;#39;†&amp;#39;, &amp;#39;■&amp;#39;, &amp;#39;’&amp;#39;, &amp;#39;▀&amp;#39;, &amp;#39;¨&amp;#39;, &amp;#39;▄&amp;#39;, &amp;#39;♫&amp;#39;, &amp;#39;☆&amp;#39;, &amp;#39;é&amp;#39;, &amp;#39;¯&amp;#39;, &amp;#39;♦&amp;#39;, &amp;#39;¤&amp;#39;, &amp;#39;▲&amp;#39;, &amp;#39;è&amp;#39;, &amp;#39;¸&amp;#39;, &amp;#39;¾&amp;#39;, &amp;#39;Ã&amp;#39;, &amp;#39;⋅&amp;#39;, &amp;#39;‘&amp;#39;, &amp;#39;∞&amp;#39;, &amp;#39;∙&amp;#39;, &amp;#39;）&amp;#39;, &amp;#39;↓&amp;#39;, &amp;#39;、&amp;#39;, &amp;#39;│&amp;#39;, &amp;#39;（&amp;#39;, &amp;#39;»&amp;#39;, &amp;#39;，&amp;#39;, &amp;#39;♪&amp;#39;, &amp;#39;╩&amp;#39;, &amp;#39;╚&amp;#39;, &amp;#39;³&amp;#39;, &amp;#39;・&amp;#39;, &amp;#39;╦&amp;#39;, &amp;#39;╣&amp;#39;, &amp;#39;╔&amp;#39;, &amp;#39;╗&amp;#39;, &amp;#39;▬&amp;#39;, &amp;#39;❤&amp;#39;, &amp;#39;ï&amp;#39;, &amp;#39;Ø&amp;#39;, &amp;#39;¹&amp;#39;, &amp;#39;≤&amp;#39;, &amp;#39;‡&amp;#39;, &amp;#39;√&amp;#39;, ] def clean_text(x): x = str(x) for punct in puncts: if punct in x: x = x.replace(punct, f&amp;#39; {punct} &amp;#39;) return x This could also have been done with the help of a simple regex. But I normally like the above way of doing things as it helps to understand the sort of characters we are removing from our data.
def clean_text(x): pattern = r&amp;#39;[^a-zA-z0-9\s]&amp;#39; text = re.sub(pattern, &amp;#39;&amp;#39;, x) return x b) Cleaning Numbers: Why do we want to replace numbers with #s? Because most embeddings have preprocessed their text like this.
Small Python Trick: We use an if statement in the code below to check beforehand if a number exists in a text. It is as an if is always fast than a re.sub command and most of our text doesn&amp;rsquo;t contain numbers.
def clean_numbers(x): if bool(re.search(r&amp;#39;\d&amp;#39;, x)): x = re.sub(&amp;#39;[0-9]{5,}&amp;#39;, &amp;#39;#####&amp;#39;, x) x = re.sub(&amp;#39;[0-9]{4}&amp;#39;, &amp;#39;####&amp;#39;, x) x = re.sub(&amp;#39;[0-9]{3}&amp;#39;, &amp;#39;###&amp;#39;, x) x = re.sub(&amp;#39;[0-9]{2}&amp;#39;, &amp;#39;##&amp;#39;, x) return x c) Removing Misspells: It always helps to find out misspells in the data. As those word embeddings are not present in the word2vec, we should replace words with their correct spellings to get better embedding coverage. The following code artifact is an adaptation of Peter Norvig&amp;rsquo;s spell checker. It uses word2vec ordering of words to approximate word probabilities. As Google word2vec apparently orders words in decreasing order of frequency in the training corpus. You can use this to find out some misspelled words in the data you have.
# This comes from CPMP script in the Quora questions similarity challenge.  import re from collections import Counter import gensim import heapq from operator import itemgetter from multiprocessing import Pool model = gensim.models.KeyedVectors.load_word2vec_format(&amp;#39;../input/embeddings/GoogleNews-vectors-negative300/GoogleNews-vectors-negative300.bin&amp;#39;, binary=True) words = model.index2word w_rank = {} for i,word in enumerate(words): w_rank[word] = i WORDS = w_rank def words(text): return re.findall(r&amp;#39;\w&#43;&amp;#39;, text.lower()) def P(word): &amp;#34;Probability of `word`.&amp;#34; # use inverse of rank as proxy # returns 0 if the word isn&amp;#39;t in the dictionary return - WORDS.get(word, 0) def correction(word): &amp;#34;Most probable spelling correction for word.&amp;#34; return max(candidates(word), key=P) def candidates(word): &amp;#34;Generate possible spelling corrections for word.&amp;#34; return (known([word]) or known(edits1(word)) or known(edits2(word)) or [word]) def known(words): &amp;#34;The subset of `words` that appear in the dictionary of WORDS.&amp;#34; return set(w for w in words if w in WORDS) def edits1(word): &amp;#34;All edits that are one edit away from `word`.&amp;#34; letters = &amp;#39;abcdefghijklmnopqrstuvwxyz&amp;#39; splits = [(word[:i], word[i:]) for i in range(len(word) &#43; 1)] deletes = [L &#43; R[1:] for L, R in splits if R] transposes = [L &#43; R[1] &#43; R[0] &#43; R[2:] for L, R in splits if len(R)&amp;gt;1] replaces = [L &#43; c &#43; R[1:] for L, R in splits if R for c in letters] inserts = [L &#43; c &#43; R for L, R in splits for c in letters] return set(deletes &#43; transposes &#43; replaces &#43; inserts) def edits2(word): &amp;#34;All edits that are two edits away from `word`.&amp;#34; return (e2 for e1 in edits1(word) for e2 in edits1(e1)) def build_vocab(texts): sentences = texts.apply(lambda x: x.split()).values vocab = {} for sentence in sentences: for word in sentence: try: vocab[word] &#43;= 1 except KeyError: vocab[word] = 1 return vocab vocab = build_vocab(train.question_text) top_90k_words = dict(heapq.nlargest(90000, vocab.items(), key=itemgetter(1))) pool = Pool(4) corrected_words = pool.map(correction,list(top_90k_words.keys())) for word,corrected_word in zip(top_90k_words,corrected_words): if word!=corrected_word: print(word,&amp;#34;:&amp;#34;,corrected_word) Once we are through with finding misspelled data, the next thing remains to replace them using a misspell mapping and regex functions.
mispell_dict = {&amp;#39;colour&amp;#39;: &amp;#39;color&amp;#39;, &amp;#39;centre&amp;#39;: &amp;#39;center&amp;#39;, &amp;#39;favourite&amp;#39;: &amp;#39;favorite&amp;#39;, &amp;#39;travelling&amp;#39;: &amp;#39;traveling&amp;#39;, &amp;#39;counselling&amp;#39;: &amp;#39;counseling&amp;#39;, &amp;#39;theatre&amp;#39;: &amp;#39;theater&amp;#39;, &amp;#39;cancelled&amp;#39;: &amp;#39;canceled&amp;#39;, &amp;#39;labour&amp;#39;: &amp;#39;labor&amp;#39;, &amp;#39;organisation&amp;#39;: &amp;#39;organization&amp;#39;, &amp;#39;wwii&amp;#39;: &amp;#39;world war 2&amp;#39;, &amp;#39;citicise&amp;#39;: &amp;#39;criticize&amp;#39;, &amp;#39;youtu &amp;#39;: &amp;#39;youtube &amp;#39;, &amp;#39;Qoura&amp;#39;: &amp;#39;Quora&amp;#39;, &amp;#39;sallary&amp;#39;: &amp;#39;salary&amp;#39;, &amp;#39;Whta&amp;#39;: &amp;#39;What&amp;#39;, &amp;#39;narcisist&amp;#39;: &amp;#39;narcissist&amp;#39;, &amp;#39;howdo&amp;#39;: &amp;#39;how do&amp;#39;, &amp;#39;whatare&amp;#39;: &amp;#39;what are&amp;#39;, &amp;#39;howcan&amp;#39;: &amp;#39;how can&amp;#39;, &amp;#39;howmuch&amp;#39;: &amp;#39;how much&amp;#39;, &amp;#39;howmany&amp;#39;: &amp;#39;how many&amp;#39;, &amp;#39;whydo&amp;#39;: &amp;#39;why do&amp;#39;, &amp;#39;doI&amp;#39;: &amp;#39;do I&amp;#39;, &amp;#39;theBest&amp;#39;: &amp;#39;the best&amp;#39;, &amp;#39;howdoes&amp;#39;: &amp;#39;how does&amp;#39;, &amp;#39;mastrubation&amp;#39;: &amp;#39;masturbation&amp;#39;, &amp;#39;mastrubate&amp;#39;: &amp;#39;masturbate&amp;#39;, &amp;#34;mastrubating&amp;#34;: &amp;#39;masturbating&amp;#39;, &amp;#39;pennis&amp;#39;: &amp;#39;penis&amp;#39;, &amp;#39;Etherium&amp;#39;: &amp;#39;Ethereum&amp;#39;, &amp;#39;narcissit&amp;#39;: &amp;#39;narcissist&amp;#39;, &amp;#39;bigdata&amp;#39;: &amp;#39;big data&amp;#39;, &amp;#39;2k17&amp;#39;: &amp;#39;2017&amp;#39;, &amp;#39;2k18&amp;#39;: &amp;#39;2018&amp;#39;, &amp;#39;qouta&amp;#39;: &amp;#39;quota&amp;#39;, &amp;#39;exboyfriend&amp;#39;: &amp;#39;ex boyfriend&amp;#39;, &amp;#39;airhostess&amp;#39;: &amp;#39;air hostess&amp;#39;, &amp;#34;whst&amp;#34;: &amp;#39;what&amp;#39;, &amp;#39;watsapp&amp;#39;: &amp;#39;whatsapp&amp;#39;, &amp;#39;demonitisation&amp;#39;: &amp;#39;demonetization&amp;#39;, &amp;#39;demonitization&amp;#39;: &amp;#39;demonetization&amp;#39;, &amp;#39;demonetisation&amp;#39;: &amp;#39;demonetization&amp;#39;} def _get_mispell(mispell_dict): mispell_re = re.compile(&amp;#39;(%s)&amp;#39; % &amp;#39;|&amp;#39;.join(mispell_dict.keys())) return mispell_dict, mispell_re mispellings, mispellings_re = _get_mispell(mispell_dict) def replace_typical_misspell(text): def replace(match): return mispellings[match.group(0)] return mispellings_re.sub(replace, text) # Usage replace_typical_misspell(&amp;#34;Whta is demonitisation&amp;#34;) d) Removing Contractions: Contractions are words that we write with an apostrophe. Examples of contractions are words like &amp;ldquo;ain&amp;rsquo;t&amp;rdquo; or &amp;ldquo;aren&amp;rsquo;t&amp;rdquo;. Since we want to standardize our text, it makes sense to expand these contractions. Below we have done this using a contraction mapping and regex functions.
contraction_dict = {&amp;#34;ain&amp;#39;t&amp;#34;: &amp;#34;is not&amp;#34;, &amp;#34;aren&amp;#39;t&amp;#34;: &amp;#34;are not&amp;#34;,&amp;#34;can&amp;#39;t&amp;#34;: &amp;#34;cannot&amp;#34;, &amp;#34;&amp;#39;cause&amp;#34;: &amp;#34;because&amp;#34;, &amp;#34;could&amp;#39;ve&amp;#34;: &amp;#34;could have&amp;#34;, &amp;#34;couldn&amp;#39;t&amp;#34;: &amp;#34;could not&amp;#34;, &amp;#34;didn&amp;#39;t&amp;#34;: &amp;#34;did not&amp;#34;, &amp;#34;doesn&amp;#39;t&amp;#34;: &amp;#34;does not&amp;#34;, &amp;#34;don&amp;#39;t&amp;#34;: &amp;#34;do not&amp;#34;, &amp;#34;hadn&amp;#39;t&amp;#34;: &amp;#34;had not&amp;#34;, &amp;#34;hasn&amp;#39;t&amp;#34;: &amp;#34;has not&amp;#34;, &amp;#34;haven&amp;#39;t&amp;#34;: &amp;#34;have not&amp;#34;, &amp;#34;he&amp;#39;d&amp;#34;: &amp;#34;he would&amp;#34;,&amp;#34;he&amp;#39;ll&amp;#34;: &amp;#34;he will&amp;#34;, &amp;#34;he&amp;#39;s&amp;#34;: &amp;#34;he is&amp;#34;, &amp;#34;how&amp;#39;d&amp;#34;: &amp;#34;how did&amp;#34;, &amp;#34;how&amp;#39;d&amp;#39;y&amp;#34;: &amp;#34;how do you&amp;#34;, &amp;#34;how&amp;#39;ll&amp;#34;: &amp;#34;how will&amp;#34;, &amp;#34;how&amp;#39;s&amp;#34;: &amp;#34;how is&amp;#34;, &amp;#34;I&amp;#39;d&amp;#34;: &amp;#34;I would&amp;#34;, &amp;#34;I&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;I would have&amp;#34;, &amp;#34;I&amp;#39;ll&amp;#34;: &amp;#34;I will&amp;#34;, &amp;#34;I&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;I will have&amp;#34;,&amp;#34;I&amp;#39;m&amp;#34;: &amp;#34;I am&amp;#34;, &amp;#34;I&amp;#39;ve&amp;#34;: &amp;#34;I have&amp;#34;, &amp;#34;i&amp;#39;d&amp;#34;: &amp;#34;i would&amp;#34;, &amp;#34;i&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;i would have&amp;#34;, &amp;#34;i&amp;#39;ll&amp;#34;: &amp;#34;i will&amp;#34;, &amp;#34;i&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;i will have&amp;#34;,&amp;#34;i&amp;#39;m&amp;#34;: &amp;#34;i am&amp;#34;, &amp;#34;i&amp;#39;ve&amp;#34;: &amp;#34;i have&amp;#34;, &amp;#34;isn&amp;#39;t&amp;#34;: &amp;#34;is not&amp;#34;, &amp;#34;it&amp;#39;d&amp;#34;: &amp;#34;it would&amp;#34;, &amp;#34;it&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;it would have&amp;#34;, &amp;#34;it&amp;#39;ll&amp;#34;: &amp;#34;it will&amp;#34;, &amp;#34;it&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;it will have&amp;#34;,&amp;#34;it&amp;#39;s&amp;#34;: &amp;#34;it is&amp;#34;, &amp;#34;let&amp;#39;s&amp;#34;: &amp;#34;let us&amp;#34;, &amp;#34;ma&amp;#39;am&amp;#34;: &amp;#34;madam&amp;#34;, &amp;#34;mayn&amp;#39;t&amp;#34;: &amp;#34;may not&amp;#34;, &amp;#34;might&amp;#39;ve&amp;#34;: &amp;#34;might have&amp;#34;,&amp;#34;mightn&amp;#39;t&amp;#34;: &amp;#34;might not&amp;#34;,&amp;#34;mightn&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;might not have&amp;#34;, &amp;#34;must&amp;#39;ve&amp;#34;: &amp;#34;must have&amp;#34;, &amp;#34;mustn&amp;#39;t&amp;#34;: &amp;#34;must not&amp;#34;, &amp;#34;mustn&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;must not have&amp;#34;, &amp;#34;needn&amp;#39;t&amp;#34;: &amp;#34;need not&amp;#34;, &amp;#34;needn&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;need not have&amp;#34;,&amp;#34;o&amp;#39;clock&amp;#34;: &amp;#34;of the clock&amp;#34;, &amp;#34;oughtn&amp;#39;t&amp;#34;: &amp;#34;ought not&amp;#34;, &amp;#34;oughtn&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;ought not have&amp;#34;, &amp;#34;shan&amp;#39;t&amp;#34;: &amp;#34;shall not&amp;#34;, &amp;#34;sha&amp;#39;n&amp;#39;t&amp;#34;: &amp;#34;shall not&amp;#34;, &amp;#34;shan&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;shall not have&amp;#34;, &amp;#34;she&amp;#39;d&amp;#34;: &amp;#34;she would&amp;#34;, &amp;#34;she&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;she would have&amp;#34;, &amp;#34;she&amp;#39;ll&amp;#34;: &amp;#34;she will&amp;#34;, &amp;#34;she&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;she will have&amp;#34;, &amp;#34;she&amp;#39;s&amp;#34;: &amp;#34;she is&amp;#34;, &amp;#34;should&amp;#39;ve&amp;#34;: &amp;#34;should have&amp;#34;, &amp;#34;shouldn&amp;#39;t&amp;#34;: &amp;#34;should not&amp;#34;, &amp;#34;shouldn&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;should not have&amp;#34;, &amp;#34;so&amp;#39;ve&amp;#34;: &amp;#34;so have&amp;#34;,&amp;#34;so&amp;#39;s&amp;#34;: &amp;#34;so as&amp;#34;, &amp;#34;this&amp;#39;s&amp;#34;: &amp;#34;this is&amp;#34;,&amp;#34;that&amp;#39;d&amp;#34;: &amp;#34;that would&amp;#34;, &amp;#34;that&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;that would have&amp;#34;, &amp;#34;that&amp;#39;s&amp;#34;: &amp;#34;that is&amp;#34;, &amp;#34;there&amp;#39;d&amp;#34;: &amp;#34;there would&amp;#34;, &amp;#34;there&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;there would have&amp;#34;, &amp;#34;there&amp;#39;s&amp;#34;: &amp;#34;there is&amp;#34;, &amp;#34;here&amp;#39;s&amp;#34;: &amp;#34;here is&amp;#34;,&amp;#34;they&amp;#39;d&amp;#34;: &amp;#34;they would&amp;#34;, &amp;#34;they&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;they would have&amp;#34;, &amp;#34;they&amp;#39;ll&amp;#34;: &amp;#34;they will&amp;#34;, &amp;#34;they&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;they will have&amp;#34;, &amp;#34;they&amp;#39;re&amp;#34;: &amp;#34;they are&amp;#34;, &amp;#34;they&amp;#39;ve&amp;#34;: &amp;#34;they have&amp;#34;, &amp;#34;to&amp;#39;ve&amp;#34;: &amp;#34;to have&amp;#34;, &amp;#34;wasn&amp;#39;t&amp;#34;: &amp;#34;was not&amp;#34;, &amp;#34;we&amp;#39;d&amp;#34;: &amp;#34;we would&amp;#34;, &amp;#34;we&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;we would have&amp;#34;, &amp;#34;we&amp;#39;ll&amp;#34;: &amp;#34;we will&amp;#34;, &amp;#34;we&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;we will have&amp;#34;, &amp;#34;we&amp;#39;re&amp;#34;: &amp;#34;we are&amp;#34;, &amp;#34;we&amp;#39;ve&amp;#34;: &amp;#34;we have&amp;#34;, &amp;#34;weren&amp;#39;t&amp;#34;: &amp;#34;were not&amp;#34;, &amp;#34;what&amp;#39;ll&amp;#34;: &amp;#34;what will&amp;#34;, &amp;#34;what&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;what will have&amp;#34;, &amp;#34;what&amp;#39;re&amp;#34;: &amp;#34;what are&amp;#34;, &amp;#34;what&amp;#39;s&amp;#34;: &amp;#34;what is&amp;#34;, &amp;#34;what&amp;#39;ve&amp;#34;: &amp;#34;what have&amp;#34;, &amp;#34;when&amp;#39;s&amp;#34;: &amp;#34;when is&amp;#34;, &amp;#34;when&amp;#39;ve&amp;#34;: &amp;#34;when have&amp;#34;, &amp;#34;where&amp;#39;d&amp;#34;: &amp;#34;where did&amp;#34;, &amp;#34;where&amp;#39;s&amp;#34;: &amp;#34;where is&amp;#34;, &amp;#34;where&amp;#39;ve&amp;#34;: &amp;#34;where have&amp;#34;, &amp;#34;who&amp;#39;ll&amp;#34;: &amp;#34;who will&amp;#34;, &amp;#34;who&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;who will have&amp;#34;, &amp;#34;who&amp;#39;s&amp;#34;: &amp;#34;who is&amp;#34;, &amp;#34;who&amp;#39;ve&amp;#34;: &amp;#34;who have&amp;#34;, &amp;#34;why&amp;#39;s&amp;#34;: &amp;#34;why is&amp;#34;, &amp;#34;why&amp;#39;ve&amp;#34;: &amp;#34;why have&amp;#34;, &amp;#34;will&amp;#39;ve&amp;#34;: &amp;#34;will have&amp;#34;, &amp;#34;won&amp;#39;t&amp;#34;: &amp;#34;will not&amp;#34;, &amp;#34;won&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;will not have&amp;#34;, &amp;#34;would&amp;#39;ve&amp;#34;: &amp;#34;would have&amp;#34;, &amp;#34;wouldn&amp;#39;t&amp;#34;: &amp;#34;would not&amp;#34;, &amp;#34;wouldn&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;would not have&amp;#34;, &amp;#34;y&amp;#39;all&amp;#34;: &amp;#34;you all&amp;#34;, &amp;#34;y&amp;#39;all&amp;#39;d&amp;#34;: &amp;#34;you all would&amp;#34;,&amp;#34;y&amp;#39;all&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;you all would have&amp;#34;,&amp;#34;y&amp;#39;all&amp;#39;re&amp;#34;: &amp;#34;you all are&amp;#34;,&amp;#34;y&amp;#39;all&amp;#39;ve&amp;#34;: &amp;#34;you all have&amp;#34;,&amp;#34;you&amp;#39;d&amp;#34;: &amp;#34;you would&amp;#34;, &amp;#34;you&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;you would have&amp;#34;, &amp;#34;you&amp;#39;ll&amp;#34;: &amp;#34;you will&amp;#34;, &amp;#34;you&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;you will have&amp;#34;, &amp;#34;you&amp;#39;re&amp;#34;: &amp;#34;you are&amp;#34;, &amp;#34;you&amp;#39;ve&amp;#34;: &amp;#34;you have&amp;#34;} def _get_contractions(contraction_dict): contraction_re = re.compile(&amp;#39;(%s)&amp;#39; % &amp;#39;|&amp;#39;.join(contraction_dict.keys())) return contraction_dict, contraction_re contractions, contractions_re = _get_contractions(contraction_dict) def replace_contractions(text): def replace(match): return contractions[match.group(0)] return contractions_re.sub(replace, text) # Usage replace_contractions(&amp;#34;this&amp;#39;s a text with contraction&amp;#34;) Apart from the above techniques, there are other preprocessing techniques of text like Stemming, Lemmatization and Stopword Removal. Since these techniques are not used along with Deep Learning NLP models, we won&amp;rsquo;t talk about them.
Representation: Sequence Creation One of the things that have made Deep Learning the goto choice for NLP is the fact that we don&amp;rsquo;t really have to hand-engineer features from the text data. The deep learning algorithms take as input a sequence of text to learn the structure of text just like a human does. Since Machine cannot understand words they expect their data in numerical form. So we would like to represent out text data as a series of numbers. To understand how this is done we need to understand a little about the Keras Tokenizer function. One can use any other tokenizer also but keras tokenizer seems like a good choice for me.
a) Tokenizer: In simple words, a tokenizer is a utility function to split a sentence into words. keras.preprocessing.text.Tokenizer tokenizes(splits) the texts into tokens(words) while keeping only the most occurring words in the text corpus.
#Signature: Tokenizer(num_words=None, filters=&amp;#39;!&amp;#34;#$%&amp;amp;()*&#43;,-./:;&amp;lt;=&amp;gt;?@[\\]^_`{|}~\t\n&amp;#39;, lower=True, split=&amp;#39; &amp;#39;, char_level=False, oov_token=None, document_count=0, **kwargs) The num_words parameter keeps a prespecified number of words in the text only. This is helpful as we don&amp;rsquo;t want our models to get a lot of noise by considering words that occur very infrequently. In real-world data, most of the words we leave using num_words param are normally misspells. The tokenizer also filters some non-wanted tokens by default and converts the text into lowercase.
The tokenizer once fitted to the data also keeps an index of words(dictionary of words which we can use to assign a unique number to a word) which can be accessed by tokenizer.word_index. The words in the indexed dictionary are ranked in order of frequencies.
  So the whole code to use tokenizer is as follows:
from keras.preprocessing.text import Tokenizer ## Tokenize the sentences tokenizer = Tokenizer(num_words=max_features) tokenizer.fit_on_texts(list(train_X)&#43;list(test_X)) train_X = tokenizer.texts_to_sequences(train_X) test_X = tokenizer.texts_to_sequences(test_X) where train_X and test_X are lists of documents in the corpus.
b) Pad Sequence: Normally our model expects that each sequence(each training example) will be of the same length(same number of words/tokens). We can control this using the maxlen parameter.
For example:  
train_X = pad_sequences(train_X, maxlen=maxlen) test_X = pad_sequences(test_X, maxlen=maxlen) Now our train data contains a list of list of numbers. Each list has the same length. And we also have the word_index which is a dictionary of most occuring words in the text corpus.
Embedding Enrichment: As I said I will be using GLoVE Word2Vec embeddings to explain the enrichment. GLoVE pretrained vectors are trained on the Wikipedia corpus. (You can download them here). That means some of the words that might be present in your data might not be present in the embeddings. How could we deal with that? Let&amp;rsquo;s first load the Glove Embeddings first.
def load_glove_index(): EMBEDDING_FILE = &amp;#39;../input/embeddings/glove.840B.300d/glove.840B.300d.txt&amp;#39; def get_coefs(word,*arr): return word, np.asarray(arr, dtype=&amp;#39;float32&amp;#39;)[:300] embeddings_index = dict(get_coefs(*o.split(&amp;#34; &amp;#34;)) for o in open(EMBEDDING_FILE)) return embeddings_index glove_embedding_index = load_glove_index() Be sure to put the path of the folder where you download these GLoVE vectors. What does this glove_embedding_index contain? It is just a dictionary in which the key is the word and the value is the word vector, a np.array of length 300. The length of this dictionary is somewhere around a billion. Since we only want the embeddings of words that are in our word_index, we will create a matrix which just contains required embeddings.
  def create_glove(word_index,embeddings_index): emb_mean,emb_std = -0.005838499,0.48782197 all_embs = np.stack(embeddings_index.values()) embed_size = all_embs.shape[1] nb_words = min(max_features, len(word_index)) embedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size)) count_found = nb_words for word, i in tqdm(word_index.items()): if i &amp;gt;= max_features: continue embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[i] = embedding_vector else: count_found-=1 print(&amp;#34;Got embedding for &amp;#34;,count_found,&amp;#34; words.&amp;#34;) return embedding_matrix The above code works fine but is there a way that we can use the preprocessing in GLoVE to our advantage? Yes. When preprocessing was done for glove, the creators didn&amp;rsquo;t convert the words to lowercase. That means that it contains multiple variations of a word like &amp;lsquo;USA&amp;rsquo;, &amp;lsquo;usa&amp;rsquo; and &amp;lsquo;Usa&amp;rsquo;. That also means that in some cases while a word like &amp;lsquo;Word&amp;rsquo; is present, its analog in lowercase i.e. &amp;lsquo;word&amp;rsquo; is not present. We can get through this situation by using the below code.
def create_glove(word_index,embeddings_index): emb_mean,emb_std = -0.005838499,0.48782197 all_embs = np.stack(embeddings_index.values()) embed_size = all_embs.shape[1] nb_words = min(max_features, len(word_index)) embedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size)) count_found = nb_words for word, i in tqdm(word_index.items()): if i &amp;gt;= max_features: continue embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[i] = embedding_vector else: if word.islower(): # try to get the embedding of word in titlecase if lowercase is not present embedding_vector = embeddings_index.get(word.capitalize()) if embedding_vector is not None: embedding_matrix[i] = embedding_vector else: count_found-=1 else: count_found-=1 print(&amp;#34;Got embedding for &amp;#34;,count_found,&amp;#34; words.&amp;#34;) return embedding_matrix The above was just an example of how we can use our knowledge of an embedding to get better coverage. Sometimes depending on the problem, one might also derive value by adding extra information to the embeddings using some domain knowledge and NLP skills. For example, we can add external knowledge to the embeddings themselves by adding polarity and subjectivity of a word from the TextBlob package in Python.
from textblob import TextBlob word_sent = TextBlob(&amp;#34;good&amp;#34;).sentiment print(word_sent.polarity,word_sent.subjectivity) # 0.7 0.6 We can get the polarity and subjectivity of any word using TextBlob. Pretty neat. So let us try to add this extra information to our embeddings.
def create_glove(word_index,embeddings_index): emb_mean,emb_std = -0.005838499,0.48782197 all_embs = np.stack(embeddings_index.values()) embed_size = all_embs.shape[1] nb_words = min(max_features, len(word_index)) embedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size&#43;4)) count_found = nb_words for word, i in tqdm(word_index.items()): if i &amp;gt;= max_features: continue embedding_vector = embeddings_index.get(word) word_sent = TextBlob(word).sentiment # Extra information we are passing to our embeddings extra_embed = [word_sent.polarity,word_sent.subjectivity] if embedding_vector is not None: embedding_matrix[i] = np.append(embedding_vector,extra_embed) else: if word.islower(): embedding_vector = embeddings_index.get(word.capitalize()) if embedding_vector is not None: embedding_matrix[i] = np.append(embedding_vector,extra_embed) else: embedding_matrix[i,300:] = extra_embed count_found-=1 else: embedding_matrix[i,300:] = extra_embed count_found-=1 print(&amp;#34;Got embedding for &amp;#34;,count_found,&amp;#34; words.&amp;#34;) return embedding_matrix Engineering embeddings is an essential part of getting better performance from the Deep learning models at a later stage. Generally, I revisit this part of code multiple times during the stage of a project while trying to improve my models even further. You can show up a lot of creativity here to improve coverage over your word_index and to include extra features in your embedding.
More Engineered Features   One can always add sentence specific features like sentence length, number of unique words etc. as another input layer to give extra information to the Deep Neural Network. For example: I created these extra features as part of a feature engineering pipeline for Quora Insincerity Classification Challenge.
def add_features(df): df[&amp;#39;question_text&amp;#39;] = df[&amp;#39;question_text&amp;#39;].progress_apply(lambda x:str(x)) df[&amp;#34;lower_question_text&amp;#34;] = df[&amp;#34;question_text&amp;#34;].apply(lambda x: x.lower()) df[&amp;#39;total_length&amp;#39;] = df[&amp;#39;question_text&amp;#39;].progress_apply(len) df[&amp;#39;capitals&amp;#39;] = df[&amp;#39;question_text&amp;#39;].progress_apply(lambda comment: sum(1 for c in comment if c.isupper())) df[&amp;#39;caps_vs_length&amp;#39;] = df.progress_apply(lambda row: float(row[&amp;#39;capitals&amp;#39;])/float(row[&amp;#39;total_length&amp;#39;]), axis=1) df[&amp;#39;num_words&amp;#39;] = df.question_text.str.count(&amp;#39;\S&#43;&amp;#39;) df[&amp;#39;num_unique_words&amp;#39;] = df[&amp;#39;question_text&amp;#39;].progress_apply(lambda comment: len(set(w for w in comment.split()))) df[&amp;#39;words_vs_unique&amp;#39;] = df[&amp;#39;num_unique_words&amp;#39;] / df[&amp;#39;num_words&amp;#39;] return df Conclusion: NLP is still a very interesting problem in Deep Learning space and thus I would encourage you to do a lot of experimentation to see what works and what doesn&amp;rsquo;t. I have tried to provide a wholesome perspective of the preprocessing steps for a Deep Learning Neural network for any NLP problem. But that doesn&amp;rsquo;t mean it is definitive. If you want to learn more about NLP here is an awesome course. You can start for free with the 7-day Free Trial. If you think we can add something to the flow, do mention it in the comments.
Endnotes and References This post is a result of an effort of a lot of excellent Kagglers and I will try to reference them in this section. If I leave out someone, do understand that it was not my intention to do so.
 How to: Preprocessing when using embeddings Improve your Score with some Text Preprocessing Pytorch baseline Pytorch starter  ]]>
        
      </content:encoded>
      
      
      
    </item>
    
  </channel>
</rss>