<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1" xmlns:content="http://purl.org/rss/1.0/modules/content" xmlns:media="http://search.yahoo.com/mrss/" >

  
  <channel>
    <title>Graph Algorithms on MLWhiz</title>
    <link>https://mlwhiz.com/tags/graph-algorithms/</link>
    <description>Recent content in Graph Algorithms on MLWhiz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Dec 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://mlwhiz.com/tags/graph-algorithms/atom.xml" rel="self" type="application/rss+xml" />
    

    

    <item>
      <title>To all Data Scientists - The one Graph Algorithm you need to know</title>
      <link>https://mlwhiz.com/blog/2018/12/07/connected_components/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2018/12/07/connected_components/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.comhttps://upload.wikimedia.org/wikipedia/commons/8/85/Pseudoforest.svg"></media:content>
      

      
      <description>Graphs provide us with a very useful data structure. They can help us to find structure within our data. With the advent of Machine learning and big data we need to get as much information as possible about our data. Learning a little bit of graph theory can certainly help us with that.
Here is a Graph Analytics for Big Data course on Coursera by UCSanDiego which I highly recommend to learn the basics of graph theory.</description>

      <content:encoded>  
        
        <![CDATA[  Graphs provide us with a very useful data structure. They can help us to find structure within our data. With the advent of Machine learning and big data we need to get as much information as possible about our data. Learning a little bit of graph theory can certainly help us with that.
Here is a Graph Analytics for Big Data course on Coursera by UCSanDiego which I highly recommend to learn the basics of graph theory. You can start for free with the 7-day Free Trial.
One of the algorithms I am going to focus in the current post is called Connected Components. Why it is important. We all know clustering.
You can think of Connected Components in very layman&amp;rsquo;s terms as sort of a hard clustering algorithm which finds clusters/islands in related/connected data. As a concrete example: Say you have data about roads joining any two cities in the world. And you need to find out all the continents in the world and which city they contain.
How will you achieve that? Come on give some thought.
To put a Retail Perspective: Lets say, we have a lot of customers using a lot of accounts. One way in which we can use the Connected components algorithm is to find out distinct families in our dataset. We can assume edges(roads) between CustomerIDs based on same credit card usage, or same address or same mobile number etc. Once we have those connections, we can then run the connected component algorithm on the same to create individual clusters to which we can then assign a family ID. We can use these family IDs to provide personalized recommendations based on a family needs. We can also use this family ID to fuel our classification algorithms by creating grouped features based on family.
In Finance Perspective: Another use case would be to capture fraud using these family IDs. If an account has done fraud in past, it is highly probable that the connected accounts are also susceptible to fraud.
So enough of use cases. Lets start with a simple graph class written in Python to start up our exploits with code.
This post will revolve more around code from here onwards.
&amp;#34;&amp;#34;&amp;#34; A Python Class A simple Python graph class, demonstrating the essential facts and functionalities of graphs. Taken from https://www.python-course.eu/graphs_python.php Changed the implementation a little bit to include weighted edges &amp;#34;&amp;#34;&amp;#34; class Graph(object): def __init__(self, graph_dict=None): &amp;#34;&amp;#34;&amp;#34; initializes a graph object If no dictionary or None is given, an empty dictionary will be used &amp;#34;&amp;#34;&amp;#34; if graph_dict == None: graph_dict = {} self.__graph_dict = graph_dict def vertices(self): &amp;#34;&amp;#34;&amp;#34; returns the vertices of a graph &amp;#34;&amp;#34;&amp;#34; return list(self.__graph_dict.keys()) def edges(self): &amp;#34;&amp;#34;&amp;#34; returns the edges of a graph &amp;#34;&amp;#34;&amp;#34; return self.__generate_edges() def add_vertex(self, vertex): &amp;#34;&amp;#34;&amp;#34; If the vertex &amp;#34;vertex&amp;#34; is not in self.__graph_dict, a key &amp;#34;vertex&amp;#34; with an empty dict as a value is added to the dictionary. Otherwise nothing has to be done. &amp;#34;&amp;#34;&amp;#34; if vertex not in self.__graph_dict: self.__graph_dict[vertex] = {} def add_edge(self, edge,weight=1): &amp;#34;&amp;#34;&amp;#34; assumes that edge is of type set, tuple or list &amp;#34;&amp;#34;&amp;#34; edge = set(edge) (vertex1, vertex2) = tuple(edge) if vertex1 in self.__graph_dict: self.__graph_dict[vertex1][vertex2] = weight else: self.__graph_dict[vertex1] = {vertex2:weight} if vertex2 in self.__graph_dict: self.__graph_dict[vertex2][vertex1] = weight else: self.__graph_dict[vertex2] = {vertex1:weight} def __generate_edges(self): &amp;#34;&amp;#34;&amp;#34; A static method generating the edges of the graph &amp;#34;graph&amp;#34;. Edges are represented as sets with one (a loop back to the vertex) or two vertices &amp;#34;&amp;#34;&amp;#34; edges = [] for vertex in self.__graph_dict: for neighbour,weight in self.__graph_dict[vertex].iteritems(): if (neighbour, vertex, weight) not in edges: edges.append([vertex, neighbour, weight]) return edges def __str__(self): res = &amp;#34;vertices: &amp;#34; for k in self.__graph_dict: res &#43;= str(k) &#43; &amp;#34; &amp;#34; res &#43;= &amp;#34;\nedges: &amp;#34; for edge in self.__generate_edges(): res &#43;= str(edge) &#43; &amp;#34; &amp;#34; return res def adj_mat(self): return self.__graph_dict You can certainly play with our new graph class.Here we try to build some graphs.
g = { &amp;#34;a&amp;#34; : {&amp;#34;d&amp;#34;:2}, &amp;#34;b&amp;#34; : {&amp;#34;c&amp;#34;:2}, &amp;#34;c&amp;#34; : {&amp;#34;b&amp;#34;:5, &amp;#34;d&amp;#34;:3, &amp;#34;e&amp;#34;:5} } graph = Graph(g) print(&amp;#34;Vertices of graph:&amp;#34;) print(graph.vertices()) print(&amp;#34;Edges of graph:&amp;#34;) print(graph.edges()) print(&amp;#34;Add vertex:&amp;#34;) graph.add_vertex(&amp;#34;z&amp;#34;) print(&amp;#34;Vertices of graph:&amp;#34;) print(graph.vertices()) print(&amp;#34;Add an edge:&amp;#34;) graph.add_edge({&amp;#34;a&amp;#34;,&amp;#34;z&amp;#34;}) print(&amp;#34;Vertices of graph:&amp;#34;) print(graph.vertices()) print(&amp;#34;Edges of graph:&amp;#34;) print(graph.edges()) print(&amp;#39;Adding an edge {&amp;#34;x&amp;#34;,&amp;#34;y&amp;#34;} with new vertices:&amp;#39;) graph.add_edge({&amp;#34;x&amp;#34;,&amp;#34;y&amp;#34;}) print(&amp;#34;Vertices of graph:&amp;#34;) print(graph.vertices()) print(&amp;#34;Edges of graph:&amp;#34;) print(graph.edges()) Vertices of graph: [&#39;a&#39;, &#39;c&#39;, &#39;b&#39;] Edges of graph: [[&#39;a&#39;, &#39;d&#39;, 2], [&#39;c&#39;, &#39;b&#39;, 5], [&#39;c&#39;, &#39;e&#39;, 5], [&#39;c&#39;, &#39;d&#39;, 3], [&#39;b&#39;, &#39;c&#39;, 2]] Add vertex: Vertices of graph: [&#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;z&#39;] Add an edge: Vertices of graph: [&#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;z&#39;] Edges of graph: [[&#39;a&#39;, &#39;z&#39;, 1], [&#39;a&#39;, &#39;d&#39;, 2], [&#39;c&#39;, &#39;b&#39;, 5], [&#39;c&#39;, &#39;e&#39;, 5], [&#39;c&#39;, &#39;d&#39;, 3], [&#39;b&#39;, &#39;c&#39;, 2], [&#39;z&#39;, &#39;a&#39;, 1]] Adding an edge {&#34;x&#34;,&#34;y&#34;} with new vertices: Vertices of graph: [&#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;y&#39;, &#39;x&#39;, &#39;z&#39;] Edges of graph: [[&#39;a&#39;, &#39;z&#39;, 1], [&#39;a&#39;, &#39;d&#39;, 2], [&#39;c&#39;, &#39;b&#39;, 5], [&#39;c&#39;, &#39;e&#39;, 5], [&#39;c&#39;, &#39;d&#39;, 3], [&#39;b&#39;, &#39;c&#39;, 2], [&#39;y&#39;, &#39;x&#39;, 1], [&#39;x&#39;, &#39;y&#39;, 1], [&#39;z&#39;, &#39;a&#39;, 1]]  Lets do something interesting now.
We will use the above graph class for our understanding purpose. There are many Modules in python which we can use to do whatever I am going to do next,but to understand the methods we will write everything from scratch. Lets start with an example graph which we can use for our purpose.
  g = {&amp;#39;Frankfurt&amp;#39;: {&amp;#39;Mannheim&amp;#39;:85, &amp;#39;Wurzburg&amp;#39;:217, &amp;#39;Kassel&amp;#39;:173}, &amp;#39;Mannheim&amp;#39;: {&amp;#39;Frankfurt&amp;#39;:85, &amp;#39;Karlsruhe&amp;#39;:80}, &amp;#39;Karlsruhe&amp;#39;: {&amp;#39;Augsburg&amp;#39;:250, &amp;#39;Mannheim&amp;#39;:80}, &amp;#39;Augsburg&amp;#39;: {&amp;#39;Karlsruhe&amp;#39;:250, &amp;#39;Munchen&amp;#39;:84}, &amp;#39;Wurzburg&amp;#39;: {&amp;#39;Erfurt&amp;#39;:186, &amp;#39;Numberg&amp;#39;:103,&amp;#39;Frankfurt&amp;#39;:217}, &amp;#39;Erfurt&amp;#39;: {&amp;#39;Wurzburg&amp;#39;:186}, &amp;#39;Numberg&amp;#39;: {&amp;#39;Wurzburg&amp;#39;:103, &amp;#39;Stuttgart&amp;#39;:183,&amp;#39;Munchen&amp;#39;:167}, &amp;#39;Munchen&amp;#39;: {&amp;#39;Numberg&amp;#39;:167, &amp;#39;Augsburg&amp;#39;:84,&amp;#39;Kassel&amp;#39;:502}, &amp;#39;Kassel&amp;#39;: {&amp;#39;Frankfurt&amp;#39;:173, &amp;#39;Munchen&amp;#39;:502}, &amp;#39;Stuttgart&amp;#39;: {&amp;#39;Numberg&amp;#39;:183} } graph = Graph(g) print(&amp;#34;Vertices of graph:&amp;#34;) print(graph.vertices()) print(&amp;#34;Edges of graph:&amp;#34;) print(graph.edges()) Vertices of graph: [&#39;Mannheim&#39;, &#39;Erfurt&#39;, &#39;Munchen&#39;, &#39;Numberg&#39;, &#39;Stuttgart&#39;, &#39;Augsburg&#39;, &#39;Kassel&#39;, &#39;Frankfurt&#39;, &#39;Wurzburg&#39;, &#39;Karlsruhe&#39;] Edges of graph: [[&#39;Mannheim&#39;, &#39;Frankfurt&#39;, 85], [&#39;Mannheim&#39;, &#39;Karlsruhe&#39;, 80], [&#39;Erfurt&#39;, &#39;Wurzburg&#39;, 186], [&#39;Munchen&#39;, &#39;Numberg&#39;, 167], [&#39;Munchen&#39;, &#39;Augsburg&#39;, 84], [&#39;Munchen&#39;, &#39;Kassel&#39;, 502], [&#39;Numberg&#39;, &#39;Stuttgart&#39;, 183], [&#39;Numberg&#39;, &#39;Wurzburg&#39;, 103], [&#39;Numberg&#39;, &#39;Munchen&#39;, 167], [&#39;Stuttgart&#39;, &#39;Numberg&#39;, 183], [&#39;Augsburg&#39;, &#39;Munchen&#39;, 84], [&#39;Augsburg&#39;, &#39;Karlsruhe&#39;, 250], [&#39;Kassel&#39;, &#39;Munchen&#39;, 502], [&#39;Kassel&#39;, &#39;Frankfurt&#39;, 173], [&#39;Frankfurt&#39;, &#39;Mannheim&#39;, 85], [&#39;Frankfurt&#39;, &#39;Wurzburg&#39;, 217], [&#39;Frankfurt&#39;, &#39;Kassel&#39;, 173], [&#39;Wurzburg&#39;, &#39;Numberg&#39;, 103], [&#39;Wurzburg&#39;, &#39;Erfurt&#39;, 186], [&#39;Wurzburg&#39;, &#39;Frankfurt&#39;, 217], [&#39;Karlsruhe&#39;, &#39;Mannheim&#39;, 80], [&#39;Karlsruhe&#39;, &#39;Augsburg&#39;, 250]]  Lets say we are given a graph with the cities of Germany and respective distance between them. You want to find out how to go from Frankfurt (The starting node) to Munchen. There might be many ways in which you can traverse the graph but you need to find how many cities you will need to visit on a minimum to go from frankfurt to Munchen) This problem is analogous to finding out distance between nodes in an unweighted graph.
The algorithm that we use here is called as Breadth First Search.
def min_num_edges_between_nodes(graph,start_node): distance = 0 shortest_path = [] queue = [start_node] #FIFO levels = {} levels[start_node] = 0 shortest_paths = {} shortest_paths[start_node] = &amp;#34;:&amp;#34; visited = [start_node] while len(queue)!=0: start = queue.pop(0) neighbours = graph[start] for neighbour,_ in neighbours.iteritems(): if neighbour not in visited: queue.append(neighbour) visited.append(neighbour) levels[neighbour] = levels[start]&#43;1 shortest_paths[neighbour] = shortest_paths[start] &#43;&amp;#34;-&amp;gt;&amp;#34;&#43; start return levels, shortest_paths What we do in the above piece of code is create a queue and traverse it based on levels. We start with Frankfurt as starting node. We loop through its neighbouring cities(Menheim, Wurzburg and Kassel) and push them into the queue. We keep track of what level they are at and also the path through which we reached them. Since we are popping a first element of a queue we are sure we will visit cities in the order of their level.
Checkout this good post about BFS to understand more about queues and BFS.
min_num_edges_between_nodes(g,&amp;#39;Frankfurt&amp;#39;) ({&#39;Augsburg&#39;: 3, &#39;Erfurt&#39;: 2, &#39;Frankfurt&#39;: 0, &#39;Karlsruhe&#39;: 2, &#39;Kassel&#39;: 1, &#39;Mannheim&#39;: 1, &#39;Munchen&#39;: 2, &#39;Numberg&#39;: 2, &#39;Stuttgart&#39;: 3, &#39;Wurzburg&#39;: 1}, {&#39;Augsburg&#39;: &#39;:-Frankfurt-Mannheim-Karlsruhe&#39;, &#39;Erfurt&#39;: &#39;:-Frankfurt-Wurzburg&#39;, &#39;Frankfurt&#39;: &#39;:&#39;, &#39;Karlsruhe&#39;: &#39;:-Frankfurt-Mannheim&#39;, &#39;Kassel&#39;: &#39;:-Frankfurt&#39;, &#39;Mannheim&#39;: &#39;:-Frankfurt&#39;, &#39;Munchen&#39;: &#39;:-Frankfurt-Kassel&#39;, &#39;Numberg&#39;: &#39;:-Frankfurt-Wurzburg&#39;, &#39;Stuttgart&#39;: &#39;:-Frankfurt-Wurzburg-Numberg&#39;, &#39;Wurzburg&#39;: &#39;:-Frankfurt&#39;})  I did this example to show how BFS algorithm works. We can extend this algorithm to find out connected components in an unconnected graph. Lets say we need to find groups of unconnected vertices in the graph.
For example: the below graph has 3 unconnected sub-graphs. Can we find what nodes belong to a particular subgraph?
  #We add another countries in the loop  graph = Graph(g) graph.add_edge((&amp;#34;Mumbai&amp;#34;, &amp;#34;Delhi&amp;#34;),400) graph.add_edge((&amp;#34;Delhi&amp;#34;, &amp;#34;Kolkata&amp;#34;),500) graph.add_edge((&amp;#34;Kolkata&amp;#34;, &amp;#34;Bangalore&amp;#34;),600) graph.add_edge((&amp;#34;TX&amp;#34;, &amp;#34;NY&amp;#34;),1200) graph.add_edge((&amp;#34;ALB&amp;#34;, &amp;#34;NY&amp;#34;),800) g = graph.adj_mat() def bfs_connected_components(graph): connected_components = [] nodes = graph.keys() while len(nodes)!=0: start_node = nodes.pop() queue = [start_node] #FIFO visited = [start_node] while len(queue)!=0: start = queue[0] queue.remove(start) neighbours = graph[start] for neighbour,_ in neighbours.iteritems(): if neighbour not in visited: queue.append(neighbour) visited.append(neighbour) nodes.remove(neighbour) connected_components.append(visited) return connected_components print bfs_connected_components(g) The above code is similar to the previous BFS code. We keep all the vertices of the graph in the nodes list. We take a node from the nodes list and start BFS on it. as we visit a node we remove that node from the nodes list. Whenever the BFS completes we start again with another node in the nodes list until the nodes list is empty.
[[&#39;Kassel&#39;, &#39;Munchen&#39;, &#39;Frankfurt&#39;, &#39;Numberg&#39;, &#39;Augsburg&#39;, &#39;Mannheim&#39;, &#39;Wurzburg&#39;, &#39;Stuttgart&#39;, &#39;Karlsruhe&#39;, &#39;Erfurt&#39;], [&#39;Bangalore&#39;, &#39;Kolkata&#39;, &#39;Delhi&#39;, &#39;Mumbai&#39;], [&#39;NY&#39;, &#39;ALB&#39;, &#39;TX&#39;]]  As you can see we are able to find distinct components in our data. Just by using Edges and Vertices. This algorithm could be run on different data to satisfy any use case I presented above.
But Normally using Connected Components for a retail case will involve a lot of data and you will need to scale this algorithm.
Connected Components in PySpark Below is an implementation from this paper on Connected Components in MapReduce and Beyond from Google Research. Read the PPT to understand the implementation better. Some ready to use code for you.
def create_edges(line): a = [int(x) for x in line.split(&amp;#34; &amp;#34;)] edges_list=[] for i in range(0, len(a)-1): for j in range(i&#43;1 ,len(a)): edges_list.append((a[i],a[j])) edges_list.append((a[j],a[i])) return edges_list # adj_list.txt is a txt file containing adjacency list of the graph. adjacency_list = sc.textFile(&amp;#34;adj_list.txt&amp;#34;) edges_rdd = adjacency_list.flatMap(lambda line : create_edges(line)).distinct() def largeStarInit(record): a, b = record yield (a,b) yield (b,a) def largeStar(record): a, b = record t_list = list(b) t_list.append(a) list_min = min(t_list) for x in b: if a &amp;lt; x: yield (x,list_min) def smallStarInit(record): a, b = record if b&amp;lt;=a: yield (a,b) else: yield (b,a) def smallStar(record): a, b = record t_list = list(b) t_list.append(a) list_min = min(t_list) for x in t_list: if x!=list_min: yield (x,list_min) #Handle case for single nodes def single_vertex(line): a = [int(x) for x in line.split(&amp;#34; &amp;#34;)] edges_list=[] if len(a)==1: edges_list.append((a[0],a[0])) return edges_list iteration_num =0 while 1==1: if iteration_num==0: print &amp;#34;iter&amp;#34;, iteration_num large_star_rdd = edges_rdd.groupByKey().flatMap(lambda x : largeStar(x)) small_star_rdd = large_star_rdd.flatMap(lambda x : smallStarInit(x)).groupByKey().flatMap(lambda x : smallStar(x)).distinct() iteration_num &#43;= 1 else: print &amp;#34;iter&amp;#34;, iteration_num large_star_rdd = small_star_rdd.flatMap(lambda x: largeStarInit(x)).groupByKey().flatMap(lambda x : largeStar(x)).distinct() small_star_rdd = large_star_rdd.flatMap(lambda x : smallStarInit(x)).groupByKey().flatMap(lambda x : smallStar(x)).distinct() iteration_num &#43;= 1 #check Convergence changes = (large_star_rdd.subtract(small_star_rdd).union(small_star_rdd.subtract(large_star_rdd))).collect() if len(changes) == 0 : break single_vertex_rdd = adjacency_list.flatMap(lambda line : single_vertex(line)).distinct() answer = single_vertex_rdd.collect() &#43; large_star_rdd.collect() print answer[:10] Or Use GraphFrames in PySpark To Install graphframes:
I ran on command line: pyspark &amp;ndash;packages graphframes:graphframes:0.5.0-spark2.1-s_2.11 which opened up my notebook and installed graphframes after i try to import in my notebook.
The string to be formatted as : graphframes:(latest version)-spark(your spark version)-s_(your scala version).
Checkout this guide on how to use GraphFrames for more information.
from graphframes import * def vertices(line): vert = [int(x) for x in line.split(&amp;#34; &amp;#34;)] return vert vertices = adjacency_list.flatMap(lambda x: vertices(x)).distinct().collect() vertices = sqlContext.createDataFrame([[x] for x in vertices], [&amp;#34;id&amp;#34;]) def create_edges(line): a = [int(x) for x in line.split(&amp;#34; &amp;#34;)] edges_list=[] if len(a)==1: edges_list.append((a[0],a[0])) for i in range(0, len(a)-1): for j in range(i&#43;1 ,len(a)): edges_list.append((a[i],a[j])) edges_list.append((a[j],a[i])) return edges_list edges = adjacency_list.flatMap(lambda x: create_edges(x)).distinct().collect() edges = sqlContext.createDataFrame(edges, [&amp;#34;src&amp;#34;, &amp;#34;dst&amp;#34;]) g = GraphFrame(vertices, edges) sc.setCheckpointDir(&amp;#34;.&amp;#34;) # graphframes uses the same paper we referenced apparently cc = g.connectedComponents() print cc.show() The GraphFrames library implements the CC algorithm as well as a variety of other graph algorithms.
The above post was a lot of code but hope it was helpful. It took me a lot of time to implement the algorithm so wanted to make it easy for the folks.
If you want to read up more on Graph Algorithms here is an Graph Analytics for Big Data course on Coursera by UCSanDiego which I highly recommend to learn the basics of graph theory.
References  Graphs in Python A Gentle Intoduction to Graph Theory Blog Graph Analytics for Big Data course on Coursera by UCSanDiego  ]]>
        
      </content:encoded>
      
      
      
    </item>
    
  </channel>
</rss>