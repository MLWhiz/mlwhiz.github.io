<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on MLWhiz</title>
    <link>https://mlwhiz.com/tags/python/</link>
    <description>Recent content in Python on MLWhiz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Jan 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://mlwhiz.com/tags/python/atom.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>A Layman guide to moving from Keras to Pytorch</title>
      <link>https://mlwhiz.com/blog/2019/01/06/pytorch_keras_conversion/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/01/06/pytorch_keras_conversion/</guid>
      <description>

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/artificial-neural-network.png&#34;  height=&#34;350&#34; width=&#34;700&#34; &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;Recently I started up with a competition on kaggle on text classification, and as a part of the competition, I had to somehow move to Pytorch to get deterministic results. Now I have always worked with Keras in the past and it has given me pretty good results, but somehow I got to know that the &lt;strong&gt;CuDNNGRU/CuDNNLSTM layers in keras are not deterministic&lt;/strong&gt;, even after setting the seeds. So Pytorch did come to rescue. And am  I  glad that I moved.&lt;/p&gt;

&lt;p&gt;As a &lt;strong&gt;side note&lt;/strong&gt;: if you want to know more about &lt;strong&gt;NLP&lt;/strong&gt;, I would like to recommend this awesome course on &lt;strong&gt;&lt;a href=&#34;https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-AqkGMb7JzoCMW0Np1uLfCA&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Natural Language Processing&lt;/a&gt;&lt;/strong&gt; in the &lt;strong&gt;&lt;a href=&#34;https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-AqkGMb7JzoCMW0Np1uLfCA&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Advanced machine learning specialization&lt;/a&gt;&lt;/strong&gt;. You can start for free with the 7-day Free Trial. This course covers a wide range of tasks in Natural Language Processing from basic to advanced: Sentiment Analysis, summarization, dialogue state tracking, to name a few.&lt;/p&gt;

&lt;p&gt;Also take a look at my other post: &lt;a href=&#34;https://mlwhiz.com/blog/2019/01/17/deeplearning_nlp_preprocess/&#34;&gt;Text Preprocessing Methods for Deep Learning&lt;/a&gt;, which talks about different preprocessing techniques you can use for your NLP task and &lt;a href=&#34;https://mlwhiz.com/blog/2018/12/17/text_classification/&#34;&gt;What Kagglers are using for Text Classification&lt;/a&gt;, which talks about various deep learning models in use in NLP.&lt;/p&gt;

&lt;p&gt;Ok back to the task at hand. &lt;em&gt;While Keras is great to start with deep learning, with time you are going to resent some of its limitations.&lt;/em&gt; I sort of thought about moving to Tensorflow. It seemed like a good transition as TF is the backend of Keras. But was it hard? With the whole &lt;code&gt;session.run&lt;/code&gt; commands and tensorflow sessions, I was sort of confused. It was not Pythonic at all.&lt;/p&gt;

&lt;p&gt;Pytorch helps in that since it seems like the &lt;strong&gt;python way to do things&lt;/strong&gt;. You have things under your control and you are not losing anything on the performance front. In the words of Andrej Karpathy:&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I&amp;#39;ve been using PyTorch a few months now and I&amp;#39;ve never felt better. I have more energy. My skin is clearer. My eye sight has improved.&lt;/p&gt;&amp;mdash; Andrej Karpathy (@karpathy) &lt;a href=&#34;https://twitter.com/karpathy/status/868178954032513024?ref_src=twsrc%5Etfw&#34;&gt;May 26, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;So without further ado let me translate Keras to Pytorch for you.&lt;/p&gt;

&lt;h2 id=&#34;the-classy-way-to-write-your-network&#34;&gt;The Classy way to write your network?&lt;/h2&gt;

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/structured.jpeg&#34;  height=&#34;400&#34; width=&#34;700&#34; &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;Ok, let us create an example network in keras first which we will try to port into Pytorch. Here I would like to give a piece of advice too. When you try to move from Keras to Pytorch &lt;strong&gt;take any network you have and try porting it to Pytorch&lt;/strong&gt;. It will make you understand Pytorch in a much better way. Here I am trying to write one of the networks that gave pretty good results in the Quora Insincere questions classification challenge for me. This model has all the bells and whistles which at least any Text Classification deep learning network could contain with its GRU, LSTM and embedding layers and also a meta input layer. And thus would serve as a good example. Also if you want to read up more on how the BiLSTM/GRU and Attention model work do visit my post &lt;a href=&#34;https://mlwhiz.com/blog/2018/12/17/text_classification/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_model&lt;/span&gt;(features,clipvalue&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;,num_filters&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;,dropout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;,embed_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;501&lt;/span&gt;):
    features_input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Input(shape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(features&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],))
    inp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Input(shape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(maxlen, ))
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Layer 1: Word2Vec Embeddings.&lt;/span&gt;
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Embedding(max_features, embed_size, weights&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[embedding_matrix], trainable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)(inp)
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Layer 2: SpatialDropout1D(0.1)&lt;/span&gt;
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SpatialDropout1D(dropout)(x)
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Layer 3: Bidirectional CuDNNLSTM&lt;/span&gt;
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Bidirectional(LSTM(num_filters, return_sequences&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True))(x)

    &lt;span style=&#34;color:#75715e&#34;&gt;# Layer 4: Bidirectional CuDNNGRU&lt;/span&gt;
    x, x_h, x_c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Bidirectional(GRU(num_filters, return_sequences&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True, return_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True))(x)  
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Layer 5: some pooling operations&lt;/span&gt;
    avg_pool &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GlobalAveragePooling1D()(x)
    max_pool &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GlobalMaxPooling1D()(x)
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Layer 6: A concatenation of the last state, maximum pool, average pool and &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# additional features&lt;/span&gt;
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; concatenate([avg_pool, x_h, max_pool,features_input])
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Layer 7: A dense layer&lt;/span&gt;
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Dense(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;relu&amp;#34;&lt;/span&gt;)(x)

    &lt;span style=&#34;color:#75715e&#34;&gt;# Layer 8: A dropout layer&lt;/span&gt;
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Dropout(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;)(x)
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Layer 9: Output dense layer with one output for our Binary Classification problem.&lt;/span&gt;
    outp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Dense(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sigmoid&amp;#34;&lt;/span&gt;)(x)

    &lt;span style=&#34;color:#75715e&#34;&gt;# Some keras model creation and compiling&lt;/span&gt;
    model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Model(inputs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[inp,features_input], outputs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;outp)
    adam &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; optimizers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;adam(clipvalue&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;clipvalue)
    model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(loss&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;binary_crossentropy&amp;#39;&lt;/span&gt;,
                  optimizer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;adam,
                  metrics&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;accuracy&amp;#39;&lt;/span&gt;])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; model&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So a model in pytorch is defined as a class(therefore a little more classy) which inherits from &lt;code&gt;nn.module&lt;/code&gt; . Every class necessarily contains an &lt;code&gt;__init__&lt;/code&gt; procedure block and a block for the &lt;code&gt;forward&lt;/code&gt; pass.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In the &lt;code&gt;__init__&lt;/code&gt; part the user defines all the layers the network is going to have but doesn&amp;rsquo;t yet define how those layers would be connected to each other&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the forward pass block, the user defines how data flows from one layer to another inside the network.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;why-is-this-classy&#34;&gt;Why is this Classy?&lt;/h4&gt;

&lt;p&gt;Obviously classy because of Classes. Duh! But jokes apart, I found it beneficial due to a couple of reasons:&lt;/p&gt;

&lt;p&gt;1) It gives you a &lt;strong&gt;lot of control&lt;/strong&gt; on how your network is built.&lt;/p&gt;

&lt;p&gt;2) You understand a lot about the network when you are building it since you have to specify input and output dimensions. So ** fewer chances of error**. (Although this one is really up to the skill level)&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;Easy to debug&lt;/strong&gt; networks. Any time you find any problem with the network just use something like &lt;code&gt;print(&amp;quot;avg_pool&amp;quot;, avg_pool.size())&lt;/code&gt; in the forward pass to check the sizes of the layer and you will debug the network easily&lt;/p&gt;

&lt;p&gt;4) You can &lt;strong&gt;return multiple outputs&lt;/strong&gt; from the forward layer. This is pretty helpful in the Encoder-Decoder architecture where you can return both the encoder and decoder output. Or in the case of autoencoder where you can return the output of the model and the hidden layer embedding for the data.&lt;/p&gt;

&lt;p&gt;5) &lt;strong&gt;Pytorch tensors work in a very similar manner to numpy arrays&lt;/strong&gt;. For example, I could have used Pytorch Maxpool function to write the maxpool layer but &lt;code&gt;max_pool, _ = torch.max(h_gru, 1)&lt;/code&gt; will also work.&lt;/p&gt;

&lt;p&gt;6) You can set up &lt;strong&gt;different layers with different initialization schemes&lt;/strong&gt;. Something you won&amp;rsquo;t be able to do in Keras. For example, in the below network I have changed the initialization scheme of my LSTM layer. The LSTM layer has different initializations for biases, input layer weights, and hidden layer weights.&lt;/p&gt;

&lt;p&gt;7) Wait until you see the &lt;strong&gt;training loop in Pytorch&lt;/strong&gt; You will be amazed at the sort of &lt;strong&gt;control&lt;/strong&gt; it provides.&lt;/p&gt;

&lt;p&gt;Now the same model in Pytorch will look like something like this. Do go through the code comments to understand more on how to port.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Alex_NeuralNet_Meta&lt;/span&gt;(nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Module):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,hidden_size,lin_size, embedding_matrix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;embedding_matrix):
        super(Alex_NeuralNet_Meta, self)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__init__()

        &lt;span style=&#34;color:#75715e&#34;&gt;# Initialize some parameters for your model&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hidden_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hidden_size
        drp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Layer 1: Word2Vec Embeddings.&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;embedding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Embedding(max_features, embed_size)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;embedding&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;weight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Parameter(torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tensor(embedding_matrix, dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;float32))
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;embedding&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;weight&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;requires_grad &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False

        &lt;span style=&#34;color:#75715e&#34;&gt;# Layer 2: Dropout1D(0.1)&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;embedding_dropout &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Dropout2d(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Layer 3: Bidirectional CuDNNLSTM&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lstm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;LSTM(embed_size, hidden_size, bidirectional&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True, batch_first&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; name, param &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lstm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;named_parameters():
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bias&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; name:
                 nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;constant_(param, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weight_ih&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; name:
                 nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;kaiming_normal_(param)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weight_hh&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; name:
                 nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;orthogonal_(param)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Layer 4: Bidirectional CuDNNGRU&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gru &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GRU(hidden_size&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, hidden_size, bidirectional&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True, batch_first&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; name, param &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gru&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;named_parameters():
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bias&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; name:
                 nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;constant_(param, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weight_ih&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; name:
                 nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;kaiming_normal_(param)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weight_hh&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; name:
                 nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;orthogonal_(param)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Layer 7: A dense layer&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linear &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Linear(hidden_size&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; features&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], lin_size)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;relu &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ReLU()
        
        &lt;span style=&#34;color:#75715e&#34;&gt;# Layer 8: A dropout layer &lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dropout &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Dropout(drp)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Layer 9: Output dense layer with one output for our Binary Classification problem.&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Linear(lin_size, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;forward&lt;/span&gt;(self, x):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        here x[0] represents the first element of the input that is going to be passed. 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        We are going to pass a tuple where first one contains the sequences(x[0])
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        and the second one is a additional feature vector(x[1])
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        h_embedding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;embedding(x[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
        &lt;span style=&#34;color:#75715e&#34;&gt;# Based on comment by Ivank to integrate spatial dropout. &lt;/span&gt;
        embeddings &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h_embedding&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unsqueeze(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)    &lt;span style=&#34;color:#75715e&#34;&gt;# (N, T, 1, K)&lt;/span&gt;
        embeddings &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; embeddings&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;permute(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# (N, K, 1, T)&lt;/span&gt;
        embeddings &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;embedding_dropout(embeddings)  &lt;span style=&#34;color:#75715e&#34;&gt;# (N, K, 1, T), some features are masked&lt;/span&gt;
        embeddings &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; embeddings&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;permute(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# (N, T, 1, K)&lt;/span&gt;
        h_embedding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; embeddings&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;squeeze(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# (N, T, K)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#h_embedding = torch.squeeze(self.embedding_dropout(torch.unsqueeze(h_embedding, 0)))&lt;/span&gt;
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;emb&amp;#34;, h_embedding.size())&lt;/span&gt;
        h_lstm, _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lstm(h_embedding)
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;lst&amp;#34;,h_lstm.size())&lt;/span&gt;
        h_gru, hh_gru &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gru(h_lstm)
        hh_gru &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hh_gru&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;view(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hidden_size )
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;gru&amp;#34;, h_gru.size())&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;h_gru&amp;#34;, hh_gru.size())&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Layer 5: is defined dynamically as an operation on tensors.&lt;/span&gt;
        avg_pool &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(h_gru, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        max_pool, _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max(h_gru, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;avg_pool&amp;#34;, avg_pool.size())&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;max_pool&amp;#34;, max_pool.size())&lt;/span&gt;
        
        &lt;span style=&#34;color:#75715e&#34;&gt;# the extra features you want to give to the model&lt;/span&gt;
        f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tensor(x[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;float)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cuda()
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;f&amp;#34;, f.size())&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Layer 6: A concatenation of the last state, maximum pool, average pool and &lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# additional features&lt;/span&gt;
        conc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cat(( hh_gru, avg_pool, max_pool,f), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;conc&amp;#34;, conc.size())&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# passing conc through linear and relu ops&lt;/span&gt;
        conc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;relu(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linear(conc))
        conc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dropout(conc)
        out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;out(conc)
        &lt;span style=&#34;color:#75715e&#34;&gt;# return the final output&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; out&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hope you are still there with me. One thing I would like to emphasize here is that you need to code something up in Pytorch to really understand how it works. And know that once you do that you would be glad that you put in the effort. On to the next section.&lt;/p&gt;

&lt;h2 id=&#34;tailored-or-readymade-the-best-fit-with-a-highly-customizable-training-loop&#34;&gt;Tailored or Readymade: The Best Fit with a highly customizable Training Loop&lt;/h2&gt;

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/sewing-machine.jpg&#34;  height=&#34;300&#34; width=&#34;700&#34; &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;In the above section I wrote that you will be amazed once you saw the training loop. That was an exaggeration. On the first try you will be a little baffled/confused. But as soon as you read through the loop more than once it will make a lot of intuituve sense. Once again read up the comments and the code to gain a better understanding.&lt;/p&gt;

&lt;p&gt;This training loop does k-fold cross-validation on your training data and outputs Out-of-fold train_preds and test_preds averaged over the runs on the test data. I apologize if the flow looks something straight out of a kaggle competition, but if you understand this you would be able to create a training loop for your own workflow. And that is the beauty of Pytorch.&lt;/p&gt;

&lt;p&gt;So a brief summary of this loop are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create stratified splits using train data&lt;/li&gt;
&lt;li&gt;Loop through the splits.

&lt;ul&gt;
&lt;li&gt;Convert your train and CV data to tensor and load your data to the GPU using the
&lt;code&gt;X_train_fold = torch.tensor(x_train[train_idx.astype(int)], dtype=torch.long).cuda()&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;Load the model onto the GPU using the &lt;code&gt;model.cuda()&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;Define Loss function, Scheduler and Optimizer&lt;/li&gt;
&lt;li&gt;create &lt;code&gt;train_loader&lt;/code&gt;    and     valid_loader` to iterate through batches.&lt;/li&gt;
&lt;li&gt;Start running epochs. In each epoch

&lt;ul&gt;
&lt;li&gt;Set the model mode to train using &lt;code&gt;model.train()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Go through the batches in &lt;code&gt;train_loader&lt;/code&gt; and run the forward pass&lt;/li&gt;
&lt;li&gt;Run a scheduler step to change the learning rate&lt;/li&gt;
&lt;li&gt;Compute loss&lt;/li&gt;
&lt;li&gt;Set the existing gradients in the optimizer to zero&lt;/li&gt;
&lt;li&gt;Backpropagate the losses through the network&lt;/li&gt;
&lt;li&gt;Clip the gradients&lt;/li&gt;
&lt;li&gt;Take an optimizer step to change the weights in the whole network&lt;/li&gt;
&lt;li&gt;Set the model mode to eval using &lt;code&gt;model.eval()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Get predictions for the validation data using &lt;code&gt;valid_loader&lt;/code&gt; and store in variable &lt;code&gt;valid_preds_fold&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Calculate Loss and print&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;After all epochs are done. Predict the test data and store the predictions. These predictions will be averaged at the end of the split loop to get the final &lt;code&gt;test_preds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Get Out-of-fold(OOF) predictions for train set using &lt;code&gt;train_preds[valid_idx] = valid_preds_fold&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;These OOF predictions can then be used to calculate the Local CV score for your model.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pytorch_model_run_cv&lt;/span&gt;(x_train,y_train,features,x_test, model_obj, feats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False,clip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True):
    seed_everything()
    avg_losses_f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    avg_val_losses_f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#75715e&#34;&gt;# matrix for the out-of-fold predictions&lt;/span&gt;
    train_preds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros((len(x_train)))
    &lt;span style=&#34;color:#75715e&#34;&gt;# matrix for the predictions on the test set&lt;/span&gt;
    test_preds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros((len(x_test)))
    splits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(StratifiedKFold(n_splits&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n_splits, shuffle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True, random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;SEED)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(x_train, y_train))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, (train_idx, valid_idx) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(splits):
        seed_everything(i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i)
        x_train &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(x_train)
        y_train &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(y_train)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; feats:
            features &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(features)
        x_train_fold &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tensor(x_train[train_idx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(int)], dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;long)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cuda()
        y_train_fold &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tensor(y_train[train_idx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(int), np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newaxis], dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;float32)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cuda()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; feats:
            kfold_X_features &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; features[train_idx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(int)]
            kfold_X_valid_features &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; features[valid_idx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(int)]
        x_val_fold &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tensor(x_train[valid_idx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(int)], dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;long)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cuda()
        y_val_fold &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tensor(y_train[valid_idx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(int), np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newaxis], dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;float32)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cuda()
        
        model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; copy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;deepcopy(model_obj)

        model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cuda()

        loss_fn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BCEWithLogitsLoss(reduction&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sum&amp;#39;&lt;/span&gt;)

        step_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;
        base_lr, max_lr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.001&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.003&lt;/span&gt;   
        optimizer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;optim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Adam(filter(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; p: p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;requires_grad, model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parameters()), 
                                 lr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;max_lr)
        
        &lt;span style=&#34;color:#75715e&#34;&gt;################################################################################################&lt;/span&gt;
        scheduler &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CyclicLR(optimizer, base_lr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;base_lr, max_lr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;max_lr,
                   step_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;step_size, mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;exp_range&amp;#39;&lt;/span&gt;,
                   gamma&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.99994&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;###############################################################################################&lt;/span&gt;

        train &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MyDataset(torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TensorDataset(x_train_fold, y_train_fold))
        valid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MyDataset(torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TensorDataset(x_val_fold, y_val_fold))
        
        train_loader &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataLoader(train, batch_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;batch_size, shuffle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
        valid_loader &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataLoader(valid, batch_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;batch_size, shuffle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Fold {i + 1}&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; epoch &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n_epochs):
            start_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time()
            model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;train()

            avg_loss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;  
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, (x_batch, y_batch, index) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(train_loader):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; feats:       
                    f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; kfold_X_features[index]
                    y_pred &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model([x_batch,f])
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    y_pred &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model(x_batch)

                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; scheduler:
                    scheduler&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;batch_step()

                &lt;span style=&#34;color:#75715e&#34;&gt;# Compute and print loss.&lt;/span&gt;
                loss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loss_fn(y_pred, y_batch)
                optimizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zero_grad()
                loss&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;backward()
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; clip:
                    nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clip_grad_norm_(model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parameters(),&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                optimizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;step()
                avg_loss &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; loss&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item() &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; len(train_loader)
                
            model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval()
            
            valid_preds_fold &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros((x_val_fold&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)))
            test_preds_fold &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros((len(x_test)))
            
            avg_val_loss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, (x_batch, y_batch,index) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(valid_loader):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; feats:
                    f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; kfold_X_valid_features[index]            
                    y_pred &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model([x_batch,f])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;detach()
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    y_pred &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model(x_batch)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;detach()
                
                avg_val_loss &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; loss_fn(y_pred, y_batch)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item() &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; len(valid_loader)
                valid_preds_fold[index] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sigmoid(y_pred&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cpu()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;numpy())[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
            
            elapsed_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; start_time 
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Epoch {}/{} &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; loss={:.4f} &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; val_loss={:.4f} &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; time={:.2f}s&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(
                epoch &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n_epochs, avg_loss, avg_val_loss, elapsed_time))
        avg_losses_f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(avg_loss)
        avg_val_losses_f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(avg_val_loss) 
        &lt;span style=&#34;color:#75715e&#34;&gt;# predict all samples in the test set batch per batch&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, (x_batch,) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(test_loader):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; feats:
                f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; test_features[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; batch_size:(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; batch_size]
                y_pred &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model([x_batch,f])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;detach()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                y_pred &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model(x_batch)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;detach()

            test_preds_fold[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; batch_size:(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; batch_size] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sigmoid(y_pred&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cpu()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;numpy())[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
            
        train_preds[valid_idx] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; valid_preds_fold
        test_preds &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; test_preds_fold &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; len(splits)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;All &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; loss={:.4f} &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; val_loss={:.4f} &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;average(avg_losses_f),np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;average(avg_val_losses_f)))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; train_preds, test_preds&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;but-why-why-so-much-code&#34;&gt;But Why? Why so much code?&lt;/h4&gt;

&lt;p&gt;Okay. I get it. That was probably a handful. What you could have done with a simple&lt;code&gt;.fit&lt;/code&gt; in keras, takes a lot of code to accomplish in Pytorch. But understand that you get a lot of power too. Some use cases for you to understand:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;While in Keras you have prespecified schedulers like &lt;code&gt;ReduceLROnPlateau&lt;/code&gt; (and it is a task to write them), in Pytorch you can experiment like crazy. &lt;strong&gt;If you know how to write Python you are going to get along just fine&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Want to change the structure of your model between the epochs. Yeah you can do it. Changing the input size for convolution networks on the fly.&lt;/li&gt;
&lt;li&gt;And much more. It is only your imagination that will stop you.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;wanna-run-it-yourself&#34;&gt;Wanna Run it Yourself?&lt;/h2&gt;

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/tools.jpg&#34; alt=&#34;You have all the tools it seems&#34; height=&#34;400&#34; width=&#34;700&#34; &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;So another small confession here. The code above will not run as is as there are some code artifacts which I have not shown here. I did this in favor of making the post more readable. Like you see the &lt;code&gt;seed_everything&lt;/code&gt;, &lt;code&gt;MyDataset&lt;/code&gt; and &lt;code&gt;CyclicLR&lt;/code&gt; (From Jeremy Howard Course) functions and classes in the code above which are not really included with Pytorch. But fret not my friend. I have tried to write a &lt;a href=&#34;https://www.kaggle.com/mlwhiz/third-place-model-for-toxic-comments-in-pytorch/edit&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Kaggle Kernel&lt;/a&gt; with the whole running code. You can see the code here and include it in your projects.&lt;/p&gt;

&lt;p&gt;If you liked this post, &lt;strong&gt;please don&amp;rsquo;t forget to upvote the &lt;a href=&#34;https://www.kaggle.com/mlwhiz/third-place-model-for-toxic-comments-in-pytorch/edit&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Kernel&lt;/a&gt; too.&lt;/strong&gt; I will be obliged.&lt;/p&gt;

&lt;h2 id=&#34;endnotes-and-references&#34;&gt;Endnotes and References&lt;/h2&gt;

&lt;p&gt;This post is a result of an effort of a lot of excellent Kagglers and I will try to reference them in this section. If I leave out someone, do understand that it was not my intention to do so.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/c/jigsaw-toxic-comment-classification-challenge/discussion/52644&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Discussion on 3rd Place winner model in Toxic comment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/larryfreeman/toxic-comments-code-for-alexander-s-9872-model&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;3rd Place model in Keras by Larry Freeman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/spirosrap/bilstm-attention-kfold-clr-extra-features-capsule&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Pytorch starter Capsule model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/christofhenkel/how-to-preprocessing-when-using-embeddings&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;How to: Preprocessing when using embeddings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/theoviel/improve-your-score-with-some-text-preprocessing&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Improve your Score with some Text Preprocessing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/ziliwang/baseline-pytorch-bilstm&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Pytorch baseline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/hengzheng/pytorch-starter&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Pytorch starter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What Kagglers are using for Text Classification</title>
      <link>https://mlwhiz.com/blog/2018/12/17/text_classification/</link>
      <pubDate>Mon, 17 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2018/12/17/text_classification/</guid>
      <description>

&lt;p&gt;With the problem of Image Classification is more or less solved by Deep learning, &lt;em&gt;Text Classification is the next new developing theme in deep learning&lt;/em&gt;. For those who don&amp;rsquo;t know, Text classification is a common task in natural language processing, which transforms a sequence
of text of indefinite length into a category of text. How could you use that?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To find sentiment of a review.&lt;/li&gt;
&lt;li&gt;Find toxic comments in a platform like Facebook&lt;/li&gt;
&lt;li&gt;Find Insincere questions on Quora. A current ongoing competition on kaggle&lt;/li&gt;
&lt;li&gt;Find fake reviews on websites&lt;/li&gt;
&lt;li&gt;Will a text advert get clicked or not&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And much more. The whole internet is filled with text and to categorise that information algorithmically will only give us incremental benefits to say the least in the field of AI.&lt;/p&gt;

&lt;p&gt;Here I am going to use the data from Quora&amp;rsquo;s Insincere questions to talk about the different models that people are building and sharing to perform this task. Obviously these standalone models are not going to put you on the top of the leaderboard, yet I hope that this ensuing discussion would be helpful for people who want to learn more about text classification. This is going to be a long post in that regard.&lt;/p&gt;

&lt;p&gt;As a side note: if you want to know more about NLP, I would like to recommend this awesome course on &lt;a href=&#34;https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-AqkGMb7JzoCMW0Np1uLfCA&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Natural Language Processing&lt;/a&gt; in the &lt;a href=&#34;https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-AqkGMb7JzoCMW0Np1uLfCA&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Advanced machine learning specialization&lt;/a&gt;. You can start for free with the 7-day Free Trial. This course covers a wide range of tasks in Natural Language Processing from basic to advanced: sentiment analysis, summarization, dialogue state tracking, to name a few.&lt;/p&gt;

&lt;p&gt;Also take a look at my other post: &lt;a href=&#34;https://mlwhiz.com/blog/2019/01/17/deeplearning_nlp_preprocess/&#34;&gt;Text Preprocessing Methods for Deep Learning&lt;/a&gt;, which talks about different preprocessing techniques you can use for your NLP task and &lt;a href=&#34;https://mlwhiz.com/blog/2019/01/06/pytorch_keras_conversion/&#34;&gt;how to switch from Keras to Pytorch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So let me try to go through some of the models which people are using to perform text classification and try to provide a brief intuition for them.&lt;/p&gt;

&lt;h2 id=&#34;1-textcnn&#34;&gt;1. TextCNN:&lt;/h2&gt;

&lt;p&gt;The idea of using a CNN to classify text was first presented in the paper &lt;a href=&#34;https://www.aclweb.org/anthology/D14-1181&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Convolutional Neural Networks for Sentence Classification&lt;/a&gt; by Yoon Kim. Instead of image pixels, the input to the tasks are sentences or documents represented as a matrix. Each row of the matrix corresponds to one word vector. That is, each row is word-vector that represents a word. Thus a sequence of max length 70 gives us a image of 70(max sequence length)x300(embedding size)&lt;/p&gt;

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/text_convolution.png&#34;  height=&#34;400&#34; width=&#34;700&#34; &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;Now for some intuition. While for a image we move our conv filter horizontally also since here we have fixed our kernel size to filter_size x embed_size i.e. (3,300) we are just going to move down for the convolution taking look at three words at once since our filter size is 3 in this case.Also one can think of filter sizes as unigrams, bigrams, trigrams etc. Since we are looking at a context window of 1,2,3, and 5 words respectively. Here is the text classification network coded in Keras:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# https://www.kaggle.com/yekenot/2dcnn-textclassifier&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;model_cnn&lt;/span&gt;(embedding_matrix):
    filter_sizes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]
    num_filters &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;

    inp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Input(shape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(maxlen,))
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Embedding(max_features, embed_size, weights&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[embedding_matrix])(inp)
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Reshape((maxlen, embed_size, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))(x)

    maxpool_pool &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(filter_sizes)):
        conv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Conv2D(num_filters, kernel_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(filter_sizes[i], embed_size),
                                     kernel_initializer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;he_normal&amp;#39;&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;elu&amp;#39;&lt;/span&gt;)(x)
        maxpool_pool&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(MaxPool2D(pool_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(maxlen &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; filter_sizes[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))(conv))

    z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Concatenate(axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)(maxpool_pool)   
    z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Flatten()(z)
    z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Dropout(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;)(z)

    outp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Dense(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sigmoid&amp;#34;&lt;/span&gt;)(z)

    model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Model(inputs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;inp, outputs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;outp)
    model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(loss&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;binary_crossentropy&amp;#39;&lt;/span&gt;, optimizer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;adam&amp;#39;&lt;/span&gt;, metrics&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;accuracy&amp;#39;&lt;/span&gt;])
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; model&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have written a simplified and well commented code to run this network(taking input from a lot of other kernels) on a &lt;a href=&#34;https://www.kaggle.com/mlwhiz/learning-text-classification-textcnn&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;kaggle kernel&lt;/a&gt; for this competition. Do take a look there to learn the preprocessing steps, and the word to vec embeddings usage in this model. You will learn something. Please do upvote the kernel if you find it helpful. This kernel scored around 0.661 on the public leaderboard.&lt;/p&gt;

&lt;h2 id=&#34;2-bidirectional-rnn-lstm-gru&#34;&gt;2. BiDirectional RNN(LSTM/GRU):&lt;/h2&gt;

&lt;p&gt;TextCNN takes care of a lot of things. For example it takes care of words in close range. It is able to see &amp;ldquo;new york&amp;rdquo; together. But it still can&amp;rsquo;t take care of all the context provided in a particular text sequence. It still does not learn the seem to learn the sequential structure of the data, where every word is dependednt on the previous word. Or a word in the previous sentence.&lt;/p&gt;

&lt;p&gt;RNN help us with that. &lt;em&gt;They are able to remember previous information using hidden states and connect it to the current task.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Long Short Term Memory networks (LSTM) are a subclass of RNN, specialized in remembering information for a long period of time. More over the Bidirectional LSTM keeps the contextual information in both directions which is pretty useful in text classification task (But won&amp;rsquo;t work for a time sweries prediction task).&lt;/p&gt;

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/birnn.png&#34;  height=&#34;400&#34; width=&#34;700&#34; &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;For a most simplistic explanation of Bidirectional RNN, think of RNN cell as taking as input a hidden state(a vector) and the word vector and giving out an output vector and the next hidden state.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        Hidden state, Word vector -&amp;gt;(RNN Cell) -&amp;gt; Output Vector , Next Hidden state
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a sequence of length 4 like &amp;lsquo;you will never believe&amp;rsquo;, The RNN cell will give 4 output vectors. Which can be concatenated and then used as part of a dense feedforward architecture.&lt;/p&gt;

&lt;p&gt;In the Bidirectional RNN the only change is that we read the text in the normal fashion as well in reverse. So we stack two RNNs in parallel and hence we get 8 output vectors to append.&lt;/p&gt;

&lt;p&gt;Once we get the output vectors we send them through a series of dense layers and finally a softmax layer to build a text classifier.&lt;/p&gt;

&lt;p&gt;Due to the limitations of RNNs like not remembering long term dependencies, in practice we almost always use LSTM/GRU to model long term dependencies. In such a case you can just think of the RNN cell being replaced by a LSTM cell or a GRU cell in the above figure. An example model is provided below. You can use CuDNNGRU interchangably with CuDNNLSTM, when you build models.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# BiDirectional LSTM&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;model_lstm_du&lt;/span&gt;(embedding_matrix):
    inp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Input(shape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(maxlen,))
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Embedding(max_features, embed_size, weights&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[embedding_matrix])(inp)
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Here 64 is the size(dim) of the hidden state vector as well as the output vector. Keeping return_sequence we want the output for the entire sequence. So what is the dimension of output for this layer?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        64*70(maxlen)*2(bidirection concat)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    CuDNNLSTM is fast implementation of LSTM layer in Keras which only runs on GPU
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Bidirectional(CuDNNLSTM(&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, return_sequences&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True))(x)
    avg_pool &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GlobalAveragePooling1D()(x)
    max_pool &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GlobalMaxPooling1D()(x)
    conc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; concatenate([avg_pool, max_pool])
    conc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Dense(&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;relu&amp;#34;&lt;/span&gt;)(conc)
    conc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Dropout(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;)(conc)
    outp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Dense(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sigmoid&amp;#34;&lt;/span&gt;)(conc)
    model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Model(inputs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;inp, outputs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;outp)
    model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(loss&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;binary_crossentropy&amp;#39;&lt;/span&gt;, optimizer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;adam&amp;#39;&lt;/span&gt;, metrics&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;accuracy&amp;#39;&lt;/span&gt;])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; model&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have written a simplified and well commented code to run this network(taking input from a lot of other kernels) on a &lt;a href=&#34;https://www.kaggle.com/mlwhiz/learning-text-classification-bidirectionalrnn&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;kaggle kernel&lt;/a&gt; for this competition. Do take a look there to learn the preprocessing steps, and the word to vec embeddings usage in this model. You will learn something. Please do upvote the kernel if you find it helpful. This kernel scored around 0.671 on the public leaderboard.&lt;/p&gt;

&lt;h2 id=&#34;3-attention-models&#34;&gt;3. Attention Models&lt;/h2&gt;

&lt;p&gt;The concept of Attention is relatively new as it comes from &lt;a href=&#34;https://www.cs.cmu.edu/~diyiy/docs/naacl16.pdf&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Hierarchical Attention Networks for Document Classification&lt;/a&gt; paper written jointly by CMU and Microsoft guys in 2016.&lt;/p&gt;

&lt;p&gt;So in the past we used to find features from text by doing a keyword extraction. Some word are more helpful in determining the category of a text than others. But in this method we sort of lost the sequential structure of text. With LSTM and deep learning methods while we are able to take case of the sequence structure we lose the ability to give higher weightage to more important words.
Can we have the best of both worlds?&lt;/p&gt;

&lt;p&gt;And that is attention for you. In the author&amp;rsquo;s words:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Not all words contribute equally to the representation of the sentence meaning. Hence, we introduce attention mechanism to extract
such words that are important to the meaning of the sentence and aggregate the representation of those informative words to form a sentence vector&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/birnn attention.png&#34;  height=&#34;400&#34; width=&#34;700&#34; &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;In essense we want to create scores for every word in the text, which are the attention similarity score for a word.&lt;/p&gt;

&lt;p&gt;To do this we start with a weight matrix(W), a bias vector(b) and a context vector u. All of them will be learned by the optimmization algorithm.&lt;/p&gt;

&lt;p&gt;Then there are a series of mathematical operations. See the figure for more clarification. We can think of u1 as non linearity on RNN word output. After that v1 is a dot product of u1 with a context vector u raised to an exponentiation. From an intuition viewpoint, the value of v1 will be high if u and u1 are similar. Since we want the sum of scores to be 1, we divide v by the sum of v’s to get the Final Scores,s&lt;/p&gt;

&lt;p&gt;These final scores are then multiplied by RNN output for words to weight them according to their importance. After which the outputs are summed and sent through dense layers and softmax for the task of text classification.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dot_product&lt;/span&gt;(x, kernel):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Wrapper for dot product operation, in order to be compatible with both
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Theano and Tensorflow
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Args:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        x (): input
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        kernel (): weights
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Returns:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; K&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;backend() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tensorflow&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; K&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;squeeze(K&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(x, K&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;expand_dims(kernel)), axis&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; K&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(x, kernel)
    

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AttentionWithContext&lt;/span&gt;(Layer):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Attention operation, with a context/query vector, for temporal data.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Supports Masking.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Follows the work of Yang et al. [https://www.cs.cmu.edu/~diyiy/docs/naacl16.pdf]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;Hierarchical Attention Networks for Document Classification&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    by using a context vector to assist the attention
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    # Input shape
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        3D tensor with shape: `(samples, steps, features)`.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    # Output shape
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        2D tensor with shape: `(samples, features)`.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    How to use:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Just put it on top of an RNN Layer (GRU/LSTM/SimpleRNN) with return_sequences=True.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    The dimensions are inferred based on the output shape of the RNN.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Note: The layer has been tested with Keras 2.0.6
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Example:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        model.add(LSTM(64, return_sequences=True))
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        model.add(AttentionWithContext())
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        # next add a Dense layer (for classification/regression) or whatever...
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,
                 W_regularizer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None, u_regularizer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None, b_regularizer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None,
                 W_constraint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None, u_constraint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None, b_constraint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None,
                 bias&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs):

        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;supports_masking &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; initializers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;glorot_uniform&amp;#39;&lt;/span&gt;)

        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;W_regularizer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; regularizers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(W_regularizer)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u_regularizer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; regularizers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(u_regularizer)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b_regularizer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; regularizers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(b_regularizer)

        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;W_constraint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; constraints&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(W_constraint)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u_constraint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; constraints&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(u_constraint)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b_constraint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; constraints&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(b_constraint)

        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bias &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bias
        super(AttentionWithContext, self)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__init__(&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;(self, input_shape):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; len(input_shape) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;

        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;W &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_weight((input_shape[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], input_shape[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],),
                                 initializer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init,
                                 name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{}_W&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name),
                                 regularizer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;W_regularizer,
                                 constraint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;W_constraint)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bias:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_weight((input_shape[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],),
                                     initializer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zero&amp;#39;&lt;/span&gt;,
                                     name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{}_b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name),
                                     regularizer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b_regularizer,
                                     constraint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b_constraint)

        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_weight((input_shape[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],),
                                 initializer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init,
                                 name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{}_u&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name),
                                 regularizer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u_regularizer,
                                 constraint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u_constraint)

        super(AttentionWithContext, self)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;build(input_shape)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compute_mask&lt;/span&gt;(self, input, input_mask&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):
        &lt;span style=&#34;color:#75715e&#34;&gt;# do not pass the mask to the next layers&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;(self, x, mask&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):
        uit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dot_product(x, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;W)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bias:
            uit &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b

        uit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; K&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tanh(uit)
        ait &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dot_product(uit, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u)

        a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; K&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exp(ait)

        &lt;span style=&#34;color:#75715e&#34;&gt;# apply mask after the exp. will be re-normalized next&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; mask &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            &lt;span style=&#34;color:#75715e&#34;&gt;# Cast the mask to floatX to avoid float64 upcasting in theano&lt;/span&gt;
            a &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; K&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cast(mask, K&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;floatx())

        &lt;span style=&#34;color:#75715e&#34;&gt;# in some cases especially in the early stages of training the sum may be almost zero&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# and this results in NaN&amp;#39;s. A workaround is to add a very small positive number ε to the sum.&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# a /= K.cast(K.sum(a, axis=1, keepdims=True), K.floatx())&lt;/span&gt;
        a &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; K&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cast(K&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum(a, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, keepdims&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; K&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;epsilon(), K&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;floatx())

        a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; K&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;expand_dims(a)
        weighted_input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; K&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum(weighted_input, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compute_output_shape&lt;/span&gt;(self, input_shape):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; input_shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], input_shape[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;model_lstm_atten&lt;/span&gt;(embedding_matrix):
    inp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Input(shape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(maxlen,))
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Embedding(max_features, embed_size, weights&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[embedding_matrix], trainable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)(inp)
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Bidirectional(CuDNNLSTM(&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;, return_sequences&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True))(x)
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Bidirectional(CuDNNLSTM(&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, return_sequences&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True))(x)
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AttentionWithContext()(x)
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Dense(&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;relu&amp;#34;&lt;/span&gt;)(x)
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Dense(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sigmoid&amp;#34;&lt;/span&gt;)(x)
    model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Model(inputs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;inp, outputs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x)
    model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(loss&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;binary_crossentropy&amp;#39;&lt;/span&gt;, optimizer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;adam&amp;#39;&lt;/span&gt;, metrics&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;accuracy&amp;#39;&lt;/span&gt;])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; model&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have written a simplified and well commented code to run this network(taking input from a lot of other kernels) on a &lt;a href=&#34;https://www.kaggle.com/mlwhiz/learning-text-classification-attention&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;kaggle kernel&lt;/a&gt; for this competition. Do take a look there to learn the preprocessing steps, and the word to vec embeddings usage in this model. You will learn something. Please do upvote the kernel if you find it helpful. This kernel scored around 0.682 on the public leaderboard.&lt;/p&gt;

&lt;p&gt;Hope that Helps! Do checkout the kernels for all the networks and see the comments too. I will try to write a part 2 of this post where I would like to talk about capsule networks and more techniques as they get used in this competition.&lt;/p&gt;

&lt;p&gt;Here are the kernel links again: &lt;a href=&#34;https://www.kaggle.com/mlwhiz/learning-text-classification-textcnn&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;TextCNN&lt;/a&gt;,&lt;a href=&#34;https://www.kaggle.com/mlwhiz/learning-text-classification-bidirectionalrnn&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;BiLSTM/GRU&lt;/a&gt;,&lt;a href=&#34;https://www.kaggle.com/mlwhiz/learning-text-classification-attention&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Attention&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do upvote the kenels if you find them helpful.&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.wildml.com/2015/11/understanding-convolutional-neural-networks-for-nlp/&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;CNN for NLP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.diveintodeeplearning.org/d2l-en.pdf&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;https://en.diveintodeeplearning.org/d2l-en.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/cbaziotis/7ef97ccf71cbc14366835198c09809d2&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;https://gist.github.com/cbaziotis/7ef97ccf71cbc14366835198c09809d2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://univagora.ro/jour/index.php/ijccc/article/view/3142&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;http://univagora.ro/jour/index.php/ijccc/article/view/3142&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/shujian/fork-of-mix-of-nn-models&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Shujian&amp;rsquo;s kernel on Kaggle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>To all Data Scientists - The one Graph Algorithm you need to know</title>
      <link>https://mlwhiz.com/blog/2018/12/07/connected_components/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2018/12/07/connected_components/</guid>
      <description>

&lt;p&gt;Graphs provide us with a very useful data structure. They can help us to find structure within our data. With the advent of Machine learning and big data we need to get as much information as possible about our data. Learning a little bit of graph theory can certainly help us with that.&lt;/p&gt;

&lt;p&gt;Here is a &lt;a href=&#34;https://www.coursera.org/learn/big-data-graph-analytics?ranMID=40328&amp;amp;ranEAID=lVarvwc5BD0&amp;amp;ranSiteID=lVarvwc5BD0-uD3tAFL0mCUdzcfwDd6FTQ&amp;amp;siteID=lVarvwc5BD0-uD3tAFL0mCUdzcfwDd6FTQ&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Graph Analytics for Big Data course on Coursera by UCSanDiego&lt;/a&gt; which I highly recommend to learn the basics of graph theory. You can start for free with the 7-day Free Trial.&lt;/p&gt;

&lt;p&gt;One of the algorithms I am going to focus in the current post is called &lt;strong&gt;Connected Components&lt;/strong&gt;. Why it is important. We all know clustering.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can think of Connected Components in very layman&amp;rsquo;s terms as sort of a hard clustering algorithm which finds clusters/islands in related/connected data. As a concrete example: Say you have data about roads joining any two cities in the world. And you need to find out all the continents in the world and which city they contain.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;How will you achieve that? Come on give some thought.&lt;/p&gt;

&lt;p&gt;To put a &lt;strong&gt;Retail Perspective&lt;/strong&gt;: Lets say, we have a lot of customers using a lot of accounts. One way in which we can use the Connected components algorithm is to find out distinct families in our dataset. We can assume edges(roads) between CustomerIDs based on same credit card usage, or same address or same mobile number etc. Once we have those connections, we can then run the connected component algorithm on the same to create individual clusters to which we can then assign a family ID. We can use these family IDs to provide personalized recommendations based on a family needs. We can also use this family ID to fuel our classification algorithms by creating grouped features based on family.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;Finance Perspective&lt;/strong&gt;: Another use case would be to capture fraud using these family IDs. If an account has done fraud in past, it is highly probable that the connected accounts are also susceptible to fraud.&lt;/p&gt;

&lt;p&gt;So enough of use cases. Lets start with a simple graph class written in Python to start up our exploits with code.&lt;/p&gt;

&lt;p&gt;This post will revolve more around code from here onwards.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34; A Python Class
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;A simple Python graph class, demonstrating the essential 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;facts and functionalities of graphs.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Taken from https://www.python-course.eu/graphs_python.php
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Changed the implementation a little bit to include weighted edges
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Graph&lt;/span&gt;(object):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, graph_dict&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34; initializes a graph object 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            If no dictionary or None is given, 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            an empty dictionary will be used
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; graph_dict &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; None:
            graph_dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__graph_dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph_dict

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vertices&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34; returns the vertices of a graph &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; list(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__graph_dict&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys())

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;edges&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34; returns the edges of a graph &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__generate_edges()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_vertex&lt;/span&gt;(self, vertex):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34; If the vertex &amp;#34;vertex&amp;#34; is not in 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            self.__graph_dict, a key &amp;#34;vertex&amp;#34; with an empty
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            dict as a value is added to the dictionary. 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            Otherwise nothing has to be done. 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; vertex &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__graph_dict:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__graph_dict[vertex] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_edge&lt;/span&gt;(self, edge,weight&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34; assumes that edge is of type set, tuple or list
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(edge)
        (vertex1, vertex2) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tuple(edge)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; vertex1 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__graph_dict:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__graph_dict[vertex1][vertex2] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; weight
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__graph_dict[vertex1] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {vertex2:weight}

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; vertex2 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__graph_dict:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__graph_dict[vertex2][vertex1] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; weight
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__graph_dict[vertex2] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {vertex1:weight}
        

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__generate_edges&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34; A static method generating the edges of the 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            graph &amp;#34;graph&amp;#34;. Edges are represented as sets 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            with one (a loop back to the vertex) or two 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            vertices 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        edges &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; vertex &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__graph_dict:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; neighbour,weight &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__graph_dict[vertex]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iteritems():
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (neighbour, vertex, weight) &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; edges:
                    edges&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([vertex, neighbour, weight])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; edges

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __str__(self):
        res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vertices: &amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__graph_dict:
            res &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; str(k) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;
        res &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;edges: &amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; edge &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__generate_edges():
            res &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; str(edge) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;adj_mat&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__graph_dict&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can certainly play with our new graph class.Here we try to build some graphs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt; : {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;},
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt; : {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;},
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; : {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}
    }
graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Graph(g)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Vertices of graph:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vertices())
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Edges of graph:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;edges())
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Add vertex:&amp;#34;&lt;/span&gt;)
graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_vertex(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;z&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Vertices of graph:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vertices()) 
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Add an edge:&amp;#34;&lt;/span&gt;)
graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_edge({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;z&amp;#34;&lt;/span&gt;})    
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Vertices of graph:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vertices())
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Edges of graph:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;edges())
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Adding an edge {&amp;#34;x&amp;#34;,&amp;#34;y&amp;#34;} with new vertices:&amp;#39;&lt;/span&gt;)
graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_edge({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;})
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Vertices of graph:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vertices())
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Edges of graph:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;edges())&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-family:courier new,monospace; background-color:#f6c6529c; color:#000000&#34;&gt;Vertices of graph:
[&#39;a&#39;, &#39;c&#39;, &#39;b&#39;]
Edges of graph:
[[&#39;a&#39;, &#39;d&#39;, 2], [&#39;c&#39;, &#39;b&#39;, 5], [&#39;c&#39;, &#39;e&#39;, 5], [&#39;c&#39;, &#39;d&#39;, 3], [&#39;b&#39;, &#39;c&#39;, 2]]
Add vertex:
Vertices of graph:
[&#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;z&#39;]
Add an edge:
Vertices of graph:
[&#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;z&#39;]
Edges of graph:
[[&#39;a&#39;, &#39;z&#39;, 1], [&#39;a&#39;, &#39;d&#39;, 2], [&#39;c&#39;, &#39;b&#39;, 5], [&#39;c&#39;, &#39;e&#39;, 5], [&#39;c&#39;, &#39;d&#39;, 3], [&#39;b&#39;, &#39;c&#39;, 2], [&#39;z&#39;, &#39;a&#39;, 1]]
Adding an edge {&#34;x&#34;,&#34;y&#34;} with new vertices:
Vertices of graph:
[&#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;y&#39;, &#39;x&#39;, &#39;z&#39;]
Edges of graph:
[[&#39;a&#39;, &#39;z&#39;, 1], [&#39;a&#39;, &#39;d&#39;, 2], [&#39;c&#39;, &#39;b&#39;, 5], [&#39;c&#39;, &#39;e&#39;, 5], [&#39;c&#39;, &#39;d&#39;, 3], [&#39;b&#39;, &#39;c&#39;, 2], [&#39;y&#39;, &#39;x&#39;, 1], [&#39;x&#39;, &#39;y&#39;, 1], [&#39;z&#39;, &#39;a&#39;, 1]]
&lt;/pre&gt;

&lt;p&gt;Lets do something interesting now.&lt;/p&gt;

&lt;p&gt;We will use the above graph class for our understanding purpose. There are many Modules in python which we can use to do whatever I am going to do next,but to understand the methods we will write everything from scratch.
Lets start with an example graph which we can use for our purpose.&lt;/p&gt;

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/a/ad/MapGermanyGraph.svg/1200px-MapGermanyGraph.svg.png&#34;  height=&#34;400&#34; width=&#34;700&#34; &gt;&lt;/center&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Frankfurt&amp;#39;&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mannheim&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Wurzburg&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;217&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Kassel&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;173&lt;/span&gt;},
     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mannheim&amp;#39;&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Frankfurt&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Karlsruhe&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;},
     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Karlsruhe&amp;#39;&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Augsburg&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mannheim&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;},
     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Augsburg&amp;#39;&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Karlsruhe&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Munchen&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;},
     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Wurzburg&amp;#39;&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Erfurt&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;186&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Numberg&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Frankfurt&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;217&lt;/span&gt;},
     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Erfurt&amp;#39;&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Wurzburg&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;186&lt;/span&gt;},
     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Numberg&amp;#39;&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Wurzburg&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Stuttgart&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;183&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Munchen&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;167&lt;/span&gt;},
     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Munchen&amp;#39;&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Numberg&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;167&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Augsburg&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Kassel&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;502&lt;/span&gt;},
     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Kassel&amp;#39;&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Frankfurt&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;173&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Munchen&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;502&lt;/span&gt;},
     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Stuttgart&amp;#39;&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Numberg&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;183&lt;/span&gt;}
     }
graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Graph(g)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Vertices of graph:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vertices())
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Edges of graph:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;edges())&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-family:courier new,monospace; background-color:#f6c6529c; color:#000000&#34;&gt;
Vertices of graph:
[&#39;Mannheim&#39;, &#39;Erfurt&#39;, &#39;Munchen&#39;, &#39;Numberg&#39;, &#39;Stuttgart&#39;, &#39;Augsburg&#39;, &#39;Kassel&#39;, &#39;Frankfurt&#39;, &#39;Wurzburg&#39;, &#39;Karlsruhe&#39;]
Edges of graph:
[[&#39;Mannheim&#39;, &#39;Frankfurt&#39;, 85], [&#39;Mannheim&#39;, &#39;Karlsruhe&#39;, 80], [&#39;Erfurt&#39;, &#39;Wurzburg&#39;, 186], [&#39;Munchen&#39;, &#39;Numberg&#39;, 167], [&#39;Munchen&#39;, &#39;Augsburg&#39;, 84], [&#39;Munchen&#39;, &#39;Kassel&#39;, 502], [&#39;Numberg&#39;, &#39;Stuttgart&#39;, 183], [&#39;Numberg&#39;, &#39;Wurzburg&#39;, 103], [&#39;Numberg&#39;, &#39;Munchen&#39;, 167], [&#39;Stuttgart&#39;, &#39;Numberg&#39;, 183], [&#39;Augsburg&#39;, &#39;Munchen&#39;, 84], [&#39;Augsburg&#39;, &#39;Karlsruhe&#39;, 250], [&#39;Kassel&#39;, &#39;Munchen&#39;, 502], [&#39;Kassel&#39;, &#39;Frankfurt&#39;, 173], [&#39;Frankfurt&#39;, &#39;Mannheim&#39;, 85], [&#39;Frankfurt&#39;, &#39;Wurzburg&#39;, 217], [&#39;Frankfurt&#39;, &#39;Kassel&#39;, 173], [&#39;Wurzburg&#39;, &#39;Numberg&#39;, 103], [&#39;Wurzburg&#39;, &#39;Erfurt&#39;, 186], [&#39;Wurzburg&#39;, &#39;Frankfurt&#39;, 217], [&#39;Karlsruhe&#39;, &#39;Mannheim&#39;, 80], [&#39;Karlsruhe&#39;, &#39;Augsburg&#39;, 250]]
&lt;/pre&gt;

&lt;p&gt;Lets say we are given a graph with the cities of Germany and respective distance between them. &lt;strong&gt;You want to find out how to go from Frankfurt (The starting node) to Munchen&lt;/strong&gt;. There might be many ways in which you can traverse the graph but you need to find how many cities you will need to visit on a minimum to go from frankfurt to Munchen)
This problem is analogous to finding out distance between nodes in an unweighted graph.&lt;/p&gt;

&lt;p&gt;The algorithm that we use here is called as &lt;strong&gt;Breadth First Search&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;min_num_edges_between_nodes&lt;/span&gt;(graph,start_node):
    distance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    shortest_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [start_node] &lt;span style=&#34;color:#75715e&#34;&gt;#FIFO&lt;/span&gt;
    levels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
    levels[start_node] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; 
    shortest_paths &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
    shortest_paths[start_node] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;
    visited &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [start_node]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(queue)&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
        neighbours &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph[start]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; neighbour,_ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; neighbours&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iteritems():
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; neighbour &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; visited:
                queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(neighbour)
                visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(neighbour)
                levels[neighbour] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; levels[start]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                shortest_paths[neighbour] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shortest_paths[start] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; start
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; levels, shortest_paths&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What we do in the above piece of code is create a queue and traverse it based on levels.
We start with Frankfurt as starting node.
We loop through its neighbouring cities(Menheim, Wurzburg and Kassel) and push them into the queue.
We keep track of what level they are at and also the path through which we reached them.
Since we are popping a first element of a queue we are sure we will visit cities in the order of their level.&lt;/p&gt;

&lt;p&gt;Checkout this good &lt;a href=&#34;https://medium.com/basecs/breaking-down-breadth-first-search-cebe696709d9&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;post&lt;/a&gt; about BFS to understand more about queues and BFS.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;min_num_edges_between_nodes(g,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Frankfurt&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-family:courier new,monospace; background-color:#f6c6529c; color:#000000&#34;&gt;
  ({&#39;Augsburg&#39;: 3,
  &#39;Erfurt&#39;: 2,
  &#39;Frankfurt&#39;: 0,
  &#39;Karlsruhe&#39;: 2,
  &#39;Kassel&#39;: 1,
  &#39;Mannheim&#39;: 1,
  &#39;Munchen&#39;: 2,
  &#39;Numberg&#39;: 2,
  &#39;Stuttgart&#39;: 3,
  &#39;Wurzburg&#39;: 1},
 {&#39;Augsburg&#39;: &#39;:-&gt;Frankfurt-&gt;Mannheim-&gt;Karlsruhe&#39;,
  &#39;Erfurt&#39;: &#39;:-&gt;Frankfurt-&gt;Wurzburg&#39;,
  &#39;Frankfurt&#39;: &#39;:&#39;,
  &#39;Karlsruhe&#39;: &#39;:-&gt;Frankfurt-&gt;Mannheim&#39;,
  &#39;Kassel&#39;: &#39;:-&gt;Frankfurt&#39;,
  &#39;Mannheim&#39;: &#39;:-&gt;Frankfurt&#39;,
  &#39;Munchen&#39;: &#39;:-&gt;Frankfurt-&gt;Kassel&#39;,
  &#39;Numberg&#39;: &#39;:-&gt;Frankfurt-&gt;Wurzburg&#39;,
  &#39;Stuttgart&#39;: &#39;:-&gt;Frankfurt-&gt;Wurzburg-&gt;Numberg&#39;,
  &#39;Wurzburg&#39;: &#39;:-&gt;Frankfurt&#39;})
&lt;/pre&gt;

&lt;p&gt;I did this example to show how  BFS algorithm works.
We can extend this algorithm to find out connected components in an unconnected graph.
Lets say we need to find groups of unconnected vertices in the graph.&lt;/p&gt;

&lt;p&gt;For example: the below graph has 3 unconnected sub-graphs. Can we find what nodes belong to a particular subgraph?&lt;/p&gt;

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/8/85/Pseudoforest.svg&#34;  height=&#34;400&#34; width=&#34;700&#34; &gt;&lt;/center&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#We add another countries in the loop &lt;/span&gt;
graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Graph(g)
graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_edge((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mumbai&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Delhi&amp;#34;&lt;/span&gt;),&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;)
graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_edge((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Delhi&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Kolkata&amp;#34;&lt;/span&gt;),&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;)
graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_edge((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Kolkata&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bangalore&amp;#34;&lt;/span&gt;),&lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt;)
graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_edge((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TX&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NY&amp;#34;&lt;/span&gt;),&lt;span style=&#34;color:#ae81ff&#34;&gt;1200&lt;/span&gt;)
graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_edge((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ALB&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NY&amp;#34;&lt;/span&gt;),&lt;span style=&#34;color:#ae81ff&#34;&gt;800&lt;/span&gt;)

g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;adj_mat()

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bfs_connected_components&lt;/span&gt;(graph):
    connected_components &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(nodes)&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        start_node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
        queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [start_node] &lt;span style=&#34;color:#75715e&#34;&gt;#FIFO&lt;/span&gt;
        visited &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [start_node]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(queue)&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
            queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove(start)
            neighbours &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph[start]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; neighbour,_ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; neighbours&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iteritems():
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; neighbour &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; visited:
                    queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(neighbour)
                    visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(neighbour)
                    nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove(neighbour)
        connected_components&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(visited)
        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; connected_components

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; bfs_connected_components(g)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above code is similar to the previous BFS code. We keep all the vertices of the graph in the nodes list. We take a node from the nodes list and start BFS on it. as we visit a node we remove that node from the nodes list. Whenever the BFS completes we start again with another node in the nodes list until the nodes list is empty.&lt;/p&gt;

&lt;pre style=&#34;font-family:courier new,monospace; background-color:#f6c6529c; color:#000000&#34;&gt;[[&#39;Kassel&#39;,
  &#39;Munchen&#39;,
  &#39;Frankfurt&#39;,
  &#39;Numberg&#39;,
  &#39;Augsburg&#39;,
  &#39;Mannheim&#39;,
  &#39;Wurzburg&#39;,
  &#39;Stuttgart&#39;,
  &#39;Karlsruhe&#39;,
  &#39;Erfurt&#39;],
 [&#39;Bangalore&#39;, &#39;Kolkata&#39;, &#39;Delhi&#39;, &#39;Mumbai&#39;],
 [&#39;NY&#39;, &#39;ALB&#39;, &#39;TX&#39;]]
&lt;/pre&gt;

&lt;p&gt;As you can see we are able to find distinct components in our data. Just by using Edges and Vertices. This algorithm could be run on different data to satisfy any use case I presented above.&lt;/p&gt;

&lt;p&gt;But Normally using Connected Components for a retail case will involve a lot of data and you will need to scale this algorithm.&lt;/p&gt;

&lt;h2 id=&#34;connected-components-in-pyspark&#34;&gt;Connected Components in PySpark&lt;/h2&gt;

&lt;p&gt;Below is an implementation from this paper on &lt;a href=&#34;https://ai.google/research/pubs/pub43122&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Connected Components in
MapReduce and Beyond&lt;/a&gt; from Google Research. Read the PPT to understand the implementation better.
Some ready to use code for you.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_edges&lt;/span&gt;(line):
    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)]
    edges_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(a)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ,len(a)):
            edges_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((a[i],a[j]))
            edges_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((a[j],a[i]))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; edges_list

&lt;span style=&#34;color:#75715e&#34;&gt;# adj_list.txt is a txt file containing adjacency list of the graph.&lt;/span&gt;
adjacency_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;textFile(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;adj_list.txt&amp;#34;&lt;/span&gt;)

edges_rdd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; adjacency_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flatMap(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; line : create_edges(line))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;distinct()

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;largeStarInit&lt;/span&gt;(record):
    a, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; record
    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (a,b)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (b,a)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;largeStar&lt;/span&gt;(record):
    a, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; record
    t_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(b)
    t_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(a)
    list_min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(t_list)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; b:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; x:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (x,list_min)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;smallStarInit&lt;/span&gt;(record):
    a, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; record
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;a:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (a,b)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (b,a)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;smallStar&lt;/span&gt;(record):
    a, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; record
    t_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(b)
    t_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(a)
    list_min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(t_list)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; t_list:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;list_min:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (x,list_min)

&lt;span style=&#34;color:#75715e&#34;&gt;#Handle case for single nodes&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;single_vertex&lt;/span&gt;(line):
    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)]
    edges_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(a)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        edges_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((a[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],a[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; edges_list

iteration_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; iteration_num&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;iter&amp;#34;&lt;/span&gt;, iteration_num
        large_star_rdd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edges_rdd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupByKey()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flatMap(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x : largeStar(x))
        small_star_rdd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; large_star_rdd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flatMap(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x : smallStarInit(x))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupByKey()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flatMap(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x : smallStar(x))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;distinct()
        iteration_num &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;iter&amp;#34;&lt;/span&gt;, iteration_num
        large_star_rdd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; small_star_rdd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flatMap(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: largeStarInit(x))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupByKey()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flatMap(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x : largeStar(x))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;distinct()
        small_star_rdd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; large_star_rdd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flatMap(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x : smallStarInit(x))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupByKey()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flatMap(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x : smallStar(x))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;distinct()
        iteration_num &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#check Convergence&lt;/span&gt;

    changes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (large_star_rdd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subtract(small_star_rdd)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;union(small_star_rdd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subtract(large_star_rdd)))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;collect()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(changes) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;

single_vertex_rdd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; adjacency_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flatMap(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; line : single_vertex(line))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;distinct()

answer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; single_vertex_rdd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;collect() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; large_star_rdd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;collect()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; answer[:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;or-use-graphframes-in-pyspark&#34;&gt;Or Use GraphFrames in PySpark&lt;/h2&gt;

&lt;p&gt;To Install graphframes:&lt;/p&gt;

&lt;p&gt;I ran on command line: pyspark &amp;ndash;packages graphframes:graphframes:0.5.0-spark2.1-s_2.11 which opened up my notebook and installed graphframes after i try to import in my notebook.&lt;/p&gt;

&lt;p&gt;The string to be formatted as : graphframes:(latest version)-spark(your spark version)-s_(your scala version).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Checkout&lt;/em&gt; &lt;a href=&#34;http://go.databricks.com/hubfs/notebooks/3-GraphFrames-User-Guide-python.html&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;this guide on how to use GraphFrames&lt;/a&gt; for more information.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; graphframes &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vertices&lt;/span&gt;(line):
    vert &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; vert

vertices &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; adjacency_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flatMap(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: vertices(x))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;distinct()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;collect()
vertices &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sqlContext&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;createDataFrame([[x] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; vertices], [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;])

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_edges&lt;/span&gt;(line):
    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)]
    edges_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(a)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        edges_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((a[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],a[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(a)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ,len(a)):
            edges_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((a[i],a[j]))
            edges_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((a[j],a[i]))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; edges_list

edges &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; adjacency_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flatMap(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: create_edges(x))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;distinct()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;collect()
edges &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sqlContext&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;createDataFrame(edges, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;src&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dst&amp;#34;&lt;/span&gt;])

g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GraphFrame(vertices, edges)
sc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setCheckpointDir(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# graphframes uses the same paper we referenced apparently&lt;/span&gt;
cc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connectedComponents()
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; cc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The GraphFrames library implements the CC algorithm as well as a variety of other graph algorithms.&lt;/p&gt;

&lt;p&gt;The above post was a lot of code but hope it was helpful. It took me a lot of time to implement the algorithm so wanted to make it easy for the folks.&lt;/p&gt;

&lt;p&gt;If you want to read up more on Graph Algorithms here is an &lt;a href=&#34;https://www.coursera.org/learn/big-data-graph-analytics?ranMID=40328&amp;amp;ranEAID=lVarvwc5BD0&amp;amp;ranSiteID=lVarvwc5BD0-uD3tAFL0mCUdzcfwDd6FTQ&amp;amp;siteID=lVarvwc5BD0-uD3tAFL0mCUdzcfwDd6FTQ&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Graph Analytics for Big Data course on Coursera by UCSanDiego&lt;/a&gt; which I highly recommend to learn the basics of graph theory.&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.python-course.eu/graphs_python.php&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Graphs in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/basecs/a-gentle-introduction-to-graph-theory-77969829ead8&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;A Gentle Intoduction to Graph Theory Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/big-data-graph-analytics?ranMID=40328&amp;amp;ranEAID=lVarvwc5BD0&amp;amp;ranSiteID=lVarvwc5BD0-uD3tAFL0mCUdzcfwDd6FTQ&amp;amp;siteID=lVarvwc5BD0-uD3tAFL0mCUdzcfwDd6FTQ&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Graph Analytics for Big Data course on Coursera by UCSanDiego&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Using XGBoost for time series prediction tasks</title>
      <link>https://mlwhiz.com/blog/2017/12/26/win_a_data_science_competition/</link>
      <pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2017/12/26/win_a_data_science_competition/</guid>
      <description>

&lt;p&gt;Recently Kaggle master Kazanova along with some of his friends released a &lt;a href=&#34;https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-BShznKdc3CUauhfsM7_8xw&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;How to win a data science competition&amp;rdquo;&lt;/a&gt; Coursera course. You can start for free with the 7-day Free Trial. The Course involved a final project which itself was a time series prediction problem. Here I will describe how I got a top 10 position as of writing this article.&lt;/p&gt;

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/lboard.png&#34;  height=&#34;800&#34; width=&#34;600&#34; &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;h2 id=&#34;description-of-the-problem&#34;&gt;Description of the Problem:&lt;/h2&gt;

&lt;p&gt;In this competition we were given a challenging time-series dataset consisting of daily sales data, kindly provided by one of the largest Russian software firms - 1C Company.&lt;/p&gt;

&lt;p&gt;We were asked you to predict total sales for every product and store in the next month.&lt;/p&gt;

&lt;p&gt;The evaluation metric was RMSE where True target values are clipped into [0,20] range. This target range will be a lot important in understanding the submissions that I will prepare.&lt;/p&gt;

&lt;p&gt;The main thing that I noticed was that the data preparation aspect of this competition was by far the most important thing. I creted a variety of features. Here are the steps I took and the features I created.&lt;/p&gt;

&lt;h2 id=&#34;1-created-a-dataframe-of-all-date-block-num-store-and-item-combinations&#34;&gt;1. Created a dataframe of all Date_block_num, Store and  Item combinations:&lt;/h2&gt;

&lt;p&gt;This is important because in the months we don&amp;rsquo;t have a data for an item store combination, the machine learning algorithm needs to be specifically told that the sales is zero.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; itertools &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; product
&lt;span style=&#34;color:#75715e&#34;&gt;# Create &amp;#34;grid&amp;#34; with columns&lt;/span&gt;
index_cols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shop_id&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_id&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date_block_num&amp;#39;&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# For every month we create a grid from all shops/items combinations from that month&lt;/span&gt;
grid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; block_num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sales[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date_block_num&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unique():
    cur_shops &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[sales[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date_block_num&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; block_num, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shop_id&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unique()
    cur_items &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[sales[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date_block_num&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; block_num, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_id&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unique()
    grid&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(list(product(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;[cur_shops, cur_items, [block_num]])),dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;int32&amp;#39;&lt;/span&gt;))
grid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vstack(grid), columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index_cols,dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;int32)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;2-cleaned-up-a-little-of-sales-data-after-some-basic-eda&#34;&gt;2. Cleaned up a little of sales data after some basic EDA:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;sales &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales[sales&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item_price&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;]
sales &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales[sales&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item_cnt_day&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;3-created-mean-encodings&#34;&gt;3. Created Mean Encodings:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;sales_m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date_block_num&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shop_id&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_id&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;agg({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_cnt_day&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sum&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_price&amp;#39;&lt;/span&gt;: np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean})&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index()
sales_m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge(grid,sales_m,on&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date_block_num&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shop_id&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_id&amp;#39;&lt;/span&gt;],how&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;left&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# adding the category id too&lt;/span&gt;
sales_m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge(sales_m,items,on&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_id&amp;#39;&lt;/span&gt;],how&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;left&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; type_id &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_id&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shop_id&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_category_id&amp;#39;&lt;/span&gt;]:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; column_id,aggregator,aggtype &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_price&amp;#39;&lt;/span&gt;,np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;avg&amp;#39;&lt;/span&gt;),(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_cnt_day&amp;#39;&lt;/span&gt;,np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sum&amp;#39;&lt;/span&gt;),(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_cnt_day&amp;#39;&lt;/span&gt;,np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;avg&amp;#39;&lt;/span&gt;)]:

        mean_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby([type_id,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date_block_num&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aggregate(aggregator)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index()[[column_id,type_id,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date_block_num&amp;#39;&lt;/span&gt;]]
        mean_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [type_id&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;aggtype&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;column_id,type_id,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date_block_num&amp;#39;&lt;/span&gt;]

        sales_m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge(sales_m,mean_df,on&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date_block_num&amp;#39;&lt;/span&gt;,type_id],how&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;left&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These above lines add the following 9 features :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lsquo;item_id_avg_item_price&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;item_id_sum_item_cnt_day&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;item_id_avg_item_cnt_day&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;shop_id_avg_item_price&amp;rsquo;,&lt;/li&gt;
&lt;li&gt;&amp;lsquo;shop_id_sum_item_cnt_day&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;shop_id_avg_item_cnt_day&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;item_category_id_avg_item_price&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;item_category_id_sum_item_cnt_day&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;item_category_id_avg_item_cnt_day&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-create-lag-features&#34;&gt;4. Create Lag Features:&lt;/h2&gt;

&lt;p&gt;Next we create lag features with diferent lag periods on the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lsquo;item_id_avg_item_price&amp;rsquo;,&lt;/li&gt;
&lt;li&gt;&amp;lsquo;item_id_sum_item_cnt_day&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;item_id_avg_item_cnt_day&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;shop_id_avg_item_price&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;shop_id_sum_item_cnt_day&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;shop_id_avg_item_cnt_day&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;item_category_id_avg_item_price&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;item_category_id_sum_item_cnt_day&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;item_category_id_avg_item_cnt_day&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;item_cnt_day&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;lag_variables  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(sales_m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:])&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_cnt_day&amp;#39;&lt;/span&gt;]
lags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; lag &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lags:
    sales_new_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales_m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
    sales_new_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;date_block_num&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;lag
    sales_new_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales_new_df[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date_block_num&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shop_id&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_id&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;lag_variables]
    sales_new_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date_block_num&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shop_id&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_id&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [lag_feat&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_lag_&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;str(lag) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; lag_feat &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lag_variables]
    sales_means &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge(sales_means, sales_new_df,on&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date_block_num&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shop_id&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_id&amp;#39;&lt;/span&gt;] ,how&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;left&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;5-fill-na-with-zeros&#34;&gt;5. Fill NA with zeros:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; feat &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sales_means&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_cnt&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; feat:
        sales_means[feat]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sales_means[feat]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_price&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; feat:
        sales_means[feat]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sales_means[feat]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(sales_means[feat]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;median())&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;6-drop-the-columns-that-we-are-not-going-to-use-in-training&#34;&gt;6. Drop the columns that we are not going to use in training:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;cols_to_drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lag_variables[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_name&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_price&amp;#39;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;7-take-a-recent-bit-of-data-only&#34;&gt;7. Take a recent bit of data only:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;sales_means &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales_means[sales_means[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date_block_num&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;8-split-in-train-and-cv&#34;&gt;8. Split in train and CV :&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;X_train &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales_means[sales_means[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date_block_num&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop(cols_to_drop, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
X_cv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  sales_means[sales_means[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date_block_num&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop(cols_to_drop, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;9-the-magic-sauce&#34;&gt;9. THE MAGIC SAUCE:&lt;/h2&gt;

&lt;p&gt;In the start I told that the clipping aspect of [0,20] will be important.
In the next few lines I clipped the days to range[0,40]. You might ask me why 40. An intuitive answer is if I had clipped to range [0,20] there would be very few tree nodes that could give 20 as an answer. While if I increase it to 40 having a 20 becomes much more easier. Please note that We will clip our predictions in the [0,20] range in the end.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clip&lt;/span&gt;(x):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x
train[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_cnt_day&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: clip(x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_cnt_day&amp;#39;&lt;/span&gt;]),axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
cv[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_cnt_day&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: clip(x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_cnt_day&amp;#39;&lt;/span&gt;]),axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;10-modelling&#34;&gt;10: Modelling:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Created a XGBoost model to get the most important features(Top 42 features)&lt;/li&gt;
&lt;li&gt;Use hyperopt to tune xgboost&lt;/li&gt;
&lt;li&gt;Used top 10 models from tuned XGBoosts to generate predictions.&lt;/li&gt;
&lt;li&gt;clipped the predictions to [0,20] range&lt;/li&gt;
&lt;li&gt;Final solution was the average of these 10 predictions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learned a lot of new things from this &lt;a href=&#34;https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-BShznKdc3CUauhfsM7_8xw&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;awesome course&lt;/a&gt;. Most recommended.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Good Feature Building Techniques - Tricks for Kaggle -  My Kaggle Code Repository</title>
      <link>https://mlwhiz.com/blog/2017/09/14/kaggle_tricks/</link>
      <pubDate>Thu, 14 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2017/09/14/kaggle_tricks/</guid>
      <description>

&lt;p&gt;Often times it happens that we fall short of creativity. And creativity is one of the basic ingredients of what we do. Creating features needs creativity. So here is the list of ideas I gather in day to day life, where people have used creativity to get great results on Kaggle leaderboards.&lt;/p&gt;

&lt;p&gt;Take a look at the &lt;a href=&#34;https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-AqkGMb7JzoCMW0Np1uLfCA&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;How to Win a Data Science Competition: Learn from Top Kagglers&lt;/a&gt; course in the &lt;a href=&#34;https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-AqkGMb7JzoCMW0Np1uLfCA&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Advanced machine learning specialization&lt;/a&gt; by Kazanova(Number 3 Kaggler at the time of writing). You can start for free with the 7-day Free Trial.&lt;/p&gt;

&lt;p&gt;This post is inspired by a &lt;a href=&#34;https://www.kaggle.com/gaborfodor/from-eda-to-the-top-lb-0-368&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Kernel&lt;/a&gt; on Kaggle written by Beluga, one of the top Kagglers, for a knowledge based &lt;a href=&#34;https://www.kaggle.com/c/nyc-taxi-trip-duration&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;competition&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some of the techniques/tricks I am sharing have been taken directly from that kernel so you could take a look yourself.
Otherwise stay here and read on.&lt;/p&gt;

&lt;h2 id=&#34;1-don-t-try-predicting-the-future-when-you-don-t-have-to&#34;&gt;1. Don&amp;rsquo;t try predicting the future when you don&amp;rsquo;t have to:&lt;/h2&gt;

&lt;p&gt;If both training/test comes from the same timeline, we can get really crafty with features. Although this is a case with Kaggle only, we can use this to our advantage. For example: In the Taxi Trip duration challenge the test data is randomly sampled from the train data. In this case we can use the target variable averaged over different categorical variable as a feature. Like in this case Beluga actually used the averaged the target variable over different weekdays. He then mapped the same averaged value as a variable by mapping it to test data too.&lt;/p&gt;

&lt;h2 id=&#34;2-logloss-clipping-technique&#34;&gt;2. logloss clipping Technique:&lt;/h2&gt;

&lt;p&gt;Something that I learned in the Neural Network course by Jeremy Howard. Its based on a very simple Idea. Logloss penalises a lot if we are very confident and wrong. So in case of Classification problems where we have to predict probabilities, it would be much better to clip our probabilities between 0.05-0.95 so that we are never very sure about our prediction.&lt;/p&gt;

&lt;h2 id=&#34;3-kaggle-submission-in-gzip-format&#34;&gt;3. kaggle submission in gzip format:&lt;/h2&gt;

&lt;p&gt;A small piece of code that will help you save countless hours of uploading. Enjoy.
df.to_csv(&amp;lsquo;submission.csv.gz&amp;rsquo;, index=False, compression=&amp;lsquo;gzip&amp;rsquo;)&lt;/p&gt;

&lt;h2 id=&#34;4-how-best-to-use-latitude-and-longitude-features-part-1&#34;&gt;4. How best to use Latitude and Longitude features - Part 1:&lt;/h2&gt;

&lt;p&gt;One of the best things that I liked about the Beluga Kernel is how he used the Lat/Lon Data. So in the example we had pickup Lat/Lon and Dropoff Lat/Lon. We created features like:&lt;/p&gt;

&lt;h4 id=&#34;a-haversine-distance-between-the-two-lat-lons&#34;&gt;A. Haversine Distance Between the Two Lat/Lons:&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;haversine_array&lt;/span&gt;(lat1, lng1, lat2, lng2):
    lat1, lng1, lat2, lng2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;radians, (lat1, lng1, lat2, lng2))
    AVG_EARTH_RADIUS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6371&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# in km&lt;/span&gt;
    lat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lat2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; lat1
    lng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lng2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; lng1
    d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sin(lat &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cos(lat1) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cos(lat2) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sin(lng &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; AVG_EARTH_RADIUS &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arcsin(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sqrt(d))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; h&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;b-manhattan-distance-between-the-two-lat-lons&#34;&gt;B. Manhattan Distance Between the two Lat/Lons:&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dummy_manhattan_distance&lt;/span&gt;(lat1, lng1, lat2, lng2):
    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; haversine_array(lat1, lng1, lat1, lng2)
    b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; haversine_array(lat1, lng1, lat2, lng1)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;c-bearing-between-the-two-lat-lons&#34;&gt;C. Bearing Between the two Lat/Lons:&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bearing_array&lt;/span&gt;(lat1, lng1, lat2, lng2):
    AVG_EARTH_RADIUS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6371&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# in km&lt;/span&gt;
    lng_delta_rad &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;radians(lng2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; lng1)
    lat1, lng1, lat2, lng2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;radians, (lat1, lng1, lat2, lng2))
    y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sin(lng_delta_rad) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cos(lat2)
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cos(lat1) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sin(lat2) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sin(lat1) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cos(lat2) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cos(lng_delta_rad)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;degrees(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arctan2(y, x))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;d-center-latitude-and-longitude-between-pickup-and-dropoff&#34;&gt;D. Center Latitude and Longitude between Pickup and Dropoff:&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[:, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;center_latitude&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (train[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_latitude&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; train[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_latitude&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[:, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;center_longitude&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (train[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_longitude&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; train[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_longitude&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;5-how-best-to-use-latitude-and-longitude-features-part-2&#34;&gt;5. How best to use Latitude and Longitude features - Part 2:&lt;/h2&gt;

&lt;p&gt;The Second way he used the Lat/Lon Feats was to create clusters for Pickup and Dropoff Lat/Lons. The way it worked was it created sort of Boroughs in the data by design.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.cluster &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; MiniBatchKMeans
coords &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vstack((train[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_latitude&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_longitude&amp;#39;&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values,
                    train[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_latitude&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_longitude&amp;#39;&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values,
                    test[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_latitude&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_longitude&amp;#39;&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values,
                    test[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_latitude&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_longitude&amp;#39;&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values))

sample_ind &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;permutation(len(coords))[:&lt;span style=&#34;color:#ae81ff&#34;&gt;500000&lt;/span&gt;]
kmeans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MiniBatchKMeans(n_clusters&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, batch_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(coords[sample_ind])

train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[:, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_cluster&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; kmeans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(train[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_latitude&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_longitude&amp;#39;&lt;/span&gt;]])
train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[:, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_cluster&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; kmeans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(train[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_latitude&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_longitude&amp;#39;&lt;/span&gt;]])
test&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[:, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_cluster&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; kmeans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(test[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_latitude&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_longitude&amp;#39;&lt;/span&gt;]])
test&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[:, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_cluster&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; kmeans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(test[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_latitude&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_longitude&amp;#39;&lt;/span&gt;]])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;He then used these Clusters to create features like counting no of trips going out and coming in on a particular day.&lt;/p&gt;

&lt;h2 id=&#34;6-how-best-to-use-latitude-and-longitude-features-part-3&#34;&gt;6. How best to use Latitude and Longitude features - Part 3&lt;/h2&gt;

&lt;p&gt;He used PCA to transform longitude and latitude coordinates. In this case it is not about dimension reduction since he transformed 2D-&amp;gt; 2D. The rotation could help for decision tree splits, and it did actually.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;pca &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PCA()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(coords)
train[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_pca0&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pca&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transform(train[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_latitude&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_longitude&amp;#39;&lt;/span&gt;]])[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
train[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_pca1&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pca&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transform(train[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_latitude&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_longitude&amp;#39;&lt;/span&gt;]])[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
train[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_pca0&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pca&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transform(train[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_latitude&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_longitude&amp;#39;&lt;/span&gt;]])[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
train[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_pca1&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pca&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transform(train[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_latitude&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_longitude&amp;#39;&lt;/span&gt;]])[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
test[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_pca0&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pca&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transform(test[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_latitude&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_longitude&amp;#39;&lt;/span&gt;]])[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
test[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_pca1&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pca&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transform(test[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_latitude&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pickup_longitude&amp;#39;&lt;/span&gt;]])[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
test[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_pca0&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pca&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transform(test[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_latitude&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_longitude&amp;#39;&lt;/span&gt;]])[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
test[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_pca1&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pca&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transform(test[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_latitude&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dropoff_longitude&amp;#39;&lt;/span&gt;]])[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;7-lets-not-forget-the-normal-things-you-can-do-with-your-features&#34;&gt;7. Lets not forget the Normal Things you can do with your features:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Scaling by Max-Min&lt;/li&gt;
&lt;li&gt;Normalization using Standard Deviation&lt;/li&gt;
&lt;li&gt;Log based feature/Target: use log based features or log based target function.&lt;/li&gt;
&lt;li&gt;One Hot Encoding&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;8-creating-intuitive-additional-features&#34;&gt;8. Creating Intuitive Additional Features:&lt;/h2&gt;

&lt;p&gt;A) Date time Features: Time based Features like &amp;ldquo;Evening&amp;rdquo;, &amp;ldquo;Noon&amp;rdquo;, &amp;ldquo;Night&amp;rdquo;, &amp;ldquo;Purchases_last_month&amp;rdquo;, &amp;ldquo;Purchases_last_week&amp;rdquo; etc.&lt;/p&gt;

&lt;p&gt;B) Thought Features: Suppose you have shopping cart data and you want to categorize TripType (See Walmart Recruiting: Trip Type Classification on &lt;a href=&#34;https://www.kaggle.com/c/walmart-recruiting-trip-type-classification/&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Kaggle&lt;/a&gt; for some background).&lt;/p&gt;

&lt;p&gt;You could think of creating a feature like &amp;ldquo;Stylish&amp;rdquo; where you create this variable by adding together number of items that belong to category Men&amp;rsquo;s Fashion, Women&amp;rsquo;s Fashion, Teens Fashion.&lt;/p&gt;

&lt;p&gt;You could create a feature like &amp;ldquo;Rare&amp;rdquo; which is created by tagging some items as rare, based on the data we have and then counting the number of those rare items in the shopping cart. Such features might work or might not work. From what I have observed they normally provide a lot of value.&lt;/p&gt;

&lt;p&gt;I feel this is the way that Target&amp;rsquo;s &amp;ldquo;Pregnant Teen model&amp;rdquo; was made. They would have had a variable in which they kept all the items that a pregnant teen could buy and put it into a classification algorithm.&lt;/p&gt;

&lt;h2 id=&#34;9-the-not-so-normal-things-which-people-do&#34;&gt;9 . The not so Normal Things which people do:&lt;/h2&gt;

&lt;p&gt;These features are highly unintuitive and should not be created where the machine learning model needs to be interpretable.&lt;/p&gt;

&lt;p&gt;A) Interaction Features: If you have features A and B create features A*B, A+B, A/B, A-B. This explodes the feature space. If you have 10 features and you are creating two variable interactions you will be adding 10C2 * 4  features = 180 features to your model. And most of us have a lot more than 10 features.&lt;/p&gt;

&lt;p&gt;B) Bucket Feature Using Hashing: Suppose you have a lot of features. In the order of Thousands but you don&amp;rsquo;t want to use all the thousand features because of the training times of algorithms involved. People bucket their features using some hashing algorithm to achieve this.Mostly done for text classification tasks.
For example:
If we have 6 features A,B,C,D,E,F.
And the row of data is:
A:1,B:1,C:1,D:0,E:1,F:0
I may decide to use a hashing function so that these 6 features correspond to 3 buckets and create the data using this feature hashing vector.
After processing my data might look like:
Bucket1:2,Bucket2:2,Bucket3:0
Which happened because A and B fell in bucket1, C and E fell in bucket2 and D and F fell in bucket 3. I summed up the observations here, but you could substitute addition with any math function you like.
Now i would use Bucket1,Bucket2,Bucket3 as my variables for machine learning.&lt;/p&gt;

&lt;p&gt;Will try to keep on expanding. Wait for more&amp;hellip;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Maths Beats Intuition probably every damn time</title>
      <link>https://mlwhiz.com/blog/2017/04/16/maths_beats_intuition/</link>
      <pubDate>Sun, 16 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2017/04/16/maths_beats_intuition/</guid>
      <description>

&lt;p&gt;Newton once said that &lt;strong&gt;&amp;ldquo;God does not play dice with the universe&amp;rdquo;&lt;/strong&gt;. But actually he does. Everything happening around us could be explained in terms of probabilities. We repeatedly watch things around us happen due to chances, yet we never learn. We always get dumbfounded by the playfulness of nature.&lt;/p&gt;

&lt;p&gt;One of such ways intuition plays with us is with the Birthday problem.&lt;/p&gt;

&lt;h2 id=&#34;problem-statement&#34;&gt;Problem Statement:&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;In a room full of N people, what is the probability that 2 or more people share the same birthday(Assumption: 365 days in year)?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;By the &lt;a href=&#34;https://en.wikipedia.org/wiki/Pigeonhole_principle&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;pigeonhole principle&lt;/a&gt;, the probability reaches 100% when the number of people reaches 366 (since there are only 365 possible birthdays).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;However, the paradox is that 99.9% probability is reached with just 70 people, and 50% probability is reached with just 23 people.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;mathematical-proof&#34;&gt;Mathematical Proof:&lt;/h2&gt;

&lt;p&gt;Sometimes a good strategy when trying to find out probability of an event is to look at the probability of the complement event.Here it is easier to find the probability of the complement event.
We just need to count the number of cases in which no person has the same birthday.(Sampling without replacement)
Since there are k ways in which birthdays can be chosen with replacement.&lt;/p&gt;

&lt;p&gt;$P(birthday Match) = 1 - \dfrac{(365).364&amp;hellip;(365−k+1)}{365^k}$&lt;/p&gt;

&lt;h2 id=&#34;simulation&#34;&gt;Simulation:&lt;/h2&gt;

&lt;p&gt;Lets try to build around this result some more by trying to simulate this result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;matplotlib inline
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt  &lt;span style=&#34;color:#75715e&#34;&gt;#sets up plotting under plt&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; seaborn &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; sns           &lt;span style=&#34;color:#75715e&#34;&gt;#sets up styles and gives us more plotting options&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd             &lt;span style=&#34;color:#75715e&#34;&gt;#lets us handle data as dataframes&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sim_bithday_problem&lt;/span&gt;(num_people_room, trials &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;This function takes as input the number of people in the room.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Runs 1000 trials by default and returns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    (number of times same brthday found)/(no of trials)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    same_birthdays_found &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(trials):
        &lt;span style=&#34;color:#75715e&#34;&gt;# randomly sample from the birthday space which could be any of a number from 1 to 365&lt;/span&gt;
        birthdays &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;365&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(num_people_room)]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(birthdays) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; len(set(birthdays))&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            same_birthdays_found&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; same_birthdays_found&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;float(trials)

num_people &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
probs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [sim_bithday_problem(i) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; num_people]
data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame()
data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;num_peeps&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num_people
data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;probs&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; probs
sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(style&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ticks&amp;#34;&lt;/span&gt;)

g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;regplot(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;num_peeps&amp;#34;&lt;/span&gt;, y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;probs&amp;#34;&lt;/span&gt;, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data, ci &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False,
    scatter_kws&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;darkred&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alpha&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;},
    marker&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;,fit_reg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)

sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;despine()
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_size_inches(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;As the Number of people in room reaches 23 the probability reaches ~0.5&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;At more than 50 people the probability is reaching 1&amp;#39;&lt;/span&gt;, fontsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g&amp;#34;&lt;/span&gt;,alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;# of people in room&amp;#34;&lt;/span&gt;,size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;,color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;,alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Probability&amp;#34;&lt;/span&gt;,size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;,color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;,alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tick_params(labelsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,labelcolor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/bithdayproblem.png&#34;  height=&#34;400&#34; width=&#34;700&#34; &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;We can see from the &lt;a href=&#34;https://mlwhiz.com/blog/2015/09/13/seaborn_visualizations/&#34;&gt;graph&lt;/a&gt; that as the Number of people in room reaches 23 the probability reaches ~ 0.5. So we have proved this fact Mathematically as well as with simulation.&lt;/p&gt;

&lt;h2 id=&#34;intuition&#34;&gt;Intuition:&lt;/h2&gt;

&lt;p&gt;To understand it we need to think of this problem in terms of pairs. There are ${{23}\choose{2}} = 253$ pairs of people in the room when only 23 people are present. Now with that big number you should not find the probability of 0.5 too much. In the case of 70 people we are looking at ${{70}\choose{2}} = 2450$ pairs.&lt;/p&gt;

&lt;p&gt;So thats it for now. To learn more about this go to &lt;a href=&#34;https://en.wikipedia.org/wiki/Birthday_problem&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Wikipedia&lt;/a&gt; which has an awesome page on this topic.&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References:&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.to/2nIUkxq&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Introduction to Probability by Joseph K. Blitzstein&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Birthday_problem&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Birthday Problem on Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Today I Learned This Part I: What are word2vec Embeddings?</title>
      <link>https://mlwhiz.com/blog/2017/04/09/word_vec_embeddings_examples_understanding/</link>
      <pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2017/04/09/word_vec_embeddings_examples_understanding/</guid>
      <description>

&lt;p&gt;Recently Quora put out a &lt;a href=&#34;https://www.kaggle.com/c/quora-question-pairs&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Question similarity&lt;/a&gt; competition on Kaggle. This is the first time I was attempting an NLP problem so a lot to learn. The one thing that blew my mind away was the word2vec embeddings.&lt;/p&gt;

&lt;p&gt;Till now whenever I heard the term word2vec I visualized it as a way to create a bag of words vector for a sentence.&lt;/p&gt;

&lt;p&gt;For those who don&amp;rsquo;t know &lt;em&gt;bag of words&lt;/em&gt;:
If we have a series of sentences(documents)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;This is good       - [1,1,1,0,0]&lt;/li&gt;
&lt;li&gt;This is bad        - [1,1,0,1,0]&lt;/li&gt;
&lt;li&gt;This is awesome    - [1,1,0,0,1]&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Bag of words would encode it using &lt;em&gt;0:This 1:is 2:good 3:bad 4:awesome&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But it is much more powerful than that.&lt;/p&gt;

&lt;p&gt;What word2vec does is that it creates vectors for words.
What I mean by that is that we have a 300 dimensional vector for every word(common bigrams too) in a dictionary.&lt;/p&gt;

&lt;h2 id=&#34;how-does-that-help&#34;&gt;How does that help?&lt;/h2&gt;

&lt;p&gt;We can use this for multiple scenarios but the most common are:&lt;/p&gt;

&lt;p&gt;A. &lt;em&gt;Using word2vec embeddings we can find out similarity between words&lt;/em&gt;.
Assume you have to answer if these two statements signify the same thing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;President greets press in Chicago&lt;/li&gt;
&lt;li&gt;Obama speaks to media in Illinois.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If we do a sentence similarity metric or a bag of words approach to compare these two sentences we will get a pretty low score.&lt;/p&gt;

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/word2vecembed.png&#34;  height=&#34;400&#34; width=&#34;700&#34; &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;But with a word encoding we can say that&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;President is similar to Obama&lt;/li&gt;
&lt;li&gt;greets is similar to speaks&lt;/li&gt;
&lt;li&gt;press is similar to media&lt;/li&gt;
&lt;li&gt;Chicago is similar to Illinois&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;B. &lt;em&gt;Encode Sentences&lt;/em&gt;: I read a &lt;a href=&#34;https://www.linkedin.com/pulse/duplicate-quora-question-abhishek-thakur&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;post&lt;/a&gt; from Abhishek Thakur a prominent kaggler.(Must Read). What he did was he used these word embeddings to create a 300 dimensional vector for every sentence.&lt;/p&gt;

&lt;p&gt;His Approach: Lets say the sentence is &amp;ldquo;What is this&amp;rdquo;
And lets say the embedding for every word is given in 4 dimension(normally 300 dimensional encoding is given)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;what : [.25 ,.25 ,.25 ,.25]&lt;/li&gt;
&lt;li&gt;is   : [  1 ,  0 ,  0 ,  0]&lt;/li&gt;
&lt;li&gt;this : [ .5 ,  0 ,  0 , .5]&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then the vector for the sentence is normalized elementwise addition of the vectors. i.e.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Elementwise addition : [.25+1+0.5, 0.25+0+0 , 0.25+0+0, .25+0+.5] = [1.75, .25, .25, .75]
divided by
math.sqrt(1.25^2 + .25^2 + .25^2 + .75^2) = 1.5
gives:[1.16, .17, .17, 0.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thus I can convert any sentence to a vector  of a fixed dimension(decided by the embedding). To find similarity between two sentences I can use a variety of distance/similarity metrics.&lt;/p&gt;

&lt;p&gt;C. Also It enables us to do algebraic manipulations on words which was not possible before. For example: What is king - man + woman ?&lt;/p&gt;

&lt;p&gt;Guess what it comes out to be : &lt;em&gt;Queen&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;application-coding&#34;&gt;Application/Coding:&lt;/h2&gt;

&lt;p&gt;Now lets get down to the coding part as we know a little bit of fundamentals.&lt;/p&gt;

&lt;p&gt;First of all we download a custom word embedding from Google. There are many other embeddings too.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wget https://s3.amazonaws.com/dl4j-distribution/GoogleNews-vectors-negative300.bin.gz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above file is pretty big. Might take some time. Then moving on to coding.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; gensim.models &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; word2vec
model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gensim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;KeyedVectors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_word2vec_format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data/GoogleNews-vectors-negative300.bin.gz&amp;#39;&lt;/span&gt;, binary&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;1-starting-simple-lets-find-out-similar-words-want-to-find-similar-words-to-python&#34;&gt;1. Starting simple, lets find out similar words. Want to find similar words to python?&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;most_similar(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&#34;font-size:80%;color:black;font-family: helvetica;line-height:18px;margin-top:8px;margin-left:20px&#34;&gt;
[(u&#39;pythons&#39;, 0.6688377261161804),&lt;br&gt;
 (u&#39;Burmese_python&#39;, 0.6680364608764648),&lt;br&gt;
 (u&#39;snake&#39;, 0.6606293320655823),&lt;br&gt;
 (u&#39;crocodile&#39;, 0.6591362953186035),&lt;br&gt;
 (u&#39;boa_constrictor&#39;, 0.6443519592285156),&lt;br&gt;
 (u&#39;alligator&#39;, 0.6421656608581543),&lt;br&gt;
 (u&#39;reptile&#39;, 0.6387745141983032),&lt;br&gt;
 (u&#39;albino_python&#39;, 0.6158879995346069),&lt;br&gt;
 (u&#39;croc&#39;, 0.6083582639694214),&lt;br&gt;
 (u&#39;lizard&#39;, 0.601341724395752)]&lt;br&gt;
 &lt;/div&gt;

&lt;h3 id=&#34;2-now-we-can-use-this-model-to-find-the-solution-to-the-equation&#34;&gt;2. Now we can use this model to find the solution to the equation:&lt;/h3&gt;

&lt;p&gt;What is king - man + woman?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;most_similar(positive &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;king&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;woman&amp;#39;&lt;/span&gt;],negative &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;man&amp;#39;&lt;/span&gt;])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&#34;font-size:80%;color:black;font-family: helvetica;line-height:18px;margin-top:8px;margin-left:20px&#34;&gt;
[(u&#39;queen&#39;, 0.7118192315101624),&lt;br&gt;
 (u&#39;monarch&#39;, 0.6189674139022827),&lt;br&gt;
 (u&#39;princess&#39;, 0.5902431011199951),&lt;br&gt;
 (u&#39;crown_prince&#39;, 0.5499460697174072),&lt;br&gt;
 (u&#39;prince&#39;, 0.5377321839332581),&lt;br&gt;
 (u&#39;kings&#39;, 0.5236844420433044),&lt;br&gt;
 (u&#39;Queen_Consort&#39;, 0.5235946178436279),&lt;br&gt;
 (u&#39;queens&#39;, 0.5181134343147278),&lt;br&gt;
 (u&#39;sultan&#39;, 0.5098593235015869),&lt;br&gt;
 (u&#39;monarchy&#39;, 0.5087412595748901)]&lt;br&gt;
&lt;/div&gt;

&lt;p&gt;You can do plenty of freaky/cool things using this:&lt;/p&gt;

&lt;h3 id=&#34;3-lets-say-you-wanted-a-girl-and-had-a-girl-name-like-emma-in-mind-but-you-got-a-boy-so-what-is-the-male-version-for-emma&#34;&gt;3. Lets say you wanted a girl and had a girl name like emma in mind but you got a boy. So what is the male version for emma?&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;most_similar(positive &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;emma&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;he&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;male&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mr&amp;#39;&lt;/span&gt;],negative &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;she&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mrs&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;female&amp;#39;&lt;/span&gt;])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&#34;font-size:80%;color:black;font-family: helvetica;line-height:18px;margin-top:8px;margin-left:20px&#34;&gt;
[(u&#39;sanchez&#39;, 0.4920658469200134),&lt;br&gt;
 (u&#39;kenny&#39;, 0.48300960659980774),&lt;br&gt;
 (u&#39;alves&#39;, 0.4684845209121704),&lt;br&gt;
 (u&#39;gareth&#39;, 0.4530612826347351),&lt;br&gt;
 (u&#39;bellamy&#39;, 0.44884198904037476),&lt;br&gt;
 (u&#39;gibbs&#39;, 0.445194810628891),&lt;br&gt;
 (u&#39;dos_santos&#39;, 0.44508373737335205),&lt;br&gt;
 (u&#39;gasol&#39;, 0.44387346506118774),&lt;br&gt;
 (u&#39;silva&#39;, 0.4424275755882263),&lt;br&gt;
 (u&#39;shaun&#39;, 0.44144102931022644)]&lt;br&gt;&lt;br&gt;
&lt;/div&gt;

&lt;h3 id=&#34;4-find-which-word-doesn-t-belong-to-a-list-https-github-com-dhammack-word2vecexample-blob-master-main-py&#34;&gt;4. Find which word doesn&amp;rsquo;t belong to a &lt;a href=&#34;https://github.com/dhammack/Word2VecExample/blob/master/main.py&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;list&lt;/a&gt;?&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;doesnt_match(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;math shopping reading science&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I think staple doesn&amp;rsquo;t belong in this list!&lt;/p&gt;

&lt;h2 id=&#34;other-cool-things&#34;&gt;Other Cool Things&lt;/h2&gt;

&lt;h3 id=&#34;1-recommendations&#34;&gt;1. Recommendations:&lt;/h3&gt;

&lt;div style=&#34;margin-top: 4px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/recommendationpaper.png&#34;  height=&#34;400&#34; width=&#34;700&#34; &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;In this &lt;a href=&#34;https://arxiv.org/abs/1603.04259&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;paper&lt;/a&gt;, the authors have shown that itembased CF can be cast in the same framework of word embedding.&lt;/p&gt;

&lt;h3 id=&#34;2-some-other-examples-http-byterot-blogspot-in-2015-06-five-crazy-abstractions-my-deep-learning-word2doc-model-just-did-nlp-gensim-html-that-people-have-seen-after-using-their-own-embeddings&#34;&gt;2. Some other &lt;a href=&#34;http://byterot.blogspot.in/2015/06/five-crazy-abstractions-my-deep-learning-word2doc-model-just-did-NLP-gensim.html&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;examples&lt;/a&gt; that people have seen after using their own embeddings:&lt;/h3&gt;

&lt;p&gt;Library - Books = Hall&lt;br&gt;
Obama + Russia - USA = Putin&lt;br&gt;
Iraq - Violence = Jordan&lt;br&gt;
President - Power = Prime Minister (Not in India Though)&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-seeing-the-above-i-started-playing-with-it-a-little&#34;&gt;3.Seeing the above I started playing with it a little.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Is this model sexist?&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;most_similar(positive &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;donald_trump&amp;#34;&lt;/span&gt;],negative &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;brain&amp;#39;&lt;/span&gt;])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&#34;font-size:80%;color:black;font-family: helvetica;line-height:18px;margin-top:8px;margin-left:20px&#34;&gt;
[(u&#39;novak&#39;, 0.40405112504959106),&lt;br&gt;
 (u&#39;ozzie&#39;, 0.39440611004829407),&lt;br&gt;
 (u&#39;democrate&#39;, 0.39187556505203247),&lt;br&gt;
 (u&#39;clinton&#39;, 0.390536367893219),&lt;br&gt;
 (u&#39;hillary_clinton&#39;, 0.3862358033657074),&lt;br&gt;
 (u&#39;bnp&#39;, 0.38295692205429077),&lt;br&gt;
 (u&#39;klaar&#39;, 0.38228923082351685),&lt;br&gt;
 (u&#39;geithner&#39;, 0.380607008934021),&lt;br&gt;
 (u&#39;bafana_bafana&#39;, 0.3801495432853699),&lt;br&gt;
 (u&#39;whitman&#39;, 0.3790769875049591)]&lt;br&gt;
&lt;/div&gt;

&lt;p&gt;Whatever it is doing it surely feels like magic. Next time I will try to write more on how it works once I understand it fully.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Machine Learning Algorithms for Data Scientists</title>
      <link>https://mlwhiz.com/blog/2017/02/05/ml_algorithms_for_data_scientist/</link>
      <pubDate>Sun, 05 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2017/02/05/ml_algorithms_for_data_scientist/</guid>
      <description>

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/mlago_fords.png&#34;  height=&#34;400&#34; width=&#34;600&#34; &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;As a data scientist I believe that a lot of work has to be done before Classification/Regression/Clustering methods are applied to the data you get. The data which may be messy, unwieldy and big. So here are the list of algorithms that helps a data scientist to make better models using the data they have:&lt;/p&gt;

&lt;h2 id=&#34;1-sampling-algorithms-in-case-you-want-to-work-with-a-sample-of-data&#34;&gt;1. Sampling Algorithms. In case you want to work with a sample of data.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Simple Random Sampling :&lt;/strong&gt; &lt;em&gt;Say you want to select a subset of a population in which each member of the subset has an equal probability of being chosen.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stratified Sampling:&lt;/strong&gt; Assume that we need to estimate average number of votes for each candidate in an election. Assume that country has 3 towns : Town A has 1 million factory workers, Town B has 2 million workers and Town C has 3 million retirees. We can choose to get a random sample of size 60 over entire population but there is some chance that the random sample turns out to be not well balanced across these towns and hence is biased causing a significant error in estimation. Instead if we choose to take a random sample of 10, 20 and 30 from Town A, B and C respectively then we can produce a smaller error in estimation for the same total size of sample.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reservoir Sampling&lt;/strong&gt; :&lt;em&gt;Say you have a stream of items of large and unknown length that we can only iterate over once. Create an algorithm that randomly chooses an item from this stream such that each item is equally likely to be selected.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-map-reduce-if-you-want-to-work-with-the-whole-data&#34;&gt;2. &lt;strong&gt;Map-Reduce. If you want to work with the whole data&lt;/strong&gt;.&lt;/h2&gt;

&lt;p&gt;Can be used for feature creation. For Example: I had a use case where I had a graph of 60 Million customers and 130 Million accounts. Each account was connected to other account if they had the Same SSN or Same Name+DOB+Address. I had to find customer ID’s for each of the accounts. On a single node parsing such a graph took more than 2 days. On a Hadoop cluster of 80 nodes running a &lt;em&gt;Connected Component Algorithm&lt;/em&gt; took less than 24 minutes. On Spark it is even faster.&lt;/p&gt;

&lt;h2 id=&#34;3-graph-algorithms&#34;&gt;3. &lt;strong&gt;Graph Algorithms.&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Recently I was working on an optimization problem which was focussed on finding shortest distance and routes between two points in a store layout. Routes which don’t pass through different aisles, so we cannot use euclidean distances. We solved this problem by considering turning points in the store layout and the &lt;em&gt;djikstra’s Algorithm.&lt;/em&gt;&lt;/p&gt;

&lt;script src=&#34;//z-na.amazon-adsystem.com/widgets/onejs?MarketPlace=US&amp;adInstanceId=c4ca54df-6d53-4362-92c0-13cb9977639e&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;4-feature-selection&#34;&gt;4. &lt;strong&gt;Feature Selection.&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Univariate Selection.&lt;/strong&gt; Statistical tests can be used to select those features that have the strongest relationship with the output variable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VarianceThreshold.&lt;/strong&gt; Feature selector that removes all low-variance features.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recursive Feature Elimination.&lt;/strong&gt; The goal of recursive feature elimination (RFE) is to select features by recursively considering smaller and smaller sets of features. First, the estimator is trained on the initial set of features and weights are assigned to each one of them. Then, features whose absolute weights are the smallest are pruned from the current set features. That procedure is recursively repeated on the pruned set until the desired number of features to select is eventually reached.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feature Importance:&lt;/strong&gt; Methods that use ensembles of decision trees (like Random Forest or Extra Trees) can also compute the relative importance of each attribute. These importance values can be used to inform a feature selection process.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;5-algorithms-to-work-efficiently&#34;&gt;5. &lt;strong&gt;Algorithms to work efficiently.&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Apart from these above algorithms sometimes you may need to write your own algorithms. Now I think of big algorithms as a combination of small but powerful algorithms. You just need to have idea of these algorithms to make a more better/efficient product. So some of these powerful algorithms which can help you are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Recursive Algorithms:&lt;/strong&gt;Binary search algorithm.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Divide and Conquer Algorithms:&lt;/strong&gt; Merge-Sort.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dynamic Programming:&lt;/strong&gt;Solving a complex problem by breaking it down into a collection of simpler subproblems, solving each of those subproblems just once, and storing their solutions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6-classification-regression-algorithms-the-usual-suspects-minimum-you-must-know&#34;&gt;6. &lt;strong&gt;Classification/Regression Algorithms.&lt;/strong&gt; The usual suspects. Minimum you must know:&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Linear Regression -&lt;/strong&gt; Ridge Regression, Lasso Regression, ElasticNet&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logistic Regression&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;From there you can build upon:

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Decision Trees -&lt;/strong&gt; ID3, CART, C4.5, C5.0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;KNN&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SVM&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ANN&lt;/strong&gt; - Back Propogation, CNN&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;And then on to Ensemble based algorithms:

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Boosting&lt;/strong&gt;: Gradient Boosted Trees&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bagging&lt;/strong&gt;: Random Forests&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blending&lt;/strong&gt;: Prediction outputs of different learning algorithms are fed into another learning algorithm.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;7-clustering-methods-for-unsupervised-learning&#34;&gt;7 . &lt;strong&gt;Clustering Methods.&lt;/strong&gt;For unsupervised learning.&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;k-Means&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;k-Medians&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Expectation Maximisation (EM)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hierarchical Clustering&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;8-other-algorithms-you-can-learn-about&#34;&gt;8. &lt;strong&gt;Other algorithms you can learn about:&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Apriori algorithm&lt;/strong&gt;- Association Rule Mining&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eclat algorithm -&lt;/strong&gt; Association Rule Mining&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Item/User Based Similarity -&lt;/strong&gt; Recommender Systems&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reinforcement learning -&lt;/strong&gt; Build your own robot.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Graphical Models&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bayesian Algorithms&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NLP -&lt;/strong&gt; For language based models. Chatbots.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hope this has been helpful&amp;hellip;..&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pandas For All - Some Basic Pandas Functions</title>
      <link>https://mlwhiz.com/blog/2016/10/27/baby_panda/</link>
      <pubDate>Thu, 27 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2016/10/27/baby_panda/</guid>
      <description>

&lt;p&gt;It has been quite a few days I have been working with Pandas and apparently I feel I have gotten quite good at it. (Quite a Braggard I know)
So thought about adding a post about Pandas usage here. I intend to make this post quite practical and since I find the pandas syntax quite self explanatory, I won&amp;rsquo;t be explaining much of the codes. Just the use cases and the code to achieve them.&lt;/p&gt;

&lt;h2 id=&#34;1-import-pandas&#34;&gt;1. Import Pandas&lt;/h2&gt;

&lt;p&gt;We Start by importing the libraries that we will need to use.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;2-read-a-datasource&#34;&gt;2. Read a Datasource:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Read from csv data files&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# With Header&lt;/span&gt;
df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Users/ragarw5/Downloads/SalesJan2009.csv&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Without Header. sep param to provide the delimiter&lt;/span&gt;
df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Users/ragarw5/Downloads/SalesJan2009.csv&amp;#34;&lt;/span&gt;, header&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None, sep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Reading from SQL Datasource&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; MySQLdb
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; DataFrame
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pandas.io.sql &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; read_sql

db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MySQLdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(host&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#75715e&#34;&gt;# your host, usually localhost&lt;/span&gt;
                     user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;# your username&lt;/span&gt;
                     passwd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;,   &lt;span style=&#34;color:#75715e&#34;&gt;# your password&lt;/span&gt;
                     db&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dbname&amp;#34;&lt;/span&gt;)         &lt;span style=&#34;color:#75715e&#34;&gt;# name of the data base&lt;/span&gt;

query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT * FROM tablename&amp;#34;&lt;/span&gt;

data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_sql(query, db)

&lt;span style=&#34;color:#75715e&#34;&gt;# Reading from ExcelFile&lt;/span&gt;
data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_excel(filename)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For now, we will be working with the file at &lt;a href=&#34;http://samplecsvs.s3.amazonaws.com/SalesJan2009.csv&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;http://samplecsvs.s3.amazonaws.com/SalesJan2009.csv&lt;/a&gt;. The Sales Jan 2009 file contains some “sanitized” sales transactions during the month of January. If you want to work along you can download this file from that location.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Users/ragarw5/Downloads/SalesJan2009.csv&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;3-see-few-rows-of-data&#34;&gt;3. See few rows of data:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# top 5 rows&lt;/span&gt;
df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head()

&lt;span style=&#34;color:#75715e&#34;&gt;# top 50 rows&lt;/span&gt;
df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# last 5 rows&lt;/span&gt;
df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tail()

&lt;span style=&#34;color:#75715e&#34;&gt;# last 50 rows&lt;/span&gt;
df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tail(&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;4-getting-column-names-in-a-list&#34;&gt;4. Getting Column Names in a list:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;columnnames &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;5-specifying-user-defined-column-names&#34;&gt;5. Specifying user defined Column Names:&lt;/h2&gt;

&lt;p&gt;Sometimes you want to change the column names:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Transdate&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Product&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Price&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PaymentType&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Name&amp;#39;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;City&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Country&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AccountCreated&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LastLogin&amp;#39;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Latitude&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Longitude&amp;#39;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;6-subsetting-specific-columns&#34;&gt;6. Subsetting specific columns:&lt;/h2&gt;

&lt;p&gt;Sometimes you only need to work with specific columns in a dataframe only. You can subset the columns in the dataframe using&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;newDf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Product&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Price&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PaymentType&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Name&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;City&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Country&amp;#39;&lt;/span&gt;]]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;7-seeing-column-types&#34;&gt;7. Seeing column types:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;newDf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dtypes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;8-change-type-of-a-column&#34;&gt;8. Change type of a column&lt;/h2&gt;

&lt;p&gt;First thing i try is this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;newDf[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Price&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newDf[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Price&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;int&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It gives error : ValueError: invalid literal for long() with base 10: &amp;lsquo;13,000&amp;rsquo;. That is you cannot cast a string with &amp;ldquo;,&amp;rdquo; to an int. To do that we first have to get rid of the comma. For that we use a particular lambda-apply functionality which lets us apply functions to each row in the data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;newDf[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Price&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newDf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: int(x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Price&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)),axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;script src=&#34;//z-na.amazon-adsystem.com/widgets/onejs?MarketPlace=US&amp;adInstanceId=c4ca54df-6d53-4362-92c0-13cb9977639e&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;9-simple-dataframe-statistics&#34;&gt;9. Simple Dataframe Statistics:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# To get statistics of numerical columns&lt;/span&gt;
newDf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;describe()

&lt;span style=&#34;color:#75715e&#34;&gt;# To get maximum value of a column. When you take a single column you can think of it as a list and apply functions you would apply to a list&lt;/span&gt;
max(newDf[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Price&amp;#39;&lt;/span&gt;])

&lt;span style=&#34;color:#75715e&#34;&gt;# no of rows in dataframe&lt;/span&gt;
len(newDf)

&lt;span style=&#34;color:#75715e&#34;&gt;# Shape of Dataframe&lt;/span&gt;
newDf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;10-creating-a-new-column&#34;&gt;10. Creating a new column:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create a column Address containing City,State and Country. Simply concat the columns.&lt;/span&gt;
newDf[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Address&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newDf[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;City&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; newDf[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; newDf[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Country&amp;#39;&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# I like to use a function defined approach with lambda-apply as it gives me more flexibility and more options. Like if i want to create a column which is 1 if the price is greater than 1200 and 0 otherwise.&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gt&lt;/span&gt;(x):
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1200&lt;/span&gt;:
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

newDf[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Pricegt1200&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newDf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: gt(x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Price&amp;#39;&lt;/span&gt;]),axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;11-subset-a-dataframe&#34;&gt;11. Subset a DataFrame:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Single condition: dataframe with all entries priced greater than 1500&lt;/span&gt;

df_gt_1500 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newDf[newDf[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Price&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1500&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# Multiple conditions: AND - dataframe with all entries priced greater than 1500 and from London&lt;/span&gt;

And_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newDf[(newDf[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Price&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1500&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (newDf[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;City&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;London&amp;#39;&lt;/span&gt;)]

&lt;span style=&#34;color:#75715e&#34;&gt;# Multiple conditions: OR - dataframe with all entries priced greater than 1500 or from London&lt;/span&gt;

Or_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newDf[(newDf[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Price&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1500&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (newDf[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;City&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;London&amp;#39;&lt;/span&gt;)]

&lt;span style=&#34;color:#75715e&#34;&gt;# Multiple conditions: NOT - dataframe with all entries priced greater than 1500 or from London have to be excluded&lt;/span&gt;

Not_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newDf[&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;((newDf[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Price&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1500&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (newDf[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;City&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;London&amp;#39;&lt;/span&gt;))]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;12-change-the-column-at-particular-places-or-impute&#34;&gt;12. Change the Column at particular places or impute:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In the state column the state is abbreviated as &amp;#39;TX&amp;#39;. We want the whole name &amp;#39;Texas&amp;#39; in there&lt;/span&gt;
newDf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[newDf[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TX&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Texas&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# When City is Monaco State is not given. You want to impute &amp;#39;Monaco State&amp;#39; as state also.&lt;/span&gt;
newDf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[newDf[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;City&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Monaco&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Monaco State&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;13-groupby&#34;&gt;13. GroupBy:&lt;/h2&gt;

&lt;p&gt;One of the most used functionality. One simple example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Find out the sum of transactions by a state. reset_index() is a function that resets the index of a dataframe. I apply this function ALWAYS whenever I do a groupby and you might think of it as a default syntax for groupby operations&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
newDf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aggregate(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index()

&lt;span style=&#34;color:#75715e&#34;&gt;# You might get a few extra columns that you dont need. Just subset the columns in the dataframe. You could just chain the commands to subset for the columns you need.&lt;/span&gt;
newDf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aggregate(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index()[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Price&amp;#39;&lt;/span&gt;]]

&lt;span style=&#34;color:#75715e&#34;&gt;# Find minimum transaction in each state&lt;/span&gt;
newDf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aggregate(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index()[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Price&amp;#39;&lt;/span&gt;]]

&lt;span style=&#34;color:#75715e&#34;&gt;# You might want to groupby more than one column&lt;/span&gt;

newDf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;City&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aggregate(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index()[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;City&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Price&amp;#39;&lt;/span&gt;]]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;14-concat&#34;&gt;14. Concat:&lt;/h2&gt;

&lt;p&gt;You have two datarames df1 and df2 you need to concat. Means append one below the other you can do it using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat([df1,df2])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;15-merge&#34;&gt;15. Merge:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#Suppose in the start, you had two dataframes. One which contains city and price information:&lt;/span&gt;
City_Price &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newwDf[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;City&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Price&amp;#39;&lt;/span&gt;]]

&lt;span style=&#34;color:#75715e&#34;&gt;#And another which contains &amp;#39;City&amp;#39; and &amp;#39;State&amp;#39; insformation&lt;/span&gt;
City_State &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newDf[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;City&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop_duplicates(keep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index()

&lt;span style=&#34;color:#75715e&#34;&gt;#You need to merge these datatframes on basis of city. You need to do:&lt;/span&gt;
City_Price_State_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge(City_Price,City_State,on&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;City&amp;#39;&lt;/span&gt;],how&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;left&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;16-save-a-dataframe-to-external-file&#34;&gt;16. Save a Dataframe to external File:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# To Csv file&lt;/span&gt;
newDf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_csv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NewDfData.csv&amp;#34;&lt;/span&gt;,index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)

&lt;span style=&#34;color:#75715e&#34;&gt;# To Excel File&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ExcelWriter
writer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  ExcelWriter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;NewDfData.xlsx&amp;#39;&lt;/span&gt;)
newDf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_excel(writer,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sheet1&amp;#39;&lt;/span&gt;)
writer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;17-pushing-pandas-df-to-a-sql-database&#34;&gt;17. Pushing Pandas Df to a sql database:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pandas.io &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sql
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; MySQLdb

db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MySQLdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(host&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#75715e&#34;&gt;# your host, usually localhost&lt;/span&gt;
                     user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;# your username&lt;/span&gt;
                     passwd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# your password&lt;/span&gt;
                     db&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dbname&amp;#34;&lt;/span&gt;)        &lt;span style=&#34;color:#75715e&#34;&gt;# name of the data base&lt;/span&gt;

newDf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_sql(con &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; db, name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tablename&amp;#39;&lt;/span&gt;,if_exists&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;append&amp;#39;&lt;/span&gt;,flavor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt;, chunksize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;,index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hope you found this post useful and worth your time. I tried to make this as simple as possible but You may always &lt;strong&gt;ask me&lt;/strong&gt; or see the documentation for doubts.&lt;/p&gt;

&lt;p&gt;If you have &lt;strong&gt;any more ideas&lt;/strong&gt; on how to use Pandas or &lt;strong&gt;other usecases&lt;/strong&gt;, please suggest in the &lt;strong&gt;comments&lt;/strong&gt; section.&lt;/p&gt;

&lt;p&gt;Till then ciao!!&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gregreda.com/2013/10/26/intro-to-pandas-data-structures/&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Intro to Pandas By Greg Rada&lt;/a&gt; What I have written is in a condensed form, If you want to get a detailed description visit Greg Rada&amp;rsquo;s 3 posts series.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pandas.pydata.org/pandas-docs/stable/&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Pandas Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Shell Basics every Data Scientist Should know - Part II(AWK)</title>
      <link>https://mlwhiz.com/blog/2015/10/11/shell_basics_for_data_science_2/</link>
      <pubDate>Sun, 11 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2015/10/11/shell_basics_for_data_science_2/</guid>
      <description>

&lt;p&gt;Yesterday I got introduced to awk programming on the shell and is it cool. It lets you do stuff on the command line which you never imagined. As a matter of fact, it&amp;rsquo;s a whole data analytics software in itself when you think about it. You can do selections, groupby, mean, median, sum, duplication, append. You just ask. There is no limit actually.&lt;/p&gt;

&lt;p&gt;And it is easy to learn.&lt;/p&gt;

&lt;p&gt;In this post, I will try to give you a brief intro about how you could add awk to your daily work-flow.&lt;/p&gt;

&lt;p&gt;Please see my previous &lt;a href=&#34;http://mlwhiz.com/blog/2015/10/09/shell_basics_for_data_science/&#34; target=&#34;_blank&#34; &gt;post&lt;/a&gt; if you want some background or some basic to intermediate understanding of shell commands.&lt;/p&gt;

&lt;h2 id=&#34;basics-fundamentals&#34;&gt;Basics/ Fundamentals&lt;/h2&gt;

&lt;p&gt;So let me start with an example first. Say you wanted to sum a column in a comma delimited file. How would you do that in shell?&lt;/p&gt;

&lt;p&gt;Here is the command. The great thing about awk is that it took me nearly 5 sec to write this command. I did not have to open any text editor to write a python script.&lt;/p&gt;

&lt;p&gt;It lets you do adhoc work quickly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BEGIN{ sum=0; FS=&amp;#34;,&amp;#34;} { sum += $5 } END { print sum }&amp;#39;&lt;/span&gt; data.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF112&#34;&gt;44662539172
&lt;/pre&gt;

&lt;p&gt;See the command one more time. There is a basic structure to the awk command&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;

&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BEGIN&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;END&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;An awk program consists of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;An optional BEGIN segment : In the begin part we initialize our variables before we even start reading from the file or the standard input.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;pattern - action pairs: In the middle part we Process the input data. You put multiple pattern action pairs when you want to do multiple things with the same line.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;An optional END segment: In the end part we do something we want to do when we have reached the end of file.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An awk command is called on a file using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BEGIN{SOMETHING HERE} {SOMETHING HERE: could put Multiple Blocks Like this} END {SOMETHING HERE}&amp;#39;&lt;/span&gt; file.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You also need to know about these preinitialized variables that awk keeps track of.:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;FS : field separator. Default is whitespace (1 or more spaces or tabs). If you are using any other seperator in the file you should specify it in the Begin Part.&lt;/li&gt;
&lt;li&gt;RS : record separator. Default record separator is newline. Can be changed in BEGIN action.&lt;/li&gt;
&lt;li&gt;NR : NR is the variable whose value is the number of the current record. You normally use it in the action blocks in the middle.&lt;/li&gt;
&lt;li&gt;NF : The Number of Fields after the single line has been split up using FS.&lt;/li&gt;
&lt;li&gt;Dollar variables : awk splits up the line which is coming to it by using the given FS and keeps the split parts in the $ variables. For example column 1 is in &lt;code&gt;$1&lt;/code&gt;, column 2 is in &lt;code&gt;$2&lt;/code&gt;. &lt;code&gt;$0&lt;/code&gt; is the string representation of the whole line. Note that if you want to access last column you don&amp;rsquo;t have to count. You can just use &lt;code&gt;$NF&lt;/code&gt;. For second last column you can use &lt;code&gt;$(NF-1)&lt;/code&gt;. Pretty handy. Right.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So If you are with me till here, the hard part is done. Now the fun part starts. Lets look at the first awk command again and try to understand it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BEGIN{ sum=0; FS=&amp;#34;,&amp;#34;} { sum += $5 } END { print sum }&amp;#39;&lt;/span&gt; data.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So there is a begin block. Remember before we read any line. We initialize sum to 0 and FS to &amp;ldquo;,&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Now as awk reads its input line by line it increments sum by the value in column 5(as specified by &lt;code&gt;$5&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Note that there is no pattern specified here so awk will do the action for every line.&lt;/p&gt;

&lt;p&gt;When awk has completed reading the file it prints out the sum.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if you wanted mean?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We could create a cnt Variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BEGIN{ sum=0;cnt=0; FS=&amp;#34;,&amp;#34;} { sum += $5; cnt+=1 } END { print sum/cnt }&amp;#39;&lt;/span&gt; data.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF112&#34;&gt;1.86436e+06
&lt;/pre&gt;

&lt;p&gt;or better yet, use our friend NR which bash is already keeping track of:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BEGIN{ sum=0; FS=&amp;#34;,&amp;#34;} { sum += $5 } END { print sum/NR }&amp;#39;&lt;/span&gt; data.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF112&#34;&gt;1.86436e+06
&lt;/pre&gt;

&lt;h2 id=&#34;filter-a-file&#34;&gt;Filter a file&lt;/h2&gt;

&lt;p&gt;In the mean and sum awk commands we did not put any pattern in our middle commands. Let us use a simple pattern now. Suppose we have a file Salaries.csv which contains:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;head salaries.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF112&#34;&gt;yearID,teamID,lgID,playerID,salary
1985,BAL,AL,murraed02,1472819
1985,BAL,AL,lynnfr01,1090000
1985,BAL,AL,ripkeca01,800000
1985,BAL,AL,lacyle01,725000
1985,BAL,AL,flanami01,641667
1985,BAL,AL,boddimi01,625000
1985,BAL,AL,stewasa01,581250
1985,BAL,AL,martide01,560000
1985,BAL,AL,roeniga01,558333
&lt;/pre&gt;

&lt;p&gt;I want to filter records for players who who earn more than 22 M in 2013 just because I want to. You just do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BEGIN{FS=&amp;#34;,&amp;#34;} $5&amp;gt;=22000000 &amp;amp;&amp;amp; $1==2013{print $0}&amp;#39;&lt;/span&gt; Salaries.csv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF112&#34;&gt;2013,DET,AL,fieldpr01,23000000
2013,MIN,AL,mauerjo01,23000000
2013,NYA,AL,rodrial01,29000000
2013,NYA,AL,wellsve01,24642857
2013,NYA,AL,sabatcc01,24285714
2013,NYA,AL,teixema01,23125000
2013,PHI,NL,leecl02,25000000
2013,SFN,NL,linceti01,22250000
&lt;/pre&gt;

&lt;p&gt;Cool right. Now let me explain it a little bit. The part in the command &amp;ldquo;&lt;code&gt;$5&lt;/code&gt;&amp;gt;=22000000 &amp;amp;&amp;amp; &lt;code&gt;$1&lt;/code&gt;==2013&amp;rdquo; is called a pattern. It says that print this line(&lt;code&gt;$0&lt;/code&gt;) if and only if the Salary(&lt;code&gt;$5&lt;/code&gt;) is more than 22M and(&amp;amp;&amp;amp;) year(&lt;code&gt;$1&lt;/code&gt;) is equal to 2013. If the incoming record(line) does not satisfy this pattern it never reaches the inner block.&lt;/p&gt;

&lt;p&gt;So Now you could do basic Select SQL at the command line only if you had:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The logic Operators:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;== equality operator; returns TRUE is both sides are equal&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;!= inverse equality operator&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;amp;&amp;amp; logical AND&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;|| logical OR&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;! logical NOT&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;= relational operators&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Normal Arithmetic Operators:&lt;/strong&gt; +, -, /, *, %, ^&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some String Functions:&lt;/strong&gt; length, substr, split&lt;/p&gt;

&lt;h2 id=&#34;groupby&#34;&gt;GroupBy&lt;/h2&gt;

&lt;p&gt;Now you will say: &amp;ldquo;Hey Dude SQL without groupby is incomplete&amp;rdquo;. You are right and for that we can use the associative array. Lets just see the command first and then I will explain. So lets create another useless use case(or may be something useful to someone :)) We want to find out the number of records for each year in the file. i.e we want to find the distribution of years in the file. Here is the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BEGIN{FS=&amp;#34;,&amp;#34;}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    {my_array[$1]=my_array[$1]+1}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    END{
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    for (k in my_array){if(k!=&amp;#34;yearID&amp;#34;)print k&amp;#34;|&amp;#34;my_array[k]};
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    }&amp;#39;&lt;/span&gt; Salaries.csv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF112&#34;&gt;1990|867
1991|685
1996|931
1997|925
...
&lt;/pre&gt;

&lt;p&gt;Now I would like to tell you a secret. You don&amp;rsquo;t really need to declare the variables you want to use in awk. So you did not really needed to define sum, cnt variables before. I only did that because it is good practice. If you don&amp;rsquo;t declare a user defined variable in awk, awk assumes it to be null or zero depending on the context. So in the command above we don&amp;rsquo;t declare our myarray in the begin block and that is fine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Associative Array&lt;/strong&gt;: The variable myarray is actually an associative array. i.e. It stores data in a key value format.(Python dictionaries anyone). The same array could keep integer keys and String keys. For example, I can do this in a single code.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;

&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;myarray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;key&#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;myarray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&#39;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mlwhiz&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;For Loop for associative arrays&lt;/strong&gt;: I could use a for loop to read associative array&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;

&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DO&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SOMETHING&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# Assigns to k each Key of array (unordered)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# Element is array[k]&lt;/span&gt;
&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;If Statement&lt;/strong&gt;:Uses a syntax like C for the if statement. the else block is optional:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;

&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;DO&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SOMETHING&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;DO&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SOMETHING&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;So lets dissect the above command now.&lt;/p&gt;

&lt;p&gt;I set the File separator to &amp;ldquo;,&amp;rdquo; in the beginning. I use the first column as the key of myarray. If the key exists I increment the value by 1.&lt;/p&gt;

&lt;p&gt;At the end, I loop through all the keys and print out key value pairs separated by &amp;ldquo;|&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I know that the header line in my file contains &amp;ldquo;yearID&amp;rdquo; in column 1 and I don&amp;rsquo;t want &amp;lsquo;yearID|1&amp;rsquo; in the output. So I only print when Key is not equal to &amp;lsquo;yearID&amp;rsquo;.&lt;/p&gt;

&lt;h2 id=&#34;groupby-with-case-statement&#34;&gt;GroupBy with case statement:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat Salaries.csv | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BEGIN{FS=&amp;#34;,&amp;#34;}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    $5&amp;lt;100000{array5[&amp;#34;[0-100000)&amp;#34;]+=1}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    $5&amp;gt;=100000&amp;amp;&amp;amp;$5&amp;lt;250000{array5[&amp;#34;[100000,250000)&amp;#34;]=array5[&amp;#34;[100000,250000)&amp;#34;]+1}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    $5&amp;gt;=250000&amp;amp;&amp;amp;$5&amp;lt;500000{array5[&amp;#34;[250000-500000)&amp;#34;]=array5[&amp;#34;[250000-500000)&amp;#34;]+1}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    $5&amp;gt;=500000&amp;amp;&amp;amp;$5&amp;lt;1000000{array5[&amp;#34;[500000-1000000)&amp;#34;]=array5[&amp;#34;[500000-1000000)&amp;#34;]+1}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    $5&amp;gt;=1000000{array5[&amp;#34;[1000000)&amp;#34;]=array5[&amp;#34;[1000000)&amp;#34;]+1}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    END{
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    print &amp;#34;VAR Distrib:&amp;#34;;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    for (v in array5){print v&amp;#34;|&amp;#34;array5[v]}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF112&#34;&gt;VAR Distrib:
[250000-500000)|8326
[0-100000)|2
[1000000)|23661
[100000,250000)|9480
&lt;/pre&gt;

&lt;p&gt;Here we used multiple pattern-action blocks to create a case statement.&lt;/p&gt;

&lt;h2 id=&#34;for-the-brave&#34;&gt;For The Brave:&lt;/h2&gt;

&lt;p&gt;This is a awk code that I wrote to calculate the Mean,Median,min,max and sum of a column simultaneously. Try to go through the code and understand it.I have added comments too. Think of this as an exercise. Try to run this code and play with it. You may learn some new tricks in the process. If you don&amp;rsquo;t understand it do not worry. Just get started writing your own awk codes, you will be able to understand it in very little time.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Create a New file named A.txt to keep only the salary column.&lt;/span&gt;
    cat Salaries.csv | cut -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; -f &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &amp;gt; A.txt
    FILENAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A.txt&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# The first awk counts the number of lines which are numeric. We use a regex here to check if the column is numeric or not.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#39;;&amp;#39; stands for Synchronous execution i.e sort only runs after the awk is over.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# The output of both commands are given to awk command which does the whole work.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# So Now the first line going to the second awk is the number of lines in the file which are numeric.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# and from the second to the end line the file is sorted.&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BEGIN {c=0} $1 ~ /^[-0-9]*(\.[0-9]*)?$/ {c=c+1;} END {print c;}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$FILENAME&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;            sort -n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$FILENAME&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      BEGIN {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        c = 0;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        sum = 0;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        med1_loc = 0;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        med2_loc = 0;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        med1_val = 0;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        med2_val = 0;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        min = 0;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        max = 0;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      NR==1 {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        LINES = $1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        # We check whether numlines is even or odd so that we keep only
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        # the locations in the array where the median might be.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        if (LINES%2==0) {med1_loc = LINES/2-1; med2_loc = med1_loc+1;}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        if (LINES%2!=0) {med1_loc = med2_loc = (LINES-1)/2;}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      $1 ~ /^[-0-9]*(\.[0-9]*)?$/  &amp;amp;&amp;amp;  NR!=1 {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        # setting min value
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        if (c==0) {min = $1;}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        # middle two values in array
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        if (c==med1_loc) {med1_val = $1;}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        if (c==med2_loc) {med2_val = $1;}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        c++
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        sum += $1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        max = $1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      END {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        ave = sum / c
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        median = (med1_val + med2_val ) / 2
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        print &amp;#34;sum:&amp;#34; sum
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        print &amp;#34;count:&amp;#34; c
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        print &amp;#34;mean:&amp;#34; ave
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        print &amp;#34;median:&amp;#34; median
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        print &amp;#34;min:&amp;#34; min
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        print &amp;#34;max:&amp;#34; max
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#39;&lt;/span&gt;

&amp;lt;pre style&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF112&amp;#34;&lt;/span&gt;&amp;gt;sum:44662539172
count:23956
mean:1.86436e+06
median:507950
min:0
max:33000000
&amp;lt;/pre&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;endnote&#34;&gt;Endnote:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;awk&lt;/strong&gt; is an awesome tool and there are a lot of use-cases where it can make your life simple. There is a sort of a learning curve, but I think that it would be worth it in the long term. I have tried to give you a taste of awk and I have covered a lot of ground here in this post. To tell you a bit more there, awk is a full programming language. There are for loops, while loops, conditionals, booleans, functions and everything else that you would expect from a programming language. So you could look more still.&lt;/p&gt;

&lt;p&gt;To learn more about awk you can use this &lt;a href=&#34;http://ir.nmu.org.ua/bitstream/handle/123456789/143548/ecf2f2d8a72e7c3cffca0036a73aeed4.pdf?sequence=1&amp;amp;&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;book&lt;/a&gt;. This book is a free resource and you could learn more about awk and use cases.&lt;/p&gt;

&lt;p&gt;Or if you like to have your book binded and in paper like me you can buy this book, which is a gem:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/1565922255/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1565922255&amp;amp;linkCode=as2&amp;amp;tag=mlwhizcon-20&amp;amp;linkId=YC37WW67AJHS3T6S&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=1565922255&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=US&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=mlwhizcon-20&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=mlwhizcon-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=1565922255&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Do leave comments in case you find more use-cases for awk or if you want me to write on new use-cases. Or just comment weather you liked it or not and how I could improve as I am also new and trying to learn more of this.&lt;/p&gt;

&lt;p&gt;Till then Ciao !!!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shell Basics every Data Scientist Should know -Part I</title>
      <link>https://mlwhiz.com/blog/2015/10/09/shell_basics_for_data_science/</link>
      <pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2015/10/09/shell_basics_for_data_science/</guid>
      <description>

&lt;p&gt;Shell Commands are powerful. And life would be like &lt;strong&gt;hell without shell&lt;/strong&gt; is how I like to say it(And that is probably the reason that I dislike windows).&lt;/p&gt;

&lt;p&gt;Consider a case when you have a 6 GB pipe-delimited file sitting on your laptop and you want to find out the count of distinct values in one particular column. You can probably do this in more than one way. You could put that file in a database and run SQL Commands, or you could write a python/perl script.&lt;/p&gt;

&lt;p&gt;Probably whatever you do it won&amp;rsquo;t be simpler/less time consuming than this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat data.txt | cut -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt; -f &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; | sort | uniq | wc -l&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF122&#34;&gt;30
&lt;/pre&gt;

&lt;p&gt;And this will &lt;strong&gt;run way faster&lt;/strong&gt; than whatever you do with perl/python script.&lt;/p&gt;

&lt;p&gt;Now this command says&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use the &lt;strong&gt;cat&lt;/strong&gt; command to print/stream the contents of the file to stdout.&lt;/li&gt;
&lt;li&gt;Pipe the streaming contents from our cat command to the next command &lt;strong&gt;cut&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;cut&lt;/strong&gt; commands specifies the delimiter by the argument &lt;strong&gt;-d&lt;/strong&gt; and the column by the argument &lt;strong&gt;-f&lt;/strong&gt; and streams the output to stdout.&lt;/li&gt;
&lt;li&gt;Pipe the streaming content to the &lt;strong&gt;sort&lt;/strong&gt; command which sorts the input and streams only the distinct values to the stdout. It takes the argument &lt;strong&gt;-u&lt;/strong&gt; that specifies that we only need unique values.&lt;/li&gt;
&lt;li&gt;Pipe the output to the wc -l command which counts the number of lines in the input.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a &lt;strong&gt;lot going on here&lt;/strong&gt; and I will try my best to ensure that &lt;strong&gt;you will be able to understand most of it by the end of this Blog post&lt;/strong&gt;.Although I will also try to explain more advanced concepts than the above command in this post.&lt;/p&gt;

&lt;p&gt;Now, I use shell commands extensively at my job. I will try to explain the usage of each of the commands based on use cases that I counter nearly daily at may day job as a data scientist.&lt;/p&gt;

&lt;h2 id=&#34;some-basic-commands-in-shell&#34;&gt;Some Basic Commands in Shell:&lt;/h2&gt;

&lt;p&gt;There are a lot of times when you just need to know a little bit about the data. You just want to see may be a couple of lines to inspect a file. One way of doing this is opening the txt/csv file in the notepad. And that is probably the best way for small files. But you could also do it in the shell using:&lt;/p&gt;

&lt;h3 id=&#34;1-cat&#34;&gt;1. cat&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat data.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF122&#34;&gt;
yearID|teamID|lgID|playerID|salary
1985|BAL|AL|murraed02|1472819
1985|BAL|AL|lynnfr01|1090000
1985|BAL|AL|ripkeca01|800000
1985|BAL|AL|lacyle01|725000
1985|BAL|AL|flanami01|641667
1985|BAL|AL|boddimi01|625000
1985|BAL|AL|stewasa01|581250
1985|BAL|AL|martide01|560000
1985|BAL|AL|roeniga01|558333
&lt;/pre&gt;

&lt;p&gt;Now the &lt;a href=&#34;https://en.wikipedia.org/wiki/Cat_%28Unix%29&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;cat&lt;/a&gt; command prints the whole file in the terminal window for you.I have not shown the whole file here.&lt;/p&gt;

&lt;p&gt;But sometimes the files will be so big that you wont be able to open them up in notepad++ or any other software utility and there the cat command will shine.&lt;/p&gt;

&lt;h3 id=&#34;2-head-and-tail&#34;&gt;2. Head and Tail&lt;/h3&gt;

&lt;p&gt;Now you might ask me why would you print the whole file in the terminal itself? Generally I won&amp;rsquo;t. But I just wanted to tell you about the cat command. For the use case when you want only the top/bottom n lines of your data you will generally use the &lt;a href=&#34;https://en.wikipedia.org/wiki/Head_%28Unix%29&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;head&lt;/a&gt;/&lt;a href=&#34;https://en.wikipedia.org/wiki/Tail_%28Unix%29&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;tail&lt;/a&gt; commands. You can use them as below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;head data.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF122&#34;&gt;yearID|teamID|lgID|playerID|salary
1985|BAL|AL|murraed02|1472819
1985|BAL|AL|lynnfr01|1090000
1985|BAL|AL|ripkeca01|800000
1985|BAL|AL|lacyle01|725000
1985|BAL|AL|flanami01|641667
1985|BAL|AL|boddimi01|625000
1985|BAL|AL|stewasa01|581250
1985|BAL|AL|martide01|560000
1985|BAL|AL|roeniga01|558333
&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;head -n &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; data.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF122&#34;&gt;yearID|teamID|lgID|playerID|salary
1985|BAL|AL|murraed02|1472819
1985|BAL|AL|lynnfr01|1090000
&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tail data.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF122&#34;&gt;2013|WAS|NL|bernaro01|1212500
2013|WAS|NL|tracych01|1000000
2013|WAS|NL|stammcr01|875000
2013|WAS|NL|dukeza01|700000
2013|WAS|NL|espinda01|526250
2013|WAS|NL|matthry01|504500
2013|WAS|NL|lombast02|501250
2013|WAS|NL|ramoswi01|501250
2013|WAS|NL|rodrihe03|501000
2013|WAS|NL|moorety01|493000
&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tail -n &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; data.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF122&#34;&gt;2013|WAS|NL|rodrihe03|501000
2013|WAS|NL|moorety01|493000
&lt;/pre&gt;

&lt;p&gt;Notice the structure of the shell command here.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;

&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;CommandName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg1name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg1value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg2name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg2value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filename&lt;/span&gt;
&lt;/pre&gt;

&lt;/div&gt;

&lt;h3 id=&#34;3-piping&#34;&gt;3. Piping&lt;/h3&gt;

&lt;p&gt;Now we could have also written the same command as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat data.txt | head&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF122&#34;&gt;yearID|teamID|lgID|playerID|salary
1985|BAL|AL|murraed02|1472819
1985|BAL|AL|lynnfr01|1090000
1985|BAL|AL|ripkeca01|800000
1985|BAL|AL|lacyle01|725000
1985|BAL|AL|flanami01|641667
1985|BAL|AL|boddimi01|625000
1985|BAL|AL|stewasa01|581250
1985|BAL|AL|martide01|560000
1985|BAL|AL|roeniga01|558333
&lt;/pre&gt;

&lt;p&gt;This brings me to one of the most important concepts of Shell usage - &lt;a href=&#34;https://en.wikipedia.org/wiki/Pipeline_%28Unix%29&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;piping&lt;/strong&gt;&lt;/a&gt;. You won&amp;rsquo;t be able to utilize the full power the shell provides without using this concept. And the concept is actually simple.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Just read the &amp;ldquo;|&amp;rdquo; in the command as &amp;ldquo;pass the data on to&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So I would read the above command as:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;cat&lt;/em&gt;(print) the whole data to stream, &lt;strong&gt;pass the data on to&lt;/strong&gt; &lt;em&gt;head&lt;/em&gt; so that it can just give me the first few lines only.&lt;/p&gt;

&lt;p&gt;So did you understood what piping did? &lt;strong&gt;It is providing us a way to use our basic commands in a consecutive manner&lt;/strong&gt;. There are a lot of commands that are fairly basic and it lets us use these basic commands in sequence to do some fairly non trivial things.&lt;/p&gt;

&lt;p&gt;Now let me tell you about a couple of more commands before I show you how we can &lt;strong&gt;chain&lt;/strong&gt; them to do fairly advanced tasks.&lt;/p&gt;

&lt;h3 id=&#34;4-wc&#34;&gt;4. wc&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Wc_%28Unix%29&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;wc&lt;/a&gt; is a fairly useful shell utility/command that lets us &lt;strong&gt;count the number of lines(-l)&lt;/strong&gt;, &lt;strong&gt;words(-w)&lt;/strong&gt; or &lt;strong&gt;characters(-c)&lt;/strong&gt; in a given file&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wc -l data.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF122&#34;&gt;23957 data.txt
&lt;/pre&gt;

&lt;h3 id=&#34;5-grep&#34;&gt;5. grep&lt;/h3&gt;

&lt;p&gt;You may want to print all the lines in your file which have a particular word. Or as a Data case you might like to see the salaries for the team BAL in 2000. In this case we have printed all the lines in the file which contain &amp;ldquo;2000|BAL&amp;rdquo;. &lt;a href=&#34;https://en.wikipedia.org/wiki/Grep&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;grep&lt;/a&gt; is your friend.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2000|BAL&amp;#34;&lt;/span&gt; data.txt | head&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF122&#34;&gt;2000|BAL|AL|belleal01|12868670
2000|BAL|AL|anderbr01|7127199
2000|BAL|AL|mussimi01|6786032
2000|BAL|AL|ericksc01|6620921
2000|BAL|AL|ripkeca01|6300000
2000|BAL|AL|clarkwi02|6000000
2000|BAL|AL|johnsch04|4600000
2000|BAL|AL|timlimi01|4250000
2000|BAL|AL|deshide01|4209324
2000|BAL|AL|surhobj01|4146789
&lt;/pre&gt;

&lt;p&gt;you could also use regular expressions with grep.&lt;/p&gt;

&lt;h3 id=&#34;6-sort&#34;&gt;6. sort&lt;/h3&gt;

&lt;p&gt;You may want to &lt;a href=&#34;https://en.wikipedia.org/wiki/Sort_%28Unix%29&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;sort&lt;/a&gt; your dataset on a particular column.Sort is your friend. Say you want to find out the top 10 maximum salaries given to any player in your dataset.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sort -t &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt; -k &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; -r -n data.txt | head -10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF122&#34;&gt;2010|NYA|AL|rodrial01|33000000
2009|NYA|AL|rodrial01|33000000
2011|NYA|AL|rodrial01|32000000
2012|NYA|AL|rodrial01|30000000
2013|NYA|AL|rodrial01|29000000
2008|NYA|AL|rodrial01|28000000
2011|LAA|AL|wellsve01|26187500
2005|NYA|AL|rodrial01|26000000
2013|PHI|NL|leecl02|25000000
2013|NYA|AL|wellsve01|24642857
&lt;/pre&gt;

&lt;p&gt;So there are certainly a lot of options in this command. Lets go through them one by one.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-t&lt;/strong&gt;: Which delimiter to use?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-k&lt;/strong&gt;: Which column to sort on?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-n&lt;/strong&gt;: If you want Numerical Sorting. Dont use this option if you want Lexographical sorting.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-r&lt;/strong&gt;: I want to sort Descending. Sorts Ascending by Default.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;7-cut&#34;&gt;7. cut&lt;/h3&gt;

&lt;p&gt;This command lets you select certain columns from your data. Sometimes you may want to look at just some of the columns in your data. As in you may want to look only at the year, team and salary and not the other columns. &lt;a href=&#34;https://en.wikipedia.org/wiki/Cut_(Unix)&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;cut&lt;/a&gt; is the command to use.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cut -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt; -f &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,2,5 data.txt | head&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF122&#34;&gt;yearID|teamID|salary
1985|BAL|1472819
1985|BAL|1090000
1985|BAL|800000
1985|BAL|725000
1985|BAL|641667
1985|BAL|625000
1985|BAL|581250
1985|BAL|560000
1985|BAL|558333
&lt;/pre&gt;

&lt;p&gt;The options are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-d&lt;/strong&gt;: Which delimiter to use?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-f&lt;/strong&gt;: Which column/columns to cut?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;8-uniq&#34;&gt;8. uniq&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Uniq&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;uniq&lt;/a&gt; is a little bit tricky as in you will want to use this command in sequence with sort. This command removes sequential duplicates. So in conjunction with sort it can be used to get the distinct values in the data. For example if I wanted to find out 10 distinct teamIDs in data, I would use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat data.txt | cut -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt; -f &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; | sort | uniq | head&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF122&#34;&gt;ANA
ARI
ATL
BAL
BOS
CAL
CHA
CHN
CIN
CLE
&lt;/pre&gt;

&lt;p&gt;This command could be used with argument &lt;strong&gt;-c&lt;/strong&gt; to count the occurrence of these distinct values. Something akin to &lt;strong&gt;count distinct&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat data.txt | cut -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt; -f &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; | sort | uniq -c | head&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF122&#34;&gt;247 ANA
458 ARI
838 ATL
855 BAL
852 BOS
368 CAL
812 CHA
821 CHN
46 CIN
867 CLE
&lt;/pre&gt;

&lt;h2 id=&#34;some-other-utility-commands-for-other-operations&#34;&gt;Some Other Utility Commands for Other Operations&lt;/h2&gt;

&lt;p&gt;Some Other command line tools that you could use without going in the specifics as the specifics are pretty hard.&lt;/p&gt;

&lt;h3 id=&#34;1-change-delimiter-in-a-file&#34;&gt;1. Change delimiter in a file&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Find and Replace Magic.&lt;/strong&gt;: You may want to replace certain characters in file with something else using the &lt;a href=&#34;https://en.wikipedia.org/wiki/Tr_%28Unix%29&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;tr&lt;/a&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat data.txt | tr &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt; |  head -4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF122&#34;&gt;yearID,teamID,lgID,playerID,salary
1985,BAL,AL,murraed02,1472819
1985,BAL,AL,lynnfr01,1090000
1985,BAL,AL,ripkeca01,800000
&lt;/pre&gt;

&lt;p&gt;or the &lt;a href=&#34;https://en.wikipedia.org/wiki/Sed&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;sed&lt;/strong&gt;&lt;/a&gt; command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat data.txt | sed -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/|/,/g&amp;#39;&lt;/span&gt; | head -4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF122&#34;&gt;yearID,teamID,lgID,playerID,salary
1985,BAL,AL,murraed02,1472819
1985,BAL,AL,lynnfr01,1090000
1985,BAL,AL,ripkeca01,800000
&lt;/pre&gt;

&lt;h3 id=&#34;2-sum-of-a-column-in-a-file&#34;&gt;2. Sum of a column in a file&lt;/h3&gt;

&lt;p&gt;Using the &lt;a href=&#34;https://en.wikipedia.org/wiki/AWK&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;awk&lt;/a&gt; command you could find the sum of column in file. Divide it by the number of lines and you can get the mean.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat data.txt | awk -F &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{ sum += $5 } END { printf sum }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF122&#34;&gt;44662539172
&lt;/pre&gt;

&lt;p&gt;awk is a powerful command which is sort of a whole language in itself. Do see the wiki page for &lt;a href=&#34;https://en.wikipedia.org/wiki/AWK&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;awk&lt;/a&gt; for a lot of great usecases of awk. I also wrote a post on awk as a second part in this series. Check it &lt;a href=&#34;http://mlwhiz.com/blog/2015/10/11/shell_basics_for_data_science_2/&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;HERE&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-find-the-files-in-a-directory-that-satisfy-a-certain-condition&#34;&gt;3. Find the files in a directory that satisfy a certain condition&lt;/h3&gt;

&lt;p&gt;You can do this by using the find command. Lets say you want to &lt;strong&gt;find all the .txt files&lt;/strong&gt; in the current working dir that &lt;strong&gt;start with lowercase h&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;find . -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;h*.txt&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF122&#34;&gt;./hamlet.txt
&lt;/pre&gt;

&lt;p&gt;To find &lt;strong&gt;all .txt files starting with h regarless of case&lt;/strong&gt; we could use regex.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;find . -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[Hh]*.txt&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF122&#34;&gt;./hamlet.txt
./Hamlet1.txt
&lt;/pre&gt;

&lt;h3 id=&#34;4-passing-file-list-as-argument&#34;&gt;4. Passing file list as Argument.&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Xargs&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;xargs&lt;/a&gt; was suggested by Gaurav in the comments, so I read about it and it is actually a very nice command which you could use in a variety of use cases.&lt;/p&gt;

&lt;p&gt;So if you just use a pipe, any command/utility receives data on STDIN (the standard input stream) as a raw pile of data that it can sort through one line at a time. However some programs don&amp;rsquo;t accept their commands on standard in. For example the rm command(which is used to remove files), touch command(used to create file with a given name) or a certain python script you wrote(which takes command line arguments). They expect it to be spelled out in the arguments to the command.&lt;/p&gt;

&lt;p&gt;For example: rm takes a file name as a parameter on the command line like so: rm file1.txt. If I wanted to &lt;strong&gt;delete all &amp;lsquo;.txt&amp;rsquo; files starting with &amp;ldquo;h/H&amp;rdquo;&lt;/strong&gt; from my working directory, the below command won&amp;rsquo;t work because rm expects a file as an input.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;find . -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[hH]*.txt&amp;#34;&lt;/span&gt; | rm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF122&#34;&gt;usage: rm [-f | -i] [-dPRrvW] file ...
unlink file
&lt;/pre&gt;

&lt;p&gt;To get around it we can use the xargs command which reads the STDIN stream data and converts each line into space separated arguments to the command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;find . -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[hH]*.txt&amp;#34;&lt;/span&gt; | xargs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF122&#34;&gt;./hamlet.txt ./Hamlet1.txt
&lt;/pre&gt;

&lt;p&gt;Now you could use rm to remove all .txt files that start with h/H. A word of advice: Always see the output of xargs first before using rm.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;find . -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[hH]*.txt&amp;#34;&lt;/span&gt; | xargs rm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another usage of xargs could be in conjunction with grep to &lt;strong&gt;find all files that contain a given string&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;find . -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.txt&amp;#34;&lt;/span&gt; | xargs grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;honest soldier&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-size:50%; padding:7px; margin:0em;  background-color:#FFF122&#34;&gt;./Data1.txt:O, farewell, honest soldier;
./Data2.txt:O, farewell, honest soldier;
./Data3.txt:O, farewell, honest soldier;
&lt;/pre&gt;

&lt;p&gt;Hopefully You could come up with varied uses building up on these examples. One other use case could be to use this for &lt;strong&gt;passing arguments to a python script&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;other-cool-tricks&#34;&gt;Other Cool Tricks&lt;/h2&gt;

&lt;p&gt;Sometimes you want your data that you got by some command line utility(Shell commands/ Python scripts) not to be shown on stdout but stored in a textfile. You can use the &lt;strong&gt;&amp;rdquo;&amp;gt;&amp;rdquo;&lt;/strong&gt; operator for that. For Example: You could have stored the file after replacing the delimiters in the previous example into anther file called newdata.txt as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat data.txt | tr &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &amp;gt; newdata.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I really got confused between &lt;strong&gt;&amp;rdquo;|&amp;rdquo;&lt;/strong&gt; (piping) and &lt;strong&gt;&amp;rdquo;&amp;gt;&amp;rdquo;&lt;/strong&gt; (to_file) operations a lot in the beginning. One way to remember is that you should only use &lt;strong&gt;&amp;rdquo;&amp;gt;&amp;rdquo;&lt;/strong&gt; when you want to write something to a file. &lt;strong&gt;&amp;rdquo;|&amp;rdquo; cannot be used to write to a file.&lt;/strong&gt; Another operation you should know about is the &lt;strong&gt;&amp;rdquo;&amp;gt;&amp;gt;&amp;rdquo;&lt;/strong&gt; operation. It is analogous to &lt;strong&gt;&amp;rdquo;&amp;gt;&amp;rdquo;&lt;/strong&gt; but it appends to an existing file rather that replacing the file and writing over.&lt;/p&gt;

&lt;p&gt;If you would like to know more about commandline, which I guess you would, here are some books that I would recommend for a beginner:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/1593273894/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1593273894&amp;amp;linkCode=as2&amp;amp;tag=mlwhizcon-20&amp;amp;linkId=IXZOHV6FHPTYCBCT&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=1593273894&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=US&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=mlwhizcon-20&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=mlwhizcon-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=1593273894&#34; alt=&#34;&#34; /&gt; &lt;a href=&#34;http://www.amazon.com/gp/product/0596009658/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0596009658&amp;amp;linkCode=as2&amp;amp;tag=mlwhizcon-20&amp;amp;linkId=2ZHHZIAJBFW3BFF7&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=0596009658&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=US&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=mlwhizcon-20&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=mlwhizcon-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=0596009658&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The first book is more of a fun read at leisure type of book. THe second book is a little more serious. Whatever suits you.&lt;/p&gt;

&lt;p&gt;So, this is just the tip of the iceberg. Although I am not an expert in shell usage, these commands reduced my workload to a large extent. If there are some shell commands you use on a regular basis or some shell command that are cool, do tell in the comments. I would love to include it in the blogpost.&lt;/p&gt;

&lt;p&gt;I wrote a blogpost on awk as a second part of this post. Check it &lt;a href=&#34;http://mlwhiz.com/blog/2015/10/11/shell_basics_for_data_science_2/&#34; target=&#34;_blank&#34;&gt;Here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create basic graph visualizations with SeaBorn- The Most Awesome Python Library For Visualization yet</title>
      <link>https://mlwhiz.com/blog/2015/09/13/seaborn_visualizations/</link>
      <pubDate>Sun, 13 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2015/09/13/seaborn_visualizations/</guid>
      <description>

&lt;p&gt;When it comes to data preparation and getting acquainted with data, the &lt;strong&gt;one step we normally skip is the data visualization&lt;/strong&gt;.
While a part of it could be attributed to the &lt;strong&gt;lack of good visualization tools&lt;/strong&gt; for the platforms we use, most of us also &lt;strong&gt;get lazy&lt;/strong&gt; at times.&lt;/p&gt;

&lt;p&gt;Now as we know of it Python never had any good Visualization library. For most of our plotting needs, I would read up blogs, hack up with StackOverflow solutions and haggle with &lt;a href=&#34;http://matplotlib.org/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Matplotlib&lt;/a&gt; documentation each and every time I needed to make a simple graph. This led me to think that a &lt;strong&gt;Blog post to create common Graph types&lt;/strong&gt; in Python is in order. But being the procrastinator that I am it always got pushed to the back of my head.&lt;/p&gt;

&lt;p&gt;One thing that helped me in pursuit of my data visualization needs in Python was this awesome course about &lt;a href=&#34;https://www.coursera.org/specializations/data-science-python?ranMID=40328&amp;ranEAID=lVarvwc5BD0&amp;ranSiteID=lVarvwc5BD0-SAQTYQNKSERwaOgd07RrHg&amp;siteID=lVarvwc5BD0-SAQTYQNKSERwaOgd07RrHg&amp;utm_content=3&amp;utm_medium=partners&amp;utm_source=linkshare&amp;utm_campaign=lVarvwc5BD0&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Data Visualization and applied plotting&lt;/a&gt; from University of Michigan which is a part of a pretty good &lt;a href=&#34;https://www.coursera.org/specializations/data-science-python?ranMID=40328&amp;ranEAID=lVarvwc5BD0&amp;ranSiteID=lVarvwc5BD0-SAQTYQNKSERwaOgd07RrHg&amp;siteID=lVarvwc5BD0-SAQTYQNKSERwaOgd07RrHg&amp;utm_content=3&amp;utm_medium=partners&amp;utm_source=linkshare&amp;utm_campaign=lVarvwc5BD0&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Data Science Specialization with Python&lt;/a&gt; in itself. Highly Recommended.&lt;/p&gt;

&lt;p&gt;But, yesterday I got introduced to &lt;strong&gt;&lt;a href=&#34;http://stanford.edu/~mwaskom/software/seaborn/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Seaborn&lt;/a&gt;&lt;/strong&gt; and I must say I am &lt;strong&gt;quite impressed&lt;/strong&gt; with it. It makes &lt;strong&gt;beautiful graphs&lt;/strong&gt; that are in my opinion &lt;strong&gt;better than R&amp;rsquo;s &lt;a href=&#34;http://ggplot2.org&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;ggplot2&lt;/a&gt;&lt;/strong&gt;. Gives you enough options to &lt;strong&gt;customize&lt;/strong&gt; and the best part is that it is so &lt;strong&gt;easy to learn&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So I am finally writing this blog post with a basic &lt;strong&gt;purpose of creating a code base&lt;/strong&gt; that provides me with ready to use codes which could be put into analysis in a fairly straight-forward manner.&lt;/p&gt;

&lt;p&gt;Right. So here Goes.&lt;/p&gt;

&lt;p&gt;We Start by importing the libraries that we will need to use.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt  &lt;span style=&#34;color:#75715e&#34;&gt;#sets up plotting under plt&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; seaborn &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; sns 			&lt;span style=&#34;color:#75715e&#34;&gt;#sets up styles and gives us more plotting options&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd 			&lt;span style=&#34;color:#75715e&#34;&gt;#lets us handle data as dataframes&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To create a use case for our graphs, we will be working with the &lt;strong&gt;Tips data&lt;/strong&gt; that contains the following information.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;tips &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_dataset(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tips&amp;#34;&lt;/span&gt;)
tips&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/tips.png&#34;  height=&#34;400&#34; width=&#34;500&#34; &gt;&lt;/center&gt;
&lt;/div&gt;

&lt;h2 id=&#34;scatterplot-with-regression-line&#34;&gt;Scatterplot With Regression Line&lt;/h2&gt;

&lt;p&gt;Now let us work on visualizing this data.
We will use the &lt;strong&gt;&lt;a href=&#34;http://stanford.edu/~mwaskom/software/seaborn/generated/seaborn.regplot.html#seaborn.regplot&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;regplot&lt;/a&gt;&lt;/strong&gt; option in seaborn.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# We dont Probably need the Gridlines. Do we? If yes comment this line&lt;/span&gt;
sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(style&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ticks&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Here we create a matplotlib axes object. The extra parameters we use&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;ci&amp;#34; to remove confidence interval&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;marker&amp;#34; to have a x as marker.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;scatter_kws&amp;#34; to provide style info for the points.[s for size]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;line_kws&amp;#34; to provide style info for the line.[lw for line width]&lt;/span&gt;

g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;regplot(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tip&amp;#34;&lt;/span&gt;, y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;total_bill&amp;#34;&lt;/span&gt;, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tips, ci &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False,
	scatter_kws&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;darkred&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alpha&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;},
	line_kws&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alpha&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lw&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;},marker&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# remove the top and right line in graph&lt;/span&gt;
sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;despine()

&lt;span style=&#34;color:#75715e&#34;&gt;# Set the size of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_size_inches(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Set the Title of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Total Bill vs. Tip&amp;#39;&lt;/span&gt;, fontsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;,color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;,alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Set the xlabel of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tip&amp;#34;&lt;/span&gt;,size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;,color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;,alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Set the ylabel of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Total Bill&amp;#34;&lt;/span&gt;,size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;,color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;,alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Set the ticklabel size and color of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tick_params(labelsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,labelcolor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/regplot.png&#34;&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;Now that required a bit of a code but i feel that it &lt;strong&gt;looks much better than what either Matplotlib or ggPlot2 could have rendered&lt;/strong&gt;. We got a lot of customization without too much code.&lt;/p&gt;

&lt;p&gt;But that is not really what actually made me like Seaborn. The plot type that actually got my attention was &lt;strong&gt;&lt;a href=&#34;http://stanford.edu/~mwaskom/software/seaborn/generated/seaborn.lmplot.html#seaborn.lmplot&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;lmplot&lt;/a&gt;&lt;/strong&gt;, which lets us use &lt;strong&gt;regplot&lt;/strong&gt; in a &lt;strong&gt;faceted&lt;/strong&gt; mode.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# So this function creates a faceted plot. The plot is parameterized by the following:&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# col : divides the data points into days and creates that many plots&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# palette: deep, muted, pastel, bright, dark, and colorblind. change the colors in graph. Experiment with these&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# col_wrap: we want 2 graphs in a row? Yes.We do&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# scatter_kws: attributes for points&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# hue: Colors on a particular column.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# size: controls the size of graph&lt;/span&gt;

g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lmplot(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tip&amp;#34;&lt;/span&gt;, y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;total_bill&amp;#34;&lt;/span&gt;,ci&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None,data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tips, col&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;day&amp;#34;&lt;/span&gt;,
	palette&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;muted&amp;#34;&lt;/span&gt;,col_wrap&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,scatter_kws&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alpha&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;},
	line_kws&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lw&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alpha&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;},hue&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;day&amp;#34;&lt;/span&gt;,x_jitter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;,y_jitter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;,size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# remove the top and right line in graph&lt;/span&gt;
sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;despine()
&lt;span style=&#34;color:#75715e&#34;&gt;# Additional line to adjust some appearance issue&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots_adjust(top&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.9&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Set the Title of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fig&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;suptitle(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Total Bill vs. Tip&amp;#39;&lt;/span&gt;, fontsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;,color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;,alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Set the xlabel of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_xlabels(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tip&amp;#34;&lt;/span&gt;,size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;,alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Set the ylabel of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_ylabels(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Total Bill&amp;#34;&lt;/span&gt;,size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;,alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Set the ticklabel size and color of the graph from here&lt;/span&gt;
titles &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Thursday&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Friday&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Saturday&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sunday&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ax,title &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flat,titles):
    ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tick_params(labelsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,labelcolor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/lmplot.png&#34;&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;div style=&#34;color:black; background-color: #E9DAEE;&#34;&gt;
&lt;a href=&#34;http://stanford.edu/~mwaskom/software/seaborn/tutorial/color_palettes.html#building-color-palettes-with-color-palette&#34;  target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;strong&gt;A side Note on Palettes&lt;/strong&gt;&lt;/a&gt;:&lt;br&gt;
You can build your own color palettes using &lt;strong&gt;color_palette()&lt;/strong&gt; function.
color_palette() will accept the name of any &lt;strong&gt;seaborn palette&lt;/strong&gt; or &lt;a href=&#34;http://matplotlib.org/users/colormaps.html&#34;  target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;strong&gt;matplotlib colormap&lt;/strong&gt;&lt;/a&gt;(except jet, which you should never use). It can also take a &lt;strong&gt;list of colors&lt;/strong&gt; specified in any valid matplotlib format (RGB tuples, &lt;strong&gt;hex color codes&lt;/strong&gt;, or HTML color names).
The return value is always a list of RGB tuples. This allows you to use your own color palettes in graph.
&lt;/div&gt;

&lt;script src=&#34;//z-na.amazon-adsystem.com/widgets/onejs?MarketPlace=US&amp;adInstanceId=c4ca54df-6d53-4362-92c0-13cb9977639e&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;barplots&#34;&gt;Barplots&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(style&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ticks&amp;#34;&lt;/span&gt;)

flatui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#9b59b6&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#3498db&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#95a5a6&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#e74c3c&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#34495e&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#2ecc71&amp;#34;&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# This Function takes as input a custom palette&lt;/span&gt;
g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;barplot(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sex&amp;#34;&lt;/span&gt;, y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tip&amp;#34;&lt;/span&gt;, hue&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;day&amp;#34;&lt;/span&gt;,
	palette&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;color_palette(flatui),data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tips,ci&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None)

&lt;span style=&#34;color:#75715e&#34;&gt;# remove the top and right line in graph&lt;/span&gt;
sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;despine()

&lt;span style=&#34;color:#75715e&#34;&gt;# Set the size of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_size_inches(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Set the Title of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Do We tend to &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Tip high on Weekends?&amp;#39;&lt;/span&gt;,
	fontsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;,color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;,alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Set the xlabel of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Gender&amp;#34;&lt;/span&gt;,size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;,color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g&amp;#34;&lt;/span&gt;,alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Set the ylabel of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mean Tips&amp;#34;&lt;/span&gt;,size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;,color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;,alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Set the ticklabel size and color of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tick_params(labelsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,labelcolor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/barplot.png&#34;&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;h2 id=&#34;histograms-and-distribution-diagrams&#34;&gt;Histograms and Distribution Diagrams&lt;/h2&gt;

&lt;p&gt;They form another part of my workflow. Lets plot the normal Histogram using seaborn.
For this we will use the &lt;strong&gt;&lt;a href=&#34;http://stanford.edu/~mwaskom/software/seaborn/generated/seaborn.distplot.html#seaborn.distplot&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;distplot&lt;/a&gt;&lt;/strong&gt; function. This function combines the matplotlib hist function (with automatic calculation of a good default bin size) with the seaborn kdeplot() function.
It can also fit &lt;strong&gt;scipy.stats&lt;/strong&gt; distributions and plot the estimated PDF over the data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create a list of 1000 Normal RVs&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;normal(size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)

sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_context(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;poster&amp;#34;&lt;/span&gt;)
sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_style(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ticks&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# This  Function creates a normed Histogram by default.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# If we use the parameter kde=False and norm_hist=False then&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# we will be using a count histogram&lt;/span&gt;

g&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;distplot(x,
         	kde_kws&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lw&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;KDE Estim&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alpha&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;},
            hist_kws&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alpha&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Freq&amp;#34;&lt;/span&gt;})


&lt;span style=&#34;color:#75715e&#34;&gt;# remove the top and right line in graph&lt;/span&gt;
sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;despine()

&lt;span style=&#34;color:#75715e&#34;&gt;# Set the size of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_size_inches(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Set the Title of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Normal Simulation&amp;#39;&lt;/span&gt;, fontsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;,color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;,alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Set the xlabel of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;,size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;,color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g&amp;#34;&lt;/span&gt;,alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Set the ylabel of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Density&amp;#34;&lt;/span&gt;,size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;,color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;,alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Set the ticklabel size and color of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tick_params(labelsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,labelcolor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/hist_normal.png&#34;&gt;&lt;/center&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; scipy.stats &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; stats

a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;)
y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;beta&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rvs(a,b,size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;)
y_act &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;beta&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pdf(x,a,b)
g&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;distplot(y,kde&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False,norm_hist&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True,
            kde_kws&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lw&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;KDE Estim&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alpha&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;},
            hist_kws&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alpha&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Freq&amp;#34;&lt;/span&gt;})
&lt;span style=&#34;color:#75715e&#34;&gt;# Note that we plotted on the graph using plt matlabplot function&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(x,y_act)

&lt;span style=&#34;color:#75715e&#34;&gt;# remove the top and right line in graph&lt;/span&gt;
sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;despine()

&lt;span style=&#34;color:#75715e&#34;&gt;# Set the size of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_size_inches(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Set the Title of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_title((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Beta Simulation vs. Calculated Beta Density&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;For a=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;,b=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;(a,b),fontsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;,color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;,alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Set the xlabel of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;,size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;,color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g&amp;#34;&lt;/span&gt;,alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Set the ylabel of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Density&amp;#34;&lt;/span&gt;,size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;,color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;,alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Set the ticklabel size and color of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tick_params(labelsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,labelcolor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/hist_beta.png&#34;&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;h2 id=&#34;pairplots&#34;&gt;PairPlots&lt;/h2&gt;

&lt;p&gt;You need to see how variables vary with one another. What is the distribution of variables in the dataset. This is the graph to use with the &lt;strong&gt;&lt;a href=&#34;http://stanford.edu/~mwaskom/software/seaborn/generated/seaborn.pairplot.html#seaborn.pairplot&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;pairplot&lt;/a&gt;&lt;/strong&gt; function. Very helpful And Seaborn males it a joy to use. We will use &lt;strong&gt;Iris Dataset&lt;/strong&gt; here for this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;iris &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_dataset(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;iris&amp;#34;&lt;/span&gt;)
iris&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/iris.png&#34; height=&#34;500&#34; width=&#34;600&#34;&gt;&lt;/center&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create a Pairplot&lt;/span&gt;
g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pairplot(iris,hue&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;species&amp;#34;&lt;/span&gt;,palette&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;muted&amp;#34;&lt;/span&gt;,size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
	vars&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sepal_width&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sepal_length&amp;#34;&lt;/span&gt;],kind&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;reg&amp;#39;&lt;/span&gt;,markers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;])

&lt;span style=&#34;color:#75715e&#34;&gt;# To change the size of the scatterpoints in graph&lt;/span&gt;
g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map_offdiag(plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scatter,  s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;,alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# remove the top and right line in graph&lt;/span&gt;
sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;despine()
&lt;span style=&#34;color:#75715e&#34;&gt;# Additional line to adjust some appearance issue&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots_adjust(top&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.9&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Set the Title of the graph from here&lt;/span&gt;
g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fig&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;suptitle(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Relation between Sepal Width and Sepal Length&amp;#39;&lt;/span&gt;,
	fontsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;,color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;,alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/pairplot.png&#34;&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;Hope you found this post useful and worth your time. You can find the iPython notebook at &lt;a href=&#34;https://github.com/MLWhiz/visualization/blob/master/Graphs.ipynb&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I tried to make this as simple as possible but You may always &lt;strong&gt;ask me&lt;/strong&gt; or see the documentation for doubts.&lt;/p&gt;

&lt;p&gt;If you have &lt;strong&gt;any more ideas&lt;/strong&gt; on how to use Seaborn or &lt;strong&gt;which graphs should i add here&lt;/strong&gt;, please suggest in the &lt;strong&gt;comments&lt;/strong&gt; section.&lt;/p&gt;

&lt;p&gt;I will definitely try to add to this post as I start using more visualizations and encounter other libraries as good as seaborn.&lt;/p&gt;

&lt;p&gt;Also since this is my first visualization post on this blog, I would like to call out a good course about &lt;a href=&#34;https://www.coursera.org/specializations/data-science-python?ranMID=40328&amp;ranEAID=lVarvwc5BD0&amp;ranSiteID=lVarvwc5BD0-SAQTYQNKSERwaOgd07RrHg&amp;siteID=lVarvwc5BD0-SAQTYQNKSERwaOgd07RrHg&amp;utm_content=3&amp;utm_medium=partners&amp;utm_source=linkshare&amp;utm_campaign=lVarvwc5BD0&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Data Visualization and applied plotting&lt;/a&gt; from University of Michigan which is a part of a pretty good &lt;a href=&#34;https://www.coursera.org/specializations/data-science-python?ranMID=40328&amp;ranEAID=lVarvwc5BD0&amp;ranSiteID=lVarvwc5BD0-SAQTYQNKSERwaOgd07RrHg&amp;siteID=lVarvwc5BD0-SAQTYQNKSERwaOgd07RrHg&amp;utm_content=3&amp;utm_medium=partners&amp;utm_source=linkshare&amp;utm_campaign=lVarvwc5BD0&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Data Science Specialization with Python&lt;/a&gt; in itself. Do check it out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Behold the power of MCMC</title>
      <link>https://mlwhiz.com/blog/2015/08/21/mcmc_algorithm_cryptography/</link>
      <pubDate>Fri, 21 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2015/08/21/mcmc_algorithm_cryptography/</guid>
      <description>

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/mcmc.png&#34;&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;Last time I wrote an article on MCMC and how they could be useful. We learned how MCMC chains could be used to simulate from a random variable whose distribution is partially known i.e. we don&amp;rsquo;t know the normalizing constant.&lt;/p&gt;

&lt;p&gt;So MCMC Methods may sound interesting to some (for these what follows is a treat) and for those who don&amp;rsquo;t really appreciate MCMC till now, I hope I will be able to pique your interest by the end of this blog post.&lt;/p&gt;

&lt;p&gt;So here goes. This time we will cover some applications of MCMC in various areas of Computer Science using Python. If you feel the problems difficult to follow with, I would advice you to go back and read the &lt;a href=&#34;https://mlwhiz.com/blog/2015/08/19/mcmc_algorithms_beta_distribution/&#34;&gt;previous post&lt;/a&gt;, which tries to explain MCMC Methods. We Will try to solve the following two problems:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Breaking the Code&lt;/strong&gt; - This problem has got somewhat of a great pedigree as this method was suggested by Persi Diaconis- The Mathemagician. So Someone comes to you with the below text. This text looks like gibberish but this is a code, Could you decrypyt it?&lt;br&gt;&lt;br&gt;
&lt;em&gt;XZ STAVRK HXVR MYAZ OAKZM JKSSO SO MYR OKRR XDP JKSJRK XBMASD SO YAZ TWDHZ  MYR JXMBYNSKF BSVRKTRM NYABY NXZ BXKRTRZZTQ OTWDH SVRK MYR AKSD ERPZMRXP  KWZMTRP  MYR JXTR OXBR SO X QSWDH NSIXD NXZ KXAZRP ORRETQ OKSI MYR JATTSN  XDP X OXADM VSABR AIJRKORBMTQ XKMABWTXMRP MYR NSKPZ  TRM IR ZRR MYR BYATP  XDP PAR  MYR ZWKHRSD YXP ERRD ZAMMADH NAMY YAZ OXBR MWKDRP MSNXKPZ MYR OAKR  HAVADH MYR JXTIZ SO YAZ YXDPZ X NXKI XDP X KWE XTMRKDXMRTQ  XZ MYR QSWDH NSIXD ZJSFR  YR KSZR  XDP XPVXDBADH MS MYR ERP Z YRXP  ZXAP  NAMY ISKR FADPDRZZ MYXD IAHYM YXVR ERRD RGJRBMRP SO YAI&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;The Knapsack Problem&lt;/strong&gt; - This problem comes from &lt;a href=&#34;http://www.amazon.com/Introduction-Probability-Chapman-Statistical-Science-ebook/dp/B00MMOJ19I&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Introduction to Probability&lt;/a&gt; by Joseph Blitzstein. You should check out his courses &lt;a href=&#34;http://projects.iq.harvard.edu/stat110/handouts&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;STAT110&lt;/a&gt; and &lt;a href=&#34;http://cm.dce.harvard.edu/2014/01/14328/publicationListing.shtml&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;CS109&lt;/a&gt; as they are awesome. Also as it turns out Diaconis was the advisor of Joseph. So you have Bilbo a Thief who goes to Smaug&amp;rsquo;s Lair. He finds M treasures. Each treasure has some Weight and some Gold value. But Bilbo cannot really take all of that. He could only carry a certain Maximum Weight. But being a smart hobbit, he wants to Maximize the value of the treasures he takes. Given the values for weights and value of the treasures and the maximum weight that Bilbo could carry, could you find a good solution? This is known as the Knapsack Problem in Computer Science.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;breaking-the-code&#34;&gt;Breaking the Code&lt;/h2&gt;

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/security.png&#34;&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;So we look at the data and form a hypothesis that the data has been scrambled using a Substitution Cipher. We don&amp;rsquo;t know the encryption key, and we would like to know the Decryption Key so that we can decrypt the data and read the code.&lt;/p&gt;

&lt;p&gt;To create this example, this data has actually been taken from Oliver Twist. We scrambled the data using a random encryption key, which we forgot after encrypting and we would like to decrypt this encrypted text using MCMC Chains. The real decryption key actually is &amp;ldquo;ICZNBKXGMPRQTWFDYEOLJVUAHS&amp;rdquo;&lt;/p&gt;

&lt;p&gt;So lets think about this problem for a little bit. The decryption key could be any 26 letter string with all alphabets appearing exactly once. How many string permutations are there like that? That number would come out to be $26! \approx 10^{26}$ permutations. That is a pretty large number. If we go for using a brute force approach we are screwed.
So what could we do? MCMC Chains come to rescue.&lt;/p&gt;

&lt;p&gt;We will devise a Chain whose states theoritically could be any of these permutations. Then we will:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start by picking up a random current state.&lt;/li&gt;
&lt;li&gt;Create a proposal for a new state by swapping two random letters in the current state.&lt;/li&gt;
&lt;li&gt;Use a Scoring Function which calculates the score of the current state $Score_C$ and the proposed State $Score_P$.&lt;/li&gt;
&lt;li&gt;If the score of the proposed state is more than current state, Move to Proposed State.&lt;/li&gt;
&lt;li&gt;Else flip a coin which has a probability of Heads $Score_P/Score_C$. If it comes heads move to proposed State.&lt;/li&gt;
&lt;li&gt;Repeat from 2nd State.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If we get lucky we may reach a steady state where the chain has the stationary distribution of the needed states and the state that the chain is at could be used as a solution.&lt;/p&gt;

&lt;p&gt;So the Question is what is the scoring function that we will want to use. We want to use a scoring function for each state(Decryption key) which assigns a positive score to each decryption key. This score intuitively should be more if the encrypted text looks more like actual english if decrypted using this decryption key.&lt;/p&gt;

&lt;p&gt;So how can we quantify such a function. We will check a long text and calculate some statistics. See how many times one alphabet comes after another in a legitimate long text like War and Peace. For example we want to find out how many times does &amp;lsquo;BA&amp;rsquo; appears in the text or how many times &amp;lsquo;TH&amp;rsquo; occurs in the text.&lt;/p&gt;

&lt;p&gt;For each pair of characters $\beta_1$ and $\beta_2$ (e.g. $\beta_1$ = T and $\beta_2$ =H), we let $R(\beta_1,\beta_2)$ record the number of times that specific pair(e.g. &amp;ldquo;TH&amp;rdquo;) appears consecutively in the reference text.&lt;/p&gt;

&lt;p&gt;Similarly, for a putative decryption key x, we let $F_x(\beta_1,\beta_2)$ record the number of times that
pair appears when the cipher text is decrypted using the decryption key x.&lt;/p&gt;

&lt;p&gt;We then Score a particular decryption key x using:&lt;/p&gt;

&lt;div&gt;$$Score(x) = \prod R(\beta_1,\beta_2)^{F_x(\beta_1,\beta_2)}$$&lt;/div&gt;

&lt;p&gt;This function can be thought of as multiplying, for each consecutive pair of letters in the decrypted
text, the number of times that pair occurred in the reference text.  Intuitively, the score function
is higher when the pair frequencies in the decrypted text most closely match those of the reference
text,  and  the  decryption  key  is  thus  most  likely  to  be  correct.&lt;/p&gt;

&lt;p&gt;To make life easier with calculations we will calculate $log(Score(x))$&lt;/p&gt;

&lt;p&gt;So lets start working through the problem step by step.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# AIM: To Decrypt a text using MCMC approach. i.e. find decryption key which we will call cipher from now on.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; string
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; math
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random

&lt;span style=&#34;color:#75715e&#34;&gt;# This function takes as input a decryption key and creates a dict for key where each letter in the decryption key&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# maps to a alphabet For example if the decryption key is &amp;#34;DGHJKL....&amp;#34; this function will create a dict like {D:A,G:B,H:C....} &lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_cipher_dict&lt;/span&gt;(cipher):
    cipher_dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
    alphabet_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_uppercase)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(cipher)):
        cipher_dict[alphabet_list[i]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cipher[i]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cipher_dict

&lt;span style=&#34;color:#75715e&#34;&gt;# This function takes a text and applies the cipher/key on the text and returns text.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;apply_cipher_on_text&lt;/span&gt;(text,cipher):
    cipher_dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_cipher_dict(cipher) 
    text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(text)
    newtext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; elem &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; text:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; elem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;upper() &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cipher_dict:
            newtext&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;cipher_dict[elem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;upper()]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            newtext&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; newtext

&lt;span style=&#34;color:#75715e&#34;&gt;# This function takes as input a path to a long text and creates scoring_params dict which contains the &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# number of time each pair of alphabet appears together&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Ex. {&amp;#39;AB&amp;#39;:234,&amp;#39;TH&amp;#39;:2343,&amp;#39;CD&amp;#39;:23 ..}&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_scoring_params_dict&lt;/span&gt;(longtext_path):
    scoring_params &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
    alphabet_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_uppercase)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(longtext_path) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; fp:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; fp:
            data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip())
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(data)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
                alpha_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;upper()
                alpha_j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;upper()
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; alpha_i &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; alphabet_list &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; alpha_i &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;:
                    alpha_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; alpha_j &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; alphabet_list &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; alpha_j &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;:
                    alpha_j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;
                key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; alpha_i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;alpha_j
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; scoring_params:
                    scoring_params[key]&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    scoring_params[key]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; scoring_params

&lt;span style=&#34;color:#75715e&#34;&gt;# This function takes as input a text and creates scoring_params dict which contains the &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# number of time each pair of alphabet appears together&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Ex. {&amp;#39;AB&amp;#39;:234,&amp;#39;TH&amp;#39;:2343,&amp;#39;CD&amp;#39;:23 ..}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;score_params_on_cipher&lt;/span&gt;(text):
    scoring_params &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
    alphabet_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_uppercase)
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(data)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        alpha_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;upper()
        alpha_j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;upper()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; alpha_i &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; alphabet_list &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; alpha_i &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;:
            alpha_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; alpha_j &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; alphabet_list &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; alpha_j &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;:
            alpha_j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;
        key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; alpha_i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;alpha_j
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; scoring_params:
            scoring_params[key]&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            scoring_params[key]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; scoring_params

&lt;span style=&#34;color:#75715e&#34;&gt;# This function takes the text to be decrypted and a cipher to score the cipher.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# This function returns the log(score) metric&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_cipher_score&lt;/span&gt;(text,cipher,scoring_params):
    cipher_dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_cipher_dict(cipher)
    decrypted_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; apply_cipher_on_text(text,cipher)
    scored_f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; score_params_on_cipher(decrypted_text)
    cipher_score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k,v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; scored_f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iteritems():
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; scoring_params:
            cipher_score &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; v&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log(scoring_params[k])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cipher_score

&lt;span style=&#34;color:#75715e&#34;&gt;# Generate a proposal cipher by swapping letters at two random location&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generate_cipher&lt;/span&gt;(cipher):
    pos1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(list(cipher))&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    pos2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(list(cipher))&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pos1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; pos2:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; generate_cipher(cipher)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(cipher)
        pos1_alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cipher[pos1]
        pos2_alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cipher[pos2]
        cipher[pos1] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pos2_alpha
        cipher[pos2] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pos1_alpha
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(cipher)

&lt;span style=&#34;color:#75715e&#34;&gt;# Toss a random coin with robability of head p. If coin comes head return true else false.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;random_coin&lt;/span&gt;(p):
    unif &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uniform(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; unif&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;p:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
    
&lt;span style=&#34;color:#75715e&#34;&gt;# Takes as input a text to decrypt and runs a MCMC algorithm for n_iter. Returns the state having maximum score and also&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# the last few states &lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MCMC_decrypt&lt;/span&gt;(n_iter,cipher_text,scoring_params):
    current_cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_uppercase &lt;span style=&#34;color:#75715e&#34;&gt;# Generate a random cipher to start&lt;/span&gt;
    state_keeper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
    best_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n_iter):
        state_keeper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(current_cipher)
        proposed_cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; generate_cipher(current_cipher)
        score_current_cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_cipher_score(cipher_text,current_cipher,scoring_params)
        score_proposed_cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_cipher_score(cipher_text,proposed_cipher,scoring_params)
        acceptance_probability &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exp(score_proposed_cipher&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;score_current_cipher))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; score_current_cipher&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;score:
            best_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current_cipher
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; random_coin(acceptance_probability):
            current_cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proposed_cipher
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;iter&amp;#34;&lt;/span&gt;,i,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;,apply_cipher_on_text(cipher_text,current_cipher)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; state_keeper,best_state

&lt;span style=&#34;color:#75715e&#34;&gt;## Run the Main Program:&lt;/span&gt;

scoring_params &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_scoring_params_dict(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;war_and_peace.txt&amp;#39;&lt;/span&gt;)

plain_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;As Oliver gave this first proof of the free and proper action of his lungs, &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;the patchwork coverlet which was carelessly flung over the iron bedstead, rustled; &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;the pale face of a young woman was raised feebly from the pillow; and a faint voice imperfectly &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;articulated the words, Let me see the child, and die. &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;The surgeon had been sitting with his face turned towards the fire: giving the palms of his hands a warm &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;and a rub alternately. As the young woman spoke, he rose, and advancing to the bed&amp;#39;s head, said, with more kindness &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;than might have been expected of him: &amp;#34;&lt;/span&gt;

encryption_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;XEBPROHYAUFTIDSJLKZMWVNGQC&amp;#34;&lt;/span&gt;
cipher_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; apply_cipher_on_text(plain_text,encryption_key)
decryption_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ICZNBKXGMPRQTWFDYEOLJVUAHS&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Text To Decode:&amp;#34;&lt;/span&gt;, cipher_text
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
states,best_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MCMC_decrypt(&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;,cipher_text,scoring_params)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Decoded Text:&amp;#34;&lt;/span&gt;,apply_cipher_on_text(cipher_text,best_state)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MCMC KEY FOUND:&amp;#34;&lt;/span&gt;,best_state
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ACTUAL DECRYPTION KEY:&amp;#34;&lt;/span&gt;,decryption_key&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/result1_MCMC.png&#34;&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;This chain converges around the 2000th iteration and we are able to unscramble the code. That&amp;rsquo;s awesome!!!
Now as you see the MCMC Key found is not exactly the encryption key. So the solution is not a deterministic one, but we can see that it does not actually decrease any of the value that the MCMC Methods provide. Now Lets Help Bilbo :)&lt;/p&gt;

&lt;h2 id=&#34;the-knapsack-problem&#34;&gt;The Knapsack Problem&lt;/h2&gt;

&lt;p&gt;Restating, we have Bilbo a Thief who goes to Smaug&amp;rsquo;s Lair. He finds M treasures. Each treasure has some Weight and some Gold value. But Bilbo cannot really take all of that. He could only carry a certain Maximum Weight. But being a smart hobbit, he wants to Maximize the value of the treasures he takes. Given the values for weights and value of the treasures and the maximum weight that Bilbo could carry, could you find a good solution?&lt;/p&gt;

&lt;p&gt;So in this problem we have an $1$x$M$ array of Weight Values W, Gold Values G and a value for the maximum weight $w_{MAX}$ that Bilbo can carry.
We want to find out an $1$x$M$ array $X$ of 1&amp;rsquo;s and 0&amp;rsquo;s, which holds weather Bilbo Carries a particular treasure or not.
This array needs to follow the constraint $WX^T &amp;lt; w_{MAX}$ and we want to maximize $GX^T$ for a particular state X.(Here the T means transpose)&lt;/p&gt;

&lt;p&gt;So lets first discuss as to how we will create a proposal from a previous state.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pick a random index from the state and toggle the index value.&lt;/li&gt;
&lt;li&gt;Check if we satisfy our constraint. If yes this state is the proposal state.&lt;/li&gt;
&lt;li&gt;Else pick up another random index and repeat.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We also need to think about the Scoring Function.
We need to give high values to states with high gold value. We will use:
&lt;br&gt;&lt;/p&gt;

&lt;div&gt;$$Score(X)=e^{\beta GX^T}$$&lt;/div&gt;

&lt;p&gt;We give exponentially more value to higher score. The Beta here is a +ve constant. But how to choose it? If $\beta$ is big we will give very high score to good solutions and the chain will not be able to try new solutions as it can get stuck in local optimas. If we give a small value the chain will not converge to very good solutions. So weuse an Optimization Technique called &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Simulated_annealing&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Simulated Annealing&lt;/a&gt;&lt;/strong&gt; i.e. we will start with a small value of $\beta$ and increase as no of iterations go up.
That way the chain will explore in the starting stages and stay at the best solution in the later stages.&lt;/p&gt;

&lt;p&gt;So now we have everything we need to get started&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np

W &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;]
G &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;420&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;610&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;341&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;435&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;657&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;363&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;273&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;812&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;534&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;356&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;223&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;516&lt;/span&gt;]
W_max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# This function takes a state X , The gold vector G and a Beta Value and return the Log of score&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;score_state_log&lt;/span&gt;(X,G,Beta):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Beta&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(X,G)

&lt;span style=&#34;color:#75715e&#34;&gt;# This function takes as input a state X and the number of treasures M, The weight vector W and the maximum weight W_max&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# and returns a proposal state&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_proposal&lt;/span&gt;(X,W,W_max):
    M &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(W)
    random_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,M&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#print random_index&lt;/span&gt;
    proposal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(X)
    proposal[random_index] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; proposal[random_index]  &lt;span style=&#34;color:#75715e&#34;&gt;#Toggle&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#print proposal&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(proposal,W)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;W_max:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; proposal
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; create_proposal(X,W,W_max)
    
&lt;span style=&#34;color:#75715e&#34;&gt;# Takes as input a text to decrypt and runs a MCMC algorithm for n_iter. Returns the state having maximum score and also&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# the last few states &lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MCMC_Golddigger&lt;/span&gt;(n_iter,W,G,W_max, Beta_start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;, Beta_increments&lt;span style=&#34;color:#f92672&#34;&gt;=.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;):
    M &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(W)
    Beta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Beta_start
    current_X &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;M &lt;span style=&#34;color:#75715e&#34;&gt;# We start with all 0&amp;#39;s&lt;/span&gt;
    state_keeper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    best_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n_iter):
        state_keeper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(current_X)
        proposed_X &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_proposal(current_X,W,W_max)

        score_current_X &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; score_state_log(current_X,G,Beta)
        score_proposed_X &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; score_state_log(proposed_X,G,Beta)
        acceptance_probability &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exp(score_proposed_X&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;score_current_X))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; score_current_X&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;score:
            best_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current_X
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; random_coin(acceptance_probability):
            current_X &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proposed_X
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            Beta &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; Beta_increments 
        &lt;span style=&#34;color:#75715e&#34;&gt;# You can use these below two lines to tune value of Beta&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#if i%20==0:&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#    print &amp;#34;iter:&amp;#34;,i,&amp;#34; |Beta=&amp;#34;,Beta,&amp;#34; |Gold Value=&amp;#34;,np.dot(current_X,G)&lt;/span&gt;
            
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; state_keeper,best_state&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running the Main program:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;max_state_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; 
Solution_MCMC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;):
    state_keeper,best_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MCMC_Golddigger(&lt;span style=&#34;color:#ae81ff&#34;&gt;50000&lt;/span&gt;,W,G,W_max,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0005&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0005&lt;/span&gt;)
    state_value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(best_state,G)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; state_value&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;max_state_value:
        max_state_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state_value
        Solution_MCMC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; best_state

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MCMC Solution is :&amp;#34;&lt;/span&gt; , str(Solution_MCMC) , &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;with Gold Value:&amp;#34;&lt;/span&gt;, str(max_state_value)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre style=&#34;font-family:courier new,monospace; background-color:#f6c6529c; color:#000000&#34;&gt;
MCMC Solution is : [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0] with Gold Value: 2435
&lt;/pre&gt;

&lt;p&gt;Now I won&amp;rsquo;t say that this is the best solution. The deterministic solution using DP will be the best for such use case but sometimes when the problems gets large, having such techniques at disposal becomes invaluable.&lt;/p&gt;

&lt;p&gt;So tell me What do you think about MCMC Methods?&lt;/p&gt;

&lt;p&gt;Also, If you find any good applications or would like to apply these techniques to some area, I would really be glad to know about them and help if possible.&lt;/p&gt;

&lt;p&gt;The codes for both examples are sourced at &lt;a href=&#34;https://github.com/MLWhiz/MCMC_Project&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;references-and-sources&#34;&gt;References and Sources:&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Introduction-Probability-Chapman-Statistical-Science-ebook/dp/B00MMOJ19I&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Introduction to Probability Joseph K Blitzstein, Jessica Hwang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://statweb.stanford.edu/~cgates/PERSI/papers/MCMCRev.pdf&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;The Markov Chain Monte Carlo Revolution, Persi Diaconis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.utstat.toronto.edu/wordpress/WSFiles/technicalreports/1005.pdf&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Decrypting Classical Cipher Text Using Markov Chain Monte Carlo, Jian Chen and Jeffrey S. Rosenthal&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One of the newest and best resources that you can keep an eye on is the &lt;a href=&#34;https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-AqkGMb7JzoCMW0Np1uLfCA&amp;utm_content=2&amp;utm_medium=partners&amp;utm_source=linkshare&amp;utm_campaign=lVarvwc5BD0&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bayesian Methods for Machine Learning&lt;/a&gt; course in the &lt;a href=&#34;https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-AqkGMb7JzoCMW0Np1uLfCA&amp;utm_content=2&amp;utm_medium=partners&amp;utm_source=linkshare&amp;utm_campaign=lVarvwc5BD0&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Advanced machine learning specialization&lt;/a&gt; created jointly by Kazanova(Number 3 Kaggler at the time of writing)&lt;/p&gt;

&lt;p&gt;Apart from that I also found a course on &lt;strong&gt;&lt;a href=&#34;https://click.linksynergy.com/link?id=lVarvwc5BD0&amp;offerid=495576.8910375858&amp;type=2&amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Fbayesian&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bayesian Statistics on Coursera&lt;/a&gt;&lt;/strong&gt;. In the process of doing it right now so couldn&amp;rsquo;t really comment on it. But since I had done an course on &lt;strong&gt;&lt;a href=&#34;https://click.linksynergy.com/link?id=lVarvwc5BD0&amp;offerid=495576.8839843074&amp;type=2&amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Finferential-statistics-intro&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Inferential Statistics&lt;/a&gt;&lt;/strong&gt; taught by the same professor before(Mine Çetinkaya-Rundel), I am very hopeful for this course. Let&amp;rsquo;s see.&lt;/p&gt;

&lt;p&gt;Also look out for these two books to learn more about MCMC. I have not yet read them whole but still I liked whatever I read:&lt;/p&gt;

&lt;div style=&#34;margin-left:1em ; text-align: center;&#34;&gt;

&lt;a target=&#34;_blank&#34; rel=&#34;nofollow&#34; href=&#34;https://www.amazon.com/gp/product/1439840954/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1439840954&amp;linkCode=as2&amp;tag=mlwhizcon-20&amp;linkId=d55979088adc0aabeaed88f4f14b48b6&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=1439840954&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=mlwhizcon-20&#34; &gt;&lt;/a&gt;&lt;img src=&#34;//ir-na.amazon-adsystem.com/e/ir?t=mlwhizcon-20&amp;l=am2&amp;o=1&amp;a=1439840954&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
&lt;/t&gt;&lt;/t&gt;
&lt;a target=&#34;_blank&#34; rel=&#34;nofollow&#34;  href=&#34;https://www.amazon.com/gp/product/1584885874/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1584885874&amp;linkCode=as2&amp;tag=mlwhizcon-20&amp;linkId=ee3e2a0bc99359d6c5db0463ab1abb13&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=1584885874&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=mlwhizcon-20&#34; &gt;&lt;/a&gt;&lt;img src=&#34;//ir-na.amazon-adsystem.com/e/ir?t=mlwhizcon-20&amp;l=am2&amp;o=1&amp;a=1584885874&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
&lt;/div&gt;

&lt;p&gt;Both these books are pretty high level and hard on math. But these are the best texts out there too. :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Tryst With MCMC Algorithms</title>
      <link>https://mlwhiz.com/blog/2015/08/19/mcmc_algorithms_b_distribution/</link>
      <pubDate>Wed, 19 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2015/08/19/mcmc_algorithms_b_distribution/</guid>
      <description>

&lt;p&gt;The things that I find hard to understand push me to my limits. One of the things that I have always found hard is &lt;strong&gt;Markov Chain Monte Carlo Methods&lt;/strong&gt;.
When I first encountered them, I read a lot about them but mostly it ended like this.&lt;/p&gt;

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/flabbergasted.png&#34;&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;The meaning is normally hidden in deep layers of Mathematical noise and not easy to decipher.
This blog post is intended to clear up the confusion around MCMC methods, Know what they are actually useful for and Get hands on with some applications.&lt;/p&gt;

&lt;h2 id=&#34;so-what-really-are-mcmc-methods&#34;&gt;&lt;strong&gt;So what really are MCMC Methods?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;First of all we have to understand what are &lt;strong&gt;&lt;em&gt;Monte Carlo&lt;/em&gt;&lt;/strong&gt; Methods!!!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Monte_Carlo_method&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Monte Carlo&lt;/a&gt; methods derive their name from Monte Carlo Casino in Monaco. There are many card games that need probability of winning against the dealer. Sometimes calculating this probability can be mathematically complex or highly intractable. But we can always run a computer simulation to simulate the whole game many times and see the probability as the number of wins divided by the number of games played.&lt;/p&gt;

&lt;p&gt;So that is all you need to know about Monte carlo Methods. Yes it is just a simple simulation technique with a Fancy Name.&lt;/p&gt;

&lt;p&gt;So as we have got the first part of MCMC, we also need to understand what are &lt;strong&gt;&lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Markov_chain&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Markov Chains&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;.
Before Jumping onto Markov Chains let us learn a little bit about &lt;strong&gt;Markov Property&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Suppose you have a system of $M$ possible states, and you are hopping from one state to another.
&lt;em&gt;Markov Property&lt;/em&gt; says that given a process which is at a state $X_n$ at a particular point of time, the probability of $X_{n+1} = k$, where $k$ is any of the $M$ states the process can hop to, will only be dependent on which state it is at the given moment of time.
And not on how it reached the current state.&lt;/p&gt;

&lt;p&gt;Mathematically speaking:&lt;/p&gt;

&lt;div&gt; $$P(X_{n+1}=k | X_n=k_n,X_{n-1}=k_{n-1},....,X_1=k_1) = P(X_{n+1}=k|X_n=k_n)$$&lt;/div&gt;

&lt;p&gt;If a process exhibits the Markov Property than it is known as a Markov Process.&lt;/p&gt;

&lt;p&gt;Now Why is a Markov Chain important?
It is important because of its &lt;strong&gt;stationary distribution&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So what is a &lt;strong&gt;Stationary Distribution&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Assume you have a markov process like below. You start from any state $X_i$ and want to find out the state Probability distribution at $X_{i+1}$.&lt;/p&gt;

&lt;div style=&#34;margin-top: 10px; margin-bottom: -10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/Finance_Markov_chain_example_state_space.svg&#34;&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;You have a matrix of transition probability
&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/transition_matrix.png&#34;&gt;&lt;/center&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;which defines the probability of going from a state $X_i$ to $X_j$.
You start calculating the Probability distribution for the next state. If you are at Bull Market State at time $i$ , you have a state Probability distribution as [0,1,0]&lt;/p&gt;

&lt;p&gt;you want to get the state pdf at $X_{i+1}$. That is given by&lt;/p&gt;

&lt;div&gt;&lt;center&gt;$$s_{i+1} = s_{i}Q$$&lt;/center&gt;&lt;/div&gt;

&lt;div&gt;&lt;center&gt;$$ s_{i+1}=\left[ {\begin{array}{cc}   .15 &amp; .8 &amp; .05      \end{array} } \right]$$&lt;/center&gt;&lt;/div&gt;
And the next state distribution could be found out by

&lt;div&gt;&lt;center&gt;$$s_{i+1} = s_iQ^2$$&lt;/center&gt;&lt;/div&gt;div&gt;

and so on. 
Eventually you will reach a stationary state s where:
&lt;center&gt;$$sQ=s$$&lt;/center&gt;
For this transition matrix Q the Stationary distribution $s$ is
&lt;div&gt;&lt;center&gt;$$ s_{i+1}=\left[ {\begin{array}{cc}   .625 &amp; .3125 &amp; .0625      \end{array} } \right]$$&lt;/center&gt;&lt;/div&gt;

&lt;p&gt;The stationary state distribution is important because it lets you define the probability for every state of a system at a random time. That is for this particular example we can say that 62.5% of the times market will be in a bull market state, 31.25% of weeks it will be a bear market and 6.25% of weeks it will be stagnant&lt;/p&gt;

&lt;p&gt;Intuitively you can think of it as an random walk on a chain. You might visit some nodes more often than others based on node probabilities. In the &lt;em&gt;Google Pagerank&lt;/em&gt; problem you might think of a node as a page, and the probability of a page in the stationary distribution as its relative importance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Woah!&lt;/em&gt;&lt;/strong&gt; That was a lot of information and we have yet not started talking about the MCMC Methods. Well if you are with me till now, we can now get on to the real topic now.&lt;/p&gt;

&lt;h2 id=&#34;so-what-is-mcmc&#34;&gt;So What is MCMC?&lt;/h2&gt;

&lt;p&gt;According to
&lt;a href=&#34;https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
**Markov Chain Monte Carlo** (MCMC) methods are a class of algorithms for **sampling from a probability distribution** based on constructing a Markov chain that has the desired distribution as its stationary distribution. The state of the chain after a number of steps is then used as a sample of the desired distribution. The quality of the sample improves as a function of the number of steps.
&lt;/blockquote&gt;

&lt;p&gt;So let&amp;rsquo;s explain this with an example: Assume that &lt;strong&gt;we want to sample from a &lt;a href=&#34;https://en.wikipedia.org/wiki/Beta_distribution&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Beta distribution&lt;/a&gt;&lt;/strong&gt;. The &lt;em&gt;PDF&lt;/em&gt; is:&lt;/p&gt;

&lt;p&gt;&lt;center&gt;$$f(x) = Cx^{\alpha -1}(1-x)^{\beta -1}$$&lt;/center&gt;
where $C$ is the normalizing constant &lt;em&gt;(which we actually don&amp;rsquo;t need to Sample from the distribution as we will see later)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is a &lt;strong&gt;fairly difficult problem&lt;/strong&gt; with the Beta Distribution if not intractable. In reality you might need to work with a lot harder Distribution Functions and sometimes you won&amp;rsquo;t actually know the normalizing constants.&lt;/p&gt;

&lt;p&gt;MCMC methods make life easier for us by providing us with algorithms that could create a Markov Chain which has the Beta distribution as its &lt;strong&gt;stationary distribution&lt;/strong&gt; given that we can sample from a uniform distribution(which is &lt;em&gt;fairly&lt;/em&gt; easy).&lt;/p&gt;

&lt;p&gt;If we start from a random state and traverse to the next state based on some algorithm repeatedly, we will end up creating a Markov Chain which has the Beta distribution as its &lt;strong&gt;stationary distribution&lt;/strong&gt; and the states we are at after a long time could be used as sample from the Beta Distribution.&lt;/p&gt;

&lt;p&gt;One such MCMC Algorithm is the
&lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Metropolis%E2%80%93Hastings_algorithm&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Metropolis Hastings Algorithm&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;metropolis-hastings-algorithm&#34;&gt;Metropolis Hastings Algorithm&lt;/h2&gt;

&lt;p&gt;Let $s=(s_1,s_2,&amp;hellip;.,s_M)$ be the desired stationary distribution. We want to create a Markov Chain that has this stationary distribution. We start with an arbitrary Markov Chain $P$ with $M$ states with transition matrix $Q$, so that $Q_{ij}$ represents the probability of going from state $i$ to $j$. Intuitively we know how to wander around this Markov Chain but this Markov Chain does not have the required Stationary Distribution. This chain does have some stationary distribution(which is not of our use)&lt;/p&gt;

&lt;p&gt;Our Goal is to change the way we wander on the this Markov Chain $P$ so that this chain has the desired Stationary distribution.&lt;/p&gt;

&lt;p&gt;To do this we:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start at a random initial State $i$.&lt;/li&gt;
&lt;li&gt;Randomly pick a new &lt;em&gt;Proposal State&lt;/em&gt; by looking at the transition probabilities in the ith row of the transition matrix Q.&lt;/li&gt;
&lt;li&gt;Compute an measure called the &lt;em&gt;Acceptance Probability&lt;/em&gt; which is defined as: $a_{ij} = min(s_jp_{ji}/s_{i}p_{ij},1)$&lt;/li&gt;
&lt;li&gt;Now Flip a coin that lands head with probability $a_{ij}$. If the coin comes up heads, accept the proposal i.e move to next state else reject the proposal i.e. stay at the current state.&lt;/li&gt;
&lt;li&gt;Repeat for a long time&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After a long time this chain will converge and will have a stationary distribution $s$. &lt;strong&gt;We can then use the states of the chain as the sample from any distribution.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While doing this to sample the Beta Distribution, the only time we are using the PDF is to find the acceptance probability and in that we divide $s_j$ by $s_i$, i.e. the &lt;strong&gt;normalizing constant $C$ gets cancelled&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now Let&amp;rsquo;s Talk about the intuition. For the Intuition I am quoting an &lt;a href=&#34;http://stats.stackexchange.com/a/12657&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Answer&lt;/a&gt; from the site Stack Exchange,as this was the best intuitive explanation that I could find:
&lt;blockquote&gt;
I think there&amp;rsquo;s a nice and simple intuition to be gained from the (independence-chain) Metropolis-Hastings algorithm.
&lt;br&gt;
&lt;br&gt;
First, what&amp;rsquo;s the goal? The goal of MCMC is to &lt;strong&gt;draw samples from some probability distribution&lt;/strong&gt; without having to know its exact height at any point(We don&amp;rsquo;t need to know C). The way MCMC achieves this is to &lt;strong&gt;&amp;ldquo;wander around&amp;rdquo; on that distribution in such a way that the amount of time spent in each location is proportional to the height of the distribution&lt;/strong&gt;. If the &amp;ldquo;wandering around&amp;rdquo; process is set up correctly, you can make sure that this proportionality (between time spent and height of the distribution) is achieved.
&lt;br&gt;
&lt;br&gt;
Intuitively, what we want to do is to to walk around on some (lumpy) surface in such a way that the amount of time we spend (or # samples drawn) in each location is proportional to the height of the surface at that location. So, e.g., we&amp;rsquo;d like to spend twice as much time on a hilltop that&amp;rsquo;s at an altitude of 100m as we do on a nearby hill that&amp;rsquo;s at an altitude of 50m. The nice thing is that we can do this even if we don&amp;rsquo;t know the absolute heights of points on the surface: all we have to know are the relative heights. e.g., if one hilltop A is twice as high as hilltop B, then we&amp;rsquo;d like to spend twice as much time at A as we spend at B.
&lt;br&gt;
&lt;br&gt;
The simplest variant of the Metropolis-Hastings algorithm (independence chain sampling) achieves this as follows: assume that in every (discrete) time-step, we pick a random new &amp;ldquo;proposed&amp;rdquo; location (selected uniformly across the entire surface). If the proposed location is higher than where we&amp;rsquo;re standing now, move to it. If the proposed location is lower, then move to the new location with probability p, where p is the ratio of the height of that point to the height of the current location. (i.e., flip a coin with a probability p of getting heads; if it comes up heads, move to the new location; if it comes up tails, stay where we are). Keep a list of the locations you&amp;rsquo;ve been at on every time step, and that list will (asyptotically) have the right proportion of time spent in each part of the surface. (And for the A and B hills described above, you&amp;rsquo;ll end up with twice the probability of moving from B to A as you have of moving from A to B).
&lt;br&gt;
&lt;br&gt;
There are more complicated schemes for proposing new locations and the rules for accepting them, but the basic idea is still: &lt;strong&gt;(1) pick a new &amp;ldquo;proposed&amp;rdquo; location; (2) figure out how much higher or lower that location is compared to your current location; (3) probabilistically stay put or move to that location in a way that respects the overall goal of spending time proportional to height of the location.&lt;/strong&gt;
&lt;/blockquote&gt;&lt;/p&gt;

&lt;h2 id=&#34;sampling-from-beta-distribution&#34;&gt;Sampling from Beta Distribution&lt;/h2&gt;

&lt;p&gt;Now Let&amp;rsquo;s Move on to the problem of Simulating from Beta Distribution. Now Beta Distribution is a continuous Distribution on [0,1] and it can have infinite states on [0,1].&lt;/p&gt;

&lt;p&gt;Lets Assume an arbitrary Markov Chain P with infinite states on [0,1] having transition Matrix Q such that $Q_{ij} = Q_{ji} = $ All entries in Matrix. We don&amp;rsquo;t really need the Matrix Q as we will see later, But I want to keep the problem description as close to the algorihm we suggested.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start at a random &lt;strong&gt;initial State $i$&lt;/strong&gt; given by Unif(0,1).&lt;/li&gt;
&lt;li&gt;Randomly pick a new &lt;strong&gt;Proposal State&lt;/strong&gt; by looking at the transition probabilities in the ith row of the transition matrix Q. Lets say we pick up another Unif(0,1) state as a proposal state $j$.&lt;/li&gt;
&lt;li&gt;Compute an measure called the &lt;strong&gt;Acceptance Probability&lt;/strong&gt; :&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;&lt;center&gt;$$a_{ij} = min(s_jp_{ji}/s_{i}p_{ij},1)$$&lt;/center&gt;&lt;/div&gt; which is, &lt;div&gt;&lt;center&gt;$$a_{ij} = min(s_j/s_i,1)$$&lt;/center&gt;&lt;/div&gt; where, &lt;div&gt;&lt;center&gt;$$s_i = Ci^{\alpha -1}(1-i)^{\beta -1}$$&lt;/center&gt;&lt;/div&gt; and, &lt;div&gt;&lt;center&gt;$$s_j = Cj^{\alpha -1}(1-j)^{\beta -1}$$&lt;/center&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Now Flip a coin that lands head with probability $a_{ij}$. If the coin comes up heads, accept the proposal i.e move to next state else reject the proposal i.e. stay at the current state.&lt;/li&gt;
&lt;li&gt;Repeat for a long time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So enough with theory, Let&amp;rsquo;s Move on to python to create our Beta Simulations Now&amp;hellip;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
&lt;span style=&#34;color:#75715e&#34;&gt;# Lets define our Beta Function to generate s for any particular state. We don&amp;#39;t care for the normalizing constant here.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;beta_s&lt;/span&gt;(w,a,b):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; w&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;(a&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;w)&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;(b&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# This Function returns True if the coin with probability P of heads comes heads when flipped.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;random_coin&lt;/span&gt;(p):
    unif &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uniform(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; unif&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;p:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True

&lt;span style=&#34;color:#75715e&#34;&gt;# This Function runs the MCMC chain for Beta Distribution.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;beta_mcmc&lt;/span&gt;(N_hops,a,b):
    states &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uniform(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,N_hops):
        states&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(cur)
        next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uniform(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        ap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(beta_s(next,a,b)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;beta_s(cur,a,b),&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# Calculate the acceptance probability&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; random_coin(ap):
            cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; states[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;:] &lt;span style=&#34;color:#75715e&#34;&gt;# Returns the last 100 states of the chain&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let us check our results of the MCMC Sampled Beta distribution against the actual beta distribution.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pylab &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pl
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; scipy.special &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; ss
&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;matplotlib inline
pl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rcParams[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;figure.figsize&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;17.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4.0&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Actual Beta PDF.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;beta&lt;/span&gt;(a, b, i):
    e1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ss&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gamma(a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b)
    e2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ss&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gamma(a)
    e3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ss&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gamma(b)
    e4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    e5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; (b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (e1&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;(e2&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;e3)) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; e4 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; e5

&lt;span style=&#34;color:#75715e&#34;&gt;# Create a function to plot Actual Beta PDF with the Beta Sampled from MCMC Chain.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plot_beta&lt;/span&gt;(a, b):
    Ly &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    Lx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    i_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mgrid[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;100j&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; i_list:
        Lx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(i)
        Ly&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(beta(a, b, i))
    pl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(Lx, Ly, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Real Distribution: a=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;str(a)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, b=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;str(b))
    pl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hist(beta_mcmc(&lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;,a,b),normed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True,bins &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, histtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;step&amp;#39;&lt;/span&gt;,label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Simulated_MCMC: a=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;str(a)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, b=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;str(b))
    pl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend()
    pl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
    
plot_beta(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;)
plot_beta(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
plot_beta(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&#34;margin-top: -9px; margin-bottom: 30px;&#34;&gt;
&lt;img src=&#34;https://mlwhiz.com/images/graphs.png&#34;&gt;
&lt;/div&gt;

&lt;p&gt;As we can see our sampled beta values closely resemble the beta distribution.&lt;/p&gt;

&lt;p&gt;So MCMC Methods are useful for the following basic problems.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Simulating from a Random Variable PDF. Example: Simulate from a Beta(0.5,0.5) or from a Normal(0,1).&lt;/li&gt;
&lt;li&gt;Solve problems with a large state space.For Example: Knapsack Problem, Encrytion Cipher etc. We will work on this in the &lt;a href=&#34;https://mlwhiz.com/blog/2015/08/21/mcmc_algorithms_cryptography/&#34;&gt;Next Blog Post&lt;/a&gt; as this one has already gotten bigger than what I expected.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Till Then Ciao!!!!!!&lt;/p&gt;

&lt;h2 id=&#34;references-and-sources&#34;&gt;References and Sources:&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Introduction-Probability-Chapman-Statistical-Science-ebook/dp/B00MMOJ19I&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Introduction to Probability Joseph K Blitzstein, Jessica Hwang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stats.stackexchange.com/a/12657&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;StackExchange&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One of the newest and best resources that you can keep an eye on is the &lt;a href=&#34;https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-AqkGMb7JzoCMW0Np1uLfCA&amp;utm_content=2&amp;utm_medium=partners&amp;utm_source=linkshare&amp;utm_campaign=lVarvwc5BD0&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bayesian Methods for Machine Learning&lt;/a&gt; course in the &lt;a href=&#34;https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-AqkGMb7JzoCMW0Np1uLfCA&amp;utm_content=2&amp;utm_medium=partners&amp;utm_source=linkshare&amp;utm_campaign=lVarvwc5BD0&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Advanced machine learning specialization&lt;/a&gt; created jointly by Kazanova(Number 3 Kaggler at the time of writing)&lt;/p&gt;

&lt;p&gt;Apart from that I also found a course on &lt;strong&gt;&lt;a href=&#34;https://click.linksynergy.com/link?id=lVarvwc5BD0&amp;offerid=495576.8910375858&amp;type=2&amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Fbayesian&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Bayesian Statistics on Coursera&lt;/a&gt;&lt;/strong&gt;. In the process of doing it right now so couldn&amp;rsquo;t really comment on it. But since I had done an course on &lt;strong&gt;&lt;a href=&#34;https://click.linksynergy.com/link?id=lVarvwc5BD0&amp;offerid=495576.8839843074&amp;type=2&amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Finferential-statistics-intro&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Inferential Statistics&lt;/a&gt;&lt;/strong&gt; taught by the same professor before(Mine Çetinkaya-Rundel), I am very hopeful for this course. Let&amp;rsquo;s see.&lt;/p&gt;

&lt;p&gt;Also look out for these two books to learn more about MCMC. I have not yet read them whole but still I liked whatever I read:&lt;/p&gt;

&lt;div style=&#34;margin-left:1em ; text-align: center;&#34;&gt;

&lt;a target=&#34;_blank&#34; rel=&#34;nofollow&#34; href=&#34;https://www.amazon.com/gp/product/1439840954/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1439840954&amp;linkCode=as2&amp;tag=mlwhizcon-20&amp;linkId=d55979088adc0aabeaed88f4f14b48b6&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=1439840954&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=mlwhizcon-20&#34; &gt;&lt;/a&gt;&lt;img src=&#34;//ir-na.amazon-adsystem.com/e/ir?t=mlwhizcon-20&amp;l=am2&amp;o=1&amp;a=1439840954&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
&lt;/t&gt;&lt;/t&gt;
&lt;a target=&#34;_blank&#34; rel=&#34;nofollow&#34;  href=&#34;https://www.amazon.com/gp/product/1584885874/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1584885874&amp;linkCode=as2&amp;tag=mlwhizcon-20&amp;linkId=ee3e2a0bc99359d6c5db0463ab1abb13&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=1584885874&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=mlwhizcon-20&#34; &gt;&lt;/a&gt;&lt;img src=&#34;//ir-na.amazon-adsystem.com/e/ir?t=mlwhizcon-20&amp;l=am2&amp;o=1&amp;a=1584885874&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
&lt;/div&gt;

&lt;p&gt;Both these books are pretty high level and hard on math. But these are the best texts out there too. :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hadoop Mapreduce Streaming Tricks and Techniques</title>
      <link>https://mlwhiz.com/blog/2015/05/09/hadoop_mapreduce_streaming_tricks_and_technique/</link>
      <pubDate>Sat, 09 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2015/05/09/hadoop_mapreduce_streaming_tricks_and_technique/</guid>
      <description>

&lt;p&gt;I have been using Hadoop a lot now a days and thought about writing some of the novel techniques that a user could use to get the most out of the Hadoop Ecosystem.&lt;/p&gt;

&lt;h2 id=&#34;using-shell-scripts-to-run-your-programs&#34;&gt;Using Shell Scripts to run your Programs&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://mlwhiz.com/images/I-love-bash-1024x220.png&#34; &gt;&lt;/p&gt;

&lt;p&gt;I am not a fan of large bash commands. The ones where you have to specify the whole path of the jar files and the such. &lt;em&gt;You can effectively organize your workflow by using shell scripts.&lt;/em&gt; Now Shell scripts are not as formidable as they sound. We wont be doing programming perse using these shell scripts(Though they are pretty good at that too), we will just use them to store commands that we need to use sequentially.&lt;/p&gt;

&lt;p&gt;Below is a sample of the shell script I use to run my Mapreduce Codes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#Defining program variables&lt;/span&gt;
IP&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/data/input&amp;#34;&lt;/span&gt;
OP&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/data/output&amp;#34;&lt;/span&gt;
HADOOP_JAR_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/opt/cloudera/parcels/CDH/lib/hadoop-0.20-mapreduce/contrib/streaming/hadoop-streaming-2.0.0-mr1-cdh4.5.0.jar&amp;#34;&lt;/span&gt;
MAPPER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_m.py&amp;#34;&lt;/span&gt;
REDUCER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_r.py&amp;#34;&lt;/span&gt;

hadoop fs -rmr -skipTrash&amp;amp;nbsp;$OP
hadoop jar&amp;amp;nbsp;$HADOOP_JAR_PATH &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-file&amp;amp;nbsp;$MAPPER -mapper &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python test_m.py&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-file&amp;amp;nbsp;$REDUCER -reducer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python test_r.py&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-input&amp;amp;nbsp;$IP -output&amp;amp;nbsp;$OP&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I generally save them as test_s.sh and whenever i need to run them i simply type &lt;code&gt;sh test_s.sh&lt;/code&gt;. This helps in three ways.
&lt;ul&gt;&lt;li&gt; It helps me to store hadoop commands in a manageable way. &lt;/li&gt;
&lt;li&gt; It is easy to run the mapreduce code using the shell script. &lt;/li&gt;
&lt;li&gt; &lt;em&gt;&lt;strong&gt;If the code fails, I do not have to manually delete the output directory&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;em&gt;
The simplification of anything is always sensational.
&lt;br&gt;&lt;/em&gt;
&lt;small&gt;Gilbert K. Chesterton&lt;/small&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;using-distributed-cache-to-provide-mapper-with-a-dictionary&#34;&gt;Using Distributed Cache to provide mapper with a dictionary&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://mlwhiz.com/images/Game-Of-Thrones-Wallpaper-House-Sigils-1.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;Often times it happens that you want that your Hadoop Mapreduce program is able to access some static file. This static file could be a dictionary, could be parameters for the program or could be anything. What distributed cache does is that it provides this file to all the mapper nodes so that you can use that file in any way across all your mappers.
Now this concept although simple would help you to think about Mapreduce in a whole new light.
Lets start with an example.
Supppose you have to create a sample Mapreduce program that reads a big file containing the information about all the characters in &lt;a href=&#34;http://www.hbo.com/game-of-thrones&#34;&gt;Game of Thrones&lt;/a&gt; stored as &lt;strong&gt;&lt;code&gt;&amp;rdquo;/data/characters/&amp;rdquo;&lt;/code&gt;&lt;/strong&gt;:
&lt;div style=&#34;width: 50%; margin: 0 auto;&#34;&gt;
&lt;table class=&#34;table&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Cust_ID&lt;/th&gt;
&lt;th&gt;User_Name&lt;/th&gt;
&lt;th&gt;House&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Daenerys Targaryen&lt;/td&gt;
&lt;td&gt;Targaryen&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Tyrion Lannister&lt;/td&gt;
&lt;td&gt;Lannister&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Cersei Lannister&lt;/td&gt;
&lt;td&gt;Lannister&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Robert Baratheon&lt;/td&gt;
&lt;td&gt;Baratheon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Robb Stark&lt;/td&gt;
&lt;td&gt;Stark&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;But you dont want to use the dead characters in the file for the analysis you want to do. &lt;em&gt;You want to count the number of living characters in Game of Thrones grouped by their House&lt;/em&gt;. (I know its easy!!!!!)
One thing you could do is include an if statement in your Mapper Code which checks if the persons ID is 4 then exclude it from the mapper and such.
But the problem is that you would have to do it again and again for the same analysis as characters die like flies when it comes to George RR Martin.(Also where is the fun in that)
So you create a file which contains the Ids of all the dead characters at &lt;strong&gt;&lt;code&gt;&amp;rdquo;/data/dead_characters.txt&amp;rdquo;&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;div style=&#34;width: 50%; margin: 0 auto;&#34;&gt;
&lt;table class=&#34;table&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Died&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Whenever you have to run the analysis you can just add to this file and you wont have to change anything in the code.
Also sometimes this file would be long and you would not want to clutter your code with IDs and such.&lt;/p&gt;

&lt;p&gt;So How Would we do it.
Let&amp;rsquo;s go in a step by step way around this.
We will create a shell script, a mapper script and a reducer script for this task.&lt;/p&gt;

&lt;h2 id=&#34;1-shell-script&#34;&gt;1) Shell Script&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#Defining program variables&lt;/span&gt;
DC&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/data/dead_characters.txt&amp;#34;&lt;/span&gt;
IP&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/data/characters&amp;#34;&lt;/span&gt;
OP&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/data/output&amp;#34;&lt;/span&gt;
HADOOP_JAR_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/opt/cloudera/parcels/CDH/lib/hadoop-0.20-mapreduce/contrib/streaming/hadoop-streaming-2.0.0-mr1-cdh4.5.0.jar&amp;#34;&lt;/span&gt;
MAPPER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;got_living_m.py&amp;#34;&lt;/span&gt;
REDUCER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;got_living_r.py&amp;#34;&lt;/span&gt;

hadoop jar&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;nbsp;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;HADOOP_JAR_PATH \
&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;nbsp;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;MAPPER &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mapper &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python got_living_m.py&amp;#34;&lt;/span&gt; \
&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;nbsp;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;REDUCER &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;reducer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python got_living_r.py&amp;#34;&lt;/span&gt; \
&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cacheFile&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;nbsp;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;DC&lt;span style=&#34;color:#75715e&#34;&gt;#ref \&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;input&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;nbsp;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;IP &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;output&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;nbsp;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;OP&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note how we use the &lt;code&gt;&amp;rdquo;-cacheFile&amp;rdquo;&lt;/code&gt; option here. We have specified that we will refer to the file that has been provided in the Distributed cache as &lt;code&gt;#ref&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next is our Mapper Script.&lt;/p&gt;

&lt;h2 id=&#34;2-mapper-script&#34;&gt;2) Mapper Script&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
dead_ids &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_cache&lt;/span&gt;():
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ref&amp;#39;&lt;/span&gt;):
		id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()
		dead_ids&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(id)

read_cache()

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stdin:
	rec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# Split using Delimiter &amp;#34;|&amp;#34;&lt;/span&gt;
	id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rec[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    house &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rec[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dead_ids:
    	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (house,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And our Reducer Script.&lt;/p&gt;

&lt;h2 id=&#34;3-reducer-script&#34;&gt;3) Reducer Script&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
current_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stdin:
	line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()
	rec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
	key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rec[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]	
	value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(rec[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; current_key &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; key:
		count &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; value
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; current_key:
			&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;(key,str(count))		
		current_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key
		count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; current_key &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; key:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;(key,str(count))	&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This was a simple program and the output will be just what you expected and not very exciting. &lt;em&gt;&lt;strong&gt;But the Technique itself solves a variety of common problems. You can use it to pass any big dictionary to your Mapreduce Program&lt;/strong&gt;&lt;/em&gt;. Atleast thats what I use this feature mostly for.
Hope You liked it. Will try to expand this post with more tricks.&lt;/p&gt;

&lt;p&gt;The codes for this post are posted at github &lt;a href=&#34;https://github.com/MLWhiz/Hadoop-Mapreduce-Tricks&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Other Great Learning Resources For Hadoop:
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;http://www.google.co.in/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CB0QFjAA&amp;url=http%3A%2F%2Fwww.michael-noll.com%2Ftutorials%2Fwriting-an-hadoop-mapreduce-program-in-python%2F&amp;ei=8RRVVdP2IMe0uQShsYDYBg&amp;usg=AFQjCNH3DqrlSIG8D-K8jgQWTALic1no5A&amp;sig2=BivwTW6mdJs5c9w9VaSK2Q&amp;bvm=bv.93112503,d.c2E&#34;&gt;Michael Noll&amp;rsquo;s Hadoop Mapreduce Tutorial&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;http://www.google.co.in/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=2&amp;cad=rja&amp;uact=8&amp;ved=0CCMQFjAB&amp;url=http%3A%2F%2Fhadoop.apache.org%2Fdocs%2Fr1.2.1%2Fstreaming.html&amp;ei=8RRVVdP2IMe0uQShsYDYBg&amp;usg=AFQjCNEIB4jmqcBs-GepHdn7DRxqTI9zXA&amp;sig2=nYkAnDjjjaum5YVlYuMUJQ&amp;bvm=bv.93112503,d.c2E&#34;&gt;Apache&amp;rsquo;s Hadoop Streaming Documentation&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;Also I like these books a lot. Must have for a Hadooper&amp;hellip;.&lt;/p&gt;

&lt;div style=&#34;margin-left:1em ; text-align: center;&#34;&gt;
&lt;a target=&#34;_blank&#34;  href=&#34;https://www.amazon.com/gp/product/1785887211/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1785887211&amp;linkCode=as2&amp;tag=mlwhizcon-20&amp;linkId=a0e7b4f0b2ea4a5146042890e1c04f7e&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=1785887211&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=mlwhizcon-20&#34; &gt;&lt;/a&gt;&lt;img src=&#34;//ir-na.amazon-adsystem.com/e/ir?t=mlwhizcon-20&amp;l=am2&amp;o=1&amp;a=1785887211&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;

&lt;/t&gt;&lt;/t&gt;

&lt;a target=&#34;_blank&#34;  href=&#34;https://www.amazon.com/gp/product/1491901632/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1491901632&amp;linkCode=as2&amp;tag=mlwhizcon-20&amp;linkId=4122280e94f7bbd0ceebc9d13e60d103&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=1491901632&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=mlwhizcon-20&#34; &gt;&lt;/a&gt;&lt;img src=&#34;//ir-na.amazon-adsystem.com/e/ir?t=mlwhizcon-20&amp;l=am2&amp;o=1&amp;a=1491901632&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
&lt;/div&gt;

&lt;p&gt;The first book is a guide for using Hadoop as well as spark with Python. While the second one contains a detailed overview of all the things in Hadoop. Its the definitive guide.&lt;/p&gt;

&lt;script src=&#34;//z-na.amazon-adsystem.com/widgets/onejs?MarketPlace=US&amp;adInstanceId=c4ca54df-6d53-4362-92c0-13cb9977639e&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Exploring Vowpal Wabbit with the Avazu Clickthrough Prediction Challenge</title>
      <link>https://mlwhiz.com/blog/2014/12/01/exploring_vowpal_wabbit_avazu/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2014/12/01/exploring_vowpal_wabbit_avazu/</guid>
      <description>

&lt;p&gt;In online advertising, click-through rate (CTR) is a very important metric for evaluating ad performance. As a result, click prediction systems are essential and widely used for sponsored search and real-time bidding.&lt;/p&gt;

&lt;p&gt;For this competition, we have provided 11 days worth of Avazu data to build and test prediction models. Can you find a strategy that beats standard classification algorithms? The winning models from this competition will be released under an open-source
license.&lt;/p&gt;

&lt;h2 id=&#34;data-fields&#34;&gt;Data Fields&lt;/h2&gt;

&lt;pre style=&#34;font-family:courier new,monospace; background-color:#f6c6529c; color:#000000&#34;&gt;
id: ad identifier
click: 0/1 for non-click/click
hour: format is YYMMDDHH, so 14091123 means 23:00 on Sept. 11, 2014 UTC.
C1 -- anonymized categorical variable
banner_pos
site_id
site_domain
site_category
app_id
app_domain
app_category
device_id
device_ip
device_model
device_type
device_conn_type
C14-C21 -- anonymized categorical variables 
&lt;/pre&gt;
    

&lt;h2 id=&#34;loading-data&#34;&gt;Loading Data&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## Loading the data &lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; string &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; stri

&lt;span style=&#34;color:#75715e&#34;&gt;#too large data not keeping it in memory.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# will be using line by line scripting.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#data = pd.read_csv(&amp;#34;/Users/RahulAgarwal/kaggle_cpr/train&amp;#34;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since the data is too large around 6 gb , we will proceed by doing line by line analysis of data. We will try to use vowpal wabbit first of all as it is an online model and it also gives us the option of minimizing log loss as a default. It is also very fast to run and will give us quite an intuition as to how good our prediction can be.&lt;/p&gt;

&lt;p&gt;I will use all the variables in the first implementation and we will rediscover things as we move on&lt;/p&gt;

&lt;h2 id=&#34;running-vowpal-wabbit&#34;&gt;Running Vowpal Wabbit&lt;/h2&gt;

&lt;h2 id=&#34;creating-data-in-vowpal-format-one-time-only&#34;&gt;Creating data in vowpal format (One Time Only)&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; datetime &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; datetime

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;csv_to_vw&lt;/span&gt;(loc_csv, loc_output, train&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True):
    start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Turning &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; into &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;. Is_train_set? &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;(loc_csv,loc_output,train))
    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(loc_csv, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;)
    j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(loc_output, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;)
    counter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
        line_count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; infile:
            &lt;span style=&#34;color:#75715e&#34;&gt;# to counter the header&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; line_count&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                line_count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;# The data has all categorical features&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#numerical_features = &amp;#34;&amp;#34;&lt;/span&gt;
            categorical_features &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
            counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; counter&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#print counter&lt;/span&gt;
            line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; train:
                &lt;span style=&#34;color:#75715e&#34;&gt;#working on the date column. We will take day , hour&lt;/span&gt;
                a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
                new_date&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; datetime(int(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;20&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]),int(a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]),int(a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]))
                day &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_date&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strftime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%A&amp;#34;&lt;/span&gt;)
                hour&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]
                categorical_features &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; |hr &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; hour
                categorical_features &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; |day &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; day
                &lt;span style=&#34;color:#75715e&#34;&gt;# 24 columns in data    &lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;):
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; line[i] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;:
                        categorical_features &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (str(i),line[i])
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
                new_date&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; datetime(int(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;20&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]),int(a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]),int(a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]))
                day &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_date&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strftime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%A&amp;#34;&lt;/span&gt;)
                hour&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]
                categorical_features &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; |hr &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; hour
                categorical_features &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; |day &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; day
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;):
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; line[i] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;:
                        categorical_features &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; |c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (str(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),line[i])
  &lt;span style=&#34;color:#75715e&#34;&gt;#Creating the labels&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#print &amp;#34;a&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; train: &lt;span style=&#34;color:#75715e&#34;&gt;#we care about labels&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; line[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;:
                    label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#we set negative label to -1&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#print (numerical_features)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#print categorical_features&lt;/span&gt;
                j&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (label,line[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],categorical_features))

            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;#we dont care about labels&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#print ( &amp;#34;1 &amp;#39;%s |i%s |c%s\n&amp;#34; % (line[0],numerical_features,categorical_features) )&lt;/span&gt;
                j&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (line[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],categorical_features) )

  &lt;span style=&#34;color:#75715e&#34;&gt;#Reporting progress&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#print counter&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; counter &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;(counter, str(datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; start)))

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; Task execution time:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;(counter, str(datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; start)))

&lt;span style=&#34;color:#75715e&#34;&gt;#csv_to_vw(&amp;#34;/Users/RahulAgarwal/kaggle_cpr/train&amp;#34;, &amp;#34;/Users/RahulAgarwal/kaggle_cpr/click.train_original_data.vw&amp;#34;,train=True)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#csv_to_vw(&amp;#34;/Users/RahulAgarwal/kaggle_cpr/test&amp;#34;, &amp;#34;/Users/RahulAgarwal/kaggle_cpr/click.test_original_data.vw&amp;#34;,train=False)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;running-vowpal-wabbit-on-the-data&#34;&gt;Running Vowpal Wabbit on the data&lt;/h2&gt;

&lt;p&gt;The Vowpal Wabbit will be run on the command line itself.&lt;/p&gt;

&lt;p&gt;Training VW:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;vw click.train_original_data.vw -f click.model.vw --loss_function logistic&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Testing VW:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;vw click.test_original_data.vw  -t -i click.model.vw -p click.preds.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;creating-kaggle-submission-file&#34;&gt;Creating Kaggle Submission File&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; math

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zygmoid&lt;/span&gt;(x):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exp(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x))

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kaggle.click.submission.csv&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wb&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; outfile:
    outfile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id,click&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;click.preds.txt&amp;#34;&lt;/span&gt;):
        
        row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            outfile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%f&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;(row[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],zygmoid(float(row[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]))))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This solution ranked &lt;sup&gt;211&lt;/sup&gt;&amp;frasl;&lt;sub&gt;371&lt;/sub&gt; submissions at the time and the leaderboard score was 0.4031825 while the best leaderboard score was 0.3901120&lt;/p&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a better VW model&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shuffle the data before making the model as the VW algorithm is an online learner and might have given more preference to the latest data&lt;/li&gt;
&lt;li&gt;provide high weights for clicks as data is skewed. How Much?&lt;/li&gt;
&lt;li&gt;tune VW algorithm using vw-hypersearch. What should be tuned?&lt;/li&gt;
&lt;li&gt;Use categorical features like |C1 &amp;ldquo;C1&amp;rdquo;&amp;amp;&amp;ldquo;1&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a XGBoost Model.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a Sofia-ML Model and see how it works on this data.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;//z-na.amazon-adsystem.com/widgets/onejs?MarketPlace=US&amp;adInstanceId=c4ca54df-6d53-4362-92c0-13cb9977639e&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>