<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1" xmlns:content="http://purl.org/rss/1.0/modules/content" xmlns:media="http://search.yahoo.com/mrss/" >

  
  <channel>
    <title>Best Content on MLWhiz</title>
    <link>https://mlwhiz.com/tags/best-content/</link>
    <description>Recent content in Best Content on MLWhiz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Jun 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://mlwhiz.com/tags/best-content/atom.xml" rel="self" type="application/rss+xml" />
    

    

    <item>
      <title>A Layman’s Introduction to GANs for Data Scientists using PyTorch</title>
      <link>https://mlwhiz.com/blog/2020/08/27/pyt_gan/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2020/08/27/pyt_gan/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/pyt_gan/main.png"></media:content>
      

      
      <description>Most of us in data science has seen a lot of AI-generated people in recent times, whether it be in papers, blogs, or videos. We’ve reached a stage where it’s becoming increasingly difficult to distinguish between actual human faces and faces generated by artificial intelligence. However, with the currently available machine learning toolkits, creating these images yourself is not as difficult as you might think.
In my view, GANs will change the way we generate video games and special effects.</description>

      <content:encoded>  
        
        <![CDATA[  Most of us in data science has seen a lot of AI-generated people in recent times, whether it be in papers, blogs, or videos. We’ve reached a stage where it’s becoming increasingly difficult to distinguish between actual human faces and faces generated by artificial intelligence. However, with the currently available machine learning toolkits, creating these images yourself is not as difficult as you might think.
In my view, GANs will change the way we generate video games and special effects. Using this approach, we could create realistic textures or characters on demand.
So in this post, we’re going to look at the generative adversarial networks behind AI-generated images, and help you to understand how to create and build your similar application with PyTorch. We’ll try to keep the post as intuitive as possible for those of you just starting out, but we’ll try not to dumb it down too much.
At the end of this article, you’ll have a solid understanding of how General Adversarial Networks (GANs) work, and how to build your own.
Task Overview In this post, we will create unique anime characters using the Anime Face Dataset. It is a dataset consisting of 63,632 high-quality anime faces in a number of styles. It’s a good starter dataset because it’s perfect for our goal.
We will be using Deep Convolutional Generative Adversarial Networks (DC-GANs) for our project. Though we’ll be using it to generate the faces of new anime characters, DC-GANs can also be used to create modern fashion styles, general content creation, and sometimes for data augmentation as well.
But before we get into the coding, let’s take a quick look at how GANs work.
INTUITION: Brief Intro to GANs for Generating Fake Images GANs typically employ two dueling neural networks to train a computer to learn the nature of a dataset well enough to generate convincing fakes. One of these Neural Networks generates fakes (the generator), and the other tries to classify which images are fake (the discriminator). These networks improve over time by competing against each other.
Perhaps imagine the generator as a robber and the discriminator as a police officer. The more the robber steals, the better he gets at stealing things. But at the same time, the police officer also gets better at catching the thief. Well, in an ideal world, anyway.
The losses in these neural networks are primarily a function of how the other network performs:
 Discriminator network loss is a function of generator network quality: Loss is high for the discriminator if it gets fooled by the generator’s fake images.
 Generator network loss is a function of discriminator network quality: Loss is high if the generator is not able to fool the discriminator.
  In the training phase, we train our discriminator and generator networks sequentially, intending to improve performance for both. The end goal is to end up with weights that help the generator to create realistic-looking images. In the end, we’ll use the generator neural network to generate high-quality fake images from random noise.
The Generator architecture One of the main problems we face when working with GANs is that the training is not very stable. So we have to come up with a generator architecture that solves our problem and also results in stable training. The diagram below is taken from the paper Unsupervised Representation Learning with Deep Convolutional Generative Adversarial Networks, which explains the DC-GAN generator architecture.
Though it might look a little bit confusing, essentially you can think of a generator neural network as a black box which takes as input a 100 dimension normally generated vector of numbers and gives us an image:
So how do we create such an architecture? Below, we use a dense layer of size 4x4x1024 to create a dense vector out of the 100-d vector. We then reshape the dense vector in the shape of an image of 4×4 with 1024 filters, as shown in the following figure:
Note that we don’t have to worry about any weights right now as the network itself will learn those during training.
Once we have the 1024 4×4 maps, we do upsampling using a series of transposed convolutions, which after each operation doubles the size of the image and halves the number of maps. In the last step, however, we don’t halve the number of maps. We reduce the maps to 3 for each RGB channel since we need three channels for the output image.
Now, What are Transpose convolutions? Put simply, transposing convolutions provides us with a way to upsample images. In a convolution operation, we try to go from a 4×4 image to a 2×2 image. But when we transpose convolutions, we convolve from 2×2 to 4×4 as shown in the following figure:
Some of you may already know that unpooling is commonly used for upsampling input feature maps in convolutional neural networks (CNN). So why don’t we use unpooling here?
The reason comes down to the fact that unpooling does not involve any learning. However, transposed convolution is learnable, so it’s preferred. Later in the article, we’ll see how the parameters can be learned by the generator.
The Discriminator architecture Now that we’ve covered the generator architecture, let’s look at the discriminator as a black box. In practice, it contains a series of convolutional layers with a dense layer at the end to predict if an image is fake or not. You can see an example in the figure below:
Every image convolutional neural network works by taking an image as input, and predicting if it is real or fake using a sequence of convolutional layers.
Data preprocessing and visualization Before going any further with our training, we preprocess our images to a standard size of 64x64x3. We will also need to normalize the image pixels before we train our GAN. You can see the process in the code below, which I’ve commented on for clarity.
# Root directory for dataset dataroot = &amp;#34;anime_images/&amp;#34; # Number of workers for dataloader workers = 2 # Batch size during training batch_size = 128 # Spatial size of training images. All images will be resized to this size using a transformer. image_size = 64 # Number of channels in the training images. For color images this is 3 nc = 3 # We can use an image folder dataset the way we have it setup. # Create the dataset dataset = datasets.ImageFolder(root=dataroot, transform=transforms.Compose([ transforms.Resize(image_size), transforms.CenterCrop(image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)), ])) # Create the dataloader dataloader = torch.utils.data.DataLoader(dataset, batch_size=batch_size, shuffle=True, num_workers=workers) # Decide which device we want to run on device = torch.device(&amp;#34;cuda:0&amp;#34; if (torch.cuda.is_available() and ngpu &amp;gt; 0) else &amp;#34;cpu&amp;#34;) # Plot some training images real_batch = next(iter(dataloader)) plt.figure(figsize=(8,8)) plt.axis(&amp;#34;off&amp;#34;) plt.title(&amp;#34;Training Images&amp;#34;) plt.imshow(np.transpose(vutils.make_grid(real_batch[0].to(device)[:64], padding=2, normalize=True).cpu(),(1,2,0))) The resultant output of the code is as follows:
So Many different Characters — Can our Generator understand the patterns?
Implementation of DCGAN This is the part where we define our DCGAN. We will be defining our noise generator function, Generator architecture, and Discriminator architecture.
Generating noise vector for Generator We need to generate the noise which we want to convert to an image using our generator architecture.
We use a normal distribution
to generate the noise vector:
nz = 100 noise = torch.randn(64, nz, 1, 1, device=device)  Generator architecture The generator is the most crucial part of the GAN. Here, we’ll create a generator by adding some transposed convolution layers to upsample the noise vector to an image. You’ll notice that this generator architecture is not the same as the one given in the DC-GAN paper I linked above.
In order to make it a better fit for our data, I had to make some architectural changes. I added a convolution layer in the middle and removed all dense layers from the generator architecture to make it fully convolutional.
I also used a lot of Batchnorm layers and leaky ReLU activation. The following code block is the function I will use to create the generator:
# Size of feature maps in generator ngf = 64 # Number of channels in the training images. For color images this is 3 nc = 3 # Size of z latent vector (i.e. size of generator input noise) nz = 100 class Generator(nn.Module): def __init__(self, ngpu): super(Generator, self).__init__() self.ngpu = ngpu self.main = nn.Sequential( # input is noise, going into a convolution # Transpose 2D conv layer 1. nn.ConvTranspose2d( nz, ngf * 8, 4, 1, 0, bias=False), nn.BatchNorm2d(ngf * 8), nn.ReLU(True), # Resulting state size - (ngf*8) x 4 x 4 i.e. if ngf= 64 the size is 512 maps of 4x4 # Transpose 2D conv layer 2. nn.ConvTranspose2d(ngf * 8, ngf * 4, 4, 2, 1, bias=False), nn.BatchNorm2d(ngf * 4), nn.ReLU(True), # Resulting state size -(ngf*4) x 8 x 8 i.e 8x8 maps # Transpose 2D conv layer 3. nn.ConvTranspose2d( ngf * 4, ngf * 2, 4, 2, 1, bias=False), nn.BatchNorm2d(ngf * 2), nn.ReLU(True), # Resulting state size. (ngf*2) x 16 x 16 # Transpose 2D conv layer 4. nn.ConvTranspose2d( ngf * 2, ngf, 4, 2, 1, bias=False), nn.BatchNorm2d(ngf), nn.ReLU(True), # Resulting state size. (ngf) x 32 x 32 # Final Transpose 2D conv layer 5 to generate final image. # nc is number of channels - 3 for 3 image channel nn.ConvTranspose2d( ngf, nc, 4, 2, 1, bias=False), # Tanh activation to get final normalized image nn.Tanh() # Resulting state size. (nc) x 64 x 64 ) def forward(self, input): &amp;#39;&amp;#39;&amp;#39; This function takes as input the noise vector&amp;#39;&amp;#39;&amp;#39; return self.main(input) Now we can instantiate the model using the generator class. We are keeping the default weight initializer for PyTorch even though the paper says to initialize the weights using a mean of 0 and std dev of 0.2. The default weights initializer from Pytorch is more than good enough for our project.
# Create the generator netG = Generator(ngpu).to(device) # Handle multi-gpu if desired if (device.type == &#39;cuda&#39;) and (ngpu &amp;gt; 1): netG = nn.DataParallel(netG, list(range(ngpu))) # Print the model print(netG)  We can see the final generator model:
The Discriminator architecture Here is the discriminator architecture where I use a series of convolutional layers and a dense layer at the end to predict if an image is fake or not.
# Number of channels in the training images. For color images this is 3 nc = 3 # Size of feature maps in discriminator ndf = 64 class Discriminator(nn.Module): def __init__(self, ngpu): super(Discriminator, self).__init__() self.ngpu = ngpu self.main = nn.Sequential( # input is (nc) x 64 x 64 nn.Conv2d(nc, ndf, 4, 2, 1, bias=False), nn.LeakyReLU(0.2, inplace=True), # state size. (ndf) x 32 x 32 nn.Conv2d(ndf, ndf * 2, 4, 2, 1, bias=False), nn.BatchNorm2d(ndf * 2), nn.LeakyReLU(0.2, inplace=True), # state size. (ndf*2) x 16 x 16 nn.Conv2d(ndf * 2, ndf * 4, 4, 2, 1, bias=False), nn.BatchNorm2d(ndf * 4), nn.LeakyReLU(0.2, inplace=True), # state size. (ndf*4) x 8 x 8 nn.Conv2d(ndf * 4, ndf * 8, 4, 2, 1, bias=False), nn.BatchNorm2d(ndf * 8), nn.LeakyReLU(0.2, inplace=True), # state size. (ndf*8) x 4 x 4 nn.Conv2d(ndf * 8, 1, 4, 1, 0, bias=False), nn.Sigmoid() ) def forward(self, input): return self.main(input) Now we can instantiate the discriminator exactly as we did the generator.
# Create the Discriminator netD = Discriminator(ngpu).to(device) # Handle multi-gpu if desired if (device.type == &#39;cuda&#39;) and (ngpu &amp;gt; 1): netD = nn.DataParallel(netD, list(range(ngpu))) # Print the model print(netD)  Here is the architecture of the discriminator:
Training Understanding how the training works in GAN is essential. It’s interesting, too; we can see how training the generator and discriminator together improves them both at the same time.
Now that we have our discriminator and generator models, next we need to initialize separate optimizers for them.
# Initialize BCELoss function criterion = nn.BCELoss() # Create batch of latent vectors that we will use to visualize # the progression of the generator fixed_noise = torch.randn(64, nz, 1, 1, device=device) # Establish convention for real and fake labels during training real_label = 1. fake_label = 0. # Setup Adam optimizers for both G and D # Learning rate for optimizers lr = 0.0002 # Beta1 hyperparam for Adam optimizers beta1 = 0.5 optimizerD = optim.Adam(netD.parameters(), lr=lr, betas=(beta1, 0.999)) optimizerG = optim.Adam(netG.parameters(), lr=lr, betas=(beta1, 0.999)) The Training Loop This is the main area where we need to understand how the blocks we’ve created will assemble and work together.
# Lists to keep track of progress/Losses img_list = [] G_losses = [] D_losses = [] iters = 0 # Number of training epochs num_epochs = 50 # Batch size during training batch_size = 128 print(&amp;#34;Starting Training Loop...&amp;#34;) # For each epoch for epoch in range(num_epochs): # For each batch in the dataloader for i, data in enumerate(dataloader, 0): ############################ # (1) Update D network: maximize log(D(x)) &#43; log(1 - D(G(z))) # Here we: # A. train the discriminator on real data # B. Create some fake images from Generator using Noise # C. train the discriminator on fake data ########################### # Training Discriminator on real data netD.zero_grad() # Format batch real_cpu = data[0].to(device) b_size = real_cpu.size(0) label = torch.full((b_size,), real_label, device=device) # Forward pass real batch through D output = netD(real_cpu).view(-1) # Calculate loss on real batch errD_real = criterion(output, label) # Calculate gradients for D in backward pass errD_real.backward() D_x = output.mean().item() ## Create a batch of fake images using generator # Generate noise to send as input to the generator noise = torch.randn(b_size, nz, 1, 1, device=device) # Generate fake image batch with G fake = netG(noise) label.fill_(fake_label) # Classify fake batch with D output = netD(fake.detach()).view(-1) # Calculate D&amp;#39;s loss on the fake batch errD_fake = criterion(output, label) # Calculate the gradients for this batch errD_fake.backward() D_G_z1 = output.mean().item() # Add the gradients from the all-real and all-fake batches errD = errD_real &#43; errD_fake # Update D optimizerD.step() ############################ # (2) Update G network: maximize log(D(G(z))) # Here we: # A. Find the discriminator output on Fake images # B. Calculate Generators loss based on this output. Note that the label is 1 for generator. # C. Update Generator ########################### netG.zero_grad() label.fill_(real_label) # fake labels are real for generator cost # Since we just updated D, perform another forward pass of all-fake batch through D output = netD(fake).view(-1) # Calculate G&amp;#39;s loss based on this output errG = criterion(output, label) # Calculate gradients for G errG.backward() D_G_z2 = output.mean().item() # Update G optimizerG.step() # Output training stats every 50th Iteration in an epoch if i % 1000 == 0: print(&amp;#39;[%d/%d][%d/%d]\tLoss_D: %.4f\tLoss_G: %.4f\tD(x): %.4f\tD(G(z)): %.4f/ %.4f&amp;#39; % (epoch, num_epochs, i, len(dataloader), errD.item(), errG.item(), D_x, D_G_z1, D_G_z2)) # Save Losses for plotting later G_losses.append(errG.item()) D_losses.append(errD.item()) # Check how the generator is doing by saving G&amp;#39;s output on a fixed_noise vector if (iters % 250 == 0) or ((epoch == num_epochs-1) and (i == len(dataloader)-1)): #print(iters) with torch.no_grad(): fake = netG(fixed_noise).detach().cpu() img_list.append(vutils.make_grid(fake, padding=2, normalize=True)) iters &#43;= 1 It may seem complicated, but I’ll break down the code above step by step in this section. The main steps in every training iteration are:
Step 1: Sample a batch of normalized images from the dataset
for i, data in enumerate(dataloader, 0):  Step 2: Train discriminator using generator images(Fake images) and real normalized images(Real Images) and their labels.
 # Training Discriminator on real data netD.zero_grad() # Format batch real_cpu = data[0].to(device) b_size = real_cpu.size(0) label = torch.full((b_size,), real_label, device=device) # Forward pass real batch through D output = netD(real_cpu).view(-1) # Calculate loss on real batch errD_real = criterion(output, label) # Calculate gradients for D in backward pass errD_real.backward() D_x = output.mean().item() ## Create a batch of fake images # Generate noise to send as input to the generator noise = torch.randn(b_size, nz, 1, 1, device=device) # Generate fake image batch with G fake = netG(noise) label.fill_(fake_label) # Classify fake batch with D output = netD(fake.detach()).view(-1) # Calculate D&#39;s loss on the fake batch errD_fake = criterion(output, label) # Calculate the gradients for this batch errD_fake.backward() D_G_z1 = output.mean().item() # Add the gradients from the all-real and all-fake batches errD = errD_real &#43; errD_fake # Update D optimizerD.step()  Step 3: Backpropagate the errors through the generator by computing the loss gathered from discriminator output on fake images as the input and 1’s as the target while keeping the discriminator as untrainable — This ensures that the loss is higher when the generator is not able to fool the discriminator. You can check it yourself like so: if the discriminator gives 0 on the fake image, the loss will be high i.e., BCELoss(0,1).
 netG.zero_grad() label.fill_(real_label) # fake labels are real for generator cost output = netD(fake).view(-1) # Calculate G&#39;s loss based on this output errG = criterion(output, label) # Calculate gradients for G errG.backward() D_G_z2 = output.mean().item() # Update G optimizerG.step()  We repeat the steps using the for loop to end up with a good discriminator and generator.
Results The final output of our generator can be seen below. The GAN generates pretty good images for our content editor friends to work with.
The images might be a little crude, but still, this project was a starter for our GAN journey. The field is constantly advancing with better and more complex GAN architectures, so we’ll likely see further increases in image quality from these architectures. Also, keep in mind that these images are generated from a noise vector only: this means the input is some noise, and the output is an image. It’s quite incredible.
ALL THESE IMAGES ARE FAKE
1. Loss over the training period Here is the graph generated for the losses. We can see that the GAN Loss is decreasing on average, and the variance is also decreasing as we do more steps. It’s possible that training for even more iterations would give us even better results.
plt.figure(figsize=(10,5)) plt.title(&amp;quot;Generator and Discriminator Loss During Training&amp;quot;) plt.plot(G_losses,label=&amp;quot;G&amp;quot;) plt.plot(D_losses,label=&amp;quot;D&amp;quot;) plt.xlabel(&amp;quot;iterations&amp;quot;) plt.ylabel(&amp;quot;Loss&amp;quot;) plt.legend() plt.show()  2. Image Animation at every 250th Iteration in Jupyter Notebook We can choose to see the output as an animation using the below code:
#%%capture fig = plt.figure(figsize=(8,8)) plt.axis(&amp;quot;off&amp;quot;) ims = [[plt.imshow(np.transpose(i,(1,2,0)), animated=True)] for i in img_list] ani = animation.ArtistAnimation(fig, ims, interval=1000, repeat_delay=1000, blit=True)HTML(ani.to_jshtml())  You can choose to save an animation object as a gif as well if you want to send them to some friends.
ani.save(&#39;animation.gif&#39;, writer=&#39;imagemagick&#39;,fps=5) Image(url=&#39;animation.gif&#39;)  3. Image generated at every 200 Iter Given below is the code to generate some images at different training steps. As we can see, as the number of steps increases, the images are getting better.
# create a list of 16 images to show every_nth_image = np.ceil(len(img_list)/16) ims = [np.transpose(img,(1,2,0)) for i,img in enumerate(img_list)if i%every_nth_image==0] print(&amp;quot;Displaying generated images&amp;quot;) # You might need to change grid size and figure size here according to num images. plt.figure(figsize=(20,20)) gs1 = gridspec.GridSpec(4, 4) gs1.update(wspace=0, hspace=0) step = 0 for i,image in enumerate(ims): ax1 = plt.subplot(gs1[i]) ax1.set_aspect(&#39;equal&#39;) fig = plt.imshow(image) # you might need to change some params here fig = plt.text(7,30,&amp;quot;Step: &amp;quot;&#43;str(step),bbox=dict(facecolor=&#39;red&#39;, alpha=0.5),fontsize=12) plt.axis(&#39;off&#39;) fig.axes.get_xaxis().set_visible(False) fig.axes.get_yaxis().set_visible(False) step&#43;=int(250*every_nth_image) #plt.tight_layout() plt.savefig(&amp;quot;GENERATEDimage.png&amp;quot;,bbox_inches=&#39;tight&#39;,pad_inches=0) plt.show()  Given below is the result of the GAN at different time steps:
Conclusion In this post, we covered the basics of GANs for creating fairly believable fake images. We hope you now have an understanding of generator and discriminator architecture for DC-GANs, and how to build a simple DC-GAN to generate anime images from scratch.
Though this model is not the most perfect anime face generator, using it as a base helps us to understand the basics of generative adversarial networks, which in turn can be used as a stepping stone to more exciting and complex GANs as we move forward.
Look at it this way, as long as we have the training data at hand, we now have the ability to conjure up realistic textures or characters on demand. That is no small feat.
For a closer look at the code for this post, please visit my GitHub repository where you can find the code for this post as well as all my posts.
If you want to know more about deep learning applications and use cases, take a look at the Sequence Models course in the Deep Learning Specialization by Andrew Ng. Andrew is a great instructor, and this course is excellent too.
I am going to be writing more of such posts in the future too. Let me know what you think about the series. Follow me up at Medium or Subscribe to my blog.
Also, a small disclaimer — There might be some affiliate links in this post to relevant resources, as sharing knowledge is never a bad idea.
This post was first published here
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Creating my First Deep Learning &#43; Data Science Workstation</title>
      <link>https://mlwhiz.com/blog/2020/08/09/owndlrig/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2020/08/09/owndlrig/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/owndlrig/main.png"></media:content>
      

      
      <description>Creating my workstation has been a dream for me, if nothing else.
I knew the process involved, yet I somehow never got to it. It might have been time or money. Mostly Money.
But this time I just had to do it. I was just fed up with setting up a server on AWS for any small personal project and fiddling with all the installations. Or I had to work on Google Collab notebooks, which have a lot of limitations on running times and network connections.</description>

      <content:encoded>  
        
        <![CDATA[  Creating my workstation has been a dream for me, if nothing else.
I knew the process involved, yet I somehow never got to it. It might have been time or money. Mostly Money.
But this time I just had to do it. I was just fed up with setting up a server on AWS for any small personal project and fiddling with all the installations. Or I had to work on Google Collab notebooks, which have a lot of limitations on running times and network connections. So, I found out some time to create a Deep Learning Rig with some assistance from NVIDIA folks.
The whole process involved a lot of reading up and watching a lot of Youtube videos from Linus Tech Tips. And as it was the first time I was assembling a computer from scratch, it was sort of special too.
Building the DL rig as per your requirements takes up a lot of research. I researched on individual parts, their performance, reviews, and even the aesthetics.
Now, most of the workstation builds I researched were focussed on gaming, so I thought of putting down a Deep Learning Rig Spec as well.
I will try to put all the components I used along with the reasons why I went with those particular parts as well.
***Also, if you want to see how I set up the Deep Learning libraries after setting up the system to use Ubuntu 18.04, you can view ***this definitive guide for Setting up a Deep Learning Workstation.
So why the need for a workstation? The very first answer that comes to my mind is, why not?
I work a lot on deep learning and machine learning applications, and it always has been such a massive headache to churn up a new server and installing all the dependencies every time I start to work on a new project.
Also, it looks great, sits on your desk, is available all the time, and is open to significant customization as per your requirements.
Adding to this the financial aspects of using the GCP or AWS, and I was pretty much sold on the idea of building my rig.
My Build It took me a couple of weeks to come up with the final build.
I knew from the start that I want to have a lot of computing power and also something that would be upgradable in the coming years. Currently, my main priorities were to get a system that could support two NVIDIA RTX Titan cards with NVLink. That would allow me to have 48GB GPU memory at my disposal. Simply awesome.
PS:* The below build might not be the best build, and there may be cheaper alternatives present, but I know for sure that it is the build with the minimal future headache. So I went with it. I also contacted Nvidia to get a lot of suggestions about this particular build and only went forward after they approved of it.
1. Intel i9 9920x 3.5 GHz 12 core Processor Yes, I went with an Intel processor and not an AMD one. My reason for this (though people may differ with me on this) is because Intel has more compatible and related software like Intel’s MKL, which benefits most of the Python libraries I use.
Another and maybe a more important reason, at least for me, was that it was suggested by the people at NVIDIA to go for i9 if I wanted to have a dual RTX Titan configuration. Again zero headaches in the future.
So why this particular one from the Intel range?
I started with 9820X with its ten cores and 9980XE with 18 cores, but the latter stretched my budget a lot. I found that i9–9920X, with its 12 cores and 3.5 GHz processor, fit my budget just fine, and as it is always better to go for the mid-range solution, I went with it.
Now a CPU is the component that decides a lot of other components you are going to end up using.
For example, if you choose an i9 9900X range of CPU, you will have to select an X299 motherboard, or if you are going to use an AMD Threadripper CPU, you will need an X399 Motherboard. So be mindful of choosing the right CPU and motherboard.
2. MSI X299 SLI PLUS ATX LGA2066 Motherboard This was a particularly difficult choice. There are just too many options here. I wanted a Motherboard that could support at least 96GB RAM (again as per the specifications by the NVIDIA Folks for supporting 2 Titans). That meant that I had to have at least six slots if I were to use 16GB RAM Modules as 16x6=96. I got 8 in this one, so it is expandable till 128 GB RAM.
I also wanted to be able to have 2 TB NVMe SSD in my system(in the future), and that meant I needed 2 M.2 ports, which this board has. Or else I would have to go for a much expensive 2TB Single NVMe SSD.
I looked into a lot of options, and based on the ATX Form factor, 4 PCI-E x16 slots, and the reasonable pricing of the board, I ended up choosing this one.
3. Noctua NH-D15 chromax.BLACK 82.52 CFM CPU Cooler Liquid cooling is in rage right now. And initially, I also wanted to go for an AIO cooler, i.e., liquid cooling.
But after talking to a couple of people at NVIDIA as well as scrouging through the internet forums on the pro and cons of both options, I realized that Air cooling is better suited to my needs. So I went for the Noctua NH-D15, which is one of the best Air coolers in the market. So, I went with the best air cooling instead of a mediocre water cooling. And this cooler is SILENT. More on this later.
4. Phanteks Enthoo Pro Tempered Glass Case The next thing to think was a case that is going to be big enough to handle all these components and also be able to provide the required cooling. It was where I spent most of my time while researching.
I mean, we are going to keep 2 Titan RTX, 9920x CPU, 128 GB RAM. It’s going to be a hellish lot of heat in there.
Add to that the space requirements for the Noctua air cooler and the capability to add a lot of fans, and I was left with two options based on my poor aesthetic sense as well as the availability in my country. The options were — Corsair Air 540 ATX and the Phanteks Enthoo Pro Tempered Glass PH-ES614PTG_SWT.
Both of them are exceptional cases, but I went through with the Enthoo Pro as it is a more recently launched case and has a bigger form factor(Full Tower) offers options for more customizable build in the future too.
5. Dual Titan RTX with 3 Slot NVLink These 2 Titan RTX are by far the most important and expensive part of the whole build. These alone take up 80% of the cost, but aren’t they awesome?
I wanted to have a high-performance GPU in my build, and the good folks at NVIDIA were generous enough to send me two of these to test out.
I just love them. The design. The way they look in the build and the fact that they can be combined using a 3 Slot NVLink to provide 48 GB of GPU RAM effectively. Just awesome. If money is an issue, 2 x RTX 2080 Ti would also work fine as well. Only a problem will be that you might need smaller batch sizes training on RTX 2080 Ti, and in some cases, you might not be able to train large models as RTX2080Ti has 11GB RAM only. Also, you won’t be able to use NVLink, which combines the VRAM of multiple GPUs in Titans.
6. Samsung 970 Evo Plus 1 TB NVME Solid State Drive What about storage? NVMe SSD, of course, and the Samsung Evo Plus is the unanimous and most popular winner in this SSD race.
I bought 1 of them till now, but as I have 2 M.2 ports in my motherboard, I will get total storage of 2TB SSD in the future.
You can also get a couple of 2.5&amp;rdquo; SSD for more storage space.
7. Corsair Vengeance LPX 128GB (8x16GB) DDR4 3200 MHz I wanted to have a minimum of 96GB RAM, as suggested by the NVIDIA team. So I said what the heck and went with the full 128 GB RAM without cheaping out.
As you can see, these RAM sticks are not RGB lit, and that is a conscious decision as the Noctua Air Cooler doesn’t provide a lot of clearance for RAM Slots and the RGB ones had a slightly higher height. So keep that in mind. Also, I was never trying to go for an RGB Build anyway as I want to focus on those lit up Titans in my build.
8. Corsair 1200W Power Supply A 1200W power supply is a pretty big one, but that is needed realizing that the estimated wattage of our components at full wattage is going to be ~965W.
I had a couple of options for the power supply from other manufacturers also but went with this one because of Corsair’s name. I would have gone with HX1200i, but it was not available, and AX1200i was much more expensive than this one at my location. But both of them are excellent options apart from this one.
9. Even More Fans The Phanteks case comes up with three fans, but I was recommended to upgrade the intake, and exhaust fans of the case to BeQuiet BL071 PWM Fans as Dual Titans can put out a lot of heat. I have noticed that the temperature of my room is almost 2–3 degrees higher than the outside temperature, as I generally keep the machine on.
To get the best possible airflow, I bought 5 of these. I have put two at the top of the case along with a Phanteks case fan, 2 of them in the front, and one fan at the back of the case.
10. Peripherals The Essentials — A cup of tea and those speakers
This section is not necessary but wanted to put it in for completion.
Given all the power we have got, I didn’t want to cheap out on the peripherals. So I got myself an LG 27UK650 4k monitor for content creation, BenQ EX2780Q 1440p 144hz Gaming Monitor for a little bit of gaming, a Mechanical Cherry MX Red Corsair K68 Keyboard and a Corsair M65 Pro Mouse.
And my build is complete.
Pricing 💰💰💰 I will put the price as per the PCPartPicker site as I have gotten my components from different countries and sources. You can also check the part list at the PCPartPicker site: https://pcpartpicker.com/list/zLVjZf
As you can see, this is pretty expensive by any means (even after getting the GPUs from NVIDIA), but that is the price you pay for certain afflictions, I guess.
Finally In this post, I talked about all the parts you are going to need to assemble your deep learning rig and my reasons for getting these in particular.
You might try to look out for better components or a different design, but this one has been working pretty well for me for quite some time now, and is it fast.
If you want to see how I set up the Deep Learning libraries after setting up the system with these components, you can view this definitive guide for Setting up a Deep Learning Workstation with Ubuntu 18.04
Let me know what you think in the comments.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>A definitive guide for Setting up a Deep Learning Workstation with Ubuntu</title>
      <link>https://mlwhiz.com/blog/2020/06/06/dlrig/</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2020/06/06/dlrig/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/dlrig/main.png"></media:content>
      

      
      <description>Creating my own workstation has been a dream for me if nothing else. I knew the process involved, yet I somehow never got to it.
But this time I just had to do it. So, I found out some free time to create a Deep Learning Rig with a lot of assistance from NVIDIA folks who were pretty helpful. On that note special thanks to Josh Patterson and Michael Cooper.</description>

      <content:encoded>  
        
        <![CDATA[  Creating my own workstation has been a dream for me if nothing else. I knew the process involved, yet I somehow never got to it.
But this time I just had to do it. So, I found out some free time to create a Deep Learning Rig with a lot of assistance from NVIDIA folks who were pretty helpful. On that note special thanks to Josh Patterson and Michael Cooper.
Now, every time I create the whole deep learning setup from an installation viewpoint, I end up facing similar challenges. It’s like running around in circles with all these various dependencies and errors. This time also I had to try many things before the whole configuration came to life without errors.
So this time, I made it a point to document everything while installing all the requirements and their dependencies in my own system.
This post is about setting up your own Linux Ubuntu 18.04 system for deep learning with everything you might need.
If a pre-built deep learning system is preferred, I can recommend Exxact’s line of workstations and servers.
I assume that you have a fresh Ubuntu 18.04 installation. I am taking inspiration from Slav Ivanov’s excellent post in 2017 on creating a Deep Learning box. You can call it the 2020 version for the same post from a setup perspective, but a lot of the things have changed from then, and there are a lot of caveats with specific CUDA versions not supported by Tensorflow and Pytorch.
Starting up Before we do anything with our installation, we need to update our Linux system to the latest packages. We can do this simply by using:
sudo apt-get update sudo apt-get --assume-yes upgrade sudo apt-get --assume-yes install tmux build-essential gcc g&#43;&#43; make binutils sudo apt-get --assume-yes install software-properties-common sudo apt-get --assume-yes install git  The Process So now we have everything set up we want to install the following four things:
 GPU Drivers: Why is your PC not supporting high graphic resolutions? Or how would your graphics cards talk to your python interfaces?
 CUDA: A layer to provide access to the GPU’s instruction set and parallel computation units. In simple words, it allows us a way to write code for GPUs
 CuDNN: a library that provides Primitives for Deep Learning Network
 Pytorch, Tensorflow, and Rapids: higher-level APIs to code Deep Neural Networks
  1. GPU Drivers The first step is to add the latest NVIDIA drivers. You can choose the GPU product type, Linux 64 bit, and download Type as “Linux Long-Lived” for the 18.04 version.
Clicking on search will take you to a downloads page:
From where you can download the driver file NVIDIA-Linux-x86_64–440.44.run and run it using:
chmod &#43;x NVIDIA-Linux-x86_64–440.44.run sudo sh NVIDIA-Linux-x86_64–440.44.run  For you, the file may be named differently, depending on the latest version.
2. CUDA We will now need to install the CUDA toolkit. Somehow the CUDA toolkit 10.2 is still not supported by Pytorch and Tensorflow, so we will go with CUDA Toolkit 10.1, which is supported by both.
Also, the commands on the product page for CUDA 10.1 didn’t work for me and the commands I ended up using are:
sudo apt-key adv --fetch-keys [http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub](http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub) &amp;amp;&amp;amp; echo &amp;quot;deb [https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64](https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64) /&amp;quot; | sudo tee /etc/apt/sources.list.d/cuda.list sudo apt-get update &amp;amp;&amp;amp; sudo apt-get -o Dpkg::Options::=&amp;quot;--force-overwrite&amp;quot; install cuda-10-1 cuda-drivers  The next step is to create the LD_LIBRARY_PATH and append to the PATH variable the path where CUDA got installed. Just run this below command on your terminal.
echo &#39;export PATH=/usr/local/cuda-10.1/bin${PATH:&#43;:${PATH}}&#39; &amp;gt;&amp;gt; ~/.bashrc &amp;amp;&amp;amp; echo &#39;export LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64${LD_LIBRARY_PATH:&#43;:${LD_LIBRARY_PATH}}&#39; &amp;gt;&amp;gt; ~/.bashrc &amp;amp;&amp;amp; source ~/.bashrc &amp;amp;&amp;amp; sudo ldconfig  After this, one can check if CUDA is installed correctly by using:
nvcc --version  As you can see, the CUDA Version is 10.1 as we wanted. Also, check if you can use the command:
nvidia-smi  For me, it showed an error when I used it the first time, but a simple reboot solved the issue. And both my NVIDIA graphic cards show up in all their awesome glory. Don’t worry that the display says the CUDA version supported is 10.2. I was also confused, but it is just the maximum CUDA version supported by the graphics driver that is shown in nvidia-smi.
3.CuDNN What is the use of all these libraries if we are not going to train neural nets? CuDNN provides various primitives for Deep Learning, which are later used by PyTorch/TensorFlow.
But we first need to get a developer account first to install CuDNN. Once you fill-up the signup form, you will see the screen below. Select the cuDNN version that applies to your CUDA version. For me, the CUDA version is 10.1, so I select the second one.
Once you select the appropriate CuDNN version the screen expands:
For my use case, I needed to download three files for Ubuntu 18.04:
[cuDNN Runtime Library for Ubuntu18.04 (Deb)](https://developer.nvidia.com/compute/machine-learning/cudnn/secure/7.6.5.32/Production/10.1_20191031/Ubuntu18_04-x64/libcudnn7_7.6.5.32-1%2Bcuda10.1_amd64.deb) [cuDNN Developer Library for Ubuntu18.04 (Deb)](https://developer.nvidia.com/compute/machine-learning/cudnn/secure/7.6.5.32/Production/10.1_20191031/Ubuntu18_04-x64/libcudnn7-dev_7.6.5.32-1%2Bcuda10.1_amd64.deb) [cuDNN Code Samples and User Guide for Ubuntu18.04 (Deb)](https://developer.nvidia.com/compute/machine-learning/cudnn/secure/7.6.5.32/Production/10.1_20191031/Ubuntu18_04-x64/libcudnn7-doc_7.6.5.32-1%2Bcuda10.1_amd64.deb)  After downloading these files, you can install using these commands. You can also see the exact commands if anything changes in the future:
# Install the runtime library: sudo dpkg -i libcudnn7_7.6.5.32-1&#43;cuda10.1_amd64.deb #Install the developer library: sudo dpkg -i libcudnn7-dev_7.6.5.32-1&#43;cuda10.1_amd64.deb #Install the code samples and cuDNN User Guide(Optional): sudo dpkg -i libcudnn7-doc_7.6.5.32-1&#43;cuda10.1_amd64.deb  4. Anaconda, Pytorch, Tensorflow, and Rapids And finally, we reach the crux. We will install the software which we will interface with most of the times.
We need to install Python with virtual environments. I have downloaded python3 as it is the most stable version as of now, and it is time to say goodbye to Python 2.7. It was great while it lasted. And we will also install Pytorch and Tensorflow. I prefer them both for specific tasks as applicable.
You can go to the anaconda distribution page and download the package.
Once downloaded you can simply run the shell script:
sudo sh Anaconda3-2019.10-Linux-x86_64.sh  You will also need to run these commands on your shell to add some commands to your ~/.bashrc file, and update the conda distribution with the latest libraries versions.
cat &amp;gt;&amp;gt; ~/.bashrc &amp;lt;&amp;lt; &#39;EOF&#39; export PATH=$HOME/anaconda3/bin:${PATH} EOF source .bashrc conda upgrade -y --all  The next step is creating a new environment for your deep learning pursuits or using an existing one. I created a new Conda environment using:
conda create --name py37  Here py37 is the name we provide to this new conda environment. You can activate this conda environment using:
conda activate py37  You should now be able to see something like:
Notice the py37 at the start of command in terminal
We can now add all our required packages to this environment using pip or conda. The latest version 1.3, as seen from the pytorch site, is not yet available for CUDA 10.2, as I already mentioned, so we are in luck with CUDA 10.1. Also, we will need to specify the version of TensorFlow as 2.1.0, as this version was built using 10.1 CUDA.
I also install RAPIDS, which is a library to get your various data science workloads to GPUs. Why use GPUs only for deep learning and not for Data processing? You can get the command to install rapids from the rapids release selector:
sudo apt install python3-pip conda install -c rapidsai -c nvidia -c conda-forge -c defaults rapids=0.11 python=3.7 cudatoolkit=10.1 pip install torchvision  Since PyTorch installation interfered with TensorFlow, I installed TensorFlow in another environment.
conda create --name tf conda activate tf pip install --upgrade tensorflow  Now we can check if the TF and Pytorch installations are correctly done by using the below commands in their own environments:
# Should print True python3 -c &amp;quot;import tensorflow as tf; print(tf.test.is_gpu_available())&amp;quot; # should print cuda python3 -c &amp;quot;import torch; print(torch.device(&#39;cuda&#39; if torch.cuda.is_available() else &#39;cpu&#39;))&amp;quot;  If the install is showing some errors for TensorFlow or the GPU test is failing, you might want to add these two additional lines at the end of your bashrc file and restart the terminal:
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64 export CUDA_HOME=/usr/local/cuda  You might also want to install jupyter lab or jupyter notebook. Thanks to the developers, the process is as easy as just running jupyter labor jupyter notebook in your terminal, whichever you do prefer. I personally like notebook better without all the unnecessary clutter.
Conclusion In this post, I talked about all the software you are going to need to install in your deep learning rig without hassle.
You might still need some help and face some problems for which my best advice would be to check out the different NVIDIA and Stack Overflow forums.
So we have got our deep learning rig setup, and its time for some tests now. In the next few posts, I am going to do some benchmarking on the GPUs and will try to write more on various deep Learning libraries one can include in their workflow. So stay tuned.
Continue Learning If you want to learn more about Deep Learning, here is an excellent course. You can start for free with the 7-day Free Trial.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog
Also, a small disclaimer — There might be some affiliate links in this post to relevant resources, as sharing knowledge is never a bad idea.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>End to End Pipeline for setting up Multiclass Image Classification for Data Scientists</title>
      <link>https://mlwhiz.com/blog/2020/06/06/multiclass_image_classification_pytorch/</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2020/06/06/multiclass_image_classification_pytorch/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/multiclass_image_classification_pytorch/main.png"></media:content>
      

      
      <description>Have you ever wondered how Facebook takes care of the abusive and inappropriate images shared by some of its users? Or how Facebook’s tagging feature works? Or how Google Lens recognizes products through images?
All of the above are examples of image classification in different settings. Multiclass image classification is a common task in computer vision, where we categorize an image into three or more classes.
In the past, I always used Keras for computer vision projects.</description>

      <content:encoded>  
        
        <![CDATA[  Have you ever wondered how Facebook takes care of the abusive and inappropriate images shared by some of its users? Or how Facebook’s tagging feature works? Or how Google Lens recognizes products through images?
All of the above are examples of image classification in different settings. Multiclass image classification is a common task in computer vision, where we categorize an image into three or more classes.
In the past, I always used Keras for computer vision projects. However, recently when the opportunity to work on multiclass image classification presented itself, I decided to use PyTorch. I have already moved from Keras to PyTorch for all NLP tasks, so why not vision, too?
 PyTorch is powerful, and I also like its more pythonic structure.
 In this post, we’ll create an end to end pipeline for image multiclass classification using Pytorch.This will include training the model, putting the model’s results in a form that can be shown to business partners, and functions to help deploy the model easily. As an added feature we will look at Test Time Augmentation using Pytorch also.
But before we learn how to do image classification, let’s first look at transfer learning, the most common method for dealing with such problems.
What is Transfer Learning? Transfer learning is the process of repurposing knowledge from one task to another. From a modelling perspective, this means using a model trained on one dataset and fine-tuning it for use with another. But why does it work?
Let’s start with some background. Every year the visual recognition community comes together for a very particular challenge: The Imagenet Challenge. The task in this challenge is to classify 1,000,000 images into 1,000 categories.
This challenge has already resulted in researchers training big convolutional deep learning models. The results have included great models like Resnet50 and Inception.
But, what does it mean to train a neural model? Essentially, it means the researchers have learned the weights for a neural network after training the model on a million images.
So, what if we could get those weights? We could then use them and load them into our own neural networks model to predict on the test dataset, right? Actually, we can go even further than that; we can add an extra layer on top of the neural network these researchers have prepared to classify our own dataset.
 While the exact workings of these complex models is still a mystery, we do know that the lower convolutional layers capture low-level image features like edges and gradients. In comparison, higher convolutional layers capture more and more intricate details, such as body parts, faces, and other compositional features.
 Source: Visualizing and Understanding Convolutional Networks. You can see how the first few layers capture basic shapes, and the shapes become more and more complex in the later layers.
In the example above from ZFNet (a variant of Alexnet), one of the first convolutional neural networks to achieve success on the Imagenet task, you can see how the lower layers capture lines and edges, and the later layers capture more complex features. The final fully-connected layers are generally assumed to capture information that is relevant for solving the respective task, e.g. ZFNet’s fully-connected layers indicate which features are relevant for classifying an image into one of 1,000 object categories.
For a new vision task, it is possible for us to simply use the off-the-shelf features of a state-of-the-art CNN pre-trained on ImageNet, and train a new model on these extracted features.
The intuition behind this idea is that a model trained to recognize animals might also be used to recognize cats vs dogs. In our case, &amp;gt; # a model that has been trained on 1000 different categories has seen a lot of real-world information, and we can use this information to create our own custom classifier.
So that’s the theory and intuition. How do we get it to actually work? Let’s look at some code. You can find the complete code for this post on Github.
Data Exploration We will start with the Boat Dataset from Kaggle to understand the multiclass image classification problem. This dataset contains about 1,500 pictures of boats of different types: buoys, cruise ships, ferry boats, freight boats, gondolas, inflatable boats, kayaks, paper boats, and sailboats. Our goal is to create a model that looks at a boat image and classifies it into the correct category.
Here’s a sample of images from the dataset:
And here are the category counts:
Since the categories “freight boats”, “inflatable boats” , and “boats” don’t have a lot of images; we will be removing these categories when we train our model.
Creating the required Directory Structure Before we can go through with training our deep learning models, we need to create the required directory structure for our images. Right now, our data directory structure looks like:
images sailboat kayak . .  We need our images to be contained in 3 folders train, val and test. We will then train on the images in train dataset, validate on the ones in the val dataset and finally test them on images in the test dataset.
data train sailboat kayak . . val sailboat kayak . . test sailboat kayak . .  You might have your data in a different format, but I have found that apart from the usual libraries, the glob.glob and os.system functions are very helpful. Here you can find the complete data preparation code. Now let’s take a quick look at some of the not-so-used libraries that I found useful while doing data prep.
What is glob.glob? Simply, glob lets you get names of files or folders in a directory using a regex. For example, you can do something like:
from glob import glob categories = glob(“images/*”) print(categories) ------------------------------------------------------------------ [&#39;images/kayak&#39;, &#39;images/boats&#39;, &#39;images/gondola&#39;, &#39;images/sailboat&#39;, &#39;images/inflatable boat&#39;, &#39;images/paper boat&#39;, &#39;images/buoy&#39;, &#39;images/cruise ship&#39;, &#39;images/freight boat&#39;, &#39;images/ferry boat&#39;]  What is os.system? os.system is a function in os library which lets you run any command-line function in python itself. I generally use it to run Linux functions, but it can also be used to run R scripts within python as shown here. For example, I use it in my data preparation to copy files from one directory to another after getting the information from a pandas data frame. I also use f string formatting.
import os for i,row in fulldf.iterrows(): # Boat category cat = row[&#39;category&#39;] # section is train,val or test section = row[&#39;type&#39;] # input filepath to copy ipath = row[&#39;filepath&#39;] # output filepath to paste opath = ipath.replace(f&amp;quot;images/&amp;quot;,f&amp;quot;data/{section}/&amp;quot;) # running the cp command os.system(f&amp;quot;cp &#39;{ipath}&#39; &#39;{opath}&#39;&amp;quot;)  Now since we have our data in the required folder structure, we can move on to more exciting parts.
Data Preprocessing Transforms: 1. Imagenet Preprocessing
In order to use our images with a network trained on the Imagenet dataset, we need to preprocess our images in the same way as the Imagenet network. For that, we need to rescale the images to 224×224 and normalize them as per Imagenet standards. We can use the torchvision transforms library to do that. Here we take a CenterCrop of 224×224 and normalize as per Imagenet standards. The operations defined below happen sequentially. You can find a list of all transforms provided by PyTorch here.
transforms.Compose([ transforms.CenterCrop(size=224), transforms.ToTensor(), transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]) ])  2. Data Augmentations
We can do a lot more preprocessing for data augmentations. Neural networks work better with a lot of data. Data augmentation is a strategy which we use at training time to increase the amount of data we have.
For example, we can flip the image of a boat horizontally, and it will still be a boat. Or we can randomly crop images or add color jitters. Here is the image transforms dictionary I have used that applies to both the Imagenet preprocessing as well as augmentations. This dictionary contains the various transforms we have for the train, test and validation data as used in this great post. As you’d expect, we don’t apply the horizontal flips or other data augmentation transforms to the test data and validation data because we don’t want to get predictions on an augmented image.
# Image transformations image_transforms = { # Train uses data augmentation &#39;train&#39;: transforms.Compose([ transforms.RandomResizedCrop(size=256, scale=(0.8, 1.0)), transforms.RandomRotation(degrees=15), transforms.ColorJitter(), transforms.RandomHorizontalFlip(), transforms.CenterCrop(size=224), # Image net standards transforms.ToTensor(), transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]) # Imagenet standards ]), # Validation does not use augmentation &#39;valid&#39;: transforms.Compose([ transforms.Resize(size=256), transforms.CenterCrop(size=224), transforms.ToTensor(), transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]) ]), # Test does not use augmentation &#39;test&#39;: transforms.Compose([ transforms.Resize(size=256), transforms.CenterCrop(size=224), transforms.ToTensor(), transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]) ]), }  Here is an example of the train transforms applied to an image in the training dataset. Not only do we get a lot of different images from a single image, but it also helps our network become invariant to the object orientation.
ex_img = Image.open(&#39;/home/rahul/projects/compvisblog/data/train/cruise ship/cruise-ship-oasis-of-the-seas-boat-water-482183.jpg&#39;) t = image_transforms[&#39;train&#39;] plt.figure(figsize=(24, 24)) for i in range(16): ax = plt.subplot(4, 4, i &#43; 1) _ = imshow_tensor(t(ex_img), ax=ax) plt.tight_layout()  DataLoaders The next step is to provide the training, validation, and test dataset locations to PyTorch. We can do this by using the PyTorch datasets and DataLoader class. This part of the code will mostly remain the same if we have our data in the required directory structures.
# Datasets from folders traindir = &amp;quot;data/train&amp;quot; validdir = &amp;quot;data/val&amp;quot; testdir = &amp;quot;data/test&amp;quot; data = { &#39;train&#39;: datasets.ImageFolder(root=traindir, transform=image_transforms[&#39;train&#39;]), &#39;valid&#39;: datasets.ImageFolder(root=validdir, transform=image_transforms[&#39;valid&#39;]), &#39;test&#39;: datasets.ImageFolder(root=testdir, transform=image_transforms[&#39;test&#39;]) } # Dataloader iterators, make sure to shuffle dataloaders = { &#39;train&#39;: DataLoader(data[&#39;train&#39;], batch_size=batch_size, shuffle=True,num_workers=10), &#39;val&#39;: DataLoader(data[&#39;valid&#39;], batch_size=batch_size, shuffle=True,num_workers=10), &#39;test&#39;: DataLoader(data[&#39;test&#39;], batch_size=batch_size, shuffle=True,num_workers=10) }  These dataloaders help us to iterate through the dataset. For example, we will use the dataloader below in our model training. The data variable will contain data in the form (batch_size, color_channels, height, width) while the target is of shape (batch_size) and hold the label information.
train_loader = dataloaders[&#39;train&#39;] for ii, (data, target) in enumerate(train_loader):  Modeling 1. Create the model using a pre-trained model Right now these following pre-trained models are available to use in the torchvision library:
 AlexNet
 VGG
 ResNet
 SqueezeNet
 DenseNet
 Inception v3
 GoogLeNet
 ShuffleNet v2
 MobileNet v2
 ResNeXt
 Wide ResNet
 MNASNet
  Here I will be using resnet50 on our dataset, but you can effectively use any other model too as per your choice.
from torchvision import models model = models.resnet50(pretrained=True)  We start by freezing our model weights since we don’t want to change the weights for the renet50 models.
# Freeze model weights for param in model.parameters(): param.requires_grad = False  The next thing we need to do is to replace the linear classification layer in the model by our custom classifier. I have found that to do this, it is better first to see the model structure to determine what is the final linear layer. We can do this simply by printing the model object:
print(model) ------------------------------------------------------------------ ResNet( (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) . . . . (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) ) (avgpool): AdaptiveAvgPool2d(output_size=(1, 1)) **(fc): Linear(in_features=2048, out_features=1000, bias=True)** )  Here we find that the final linear layer that takes the input from the convolutional layers is named fc
We can now simply replace the fc layer using our custom neural network. This neural network takes input from the previous layer to fc and gives the log softmax output of shape (batch_size x n_classes).
n_inputs = model.fc.in_features model.fc = nn.Sequential( nn.Linear(n_inputs, 256), nn.ReLU(), nn.Dropout(0.4), nn.Linear(256, n_classes), nn.LogSoftmax(dim=1))  Please note that the new layers added now are fully trainable by default.
2. Load the model on GPU We can use a single GPU or multiple GPU(if we have them) using DataParallel from PyTorch. Here is what we can use to detect the GPU as well as the number of GPUs to load the model on GPU. Right now I am training my models on dual NVIDIA Titan RTX GPUs.
# Whether to train on a gpu train_on_gpu = cuda.is_available() print(f&#39;Train on gpu: {train_on_gpu}&#39;) # Number of gpus if train_on_gpu: gpu_count = cuda.device_count() print(f&#39;{gpu_count} gpus detected.&#39;) if gpu_count &amp;gt; 1: multi_gpu = True else: multi_gpu = False if train_on_gpu: model = model.to(&#39;cuda&#39;) if multi_gpu: model = nn.DataParallel(model)  3. Define criterion and optimizers One of the most important things to notice when you are training any model is the choice of loss-function and the optimizer used. Here we want to use categorical cross-entropy as we have got a multiclass classification problem and the Adam optimizer, which is the most commonly used optimizer. But since we are applying a LogSoftmax operation on the output of our model, we will be using the NLL loss.
from torch import optim criteration = nn.NLLLoss() optimizer = optim.Adam(model.parameters())  4. Training the model Given below is the full code used to train the model. It might look pretty big on its own, but essentially what we are doing is as follows:
 Start running epochs. In each epoch-
 Set the model mode to train using model.train().
 Loop through the data using the train dataloader.
 Load your data to the GPU using the data, target = data.cuda(), target.cuda() command
 Set the existing gradients in the optimizer to zero using optimizer.zero_grad()
 Run the forward pass through the batch using output = model(data)
 Compute loss using loss = criterion(output, target)
 Backpropagate the losses through the network using loss.backward()
 Take an optimizer step to change the weights in the whole network using optimizer.step()
 All the other steps in the training loop are just to maintain the history and calculate accuracy.
 Set the model mode to eval using model.eval().
 Get predictions for the validation data using valid_loader and calculate valid_loss and valid_acc
 Print the validation loss and validation accuracy results every print_every epoch.
 Save the best model based on validation loss.
 Early Stopping: If the cross-validation loss doesn’t improve for max_epochs_stop stop the training and load the best available model with the minimum validation loss.
  def train(model, criterion, optimizer, train_loader, valid_loader, save_file_name, max_epochs_stop=3, n_epochs=20, print_every=1): &amp;#34;&amp;#34;&amp;#34;Train a PyTorch Model Params -------- model (PyTorch model): cnn to train criterion (PyTorch loss): objective to minimize optimizer (PyTorch optimizier): optimizer to compute gradients of model parameters train_loader (PyTorch dataloader): training dataloader to iterate through valid_loader (PyTorch dataloader): validation dataloader used for early stopping save_file_name (str ending in &amp;#39;.pt&amp;#39;): file path to save the model state dict max_epochs_stop (int): maximum number of epochs with no improvement in validation loss for early stopping n_epochs (int): maximum number of training epochs print_every (int): frequency of epochs to print training stats Returns -------- model (PyTorch model): trained cnn with best weights history (DataFrame): history of train and validation loss and accuracy &amp;#34;&amp;#34;&amp;#34; # Early stopping intialization epochs_no_improve = 0 valid_loss_min = np.Inf valid_max_acc = 0 history = [] # Number of epochs already trained (if using loaded in model weights) try: print(f&amp;#39;Model has been trained for: {model.epochs} epochs.\n&amp;#39;) except: model.epochs = 0 print(f&amp;#39;Starting Training from Scratch.\n&amp;#39;) overall_start = timer() # Main loop for epoch in range(n_epochs): # keep track of training and validation loss each epoch train_loss = 0.0 valid_loss = 0.0 train_acc = 0 valid_acc = 0 # Set to training model.train() start = timer() # Training loop for ii, (data, target) in enumerate(train_loader): # Tensors to gpu if train_on_gpu: data, target = data.cuda(), target.cuda() # Clear gradients optimizer.zero_grad() # Predicted outputs are log probabilities output = model(data) # Loss and backpropagation of gradients loss = criterion(output, target) loss.backward() # Update the parameters optimizer.step() # Track train loss by multiplying average loss by number of examples in batch train_loss &#43;= loss.item() * data.size(0) # Calculate accuracy by finding max log probability _, pred = torch.max(output, dim=1) correct_tensor = pred.eq(target.data.view_as(pred)) # Need to convert correct tensor from int to float to average accuracy = torch.mean(correct_tensor.type(torch.FloatTensor)) # Multiply average accuracy times the number of examples in batch train_acc &#43;= accuracy.item() * data.size(0) # Track training progress print( f&amp;#39;Epoch: {epoch}\t{100 * (ii &#43; 1) / len(train_loader):.2f}% complete. {timer() - start:.2f} seconds elapsed in epoch.&amp;#39;, end=&amp;#39;\r&amp;#39;) # After training loops ends, start validation else: model.epochs &#43;= 1 # Don&amp;#39;t need to keep track of gradients with torch.no_grad(): # Set to evaluation mode model.eval() # Validation loop for data, target in valid_loader: # Tensors to gpu if train_on_gpu: data, target = data.cuda(), target.cuda() # Forward pass output = model(data) # Validation loss loss = criterion(output, target) # Multiply average loss times the number of examples in batch valid_loss &#43;= loss.item() * data.size(0) # Calculate validation accuracy _, pred = torch.max(output, dim=1) correct_tensor = pred.eq(target.data.view_as(pred)) accuracy = torch.mean( correct_tensor.type(torch.FloatTensor)) # Multiply average accuracy times the number of examples valid_acc &#43;= accuracy.item() * data.size(0) # Calculate average losses train_loss = train_loss / len(train_loader.dataset) valid_loss = valid_loss / len(valid_loader.dataset) # Calculate average accuracy train_acc = train_acc / len(train_loader.dataset) valid_acc = valid_acc / len(valid_loader.dataset) history.append([train_loss, valid_loss, train_acc, valid_acc]) # Print training and validation results if (epoch &#43; 1) % print_every == 0: print( f&amp;#39;\nEpoch: {epoch} \tTraining Loss: {train_loss:.4f} \tValidation Loss: {valid_loss:.4f}&amp;#39; ) print( f&amp;#39;\t\tTraining Accuracy: {100 * train_acc:.2f}%\tValidation Accuracy: {100 * valid_acc:.2f}%&amp;#39; ) # Save the model if validation loss decreases if valid_loss &amp;lt; valid_loss_min: # Save model torch.save(model.state_dict(), save_file_name) # Track improvement epochs_no_improve = 0 valid_loss_min = valid_loss valid_best_acc = valid_acc best_epoch = epoch # Otherwise increment count of epochs with no improvement else: epochs_no_improve &#43;= 1 # Trigger early stopping if epochs_no_improve &amp;gt;= max_epochs_stop: print( f&amp;#39;\nEarly Stopping! Total epochs: {epoch}. Best epoch: {best_epoch} with loss: {valid_loss_min:.2f} and acc: {100 * valid_acc:.2f}%&amp;#39; ) total_time = timer() - overall_start print( f&amp;#39;{total_time:.2f} total seconds elapsed. {total_time / (epoch&#43;1):.2f} seconds per epoch.&amp;#39; ) # Load the best state dict model.load_state_dict(torch.load(save_file_name)) # Attach the optimizer model.optimizer = optimizer # Format history history = pd.DataFrame( history, columns=[ &amp;#39;train_loss&amp;#39;, &amp;#39;valid_loss&amp;#39;, &amp;#39;train_acc&amp;#39;, &amp;#39;valid_acc&amp;#39; ]) return model, history # Attach the optimizer model.optimizer = optimizer # Record overall time and print out stats total_time = timer() - overall_start print( f&amp;#39;\nBest epoch: {best_epoch} with loss: {valid_loss_min:.2f} and acc: {100 * valid_acc:.2f}%&amp;#39; ) print( f&amp;#39;{total_time:.2f} total seconds elapsed. {total_time / (epoch):.2f} seconds per epoch.&amp;#39; ) # Format history history = pd.DataFrame( history, columns=[&amp;#39;train_loss&amp;#39;, &amp;#39;valid_loss&amp;#39;, &amp;#39;train_acc&amp;#39;, &amp;#39;valid_acc&amp;#39;]) return model, history # Running the model model, history = train( model, criterion, optimizer, dataloaders[&amp;#39;train&amp;#39;], dataloaders[&amp;#39;val&amp;#39;], save_file_name=save_file_name, max_epochs_stop=3, n_epochs=100, print_every=1) Here is the output from running the above code. Just showing the last few epochs. The validation accuracy started at ~55% in the first epoch, and we ended up with a validation accuracy of ~90%.
And here are the training curves showing the loss and accuracy metrics:
Inference and Model Results We want our results in different ways to use our model. For one, we require test accuracies and confusion matrices. All of the code for creating these results is in the code notebook.
1. Test Results The overall accuracy of the test model is:
Overall Accuracy: 88.65 %  Here is the confusion matrix for results on the test dataset.
We can also look at the category wise accuracies. I have also added the train counts to see the results from a new perspective.
2. Visualizing Predictions for Single Image For deployment purposes, it helps to be able to get predictions for a single image. You can get the code from the notebook.
3. Visualizing Predictions for a Category We can also see the category wise results for debugging purposes and presentations.
4. Test results with Test Time Augmentation We can also do test time augmentation to increase our test accuracy. Here I am using a new test data loader and transforms:
# Image transformations tta_random_image_transforms = transforms.Compose([ transforms.RandomResizedCrop(size=256, scale=(0.8, 1.0)), transforms.RandomRotation(degrees=15), transforms.ColorJitter(), transforms.RandomHorizontalFlip(), transforms.CenterCrop(size=224), # Image net standards transforms.ToTensor(), transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]) # Imagenet standards ]) # Datasets from folders ttadata = { &#39;test&#39;: datasets.ImageFolder(root=testdir, transform=tta_random_image_transforms) } # Dataloader iterators ttadataloader = { &#39;test&#39;: DataLoader(ttadata[&#39;test&#39;], batch_size=512, shuffle=False,num_workers=10) }  We can then get the predictions on the test set using the below function:
def tta_preds_n_averaged(model, test_loader,n=5): &amp;#34;&amp;#34;&amp;#34;Returns the TTA preds from a trained PyTorch model Params -------- model (PyTorch model): trained cnn for inference test_loader (PyTorch DataLoader): test dataloader Returns -------- results (array): results for each category &amp;#34;&amp;#34;&amp;#34; # Hold results results = np.zeros((len(test_loader.dataset), n_classes)) bs = test_loader.batch_size model.eval() with torch.no_grad(): #aug loop: for _ in range(n): # Testing loop tmp_pred = np.zeros((len(test_loader.dataset), n_classes)) for i,(data, targets) in enumerate(tqdm.tqdm(test_loader)): # Tensors to gpu if train_on_gpu: data, targets = data.to(&amp;#39;cuda&amp;#39;), targets.to(&amp;#39;cuda&amp;#39;) # Raw model output out = model(data) tmp_pred[i*bs:(i&#43;1)*bs] = np.array(out.cpu()) results&#43;=tmp_pred return results/n In the function above, I am applying the tta_random_image_transforms to each image 5 times before getting its prediction. The final prediction is the average of all five predictions. When we use TTA over the whole test dataset, we noticed that the accuracy increased by around 1%
TTA Accuracy: 89.71%  Also, here is the results for TTA compared to normal results category wise:
In this small dataset, the TTA might not seem to add much value, but I have noticed that it adds value with big datasets.
Conclusion In this post, I talked about the end to end pipeline for working on a multiclass image classification project using PyTorch. We worked on creating some readymade code to train a model using transfer learning, visualize the results, use Test time augmentation, and got predictions for a single image so that we can deploy our model when needed using any tool like Streamlit.
You can find the complete code for this post on Github.
If you would like to learn more about Image Classification and Convolutional Neural Networks take a look at the Deep Learning Specialization from Andrew Ng. Also, to learn more about PyTorch and start from the basics, you can take a look at the Deep Neural Networks with PyTorch course offered by IBM.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog.
Also, a small disclaimer — There might be some affiliate links in this post to relevant resources, as sharing knowledge is never a bad idea.
This post was first published here.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>The Most Complete Guide to pySpark DataFrames</title>
      <link>https://mlwhiz.com/blog/2020/06/06/spark_df_complete_guide/</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2020/06/06/spark_df_complete_guide/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/spark_df_complete_guide/main.png"></media:content>
      

      
      <description>Big Data has become synonymous with Data engineering. But the line between Data Engineering and Data scientists is blurring day by day. At this point in time, I think that Big Data must be in the repertoire of all data scientists.
Reason: Too much data is getting generated day by day
And that brings us to Spark which is one of the most used tools when it comes to working with Big Data.</description>

      <content:encoded>  
        
        <![CDATA[  Big Data has become synonymous with Data engineering. But the line between Data Engineering and Data scientists is blurring day by day. At this point in time, I think that Big Data must be in the repertoire of all data scientists.
Reason: Too much data is getting generated day by day
And that brings us to Spark which is one of the most used tools when it comes to working with Big Data.
While once upon a time Spark used to be heavily reliant on RDD manipulations, Spark has now provided a DataFrame API for us Data Scientists to work with. Here is the documentation for the adventurous folks. But while the documentation is good, it does not explain it from the perspective of a Data Scientist. Neither does it properly document the most common use cases for Data Science.
In this post, I will talk about installing Spark, standard Spark functionalities you will need to work with DataFrames, and finally some tips to handle the inevitable errors you will face.
This post is going to be quite long. Actually one of my longest posts on medium, so go on and pick up a Coffee.
Also here is the Table of Contents, if you want to skip to a specific section:
 Installation Data 1. Basic Functions  Read See a few rows in the file Change Column Names Select Columns Sort Cast Filter GroupBy Joins  2. Broadcast/Map Side Joins 3. Use SQL with DataFrames 4. Create New Columns  Using Spark Native Functions Using Spark UDFs Using RDDs Using Pandas UDF  5. Spark Window Functions  Ranking Lag Variables Rolling Aggregations  6. Pivot Dataframes 7. Unpivot/Stack Dataframes 8. Salting Some More Tips and Tricks  Caching Save and Load from an intermediate step Repartitioning Reading Parquet File in Local  Conclusion  Installation I am working on installing Spark on Ubuntu 18.04, but the steps should remain the same for MAC too. I am assuming that you already have Anaconda and Python3 installed. After that, you can just go through these steps:
 Download the Spark Binary from Apache Spark Website. And click on the Download Spark link to download Spark.  Once you have downloaded the above file, you can start with unzipping the file in your home directory. Just Open up the terminal and put these commands in.
cd ~ cp Downloads/spark-2.4.5-bin-hadoop2.7.tgz ~ tar -zxvf spark-2.4.5-bin-hadoop2.7.tgz  Check your Java Version. As of version 2.4 Spark works with Java 8. You can check your Java Version using the command java -version on the terminal window.
I had Java 11 in my machine, so I had to run the following commands on my terminal to install and change default Java to Java 8:
sudo apt install openjdk-8-jdk sudo update-alternatives --config java  You will need to manually select the Java version 8 by typing the selection number.
Rechecking Java version should give something like:
Edit your ~/.bashrc file and add the following lines at the end of the file:
function pysparknb () { #Spark path SPARK_PATH=~/spark-2.4.5-bin-hadoop2.7 export PYSPARK_DRIVER_PYTHON=&amp;quot;jupyter&amp;quot; export PYSPARK_DRIVER_PYTHON_OPTS=&amp;quot;notebook&amp;quot; # For pyarrow 0.15 users, you have to add the line below or you will get an error while using pandas_udf export ARROW_PRE_0_15_IPC_FORMAT=1 **# Change the local[10] to local[numCores in your machine]** $SPARK_PATH/bin/pyspark --master **local[10]** }  Source ~/.bashrc
source ~/.bashrc  Run the pysparknb function in the terminal and you will be able to access the notebook. You will be able to open a new notebook as well as the sparkcontext will be loaded automatically.
pysparknb  Data With the installation out of the way, we can move to the more interesting part of this post. I will be working with the Data Science for COVID-19 in South Korea, which is one of the most detailed datasets on the internet for COVID.
Please note that I will be using this dataset to showcase some of the most useful functionalities of Spark, but this should not be in any way considered a data exploration exercise for this amazing dataset.
I will mainly work with the following three tables only in this post:
 Cases
 Region
 TimeProvince
  You can find all the code at the GitHub repository.
1. Basic Functions Read We can start by loading the files in our dataset using the spark.read.load command. This command reads parquet files, which is the default file format for spark, but you can add the parameter format to read .csv files using it.
cases = spark.read.load(&amp;quot;/home/rahul/projects/sparkdf/coronavirusdataset/Case.csv&amp;quot;,format=&amp;quot;csv&amp;quot;, sep=&amp;quot;,&amp;quot;, inferSchema=&amp;quot;true&amp;quot;, header=&amp;quot;true&amp;quot;)  See a few rows in the file cases.show()  This file contains the cases grouped by way of the infection spread. This might have helped in the rigorous tracking of Corona Cases in South Korea.
The way this file looks is great right now, but sometimes as we increase the number of columns, the formatting becomes not too great. I have noticed that the following trick helps in displaying in pandas format in my Jupyter Notebook. The .toPandas() function converts a spark dataframe into a pandas Dataframe which is easier to show.
cases.limit(10).toPandas()  Change Column Names Sometimes we would like to change the name of columns in our Spark Dataframes. We can do this simply using the below command to change a single column:
cases = cases.withColumnRenamed(&amp;quot;infection_case&amp;quot;,&amp;quot;infection_source&amp;quot;)  Or for all columns:
cases = cases.toDF(*[&#39;case_id&#39;, &#39;province&#39;, &#39;city&#39;, &#39;group&#39;, &#39;infection_case&#39;, &#39;confirmed&#39;, &#39;latitude&#39;, &#39;longitude&#39;])  Select Columns We can select a subset of columns using the select keyword.
cases = cases.select(&#39;province&#39;,&#39;city&#39;,&#39;infection_case&#39;,&#39;confirmed&#39;) cases.show()  Sort We can sort by the number of confirmed cases. Here note that the cases data frame will not change after performing this command as we don’t assign it to any variable.
cases.sort(&amp;quot;confirmed&amp;quot;).show()  But that is inverted. We want to see the most cases at the top. We can do this using the F.desc function:
# descending Sort from pyspark.sql import functions as F cases.sort(F.desc(&amp;quot;confirmed&amp;quot;)).show()  We can see the most cases in a logical area in South Korea originated from Shincheonji Church.
Cast Though we don’t face it in this dataset, there might be scenarios where Pyspark reads a double as integer or string, In such cases, you can use the cast function to convert types.
from pyspark.sql.types import DoubleType, IntegerType, StringType cases = cases.withColumn(&#39;confirmed&#39;, F.col(&#39;confirmed&#39;).cast(IntegerType())) cases = cases.withColumn(&#39;city&#39;, F.col(&#39;city&#39;).cast(StringType()))  Filter We can filter a data frame using multiple conditions using AND(&amp;amp;), OR(|) and NOT(~) conditions. For example, we may want to find out all the different infection_case in Daegu Province with more than 10 confirmed cases.
cases.filter((cases.confirmed&amp;gt;10) &amp;amp; (cases.province==&#39;Daegu&#39;)).show()  GroupBy We can use groupBy function with a spark DataFrame too. Pretty much same as the pandas groupBy with the exception that you will need to import pyspark.sql.functions. Here is the list of functions you can use with this function module.
from pyspark.sql import functions as F cases.groupBy([&amp;quot;province&amp;quot;,&amp;quot;city&amp;quot;]).agg(F.sum(&amp;quot;confirmed&amp;quot;) ,F.max(&amp;quot;confirmed&amp;quot;)).show()  If you don’t like the new column names, you can use the alias keyword to rename columns in the agg command itself.
cases.groupBy([&amp;quot;province&amp;quot;,&amp;quot;city&amp;quot;]).agg( F.sum(&amp;quot;confirmed&amp;quot;).alias(&amp;quot;TotalConfirmed&amp;quot;),\ F.max(&amp;quot;confirmed&amp;quot;).alias(&amp;quot;MaxFromOneConfirmedCase&amp;quot;)\ ).show()  Joins To Start with Joins we will need to introduce one more CSV file. We will go with the region file which contains region information such as elementary_school_count, elderly_population_ratio, etc.
regions = spark.read.load(&amp;quot;/home/rahul/projects/sparkdf/coronavirusdataset/Region.csv&amp;quot;,format=&amp;quot;csv&amp;quot;, sep=&amp;quot;,&amp;quot;, inferSchema=&amp;quot;true&amp;quot;, header=&amp;quot;true&amp;quot;) regions.limit(10).toPandas()  We want to get this information in our cases file by joining the two DataFrames. We can do this by using:
cases = cases.join(regions, [&#39;province&#39;,&#39;city&#39;],how=&#39;left&#39;) cases.limit(10).toPandas()  2. Broadcast/Map Side Joins Sometimes you might face a scenario where you need to join a very big table(~1B Rows) with a very small table(~100–200 rows). The scenario might also involve increasing the size of your database like in the example below.
Such sort of operations is aplenty in Spark where you might want to apply multiple operations to a particular key. But assuming that the data for each key in the Big table is large, it will involve a lot of data movement. And sometimes so much that the application itself breaks. A small optimization then you can do when joining on such big tables(assuming the other table is small) is to broadcast the small table to each machine/node when you perform a join. You can do this easily using the broadcast keyword. This has been a lifesaver many times with Spark when everything else fails.
from pyspark.sql.functions import broadcast cases = cases.join(broadcast(regions), [&#39;province&#39;,&#39;city&#39;],how=&#39;left&#39;)  3. Use SQL with DataFrames If you want, you can also use SQL with data frames. Let us try to run some SQL on the cases table.
We first register the cases dataframe to a temporary table cases_table on which we can run SQL operations. As you can see, the result of the SQL select statement is again a Spark Dataframe.
cases.registerTempTable(&#39;cases_table&#39;) newDF = sqlContext.sql(&#39;select * from cases_table where confirmed&amp;gt;100&#39;) newDF.show()  I have shown a minimal example above, but you can use pretty much complex SQL queries involving GROUP BY, HAVING, AND ORDER BY clauses as well as aliases in the above query.
4. Create New Columns There are many ways that you can use to create a column in a PySpark Dataframe. I will try to show the most usable of them.
Using Spark Native Functions The most pysparkish way to create a new column in a PySpark DataFrame is by using built-in functions. This is the most performant programmatical way to create a new column, so this is the first place I go whenever I want to do some column manipulation.
We can use .withcolumn along with PySpark SQL functions to create a new column. In essence, you can find String functions, Date functions, and Math functions already implemented using Spark functions. Our first function, the F.col function gives us access to the column. So if we wanted to add 100 to a column, we could use F.col as:
import pyspark.sql.functions as F casesWithNewConfirmed = cases.withColumn(&amp;quot;NewConfirmed&amp;quot;, 100 &#43; F.col(&amp;quot;confirmed&amp;quot;)) casesWithNewConfirmed.show()  We can also use math functions like F.exp function:
casesWithExpConfirmed = cases.withColumn(&amp;quot;ExpConfirmed&amp;quot;, F.exp(&amp;quot;confirmed&amp;quot;)) casesWithExpConfirmed.show()  There are a lot of other functions provided in this module, which are enough for most simple use cases. You can check out the functions list here.
Using Spark UDFs Sometimes we want to do complicated things to a column or multiple columns. This could be thought of as a map operation on a PySpark Dataframe to a single column or multiple columns. While Spark SQL functions do solve many use cases when it comes to column creation, I use Spark UDF whenever I need more matured Python functionality.
To use Spark UDFs, we need to use the F.udf function to convert a regular python function to a Spark UDF. We also need to specify the return type of the function. In this example the return type is StringType()
import pyspark.sql.functions as F from pyspark.sql.types import * def casesHighLow(confirmed): if confirmed &amp;lt; 50: return &#39;low&#39; else: return &#39;high&#39; #convert to a UDF Function by passing in the function and return type of function casesHighLowUDF = F.udf(casesHighLow, StringType()) CasesWithHighLow = cases.withColumn(&amp;quot;HighLow&amp;quot;, casesHighLowUDF(&amp;quot;confirmed&amp;quot;)) CasesWithHighLow.show()  Using RDDs This might seem a little odd, but sometimes both the spark UDFs and SQL functions are not enough for a particular use-case. I have observed the RDDs being much more performant in some use-cases in real life. You might want to utilize the better partitioning that you get with spark RDDs. Or you may want to use group functions in Spark RDDs.
Whatever the case be, I find this way of using RDD to create new columns pretty useful for people who have experience working with RDDs that is the basic building block in the Spark ecosystem. Don’t worry much if you don’t understand it. It is just here for completion.
The process below makes use of the functionality to convert between Row and pythondict objects. We convert a row object to a dictionary. Work with the dictionary as we are used to and convert that dictionary back to row again. This might come in handy in a lot of situations.
import math from pyspark.sql import Row def rowwise_function(row): # convert row to python dictionary: row_dict = row.asDict() # Add a new key in the dictionary with the new column name and value. # This might be a big complex function. row_dict[&#39;expConfirmed&#39;] = float(np.exp(row_dict[&#39;confirmed&#39;])) # convert dict to row back again: newrow = Row(**row_dict) # return new row return newrow # convert cases dataframe to RDD cases_rdd = cases.rdd # apply our function to RDD cases_rdd_new = cases_rdd.map(lambda row: rowwise_function(row)) # Convert RDD Back to DataFrame casesNewDf = sqlContext.createDataFrame(cases_rdd_new) casesNewDf.show()  Using Pandas UDF This functionality was introduced in the Spark version 2.3.1. And this allows you to use pandas functionality with Spark. I generally use it when I have to run a groupBy operation on a Spark dataframe or whenever I need to create rolling features and want to use Pandas rolling functions/window functions rather than Spark window functions which we will go through later in this post.
The way we use it is by using the F.pandas_udf decorator. We assume here that the input to the function will be a pandas data frame. And we need to return a pandas dataframe in turn from this function.
The only complexity here is that we have to provide a schema for the output Dataframe. We can use the original schema of a dataframe to create the outSchema.
cases.printSchema()  Here I am using Pandas UDF to get normalized confirmed cases grouped by infection_case. The main advantage here is that I get to work with pandas dataframes in Spark.
from pyspark.sql.types import IntegerType, StringType, DoubleType, BooleanType from pyspark.sql.types import StructType, StructField # Declare the schema for the output of our function outSchema = StructType([StructField(&#39;case_id&#39;,IntegerType(),True), StructField(&#39;province&#39;,StringType(),True), StructField(&#39;city&#39;,StringType(),True), StructField(&#39;group&#39;,BooleanType(),True), StructField(&#39;infection_case&#39;,StringType(),True), StructField(&#39;confirmed&#39;,IntegerType(),True), StructField(&#39;latitude&#39;,StringType(),True), StructField(&#39;longitude&#39;,StringType(),True), StructField(&#39;normalized_confirmed&#39;,DoubleType(),True) ]) # decorate our function with pandas_udf decorator @F.pandas_udf(outSchema, F.PandasUDFType.GROUPED_MAP) def subtract_mean(pdf): # pdf is a pandas.DataFrame v = pdf.confirmed v = v - v.mean() pdf[&#39;normalized_confirmed&#39;] = v return pdf confirmed_groupwise_normalization = cases.groupby(&amp;quot;infection_case&amp;quot;).apply(subtract_mean) confirmed_groupwise_normalization.limit(10).toPandas()  5. Spark Window Functions Window functions may make a whole blog post in itself. Here I will talk about some of the most important window functions available in spark.
For this, I will also use one more data CSV, which has dates present as that will help with understanding Window functions much better. I will use the TimeProvince dataframe which contains daily case information for each province.
Ranking You can get rank as well as dense_rank on a group using this function. For example, you may want to have a column in your cases table that provides the rank of infection_case based on the number of infection_case in a province. We can do this by:
from pyspark.sql.window import Window windowSpec = Window().partitionBy([&#39;province&#39;]).orderBy(F.desc(&#39;confirmed&#39;)) cases.withColumn(&amp;quot;rank&amp;quot;,F.rank().over(windowSpec)).show()  Lag Variables Sometimes our data science models may need lag based features. For example, a model might have variables like the price last week or sales quantity the previous day. We can create such features using the lag function with window functions. Here I am trying to get the confirmed cases 7 days before. I am filtering to show the results as the first few days of corona cases were zeros. You can see here that the lag_7 day feature is shifted by 7 days.
from pyspark.sql.window import Window windowSpec = Window().partitionBy([&#39;province&#39;]).orderBy(&#39;date&#39;) timeprovinceWithLag = timeprovince.withColumn(&amp;quot;lag_7&amp;quot;,F.lag(&amp;quot;confirmed&amp;quot;, 7).over(windowSpec)) timeprovinceWithLag.filter(timeprovinceWithLag.date&amp;gt;&#39;2020-03-10&#39;).show()  Rolling Aggregations Sometimes it helps to provide rolling averages to our models. For example, we might want to have a rolling 7-day sales sum/mean as a feature for our sales regression model. Let us calculate the rolling mean of confirmed cases for the last 7 days here. This is what a lot of the people are already doing with this dataset to see the real trends.
from pyspark.sql.window import Window windowSpec = Window().partitionBy([&#39;province&#39;]).orderBy(&#39;date&#39;).rowsBetween(-6,0) timeprovinceWithRoll = timeprovince.withColumn(&amp;quot;roll_7_confirmed&amp;quot;,F.mean(&amp;quot;confirmed&amp;quot;).over(windowSpec)) timeprovinceWithRoll.filter(timeprovinceWithLag.date&amp;gt;&#39;2020-03-10&#39;).show()  There are a few things here to understand. First is the rowsBetween(-6,0) function that we are using here. This function has a form of rowsBetween(start,end) with both start and end inclusive. Using this we only look at the past 7 days in a particular window including the current_day. Here 0 specifies the current_row and -6 specifies the seventh row previous to current_row. Remember we count starting from 0.
So to get roll_7_confirmed for date 2020–03–22 we look at the confirmed cases for dates 2020–03–22 to 2020–03–16 and take their mean.
If we had used rowsBetween(-7,-1) we would just have looked at past 7 days of data and not the current_day.
One could also find a use for rowsBetween(Window.unboundedPreceding, Window.currentRow) where we take the rows between the first row in a window and the current_row to get running totals. I am calculating cumulative_confirmed here.
from pyspark.sql.window import Window windowSpec = Window().partitionBy([&#39;province&#39;]).orderBy(&#39;date&#39;).rowsBetween(Window.unboundedPreceding,Window.currentRow) timeprovinceWithRoll = timeprovince.withColumn(&amp;quot;cumulative_confirmed&amp;quot;,F.sum(&amp;quot;confirmed&amp;quot;).over(windowSpec)) timeprovinceWithRoll.filter(timeprovinceWithLag.date&amp;gt;&#39;2020-03-10&#39;).show()  6. Pivot Dataframes Sometimes we may need to have the dataframe in flat format. This happens frequently in movie data where we may want to show genres as columns instead of rows. We can use pivot to do this. Here I am trying to get one row for each date and getting the province names as columns.
pivotedTimeprovince = timeprovince.groupBy(&#39;date&#39;).pivot(&#39;province&#39;).agg(F.sum(&#39;confirmed&#39;).alias(&#39;confirmed&#39;) , F.sum(&#39;released&#39;).alias(&#39;released&#39;)) pivotedTimeprovince.limit(10).toPandas()  One thing to note here is that we need to provide an aggregation always with the pivot function even if the data has a single row for a date.
7. Unpivot/Stack Dataframes This is just the opposite of the pivot. Given a pivoted dataframe like above, can we go back to the original?
Yes, we can. But the way is not that straightforward. For one we will need to replace - with _ in the column names as it interferes with what we are about to do. We can simply rename the columns:
newColnames = [x.replace(&amp;quot;-&amp;quot;,&amp;quot;_&amp;quot;) for x in pivotedTimeprovince.columns] pivotedTimeprovince = pivotedTimeprovince.toDF(*newColnames)  Now we will need to create an expression which looks like the below:
&amp;quot;stack(34, &#39;Busan_confirmed&#39; , Busan_confirmed,&#39;Busan_released&#39; , Busan_released,&#39;Chungcheongbuk_do_confirmed&#39; , . . . &#39;Seoul_released&#39; , Seoul_released,&#39;Ulsan_confirmed&#39; , Ulsan_confirmed,&#39;Ulsan_released&#39; , Ulsan_released) as (Type,Value)&amp;quot;  The general format is as follows:
&amp;quot;stack(&amp;lt;cnt of columns you want to put in one column&amp;gt;, &#39;firstcolname&#39;, firstcolname , &#39;secondcolname&#39; ,secondcolname ......) as (Type, Value)&amp;quot;  It may seem daunting, but we can create such an expression using our programming skills.
expression = &amp;quot;&amp;quot; cnt=0 for column in pivotedTimeprovince.columns: if column!=&#39;date&#39;: cnt &#43;=1 expression &#43;= f&amp;quot;&#39;{column}&#39; , {column},&amp;quot; expression = f&amp;quot;stack({cnt}, {expression[:-1]}) as (Type,Value)&amp;quot;  And we can unpivot using:
unpivotedTimeprovince = pivotedTimeprovince.select(&#39;date&#39;,F.expr(exprs))  And voila! we have got our dataframe in a vertical format. There are quite a few column creations, filters, and join operations needed to get exactly the same format as before, but I will not get into those.
8. Salting Sometimes it might happen that a lot of data goes to a single executor since the same key is assigned for a lot of rows in our data. Salting is another way that helps you to manage data skewness.
So assuming we want to do the sum operation when we have skewed keys. We can start by creating the Salted Key and then doing a double aggregation on that key as the sum of a sum still equals sum. To understand this assume we need the sum of confirmed infection_cases on the cases table and assume that the key infection_cases is skewed. We can do the required operation in two steps.
1. Create a Salting Key
We first create a salting key using a concatenation of infection_case column and a random_number between 0 to 9. In case your key is even more skewed, you can split it in even more than 10 parts.
cases = cases.withColumn(&amp;quot;salt_key&amp;quot;, F.concat(F.col(&amp;quot;infection_case&amp;quot;), F.lit(&amp;quot;_&amp;quot;), F.monotonically_increasing_id() % 10))  This is how the table looks after the operation:
2. First Groupby on salt key
cases_temp = cases.groupBy([&amp;quot;infection_case&amp;quot;,&amp;quot;salt_key&amp;quot;]).agg(F.sum(&amp;quot;confirmed&amp;quot;)).show()  3. Second Group On the original Key
Here we saw how the sum of sum can be used to get the final sum. You can also make use of facts like:
 min of min is min
 max of max is max
 sum of count is count
  You can think about ways in which salting as an idea could be applied to joins too.
Some More Tips and Tricks Caching Spark works on the lazy execution principle. What that means is that nothing really gets executed until you use an action function like the .count() on a dataframe. And if you do a .count function, it generally helps to cache at this step. So I have made it a point to cache() my dataframes whenever I do a .count() operation.
df.cache().count()  Save and Load from an intermediate step df.write.parquet(&amp;quot;data/df.parquet&amp;quot;) df.unpersist() spark.read.load(&amp;quot;data/df.parquet&amp;quot;)  When you work with Spark you will frequently run with memory and storage issues. While in some cases such issues might be resolved using techniques like broadcasting, salting or cache, sometimes just interrupting the workflow and saving and reloading the whole dataframe at a crucial step has helped me a lot. This helps spark to let go of a lot of memory that gets utilized for storing intermediate shuffle data and unused caches.
Repartitioning You might want to repartition your data if you feel your data has been skewed while working with all the transformations and joins. The simplest way to do it is by using:
df = df.repartition(1000)  Sometimes you might also want to repartition by a known scheme as this scheme might be used by a certain join or aggregation operation later on. You can use multiple columns to repartition using:
df = df.repartition(&#39;cola&#39;, &#39;colb&#39;,&#39;colc&#39;,&#39;cold&#39;)  You can get the number of partitions in a data frame using:
df.rdd.getNumPartitions()  You can also check out the distribution of records in a partition by using the glom function. This helps in understanding the skew in the data that happens while working with various transformations.
df.glom().map(len).collect()  Reading Parquet File in Local Sometimes you might want to read the parquet files in a system where Spark is not available. In such cases, I normally use the below code:
from glob import glob def load_df_from_parquet(parquet_directory): df = pd.DataFrame() for file in glob(f&amp;quot;{parquet_directory}/*&amp;quot;): df = pd.concat([df,pd.read_parquet(file)]) return df  Conclusion This was a big post and congratulations on you reaching the end. These are the most common functionalities I end up using in my day to day job.
Hopefully, I’ve covered the Dataframe basics well enough to pique your interest and help you get started with Spark. If you want to learn more about how Spark Started or RDD basics take a look at this post
You can find all the code at this GitHub repository where I keep code for all my posts.
Continue Learning Also, if you want to learn more about Spark and Spark DataFrames, I would like to call out these excellent courses on Big Data Essentials: HDFS, MapReduce and Spark RDD and Big Data Analysis: Hive, Spark SQL, DataFrames and GraphFrames by Yandex on Coursera.
I am going to be writing more of such posts in the future too. Let me know what you think about the series. Follow me up at Medium or Subscribe to my blog.
Also, a small disclaimer — There might be some affiliate links in this post to relevant resources, as sharing knowledge is never a bad idea.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Five Cognitive Biases In Data Science (And how to avoid them)</title>
      <link>https://mlwhiz.com/blog/2020/05/25/cogbias/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2020/05/25/cogbias/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/cogbias/main.png"></media:content>
      

      
      <description>Recently, I was reading Rolf Dobell’s The Art of Thinking Clearly, which made me think about cognitive biases in a way I never had before. I realized how deeply seated some cognitive biases are. In fact, we often don’t even consciously realize when our thinking is being affected by one. For data scientists, these biases can really change the way we work with data and make our day-to-day decisions, and generally not for the better.</description>

      <content:encoded>  
        
        <![CDATA[  Recently, I was reading Rolf Dobell’s The Art of Thinking Clearly, which made me think about cognitive biases in a way I never had before. I realized how deeply seated some cognitive biases are. In fact, we often don’t even consciously realize when our thinking is being affected by one. For data scientists, these biases can really change the way we work with data and make our day-to-day decisions, and generally not for the better.
 Data science is, despite the seeming objectivity of all the facts we work with, surprisingly subjective in its processes.
 As data scientists, our job is to make sense of the facts. In carrying out this analysis, we have to make subjective decisions though. So even though we work with hard facts and data, there’s a strong interpretive component to data science.
As a result, we data scientists need to be extremely careful, because all humans are very much susceptible to cognitive biases. We’re no exception. In fact, I have seen many instances where data scientists ended up making decisions based on pre-existing beliefs, limited data or just irrational preferences.
In this piece, I want to point out five of the most common types of cognitive biases. I will also offer some suggestions on how data scientists can work to avoid them and make better, more reasoned decisions.
1. Survivorship Bias During World War II, researchers from the non-profit research group the Center for Naval Analyses were tasked with a problem. They needed to reinforce the military’s fighter planes at their weakest spots. To accomplish this, they turned to data. They examined every plane that came back from a combat mission and made note of where bullets had hit the aircraft. Based on that information, they recommended that the planes be reinforced at those precise spots.
Do you see any problems with this approach?
The problem, of course, was that they only looked at the planes that returned and not at the planes that didn’t. Of course, data from the planes that had been shot down would almost certainly have been much more useful in determining where fatal damage to a plane was likely to have occurred, as those were the ones that suffered catastrophic damage.
The research team suffered from survivorship bias: they just looked at the data that was available to them without analyzing the larger situation. This is a form of selection bias in which we implicitly filter data based on some arbitrary criteria and then try to make sense out of it without realizing or acknowledging that we’re working with incomplete data.
Let’s think about how this might apply to our work in data science. Say you begin working on a data set. You have created your features and reached a decent accuracy on your modelling task. But maybe you should ask yourself if that is the best result you can achieve. Have you tried looking for more data? Maybe adding weather forecast data to the regular sales variables that you use in your ARIMA models would help you to forecast your sales better. Or perhaps some features around holidays can tell your model why your buyers are behaving in a particular fashion around Thanksgiving or Christmas.
Recommendation to Overcome: One way to mitigate this bias is by thinking in a rigorous, scientific way about the problem at hand and then brainstorming about any type of data that could help to solve it (rather than just starting with the data). These approaches may seem similar, but the second method restricts your vision because you don’t know what’s missing from your work. By using the first approach, you will know what data you were not able to get, and you will end up factoring that into your conclusions.
2. Sunk Cost Fallacy We all have seen the sunk cost fallacy in action at some point, whether it be sitting through that bad movie because we have already paid for it or finishing that awful book because we were already halfway through. Everyone has been in a situation where they ended up wasting more time because they were trying to salvage the time they had already invested.
A sunk cost, also known as a retrospective cost, is one that has already been incurred and cannot be recovered by any additional action. The sunk cost fallacy refers to the tendency of human beings to make decisions based on how much of an investment they have already made, which leads to even more investment but no returns whatsoever.
 Sometimes, hard as it is, the best thing to do is to let go.
 This happens often with data science projects. A project might run for more than two years without results but an investigator continues running it because so much time, money and effort have already been invested. Or a data scientist might defend her project wholeheartedly because she has invested so much in it, failing to realize that putting in more work won’t help her or the company in the long run and that it is best if the project is scrapped.
Recommendation to Overcome: A way to save yourself from this cognitive bias is by focusing on future benefits and costs rather than the already lost past costs. You have to develop the habit, hard as it is, of ignoring the previous cost information. Of course, it is never easy for us data scientists to just disregard data. For myself, I have found that a methodical way works best in this case. I take a pen and paper to get away from all the distractions and try to come up with all the additional costs required to do a project along with the benefits I might get in the future. If the cost part of the task seems overly significant, then it is time to move on.
3. False Causality As data scientists, we are always in search of patterns. The tendency means that sometimes we even find patterns where none really even exist. Our brains are so trained in this way that we will even make sense of chaos to the extent that we can.
Because our training wires us to seek out patterns, it’s crucial to remember the simple maxim that correlation does not imply causation. Those five words are like the hammer of the data science toolbox without which you can’t accomplish anything. Just because two variables move in tandem doesn’t necessarily mean that one causes the other.
This principle has been hilariously demonstrated by numerous examples. For instance,
 by looking at fire department data, you notice that, as more firemen are dispatched to a fire, the more damage is ultimately done to a property. Thus, you might infer that more firemen are causing more damage.
 In another famous example, an academic who was investigating the cause of crime in New York City in the 1980s found a strong correlation between the number of serious crimes committed and the amount of ice cream sold by street vendors. But should we conclude that eating ice cream drives people to crime? Since this makes little sense, we should obviously suspect that there was an unobserved variable causing both. During the summer, crime rates are the highest, and this is also when most ice cream is sold. Ice cream sales don’t cause crime, nor does crime increase ice cream sales.
  In both of these instances, looking at the data too superficially leads to incorrect assumptions.
Recommendation to Overcome: As data scientists, we need to be mindful of this bias when we present findings. Often, variables that might seem causal might not be on closer inspection. We should also take special care to avoid this type of mistake when creating variables of our models. At each step of the process, it’s important to ask ourselves if our independent variable is possibly just correlated to the dependent variable.
4. Availability Bias Have you ever said something like, “I know that [insert a generic statement here] because [insert one single example].” For example, someone might say, “You can’t get fat from drinking beer, because Bob drinks a lot of it, and he’s thin.” If you have, then you’ve suffered from availability bias. You are trying to make sense of the world with limited data.
People naturally tend to base decisions on information that is already available to us or things we hear about often without looking at alternatives that might be useful.As a result, we limit ourselves to a very specific subset of information.
This happens often in the data science world. Data scientists tend to get and work on data that’s easier to obtain rather than looking for data that is harder to gather but might be more useful. We make do with models that we understand and that are available to us in a neat package rather than something more suitable for the problem at hand but much more difficult to come by.
Recommendation to Overcome: A way to overcome availability bias in data science is to broaden our horizons. Commit to lifelong learning. Read. A lot. About everything. Then read some more. Meet new people. Discuss your work with other data scientists at work or in online forums. Be more open to suggestions about changes that you may have to take in your approach. By opening yourself up to new information and ideas, you can make sure that you’re less likely to work with incomplete information.
5. Confirmation Bias An old joke says that if you torture the data long enough, it will confess. With enough work, you can distort data to make it say what you want it to say.
We all hold some beliefs, and that’s fine. It’s all part of being human. What’s not OK, though, is when we let those beliefs inadvertently come into the way we form our hypotheses.
We can see this tendency in our everyday lives. We often interpret new information in such a way that it becomes compatible with our own beliefs. We read the news on the site that conforms most closely to our beliefs. We talk to people who are like us and hold similar views. We don’t want to get disconcerting evidence because that might lead us to change our worldview, which we might be afraid to do.
For example, I have seen confirmation bias in action in data science during the cost-benefit analysis stage of a project. I’ve seen people clinging to the data that confirms their hypothesis while ignoring all the contradictory evidence. Obviously, doing this could have a negative impact on the benefits section of the project.
Recommendation to Overcome: One way to fight this bias is to critically examine all your beliefs and try to find disconcerting evidence about each of your theories. By that, I mean actively seeking out evidence by going to places where you don’t normally go, talking to people you don’t normally talk to, and generally keeping an open mind.
Conclusion  In our age of information overload, we are surrounded by so much data that our brains try desperately to make sense of the noise.
 Sometimes it is useful to be able to make some sense out of the world based on limited information. In fact, we make most of our decisions without thinking much, going with our gut feelings. The potential harm of most of our day-to-day actions is pretty small. Allowing our biases to influence our work, though, can leave us in an unfortunate situation. We may end up losing money or credibility if we make a vital decision that turns out to be wrong.
Knowing how our brain works will help us avoid these mistakes.
If you want to learn more about Data Science, I would like to call out this excellent course by Andrew Ng. This was the one that got me started. Do check it out.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog.
This story was first published here.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>A Newspaper for COVID-19 — The CoronaTimes</title>
      <link>https://mlwhiz.com/blog/2020/03/29/coronatimes/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2020/03/29/coronatimes/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/coronatimes/main.gif"></media:content>
      

      
      <description>It seems that the way that I consume information has changed a lot. I have become quite a news junkie recently. One thing, in particular, is that I have been reading quite a lot of international news to determine the stages of Covid-19 in my country.
To do this, I generally visit a lot of news media sites in various countries to read up on the news. This gave me an idea.</description>

      <content:encoded>  
        
        <![CDATA[  It seems that the way that I consume information has changed a lot. I have become quite a news junkie recently. One thing, in particular, is that I have been reading quite a lot of international news to determine the stages of Covid-19 in my country.
To do this, I generally visit a lot of news media sites in various countries to read up on the news. This gave me an idea. Why not create an international news dashboard for Corona? And here it is.
This post is about how I created the news dashboard using Streamlit and data from NewsApi and European CDC.
TLDR; Link to the App here.
Getting The Data The most important thing while creating this Dashboard was acquiring the data. I am using two data sources:
1. Data from the European Centre for Disease Prevention and Control. The downloadable data file is updated daily and contains the latest available public data on COVID-19. Here is a snapshot of this data.
def get_data(date): os.system(&amp;quot;rm cases.csv&amp;quot;) url = &amp;quot;[https://opendata.ecdc.europa.eu/covid19/casedistribution/csv](https://opendata.ecdc.europa.eu/covid19/casedistribution/csv)&amp;quot; filename = wget.download(url,&amp;quot;cases.csv&amp;quot;) casedata = pd.read_csv(filename, encoding=&#39;latin-1&#39;) return casedata  2. News API The second source of data comes from the News API, which lets me access articles from leading news outlets from various countries for free. The only caveat is that I could only hit the API 500 times a day, and there is a result limit of 100 results for a particular query for free accounts.
I tried to get around those limit barriers by using streamlit caching(So I don’t hit the API a lot). I also tried to get news data from last month using multiple filters to get a lot of data.
from newsapi import NewsApiClient newsapi = NewsApiClient(api_key=&#39;aedb6aa9bebb4011a4eb5447019dd592&#39;)  The primary way the API works is by giving us access to 3 functions.
a) A function to get Recent News from a country:
json_data = newsapi.get_top_headlines(q=q,language=&#39;en&#39;, country=&#39;us&#39;) data = pd.DataFrame(json_data[&#39;articles&#39;]) data.head()  b) A function to get “Everything” related to a query from the country. You can see the descriptions of API parameters here:
json_data = newsapi.get_everything(q=&#39;corona&#39;, language=&#39;en&#39;, from_param=str(date.today() -timedelta(days=29)), to= str(date.today()), sources = &#39;usa-today&#39;, page_size=100, page = 1, sort_by=&#39;relevancy&#39; ) data = pd.DataFrame(json_data[&#39;articles&#39;]) data.head()  c) A function to get a list of sources from a Country programmatically. We can then use these sources to pull data from the “everything” API
def get_sources(country): sources = newsapi.get_sources(country=country) sources = [x[&#39;id&#39;] for x in sources[&#39;sources&#39;]] return sources sources = get_sources(country=&#39;us&#39;) print(sources[:5]) ------------------------------------------------------------------- [&#39;abc-news&#39;, &#39;al-jazeera-english&#39;, &#39;ars-technica&#39;, &#39;associated-press&#39;, &#39;axios&#39;]  I used all the functions above to get data that refreshes at a particular cadence. You can see how I use these API functions in a loop to download the data by looking at my code at GitHub.
Creating the Dashboard I wanted to have a few important information in the Dashboard that I was interested in. So I started by creating various widgets.
1. Current World Snapshot: The first information was regarding the whole world situation. The Number of Cases and Deaths. The case and death curve in various countries? What are the fatality rates in various countries? Below is the current world situation on 28 Mar 2020.
Observations: We can see the deaths in Italy are still on the rise, while we are seeing the deaths shooting up in Spain, France, and the United States as well. The death rates in some countries are worrying with death rates of 10.56% in Italy and 8.7% in Iraq. I suspect that the death rate statistic of 2% in the starting days of CoronaVirus was misinformed if not wrong.
Technical Details — To create this part of the Dashboard, I used the ECDC data. I also used a lot of HTML hacks with Streamlit, where I used bootstrap widgets as well as custom HTML to get data in the way I wanted to display it. Here are a few of the hacks:
 Using Bootstrap Cards: You can use bootstrap or, in that case, any HTML element in Streamlit if you change the parameter unsafe_allow_html to True. Do note that I am also using python f string formatting here.  st.sidebar.markdown(f&amp;#39;&amp;#39;&amp;#39;&amp;lt;div class=&amp;#34;card text-white bg-info mb-3&amp;#34; style=&amp;#34;width: 18rem&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;card-body&amp;#34;&amp;gt; &amp;lt;h5 class=&amp;#34;card-title&amp;#34;&amp;gt;Total Cases&amp;lt;/h5&amp;gt; &amp;lt;p class=&amp;#34;card-text&amp;#34;&amp;gt;{sum(casedata[&amp;#39;cases&amp;#39;]):,d}&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;&amp;#39;&amp;#39;&amp;#39;, unsafe_allow_html=True) The above code is behind the Dashboard styled cards in the streamlit app sidebar.
 Changed the width of the streamlit main page:  Again, there was no parameter given by streamlit to do this, and I was finding the page width a little too small for my use case. Adding the above code at the start of the app solved the issue.
st.markdown( f&amp;#34;&amp;#34;&amp;#34; &amp;lt;style&amp;gt; .reportview-container .main .block-container{{ max-width: 1000px; }} &amp;lt;/style&amp;gt; &amp;#34;&amp;#34;&amp;#34;, unsafe_allow_html=True, ) 2. Most Recent News from Country The primary purpose of creating this Dashboard was to get news from various outlets from top media outlets in the country.
Observations: As here you can see, here we have the top recent news from the United Kingdom concerning cases in Ireland and Boris Johnson’s corona woes.
Technical Details: As said before, I am using the News API to get this data. And here is how I am using a mashup of HTML and markdown to display the news results.
def create_most_recent_markdown(df,width=700): if len(df)&amp;gt;0: # img url img_path = df[&#39;urlToImage&#39;].iloc[0] if not img_path: images = [x for x in df.urlToImage.values if x is not None] if len(images)!=0: img_path = random.choice(images) else: img_path = &#39;[https://www.nfid.org/wp-content/uploads/2020/02/Coronavirus-400x267.png&#39;](https://www.nfid.org/wp-content/uploads/2020/02/Coronavirus-400x267.png&#39;) img_alt = df[&#39;title&#39;].iloc[0] df = df[:5] **markdown_str = f&amp;quot;&amp;lt;img src=&#39;{img_path}&#39; width=&#39;{width}&#39;/&amp;gt; &amp;lt;br&amp;gt; &amp;lt;br&amp;gt;&amp;quot;** for index, row in df.iterrows(): **markdown_str &#43;= f&amp;quot;[{row[&#39;title&#39;]}]({row[&#39;url&#39;]}) by {row[&#39;author&#39;]}&amp;lt;br&amp;gt; &amp;quot;** return markdown_str else: return &#39;&#39;  Few things to note here:
 The image width cannot be set using markdown so using custom HTML
 The usage of python f strings to create the article titles and URLs.
 If no image is found, we are defaulting to a custom image.
  3. News Sentiment Another thing that has been bothering me in these trying times is so much negativity everywhere. I wanted to see the news covered from a positive angle if it could be in any way. So I did some simple sentiment analysis using the custom sentiment analyzer from Textblob to do this.
I found out sentiments by news outlets as well as some of the most positive and negative news related to Coronavirus in the past 30 days. (Past 30 days because I cannot go more back with the free API).
Observations: As you can see that one of the most positive news is Trump changing his coronavirus stance on March 17th, and I agree. The second positive report seems to be regarding some sort of solution to the problem. While the first Negative news is regarding Cardi B slamming celebrities for sowing confusion about the Coronavirus. I won’t comment on this :)
Technical Details: To get the sentiment scores of an article I used TextBlob. Getting the sentiment scores that range from -1 to 1 is as simple as using the below function. I used a concatenation of title and description to find the sentiment as the content from the News API was truncated.
def textblob_sentiment(title,description): blob = TextBlob(str(title)&#43;&amp;quot; &amp;quot;&#43;str(description)) return blob.sentiment.polarity  The main difficulty here was to have a two-column layout to give both positive and negative news. For that again, I had to use a mashup of HTML and markdown. I used the HTML table to do this. Also, note how I used markdown to convert markdown to HTML using Python f strings.
import markdown md = markdown.Markdown() positive_results_markdown = create_most_recent_markdown(positivedata,400) negative_results_markdown = create_most_recent_markdown(negativedata,400) html = f&#39;&#39;&#39;&amp;lt;table style=&amp;quot;width:100%&amp;quot;&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;&amp;lt;center&amp;gt;Most Positive News&amp;lt;/center&amp;gt;&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;&amp;lt;center&amp;gt;Most Negative News&amp;lt;/center&amp;gt;&amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;&amp;lt;center&amp;gt;**{md.convert(positive_results_markdown)}**&amp;lt;/center&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;&amp;lt;center&amp;gt;**{md.convert(negative_results_markdown)}**&amp;lt;/center&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/table&amp;gt;&#39;&#39;&#39; #print md.convert(&amp;quot;# sample heading text&amp;quot;) st.markdown(html,unsafe_allow_html=True)  4. News Source WordCloud A visualization dashboard that works with text is never really complete without a word cloud, so I thought of adding a word cloud to understand the word usage from a particular source.
Observations: We can see Vice news using words like “New” and “Tested” a lot of times. While Business Insider used “China” a lot.
      Technical Details:Here is what I used to create this masked word cloud:
import cv2 def create_mask(): mask = np.array(Image.open(&amp;quot;coronavirus.png&amp;quot;)) im_gray = cv2.cvtColor(mask, cv2.COLOR_BGR2GRAY) _, mask = cv2.threshold(im_gray, thresh=20, maxval=255, type=cv2.THRESH_BINARY) mask = 255 - mask return mask mask = create_mask() def create_wc_by(source): data = fulldf[fulldf[&#39;source&#39;]==source] text = &amp;quot; &amp;quot;.join([x for x in data.content.values if x is not None]) stopwords = set(STOPWORDS) stopwords.add(&#39;chars&#39;) stopwords.add(&#39;coronavirus&#39;) stopwords.add(&#39;corona&#39;) stopwords.add(&#39;chars&#39;) wc = WordCloud(background_color=&amp;quot;white&amp;quot;, max_words=1000, mask=mask, stopwords=stopwords, max_font_size=90, random_state=42, contour_width=3, contour_color=&#39;steelblue&#39;) wc.generate(text) plt.figure(figsize=[30,30]) plt.imshow(wc, interpolation=&#39;bilinear&#39;) plt.axis(&amp;quot;off&amp;quot;) return plt st.pyplot(create_wc_by(source),use_container_width=True)  Other Technical Considerations 1. Advanced Caching: In new streamlit release notes for 0.57.0 which just came out yesterday, streamlit has made updates to st.cache. One notable change to this release is the “ability to set expiration options for cached functions by setting the max_entries and ttl arguments”. From the documentation:
 max_entries (int or None) — The maximum number of entries to keep in the cache, or None for an unbounded cache. (When a new entry is added to a full cache, the oldest cached entry will be removed.) The default is None.
 ttl (float or None) — The maximum number of seconds to keep an entry in the cache, or None if cache entries should not expire. The default is None.
  Two use cases where this might help would be:
 If you’re serving your app and don’t want the cache to grow forever.
 If you have a cached function that reads live data from a URL and should clear every few hours to fetch the latest data
  So this is what is being used in a lot of functions to avoid hitting APIs multiple times and to prevent them from getting stale at the same time.
For Example, Top results from a country are fetched at a period of 360 seconds i.e., 6 minutes.
st.cache(ttl=360,max_entries=20) def create_dataframe_top(queries,country): #Hits API Here  While full results from the everything API are fetched at a period of one day.
[@st](http://twitter.com/st).cache(ttl = 60*60*24,max_entries=20) def create_dataframe_last_30d(queries, sources): # hits API  2. Deployment: I used the amazon free ec2 instance to deploy this app at http://54.149.204.138:8501/. If you want to know the steps,read my post on How to Deploy a Streamlit App using an Amazon Free ec2 instance?
There are also a few caveats:
 Since it is a free server, it might not take too much load.
 I have not thoroughly tested the caching routine. I just hope that there are no memory errors with the limited memory on the server.
 The News API is also free. There might be rate limits that might kick in even after I have tried to handle that.
  3. Learning For folks who are lost, you might like to start with the basics first. Here is my introductory posts on Streamlit and Plotly express.
 How to write Web apps using simple Python for Data Scientists? Python’s One Liner graph creation library with animations Hans Rosling Style  Conclusion Here I have tried creating a dashboard for news on Coronavirus, but it is still in a nascent stage, and a lot needs to be done.
For one, it needs a large server. For another, a lot of time to improve the visualization and layouts. And also a lot of testing.
Also, we have done a few things in a roundabout way using HTML and few hacks. There are still a lot of things that I will love to have in Streamlit. I have been in talks with the Streamlit team over the new functionality that they are going to introduce, and I will try to keep you updated on the same. The good news is that Layout options are a part of the new functionality that Streamlit is working on.
You can find the full code for the final app here at my Github repo. And here is the full app on the web.
If you want to learn about the best strategies for creating Visualizations, I would like to call out an excellent course about Data Visualization and applied plotting from the University of Michigan, which is a part of a pretty good Data Science Specialization with Python in itself. Do check it out.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog.
Also, a small disclaimer — There might be some affiliate links in this post to relevant resources, as sharing knowledge is never a bad idea.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>5 Ways to add a new column in a PySpark Dataframe</title>
      <link>https://mlwhiz.com/blog/2020/02/24/sparkcolumns/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2020/02/24/sparkcolumns/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/sparkcolumns/main.png"></media:content>
      

      
      <description>Too much data is getting generated day by day.
Although sometimes we can manage our big data using tools like Rapids or Parallelization, Spark is an excellent tool to have in your repertoire if you are working with Terabytes of data.
In my last post on Spark, I explained how to work with PySpark RDDs and Dataframes.
Although this post explains a lot on how to work with RDDs and basic Dataframe operations, I missed quite a lot when it comes to working with PySpark Dataframes.</description>

      <content:encoded>  
        
        <![CDATA[  Too much data is getting generated day by day.
Although sometimes we can manage our big data using tools like Rapids or Parallelization, Spark is an excellent tool to have in your repertoire if you are working with Terabytes of data.
In my last post on Spark, I explained how to work with PySpark RDDs and Dataframes.
Although this post explains a lot on how to work with RDDs and basic Dataframe operations, I missed quite a lot when it comes to working with PySpark Dataframes.
And it is only when I required more functionality that I read up and came up with multiple solutions to do one single thing.
How to create a new column in spark?
Now, this might sound trivial, but believe me, it isn’t. With so much you might want to do with your data, I am pretty sure you will end up using most of these column creation processes in your workflow. Sometimes to utilize Pandas functionality, or occasionally to use RDDs based partitioning or sometimes to make use of the mature python ecosystem.
This post is going to be about — “Multiple ways to create a new column in Pyspark Dataframe.”
If you have PySpark installed, you can skip the Getting Started section below.
Getting Started with Spark I know that a lot of you won’t have spark installed in your system to try and learn. But installing Spark is a headache of its own.
Since we want to understand how it works and work with it, I would suggest that you use Spark on Databricks here online with the community edition. Don’t worry, it is free, albeit fewer resources, but that works for us right now for learning purposes.
Once you register and login will be presented with the following screen.
You can start a new notebook here.
Select the Python notebook and give any name to your notebook.
Once you start a new notebook and try to execute any command, the notebook will ask you if you want to start a new cluster. Do it.
The next step will be to check if the sparkcontext is present. To check if the sparkcontext is present, you have to run this command:
sc  This means that we are set up with a notebook where we can run Spark.
Data Here, I will work on the Movielens ml-100k.zip dataset. 100,000 ratings from 1000 users on 1700 movies. In this zipped folder, the file we will specifically work with is the rating file. This filename is kept as “u.data”
If you want to upload this data or any data, you can click on the Data tab in the left and then Add Data by using the GUI provided.
We can then load the data using the following commands:
ratings = spark.read.load(&amp;quot;/FileStore/tables/u.data&amp;quot;,format=&amp;quot;csv&amp;quot;, sep=&amp;quot;\t&amp;quot;, inferSchema=&amp;quot;true&amp;quot;, header=&amp;quot;false&amp;quot;) ratings = ratings.toDF(*[&#39;user_id&#39;, &#39;movie_id&#39;, &#39;rating&#39;, &#39;unix_timestamp&#39;])  Here is how it looks:
ratings.show()  Ok, so now we are set up to begin the part we are interested in finally. How to create a new column in PySpark Dataframe?
1. Using Spark Native Functions The most pysparkish way to create a new column in a PySpark DataFrame is by using built-in functions. This is the most performant programmatical way to create a new column, so this is the first place I go whenever I want to do some column manipulation.
We can use .withcolumn along with PySpark SQL functions to create a new column. In essence, you can find String functions, Date functions, and Math functions already implemented using Spark functions. We can import spark functions as:
import pyspark.sql.functions as F  Our first function, the F.col function gives us access to the column. So if we wanted to multiply a column by 2, we could use F.col as:
ratings_with_scale10 = ratings.withColumn(&amp;quot;ScaledRating&amp;quot;, 2*F.col(&amp;quot;rating&amp;quot;)) ratings_with_scale10.show()  We can also use math functions like F.exp function:
ratings_with_exp = ratings.withColumn(&amp;quot;expRating&amp;quot;, 2*F.exp(&amp;quot;rating&amp;quot;)) ratings_with_exp.show()  There are a lot of other functions provided in this module, which are enough for most simple use cases. You can check out the functions list here.
2. Spark UDFs Sometimes we want to do complicated things to a column or multiple columns. This could be thought of as a map operation on a PySpark Dataframe to a single column or multiple columns. While Spark SQL functions do solve many use cases when it comes to column creation, I use Spark UDF whenever I want to use the more matured Python functionality.
To use Spark UDFs, we need to use the F.udf function to convert a regular python function to a Spark UDF. We also need to specify the return type of the function. In this example the return type is StringType()
import pyspark.sql.functions as F from pyspark.sql.types import * def somefunc(value): if value &amp;lt; 3: return &#39;low&#39; else: return &#39;high&#39; #convert to a UDF Function by passing in the function and return type of function udfsomefunc = F.udf(somefunc, StringType()) ratings_with_high_low = ratings.withColumn(&amp;quot;high_low&amp;quot;, udfsomefunc(&amp;quot;rating&amp;quot;)) ratings_with_high_low.show()  3. Using RDDs Sometimes both the spark UDFs and SQL Functions are not enough for a particular use-case. You might want to utilize the better partitioning that you get with spark RDDs. Or you may want to use group functions in Spark RDDs. You can use this one, mainly when you need access to all the columns in the spark data frame inside a python function.
Whatever the case be, I find this way of using RDD to create new columns pretty useful for people who have experience working with RDDs that is the basic building block in the Spark ecosystem.
The process below makes use of the functionality to convert between Row and pythondict objects. We convert a row object to a dictionary. Work with the dictionary as we are used to and convert that dictionary back to row again.
import math from pyspark.sql import Row def rowwise_function(row): # convert row to dict: row_dict = row.asDict() # Add a new key in the dictionary with the new column name and value. row_dict[&#39;Newcol&#39;] = math.exp(row_dict[&#39;rating&#39;]) # convert dict to row: newrow = Row(**row_dict) # return new row return newrow # convert ratings dataframe to RDD ratings_rdd = ratings.rdd # apply our function to RDD ratings_rdd_new = ratings_rdd.map(lambda row: rowwise_function(row)) # Convert RDD Back to DataFrame ratings_new_df = sqlContext.createDataFrame(ratings_rdd_new) ratings_new_df.show()  4. Pandas UDF This functionality was introduced in the Spark version 2.3.1. And this allows you to use pandas functionality with Spark. I generally use it when I have to run a groupby operation on a Spark dataframe or whenever I need to create rolling features and want to use Pandas rolling functions/window functions.
The way we use it is by using the F.pandas_udf decorator. We assume here that the input to the function will be a pandas data frame. And we need to return a pandas dataframe in turn from this function.
The only complexity here is that we have to provide a schema for the output Dataframe. We can make that using the format below.
# Declare the schema for the output of our function outSchema = StructType([StructField(&#39;user_id&#39;,IntegerType(),True),StructField(&#39;movie_id&#39;,IntegerType(),True),StructField(&#39;rating&#39;,IntegerType(),True),StructField(&#39;unix_timestamp&#39;,IntegerType(),True),StructField(&#39;normalized_rating&#39;,DoubleType(),True)]) # decorate our function with pandas_udf decorator [@F](http://twitter.com/F).pandas_udf(outSchema, F.PandasUDFType.GROUPED_MAP) def subtract_mean(pdf): # pdf is a pandas.DataFrame v = pdf.rating v = v - v.mean() pdf[&#39;normalized_rating&#39;] =v return pdf rating_groupwise_normalization = ratings.groupby(&amp;quot;movie_id&amp;quot;).apply(subtract_mean) rating_groupwise_normalization.show()  We can also make use of this to train multiple individual models on each spark node. For that, we replicate our data and give each replication a key and some training params like max_depth, etc. Our function then takes the pandas Dataframe, runs the required model, and returns the result. The structure would look something like below.
# 0. Declare the schema for the output of our function outSchema = StructType([StructField(&#39;replication_id&#39;,IntegerType(),True),StructField(&#39;RMSE&#39;,DoubleType(),True)]) # decorate our function with pandas_udf decorator [@F](http://twitter.com/F).pandas_udf(outSchema, F.PandasUDFType.GROUPED_MAP) def run_model(pdf): # 1. Get hyperparam values num_trees = pdf.num_trees.values[0] depth = pdf.depth.values[0] replication_id = pdf.replication_id.values[0] # 2. Train test split Xtrain,Xcv,ytrain,ycv = train_test_split..... # 3. Create model using the pandas dataframe clf = RandomForestRegressor(max_depth = depth, num_trees=num_trees,....) clf.fit(Xtrain,ytrain) # 4. Evaluate the model rmse = RMSE(clf.predict(Xcv,ycv) # 5. return results as pandas DF res =pd.DataFrame({&#39;replication_id&#39;:replication_id,&#39;RMSE&#39;:rmse}) return res results = replicated_data.groupby(&amp;quot;replication_id&amp;quot;).apply(run_model)  Above is just an idea and not a working code. Though it should work with minor modifications.
5. Using SQL For people who like SQL, there is a way even to create columns using SQL. For this, we need to register a temporary SQL table and then use simple select queries with an additional column. One might also use it to do joins.
ratings.registerTempTable(&#39;ratings_table&#39;) newDF = sqlContext.sql(&#39;select *, 2*rating as newCol from ratings_table&#39;) newDF.show()  Conclusion And that is the end of this column(pun intended)
Hopefully, I’ve covered the column creation process well to help you with your Spark problems. If you need to learn more of spark basics, take a look at:
The Hitchhikers guide to handle Big Data using Spark
You can find all the code for this post at the GitHub repository or the published notebook on databricks.
Also, if you want to learn more about Spark and Spark DataFrames, I would like to call out an excellent course on Big Data Essentials, which is part of the Big Data Specialization provided by Yandex.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog
Also, a small disclaimer — There might be some affiliate links in this post to relevant resources, as sharing knowledge is never a bad idea.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Become a Data Scientist in 2020 with these 10 resources</title>
      <link>https://mlwhiz.com/blog/2020/02/21/ds2020/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2020/02/21/ds2020/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/ds2020/main.png"></media:content>
      

      
      <description>I am a Mechanical engineer by education. And I started my career with a core job in the steel industry.
With those heavy steel enforced gumboots and that plastic helmet, venturing around big blast furnaces and rolling mills. Artificial safety measures, to say the least, as I knew that nothing would save me if something untoward happens. Maybe some running shoes would have helped. As for the helmet. I would just say that molten steel burns at 1370 degrees C.</description>

      <content:encoded>  
        
        <![CDATA[  I am a Mechanical engineer by education. And I started my career with a core job in the steel industry.
With those heavy steel enforced gumboots and that plastic helmet, venturing around big blast furnaces and rolling mills. Artificial safety measures, to say the least, as I knew that nothing would save me if something untoward happens. Maybe some running shoes would have helped. As for the helmet. I would just say that molten steel burns at 1370 degrees C.
As I realized based on my constant fear, that job was not for me, and so I made it my goal to move into the Analytics and Data Science space somewhere around in 2011. From that time, MOOCs have been my goto option for learning new things, and I ended up taking a lot of them. Good ones and bad ones.
Now in 2020, with the Data Science field changing so rapidly, there is no shortage of resources to learn data science. But that also often poses a problem for a beginner as to where to start learning and what to learn? There are a lot of great resources on the internet, but that means there are a lot of bad ones too.
 A lot of choices may often result in stagnation as anxiety is not good when it comes to learning.
 In his book, The Paradox of Choice — Why More Is Less, Schwartz argues that eliminating consumer choices can greatly reduce anxiety for shoppers. And the same remains true for Data Science courses as well.
This post is about providing recommendations to lost souls with a lot of choices on where to start their Data Science Journey.
1) Python 3 Programming Specialization  “GoodBye World” for Python 2.7!!!
 First, you need a programming language. This specialization from the University of Michigan is about learning to use Python and creating things on your own.
You will learn about programming fundamentals like variables, conditionals, and loops, and get to some intermediate material like keyword parameters, list comprehensions, lambda expressions, and class inheritance.
You might also like to go through my Python Shorts posts while going through this specialization.
Python Shorts Posts
2) Applied Data Science with Python  Do first, understand later
 We need to get a taste of Machine Learning before understanding it fully.
This specialization in Applied Data Science with Python gives an intro to many modern machine learning methods that you should know about. Not a thorough grinding, but you will get the tools to build your models.
 This skills-based specialization is intended for learners who have a basic python or programming background, and want to apply statistical, machine learning, information visualization, text analysis, and social network analysis techniques through popular python toolkits such as pandas, matplotlib, scikit-learn, nltk, and networkx to gain insight into their data.
 You might also like to go through a few of my posts while going through this specialization:
 Minimal Pandas Subset for Data Scientists
 Python’s One Liner graph creation library with animations Hans Rosling Style
 3 Awesome Visualization Techniques for every dataset
  3) Machine Learning Theory and Fundamentals After doing these above courses, you will gain the status of what I would like to call a “Beginner.”
Congrats!!!. You know stuff; you know how to implement things.
 You are Useful
 Yet, you do not fully understand all the math and grind that goes behind all these models.
You need to understand what goes behind the clf.fit. Its time to face the music. Nobody is going to take you seriously till you understand the Math behind your models.
 If you don’t understand it you won’t be able to improve it
 Here comes the Game Changer Machine Learning course. It contains the maths behind many of the Machine Learning algorithms.
I will put this course as the one course you have to take as this course motivated me into getting into this field, and Andrew Ng is a great instructor. Also, this was the first course that I took myself when I started.
This course has a little of everything — Regression, Classification, Anomaly Detection, Recommender systems, Neural networks, plus a lot of great advice.
You might also want to go through a few of my posts while going through this course:
 The Hitchhiker’s Guide to Feature Extraction
 The 5 Classification Evaluation metrics every Data Scientist must know
 The 5 Feature Selection Algorithms every Data Scientist should know
 The Simple Math behind 3 Decision Tree Splitting criterions
  4) Learn Statistical Inference  “Facts are stubborn things, but statistics are pliable.”― Mark Twain
 Mine Çetinkaya-Rundel teaches this course on Inferential Statistics. And it cannot get simpler than this one.
She is a great instructor and explains the fundamentals of Statistical inference nicely — a must-take course.
You will learn about hypothesis testing, confidence intervals, and statistical inference methods for numerical and categorical data.
You might also want to go through a few of my posts while going through this specialization:
 P-value Explained Simply for Data Scientists Confidence Intervals Explained Simply for Data Scientists  5) Learn SQL Basics for Data Science  SQL is the heart of all data ETL
 While we feel much more accomplished by creating models and coming up with the different hypotheses, the role of data munging can’t be understated.
And with the ubiquitousness of SQL when it comes to ETL and data preparation tasks, everyone should know a little bit of it to at least be useful.
SQL has also become a de facto standard of working with Big Data Tools like Apache Spark. This SQL specialization from UC Davis will teach you about SQL as well as how to use SQL for distributed computing.
From the Course website:
 Through four progressively more difficult SQL projects with data science applications, you will cover topics such as SQL basics, data wrangling, SQL analysis, AB testing, distributed computing using Apache Spark, and more
 You might also want to go through a few of my posts while going through this specialization:
 Learning SQL the Hard Way The Hitchhikers guide to handle Big Data using Spark 5 Ways to add a new column in a PySpark Dataframe  6) Advanced Machine Learning  In the big leagues, there is no spoonfeeding.
 You might not agree to this, but till now, whatever we have done has been spoonfed learning. The material was structured, and the Math has been minimal. But that has prepared you for the next steps. This Advanced Machine Learning specialization by Top Kaggle machine learning practitioners and CERN scientists takes another approach to learning by going through a lot of difficult concepts and guiding you through how things worked in the past and the most recent advancements in the Machine Learning World. The description on the website says:
 This specialization gives an introduction to deep learning, reinforcement learning, natural language understanding, computer vision and Bayesian methods. Top Kaggle machine learning practitioners and CERN scientists will share their experience of solving real-world problems and help you to fill the gaps between theory and practice.
 You might like to look at a few of my posts while trying to understand some of the material in this course.
 MCMC Intuition for Everyone NLP Learning Series  7) Deep Learning  Deep Learning is the Future
 Andrew NG is back again with his new Deep Learning Specialization. And this is Pure Gold.
Andrew Ng has achieved mastery in explaining difficult concepts in an easy to understand way. The nomenclature he follows is different from all other tutorials and courses on the net, and I hope it catches on as it is pretty helpful in understanding all the basic concepts.
From the specialization website:
 Learn the foundations of Deep Learning, understand how to build neural networks, and learn how to lead successful machine learning projects. You will learn about Convolutional networks, RNNs, LSTM, Adam, Dropout, BatchNorm, Xavier/He initialization, and more. You will work on case studies from healthcare, autonomous driving, sign language reading, music generation, and natural language processing.
 You might like to look at a few of my posts while trying to understand some of the material in this course.
 An End to End Introduction to GANs Object Detection using Deep Learning Approaches: An End to End Theoretical Perspective  8) Pytorch  Python on Fire
 I usually never advocate to learn a tool, but here I do. The reason being that it is incredible and seriously, you will be able to read code in a lot of recent research papers if you understand Pytorch. Pytorch has become a default programming language for researchers working in Deep Learning, and it will only pay for us to learn it.
A structured way to learn Pytorch is by taking this course on Deep Neural Networks with Pytorch. From the course website:
 The course will start with Pytorch’s tensors and Automatic differentiation package. Then each section will cover different models starting off with fundamentals such as Linear Regression, and logistic/softmax regression. Followed by Feedforward deep neural networks, the role of different activation functions, normalization and dropout layers. Then Convolutional Neural Networks and Transfer learning will be covered. Finally, several other Deep learning methods will be covered.
 You might also look at this post of mine, where I try to explain how to work with PyTorch. - Moving from Keras to Pytorch
9) Getting Started with AWS for Machine Learning  The secret: it’s not what you know, it’s what you show.
 There are a lot of things to consider while building a great machine learning system. But often it happens that we, as data scientists, only worry about certain parts of the project.
But do we ever think about how we will deploy our models once we have them?
I have seen a lot of ML projects, and a lot of them are doomed to fail as they don’t have a set plan for production from the onset.
Having a good platform and understanding how that platform deploys machine Learning apps will make all the difference in the real world. This course on AWS for implementing Machine Learning applications promises just that.
 This course will teach you: 1. How to build, train and deploy a model using Amazon SageMaker with built-in algorithms and Jupyter Notebook instance. 2. How to build intelligent applications using Amazon AI services like Amazon Comprehend, Amazon Rekognition, Amazon Translate and others.
 You might also look at this post of mine, where I try to talk about apps and explain how to plan for Production.
 How to write Web apps using simple Python for Data Scientists? How to Deploy a Streamlit App using an Amazon Free ec2 instance? Take your Machine Learning Models to Production with these 5 simple steps  10) Data Structures and Algorithms  Algorithms. Yes, you need them.
 Algorithms and data structures are an integral part of data science. While most of us data scientists don’t take a proper algorithms course while studying, they are essential all the same.
Many companies ask data structures and algorithms as part of their interview process for hiring data scientists.
They will require the same zeal to crack as your Data Science interviews, and thus, you might want to give some time for the study of algorithms and Data structure and algorithms questions.
One of the best resources I found to learn algorithms is the Algorithm Specialization on Coursera by UCSanDiego. From the specialization website:
 You will learn algorithmic techniques for solving various computational problems and will implement about 100 algorithmic coding problems in a programming language of your choice. No other online course in Algorithms even comes close to offering you a wealth of programming challenges that you may face at your next job interview.
 You might also like to look at a few of my posts while trying to understand some of the material in this specialization.
 3 Programming concepts for Data Scientists A simple introduction to Linked Lists for Data Scientists Dynamic Programming for Data Scientists -Handling Trees in Data Science Algorithmic Interview  Continue Learning I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog.
Also, a small disclaimer — There might be some affiliate links in this post to relevant resources, as sharing knowledge is never a bad idea.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Confidence Intervals Explained Simply for Data Scientists</title>
      <link>https://mlwhiz.com/blog/2020/02/21/ci/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2020/02/21/ci/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/ci/main.png"></media:content>
      

      
      <description>Recently, I got asked about how to explain confidence intervals in simple terms to a layperson. I found that it is hard to do that.
Confidence Intervals are always a headache to explain even to someone who knows about them, let alone someone who doesn’t understand statistics.
I went to Wikipedia to find something and here is the definition:
 In statistics, a confidence interval (CI) is a type of estimate computed from the statistics of the observed data.</description>

      <content:encoded>  
        
        <![CDATA[  Recently, I got asked about how to explain confidence intervals in simple terms to a layperson. I found that it is hard to do that.
Confidence Intervals are always a headache to explain even to someone who knows about them, let alone someone who doesn’t understand statistics.
I went to Wikipedia to find something and here is the definition:
 In statistics, a confidence interval (CI) is a type of estimate computed from the statistics of the observed data. This proposes a range of plausible values for an unknown parameter. The interval has an associated confidence level that the true parameter is in the proposed range. This is more clearly stated as: the confidence level represents the probability that the unknown parameter lies in the stated interval. The level of confidence can be chosen by the investigator. In general terms, a confidence interval for an unknown parameter is based on sampling the distribution of a corresponding estimator. [1]
 And my first thought was that might be they have written it like this so that nobody could understand it. The problem here lies with a lot of terminology and language that statisticians enjoy to employ.
This post is about explaining confidence intervals in an easy to understand way without all that pretentiousness.
A Real-Life problem Source
Let’s start by creating a real-life scenario.
Imagine you want to find the mean height of all the people in a particular US state.
You could go to each person in that particular state and ask for their height, or you can do the smarter thing by taking a sample of 1000 people in the state.
Then you can use the mean of their heights (Estimated Mean) to estimate the average of heights in the state(True Mean)
This is all well and good, but you being the true data scientist, are not satisfied. The estimated mean is just a single number, and you want to have a range where the true mean could lie.
Why do we want a range? Because in real life, we are concerned about the confidence of our estimates.
Typically even if I ask you to guess the height of people in the particular US state, you are more inclined to say something like: “I believe it is between 6 foot to 6 Foot 2 Inch” rather than a point estimate like “Its 6 foot 2.2345 inches”.
We humans also like to attach a level of confidence when we give estimates. Have you ever said — “I am 90% confident”.
In this particular example, I can be more confident about the statement- “I believe it is between 5 foot to 7 Foot” than “I believe it is between 6 foot to 6 Foot 2 Inch” as the first range is a superset of the second one.
So how do we get this range and quantify a confidence value?
Strategy To understand how we will calculate the confidence intervals, we need to understand the Central Limit Theorem.
Central Limit Theorem: The Central Limit Theorem(CLT) simply states that if you have a population with mean μ and standard deviation σ, and take random samples from the population, then the distribution of the sample means will be approximately normally distributed with mean as the population mean and estimated standard deviation s/√n where s is the standard deviation of the sample and n is the number of observations in the sample.
So knowing all this, you become curious. We already have a sample of 1000 people in the US state. Can we apply CLT?
We know that the mean of the sampling distribution is equal to the population mean(which we don’t know and want to estimate)and the sample deviation of the sampling distribution is given by σ/√n( i.e., the standard deviation of the sample divided by the number of observations in the sample)
Now, you want to find intervals on the X-axis that contains the true population mean.
So what do we do? We cast a net from the value we know.
To get such ranges/intervals, we go 1.96 standard deviations away from Xbar, the sample mean in both directions. And this range is the 95% confidence interval.
Now, when I say that I estimate the true mean to be Xbar (The sample Mean) with a confidence interval of [Xbar-1.96SD, Xbar&#43;1.96SD], I am saying that:
 That this is an interval constructed using a certain procedure. Were this procedure to be repeated on numerous samples, the fraction of calculated confidence intervals (which would differ for each sample) that encompass the true population parameter would tend toward 95%
 When you take 99% CI, you essentially increase the proportion and thus cast a wider net with three standard deviations.
 Here Xbar is the sample mean(mean of the 1000 heights sample you took).
 Z is the no of standard deviations away from the sample mean(1.96 for 95%, 2.576 for 99%) — level of confidence you want.
 s is the standard deviation in the sample.
 n is the size of the sample.
  Each line in the figure above is one such experiment where the dot signifies the sample mean, and the line signifies the range. The dotted line in this figure is the true population mean.
See how some of these intervals don’t contain the true population mean, and almost all of them(95%) do include the true population mean
The Critical Z value As we said, Z is the no of standard deviations away from the sample mean(1.96 for 95%, 2.576 for 99%) — level of confidence you want.
You can go for any arbitrary level of confidence. Say, for example, you want 90% confidence. You can get that by using the idea that the shaded area inside the normal curve needs to be 0.90.
import scipy.stats as st p = 0.9 &#43; (1-0.9)/2 Z = st.norm.ppf(p, loc=0, scale=1) print(Z) ---------------------------------------------------------- 1.6448536269514722  Continue Learning If you want to learn more about hypothesis testing, confidence intervals, and statistical inference methods for numerical and categorical data, Mine Çetinkaya-Rundel teaches Inferential Statistics course on coursera, and it cannot get simpler than this one. She is a great instructor and explains the fundamentals of Statistical inference nicely.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog
Also, a small disclaimer — There might be some affiliate links in this post to relevant resources, as sharing knowledge is never a bad idea.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>The 5 most useful Techniques to Handle Imbalanced datasets</title>
      <link>https://mlwhiz.com/blog/2020/01/28/imbal/</link>
      <pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2020/01/28/imbal/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/imbal/main.png"></media:content>
      

      
      <description>Have you ever faced an issue where you have such a small sample for the positive class in your dataset that the model is unable to learn?
In such cases, you get a pretty high accuracy just by predicting the majority class, but you fail to capture the minority class, which is most often the point of creating the model in the first place.
Such datasets are a pretty common occurrence and are called as an imbalanced dataset.</description>

      <content:encoded>  
        
        <![CDATA[  Have you ever faced an issue where you have such a small sample for the positive class in your dataset that the model is unable to learn?
In such cases, you get a pretty high accuracy just by predicting the majority class, but you fail to capture the minority class, which is most often the point of creating the model in the first place.
Such datasets are a pretty common occurrence and are called as an imbalanced dataset.
 Imbalanced datasets are a special case for classification problem where the class distribution is not uniform among the classes. Typically, they are composed by two classes: The majority (negative) class and the minority (positive) class
 Imbalanced datasets can be found for different use cases in various domains:
 Finance: Fraud detection datasets commonly have a fraud rate of ~1–2%
 Ad Serving: Click prediction datasets also don’t have a high clickthrough rate.
 Transportation/Airline: Will Airplane failure occur?
 Medical: Does a patient has cancer?
 Content moderation: Does a post contain NSFW content?
  So how do we solve such problems?
This post is about explaining the various techniques you can use to handle imbalanced datasets.
1. Random Undersampling and Oversampling Source
A widely adopted and perhaps the most straightforward method for dealing with highly imbalanced datasets is called resampling. It consists of removing samples from the majority class (under-sampling) and/or adding more examples from the minority class (over-sampling).
Let us first create some example imbalanced data.
from sklearn.datasets import make_classification X, y = make_classification( n_classes=2, class_sep=1.5, weights=[0.9, 0.1], n_informative=3, n_redundant=1, flip_y=0, n_features=20, n_clusters_per_class=1, n_samples=100, random_state=10 ) X = pd.DataFrame(X) X[&amp;#39;target&amp;#39;] = y We can now do random oversampling and undersampling using:
num_0 = len(X[X[&amp;#39;target&amp;#39;]==0]) num_1 = len(X[X[&amp;#39;target&amp;#39;]==1]) print(num_0,num_1) # random undersample undersampled_data = pd.concat([ X[X[&amp;#39;target&amp;#39;]==0].sample(num_1) , X[X[&amp;#39;target&amp;#39;]==1] ]) print(len(undersampled_data)) # random oversample oversampled_data = pd.concat([ X[X[&amp;#39;target&amp;#39;]==0] , X[X[&amp;#39;target&amp;#39;]==1].sample(num_0, replace=True) ]) print(len(oversampled_data)) OUTPUT: 90 10 20 180  2. Undersampling and Oversampling using imbalanced-learn imbalanced-learn(imblearn) is a Python Package to tackle the curse of imbalanced datasets.
It provides a variety of methods to undersample and oversample.
a. Undersampling using Tomek Links: One of such methods it provides is called Tomek Links. Tomek links are pairs of examples of opposite classes in close vicinity.
In this algorithm, we end up removing the majority element from the Tomek link, which provides a better decision boundary for a classifier.
Source
from imblearn.under_sampling import TomekLinks tl = TomekLinks(return_indices=True, ratio=&amp;#39;majority&amp;#39;) X_tl, y_tl, id_tl = tl.fit_sample(X, y) b. Oversampling using SMOTE: In SMOTE (Synthetic Minority Oversampling Technique) we synthesize elements for the minority class, in the vicinity of already existing elements.
Source
from imblearn.over_sampling import SMOTE smote = SMOTE(ratio=&amp;#39;minority&amp;#39;) X_sm, y_sm = smote.fit_sample(X, y) There are a variety of other methods in the imblearn package for both undersampling(Cluster Centroids, NearMiss, etc.) and oversampling(ADASYN and bSMOTE) that you can check out.
3. Class weights in the models Most of the machine learning models provide a parameter called class_weights. For example, in a random forest classifier using, class_weights we can specify a higher weight for the minority class using a dictionary.
from sklearn.linear_model import LogisticRegression clf = LogisticRegression(class_weight={0:1,1:10}) But what happens exactly in the background?
In logistic Regression, we calculate loss per example using binary cross-entropy:
Loss = -ylog(p) - (1-y)log(1-p) In this particular form, we give equal weight to both the positive and the negative classes. When we set class_weight as class_weight = {0:1,1:20}, the classifier in the background tries to minimize:
NewLoss = -20ylog(p) - 1(1-y)log(1-p) So what happens exactly here?
 If our model gives a probability of 0.3 and we misclassify a positive example, the NewLoss acquires a value of -20log(0.3) = 10.45
 If our model gives a probability of 0.7 and we misclassify a negative example, the NewLoss acquires a value of -log(0.3) = 0.52
  That means we penalize our model around twenty times more when it misclassifies a positive minority example in this case.
How can we compute class_weights?
There is no one method to do this, and this should be constructed as a hyperparameter search problem for your particular problem.
But if you want to get class_weights using the distribution of the y variable, you can use the following nifty utility from sklearn.
from sklearn.utils.class_weight import compute_class_weight class_weights = compute_class_weight(&amp;#39;balanced&amp;#39;, np.unique(y), y) 4. Change your Evaluation Metric Choosing the right evaluation metric is pretty essential whenever we work with imbalanced datasets. Generally, in such cases, the F1 Score is what I want as my evaluation metric.
The F1 score is a number between 0 and 1 and is the harmonic mean of precision and recall.
So how does it help?
Let us start with a binary prediction problem. We are predicting if an asteroid will hit the earth or not.
So we create a model that predicts “No” for the whole training set.
What is the accuracy(Normally the most used evaluation metric)?
It is more than 99%, and so according to accuracy, this model is pretty good, but it is worthless.
Now, what is the F1 score?
Our precision here is 0. What is the recall of our positive class? It is zero. And hence the F1 score is also 0.
And thus we get to know that the classifier that has an accuracy of 99% is worthless for our case. And hence it solves our problem.
Simply stated the F1 score sort of maintains a balance between the precision and recall for your classifier. If your precision is low, the F1 is low, and if the recall is low again, your F1 score is low.
 If you are a police inspector and you want to catch criminals, you want to be sure that the person you catch is a criminal (Precision) and you also want to capture as many criminals (Recall) as possible. The F1 score manages this tradeoff.
 How to Use? You can calculate the F1 score for binary prediction problems using:
from sklearn.metrics import f1_score y_true = [0, 1, 1, 0, 1, 1] y_pred = [0, 0, 1, 0, 0, 1] f1_score(y_true, y_pred) This is one of the functions which I use to get the best threshold for maximizing F1 score for binary predictions. The below function iterates through possible threshold values to find the one that gives the best F1 score.
# y_pred is an array of predictions def bestThresshold(y_true,y_pred): best_thresh = None best_score = 0 for thresh in np.arange(0.1, 0.501, 0.01): score = f1_score(y_true, np.array(y_pred)&amp;gt;thresh) if score &amp;gt; best_score: best_thresh = thresh best_score = score return best_score , best_thresh 5. Miscellaneous Various other methods might work depending on your use case and the problem you are trying to solve:
a) Collect more Data This is a definite thing you should try if you can. Getting more data with more positive examples is going to help your models get a more varied perspective of both the majority and minority classes.
b) Treat the problem as anomaly detection You might want to treat your classification problem as an anomaly detection problem.
Anomaly detection is the identification of rare items, events or observations which raise suspicions by differing significantly from the majority of the data
You can use Isolation forests or autoencoders for anomaly detection.
c) Model-based Some models are particularly suited for imbalanced datasets.
For example, in boosting models, we give more weights to the cases that get misclassified in each tree iteration.
Conclusion There is no one size fits all when working with imbalanced datasets. You will have to try multiple things based on your problem.
In this post, I talked about the usual suspects that come to my mind whenever I face such a problem.
A suggestion would be to try using all of the above approaches and try to see whatever works best for your use case.
If you want to learn more about imbalanced datasets and the problems they pose, I would like to call out this excellent course by Andrew Ng. This was the one that got me started. Do check it out.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog.
Also, a small disclaimer — There might be some affiliate links in this post to relevant resources, as sharing knowledge is never a bad idea.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>How to write Web apps using simple Python for Data Scientists?</title>
      <link>https://mlwhiz.com/blog/2019/12/07/streamlit/</link>
      <pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/12/07/streamlit/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/streamlit/main.jpeg"></media:content>
      

      
      <description>A Machine Learning project is never really complete if we don’t have a good way to showcase it.
While in the past, a well-made visualization or a small PPT used to be enough for showcasing a data science project, with the advent of dashboarding tools like RShiny and Dash, a good data scientist needs to have a fair bit of knowledge of web frameworks to get along.
And Web frameworks are hard to learn.</description>

      <content:encoded>  
        
        <![CDATA[  A Machine Learning project is never really complete if we don’t have a good way to showcase it.
While in the past, a well-made visualization or a small PPT used to be enough for showcasing a data science project, with the advent of dashboarding tools like RShiny and Dash, a good data scientist needs to have a fair bit of knowledge of web frameworks to get along.
And Web frameworks are hard to learn. I still get confused in all that HTML, CSS, and Javascript with all the hit and trials, for something seemingly simple to do.
Not to mention the many ways to do the same thing, making it confusing for us data science folks for whom web development is a secondary skill.
So, are we doomed to learn web frameworks? Or to call our developer friend for silly doubts in the middle of the night?
This is where StreamLit comes in and delivers on its promise to create web apps just using Python.
 Zen of Python: Simple is better than complex and Streamlit makes it dead simple to create apps.
 This post is about understanding how to create apps that support data science projects using Streamlit.
To understand more about the architecture and the thought process that led to streamlit, have a look at this excellent post by one of the original developers/founder Adrien Treuille.
Installation Installation is as simple as running the command:
pip install streamlit
To see if our installation is successful, we can just run:
streamlit hello
This should show you a screen that says:
You can go to the local URL: localhost:8501 in your browser to see a Streamlit app in action. The developers have provided some cool demos that you can play with. Do take your time and feel the power of the tool before coming back.
Streamlit Hello World Streamlit aims to make app development easy using simple Python.
So let us write a simple app to see if it delivers on that promise.
Here I start with a simple app which we will call the Hello World of streamlit. Just paste the code given below in a file named helloworld.py
import streamlit as st x = st.slider(&amp;#39;x&amp;#39;) st.write(x, &amp;#39;squared is&amp;#39;, x * x) And, on the terminal run:
streamlit run helloworld.py And voila, you should be able to see a simple app in action in your browser at localhost:8501 that allows you to move a slider and gives the result.
It was pretty easy. In the above app, we used two features from Streamlit:
 the st.slider widget that we can slide to change the output of the web app.
 and the versatile st.write command. I am amazed at how it can write anything from charts, dataframes, and simple text. More on this later.
  Important: Remember that every time we change the widget value, the whole app runs from top to bottom.
Streamlit Widgets Widgets provide us a way to control our app. The best place to read about the widgets is the API reference documentation itself but I will describe some most prominent ones that you might end up using.
1. Slider streamlit.slider(label, min_value=None, max_value=None, value=None, step=None, format=None) We already saw st.slider in action above. It can be used with min_value,max_value, and step for getting inputs in a range.
2. Text Input The simplest way to get user input be it some URL input or some text input for sentiment analysis. It just needs a single label for naming the textbox.
import streamlit as st url = st.text_input(&amp;#39;Enter URL&amp;#39;) st.write(&amp;#39;The Entered URL is&amp;#39;, url) This is how the app looks:
Tip: You can just change the file helloworld.py and refresh the browser. The way I work is to open and change helloworld.py in sublime text and see the changes in the browser side by side.
3. Checkbox One use case for checkboxes is to hide or show/hide a specific section in an app. Another could be setting up a boolean value in the parameters for a function.st.checkbox() takes a single argument, which is the widget label. In this app, the checkbox is used to toggle a conditional statement.
import streamlit as st import pandas as pd import numpy as np df = pd.read_csv(&amp;#34;football_data.csv&amp;#34;) if st.checkbox(&amp;#39;Show dataframe&amp;#39;): st.write(df) 4. SelectBox We can use st.selectbox to choose from a series or a list. Normally a use case is to use it as a simple dropdown to select values from a list.
import streamlit as st import pandas as pd import numpy as np df = pd.read_csv(&amp;#34;football_data.csv&amp;#34;) option = st.selectbox( &amp;#39;Which Club do you like best?&amp;#39;, df[&amp;#39;Club&amp;#39;].unique()) st.write(&amp;#39;You selected:&amp;#39;, option) 5. MultiSelect We can also use multiple values from a dropdown. Here we use st.multiselect to get multiple values as a list in the variable options
import streamlit as st import pandas as pd import numpy as np df = pd.read_csv(&amp;#34;football_data.csv&amp;#34;) options = st.multiselect( &amp;#39;What are your favorite clubs?&amp;#39;, df[&amp;#39;Club&amp;#39;].unique()) st.write(&amp;#39;You selected:&amp;#39;, options) Creating Our Simple App Step by Step So much for understanding the important widgets. Now, we are going to create a simple app using multiple widgets at once.
To start simple, we will try to visualize our football data using streamlit. It is pretty much simple to do this with the help of the above widgets.
import streamlit as st import pandas as pd import numpy as np df = pd.read_csv(&amp;#34;football_data.csv&amp;#34;) clubs = st.multiselect(&amp;#39;Show Player for clubs?&amp;#39;, df[&amp;#39;Club&amp;#39;].unique()) nationalities = st.multiselect(&amp;#39;Show Player from Nationalities?&amp;#39;, df[&amp;#39;Nationality&amp;#39;].unique()) # Filter dataframe new_df = df[(df[&amp;#39;Club&amp;#39;].isin(clubs)) &amp;amp; (df[&amp;#39;Nationality&amp;#39;].isin(nationalities))] # write dataframe to screen st.write(new_df) Our simple app looks like:
That was easy. But it seems pretty basic right now. Can we add some charts?
Streamlit currently supports many libraries for plotting.Plotly, Bokeh, Matplotlib, Altair, and Vega charts being some of them. Plotly Express also works, although they didn’t specify it in the docs. It also has some inbuilt chart types that are “native” to Streamlit, like st.line_chart and st.area_chart.
We will work with plotly_express here. Here is the code for our simple app. We just used four calls to streamlit. Rest is all simple python.
import streamlit as st import pandas as pd import numpy as np import plotly_express as px df = pd.read_csv(&amp;#34;football_data.csv&amp;#34;) clubs = st.multiselect(&amp;#39;Show Player for clubs?&amp;#39;, df[&amp;#39;Club&amp;#39;].unique()) nationalities = st.multiselect(&amp;#39;Show Player from Nationalities?&amp;#39;, df[&amp;#39;Nationality&amp;#39;].unique()) new_df = df[(df[&amp;#39;Club&amp;#39;].isin(clubs)) &amp;amp; (df[&amp;#39;Nationality&amp;#39;].isin(nationalities))] st.write(new_df) # create figure using plotly express fig = px.scatter(new_df, x =&amp;#39;Overall&amp;#39;,y=&amp;#39;Age&amp;#39;,color=&amp;#39;Name&amp;#39;) # Plot! st.plotly_chart(fig) Improvements In the start we said that each time we change any widget, the whole app runs from start to end. This is not feasible when we create apps that will serve deep learning models or complicated machine learning models. Streamlit covers us in this aspect by introducing Caching.
1. Caching In our simple app. We read the pandas dataframe again and again whenever a value changes. While it works for the small data we have, it will not work for big data or when we have to do a lot of processing on the data. Let us use caching using the st.cache decorator function in streamlit like below.
import streamlit as st import pandas as pd import numpy as np import plotly_express as px df = st.cache(pd.read_csv)(&amp;#34;football_data.csv&amp;#34;) Or for more complex and time taking functions that need to run only once(think loading big Deep Learning models), using:
@st.cache def complex_func(a,b): DO SOMETHING COMPLEX # Won&amp;#39;t run again and again. complex_func(a,b) When we mark a function with Streamlit’s cache decorator, whenever the function is called streamlit checks the input parameters that you called the function with.
If this is the first time Streamlit has seen these params, it runs the function and stores the result in a local cache.
When the function is called the next time, if those params have not changed, Streamlit knows it can skip executing the function altogether. It just uses the results from the cache.
2. Sidebar For a cleaner look based on your preference, you might want to move your widgets into a sidebar, something like Rshiny dashboards. This is pretty simple. Just add st.sidebar in your widget’s code.
import streamlit as st import pandas as pd import numpy as np import plotly_express as px df = st.cache(pd.read_csv)(&amp;#34;football_data.csv&amp;#34;) clubs = st.sidebar.multiselect(&amp;#39;Show Player for clubs?&amp;#39;, df[&amp;#39;Club&amp;#39;].unique()) nationalities = st.sidebar.multiselect(&amp;#39;Show Player from Nationalities?&amp;#39;, df[&amp;#39;Nationality&amp;#39;].unique()) new_df = df[(df[&amp;#39;Club&amp;#39;].isin(clubs)) &amp;amp; (df[&amp;#39;Nationality&amp;#39;].isin(nationalities))] st.write(new_df) # Create distplot with custom bin_size fig = px.scatter(new_df, x =&amp;#39;Overall&amp;#39;,y=&amp;#39;Age&amp;#39;,color=&amp;#39;Name&amp;#39;) # Plot! st.plotly_chart(fig) 3. Markdown? I love writing in Markdown. I find it less verbose than HTML and much more suited for data science work. So, can we use Markdown with the streamlit app?
Yes, we can. There are a couple of ways to do this. In my view, the best one is to use Magic commands. Magic commands allow you to write markdown as easily as comments. You could also have used the command st.markdown
import streamlit as st import pandas as pd import numpy as np import plotly_express as px &amp;#39;&amp;#39;&amp;#39; # Club and Nationality App This very simple webapp allows you to select and visualize players from certain clubs and certain nationalities. &amp;#39;&amp;#39;&amp;#39; df = st.cache(pd.read_csv)(&amp;#34;football_data.csv&amp;#34;) clubs = st.sidebar.multiselect(&amp;#39;Show Player for clubs?&amp;#39;, df[&amp;#39;Club&amp;#39;].unique()) nationalities = st.sidebar.multiselect(&amp;#39;Show Player from Nationalities?&amp;#39;, df[&amp;#39;Nationality&amp;#39;].unique()) new_df = df[(df[&amp;#39;Club&amp;#39;].isin(clubs)) &amp;amp; (df[&amp;#39;Nationality&amp;#39;].isin(nationalities))] st.write(new_df) # Create distplot with custom bin_size fig = px.scatter(new_df, x =&amp;#39;Overall&amp;#39;,y=&amp;#39;Age&amp;#39;,color=&amp;#39;Name&amp;#39;) &amp;#39;&amp;#39;&amp;#39; ### Here is a simple chart between player age and overall &amp;#39;&amp;#39;&amp;#39; st.plotly_chart(fig) Conclusion Streamlit has democratized the whole process to create apps, and I couldn’t recommend it more.
In this post, we created a simple web app. But the possibilities are endless. To give an example here is face GAN from the streamlit site. And it works by just using the same guiding ideas of widgets and caching.
I love the default colors and styles that the developers have used, and I found it much more comfortable than using Dash, which I was using until now for my demos. You can also include audio and video in your streamlit apps.
On top of that, Streamlit is a free and open-source rather than a proprietary web app that just works out of the box.
In the past, I had to reach out to my developer friends for any single change in a demo or presentation; now it is relatively trivial to do that.
 I aim to use it more in my workflow from now on, and considering the capabilities it provides without all the hard work, I think you should too.
 I don’t have an idea if it will perform well in a production environment yet, but its a boon for the small proof of concept projects and demos. I aim to use it more in my workflow from now on, and considering the capabilities it provides without all the hard work, I think you should too.
You can find the full code for the final app here.
If you want to learn about the best strategies for creating Visualizations, I would like to call out an excellent course about Data Visualization and applied plotting from the University of Michigan, which is a part of a pretty good Data Science Specialization with Python in itself. Do check it out.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog.
Also, a small disclaimer — There might be some affiliate links in this post to relevant resources, as sharing knowledge is never a bad idea.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Demystifying Object Detection and Instance Segmentation for Data Scientists</title>
      <link>https://mlwhiz.com/blog/2019/12/05/od/</link>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/12/05/od/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/od/main.jpeg"></media:content>
      

      
      <description>I like deep learning a lot but Object Detection is something that doesn’t come easily to me.
And Object detection is important and does have its uses. Most common of them being self-driving cars, medical imaging and face detection.
It is definitely a hard problem to solve. And with so many moving parts and new concepts introduced over the long history of this problem, it becomes even harder to understand.</description>

      <content:encoded>  
        
        <![CDATA[  I like deep learning a lot but Object Detection is something that doesn’t come easily to me.
And Object detection is important and does have its uses. Most common of them being self-driving cars, medical imaging and face detection.
It is definitely a hard problem to solve. And with so many moving parts and new concepts introduced over the long history of this problem, it becomes even harder to understand.
This post is about distilling that history into an easy explanation and explaining the gory details for Object Detection and Instance Segmentation.
Introduction We all know about the image classification problem. Given an image can you find out the class the image belongs to?
We can solve any new image classification problem with ConvNets and Transfer Learning using pre-trained nets.
 ConvNet as fixed feature extractor. Take a ConvNet pretrained on ImageNet, remove the last fully-connected layer (this layer’s outputs are the 1000 class scores for a different task like ImageNet), then treat the rest of the ConvNet as a fixed feature extractor for the new dataset. In an AlexNet, this would compute a 4096-D vector for every image that contains the activations of the hidden layer immediately before the classifier. We call these features CNN codes. It is important for performance that these codes are ReLUd (i.e. thresholded at zero) if they were also thresholded during the training of the ConvNet on ImageNet (as is usually the case). Once you extract the 4096-D codes for all images, train a linear classifier (e.g. Linear SVM or Softmax classifier) for the new dataset.
 But there are lots of other interesting problems in the Image domain:
Source
These problems can be divided into 4 major buckets. In the next few lines I would try to explain each of these problems concisely before we take a deeper dive:
 Semantic Segmentation: Given an image, can we classify each pixel as belonging to a particular class?
 Classification&#43;Localization: We were able to classify an image as a cat. Great. Can we also get the location of the said cat in that image by drawing a bounding box around the cat? Here we assume that there is a fixed number of objects(commonly 1) in the image.
 Object Detection: A More general case of the Classification&#43;Localization problem. In a real-world setting, we don’t know how many objects are in the image beforehand. So can we detect all the objects in the image and draw bounding boxes around them?
 Instance Segmentation: Can we create masks for each individual object in the image? It is different from semantic segmentation. How? If you look in the 4th image on the top, we won’t be able to distinguish between the two dogs using semantic segmentation procedure as it would sort of merge both the dogs together.
  As you can see all the problems have something of a similar flavour but a little different than each other. In this post, I will focus mainly on Object Detection and Instance segmentation as they are the most interesting.I will go through the 4 most famous techniques for object detection and how they improved with time and new ideas.
Classification&#43;Localization So lets first try to understand how we can solve the problem when we have a single object in the image. How to solve the Classification&#43;Localization case.
 💡 Treat localization as a regression problem!
 Input Data Lets first talk about what sort of data such sort of model expects. Normally in an image classification setting, we used to have data in the form (X,y) where X is the image and y used to be the class label.
In the Classification&#43;Localization setting, we will have data normally in the form (X,y), where X is still the image and y is an array containing (class_label, x,y,w,h) where,
x = bounding box top left corner x-coordinate
y = bounding box top left corner y-coordinate
w = width of the bounding box in pixels
h = height of the bounding box in pixels
Model So in this setting, we create a multi-output model which takes an image as the input and has (n_labels &#43; 4) output nodes. n_labels nodes for each of the output class and 4 nodes that give the predictions for (x,y,w,h).
Loss Normally the loss is a weighted sum of the Softmax Loss(from the Classification Problem) and the regression L2 loss(from the bounding box coordinates).
 Loss = alpha*Softmax_Loss &#43; (1-alpha)*L2_Loss
 Since these two losses would be on a different scale, the alpha hyper-parameter is something that needs to be tuned.
There is one thing I would like to note here. We are trying to do object localization task but we still have our convnets in place here. We are just adding one more output layer to also predict the coordinates of the bounding box and tweaking our loss function.
And herein lies the essence of the whole Deep Learning framework — Stack layers on top of each other, reuse components to create better models, and create architectures to solve your own problem. And that is what we are going to see a lot going forward.
Object Detection So how does this idea of localization using regression get mapped to Object Detection? It doesn’t.
We don’t have a fixed number of objects. So we can’t have 4 outputs denoting, the bounding box coordinates.
One naive idea could be to apply CNN to many different crops of the image. CNN classifies each crop as an object class or background class. This is intractable. There could be a lot of such crops that you can create.
Region Proposals: So, if just there was just a method(Normally called Region Proposal Network)which could find some smaller number of cropped regions for us automatically, we could just run our convnet on those regions and be done with object detection. And that is the basic idea behind RCNN-The first major success in object detection.
And that is what selective search (Uijlings et al, “Selective Search for Object Recognition”, IJCV 2013) provided.
So what are Region Proposals?
 Find “blobby” image regions that are likely to contain objects
 Relatively fast to run; e.g. Selective Search gives 2000 region proposals in a few seconds on CPU
  So, how exactly the region proposals are made?
Selective Search for Object Recognition: This paper finds regions in two steps.
First, we start with a set of some initial regions using Efficient GraphBased Image Segmentation.
 Graph-based image segmentation techniques generally represent the problem in terms of a graph G = (V, E) where each node v ∈ V corresponds to a pixel in the image, and the edges in E connect certain pairs of neighboring pixels.
 In this paper they take an approach:
 Each edge (vi , vj )∈ E has a corresponding weight w((vi , vj )), which is a non-negative measure of the similarity between neighboring elements vi and vj . In the graph-based approach, a segmentation S is a partition of V into components such that each component (or region) C ∈ S corresponds to a connected component in a graph.
 Put simply, they use graph-based methods to find connected components in an image and the edges are made on some measure of similarity between pixels.
As you can see if we create bounding boxes around these masks we will be losing a lot of regions. We want to have the whole baseball player in a single bounding box/frame. We need to somehow group these initial regions. And that is the second step.
For that, the authors of Selective Search for Object Recognition apply the Hierarchical Grouping algorithm to these initial regions. In this algorithm, they merge most similar regions together based on different notions of similarity based on colour, texture, size and fill to provide us with much better region proposals.
1. R-CNN So now we have our region proposals. How do we exactly use them in R-CNN?
 Object detection system overview. Our system (1) takes an input image, (2) extracts around 2000 bottom-up region proposals, (3) computes features for each proposal using a large convolutional neural network (CNN), and then (4) classifies each region using class-specific linear SVM.
 Along with this, the authors have also used a class-specific bounding box regressor, that takes:
Input : (Px, Py, Ph, Pw) — the location of the proposed region.
Target: (Gx, Gy, Gh, Gw) — Ground truth labels for the region.
The goal is to learn a transformation that maps the proposed region(P) to the Ground truth box(G)
Training R-CNN What is the input to an RCNN?
So we have got an image, Region Proposals from the RPN strategy and the ground truths of the labels (labels, ground truth boxes)
Next, we treat all region proposals with ≥ 0.5 IoU(Intersection over Union) overlap with a ground-truth box as a positive training example for that box’s class and the rest as negative. We train class-specific SVM’s
So every region proposal becomes a training example. and the convnet gives a feature vector for that region proposal. We can then train our n-SVMs using the class-specific data.
Test Time R-CNN At test time we predict detection boxes using class-specific SVMs. We will be getting a lot of overlapping detection boxes at the time of testing. Thus, non-maximum suppression is an integral part of the object detection pipeline.
First, it sorts all detection boxes on the basis of their scores. The detection box M with the maximum score is selected and all other detection boxes with a significant overlap (using a pre-defined threshold) with M are suppressed.
This process is recursively applied on all the remaining boxes until we are left with good bounding boxes only.
Problems with RCNN:  Training is slow.
 Inference (detection) is slow. 47s / image with VGG16 — Since the Convnet needs to be run many times.
  Need for speed. So Fast R-CNN.
2. Fast R-CNN  💡 So the next idea from the same authors: Why not create convolution map of input image and then just select the regions from that convolutional map? Do we really need to run so many convnets? What we can do is run just a single convnet and then apply region proposal crops on the features calculated by the convnet and use a simple SVM/classifier to classify those crops.
 Something like:
 From Paper: Fig. illustrates the Fast R-CNN architecture. A Fast R-CNN network takes as input an entire image and a set of object proposals. The network first processes the whole image with several convolutional (conv) and max pooling layers to produce a conv feature map. Then, for each object proposal a region of interest (RoI) pooling layer extracts a fixed-length feature vector from the feature map. Each feature vector is fed into a sequence of fully connected (fc) layers that finally branch into two sibling output layers: one that produces softmax probability estimates over K object classes plus a catch-all “background” class and another layer that outputs four real-valued numbers for each of the K object classes. Each set of 4 values encodes refined bounding-box positions for one of the K classes.
 💡Idea So the basic idea is to have to run the convolution only once in the image rather than so many convolution networks in R-CNN. Then we can map the ROI proposals using some method and filter the last convolution layer and just run a final classifier on that.
This idea depends a little upon the architecture of the model that gets used too.
So the architecture that the authors have proposed is:
 We experiment with three pre-trained ImageNet [4] networks, each with five max pooling layers and between five and thirteen conv layers (see Section 4.1 for network details). When a pre-trained network initializes a Fast R-CNN network, it undergoes three transformations. First, the last max pooling layer is replaced by a RoI pooling layer that is configured by setting H and W to be compatible with the net’s first fully connected layer (e.g., H = W = 7 for VGG16). Second, the network’s last fully connected layer and softmax (which were trained for 1000-way ImageNet classification) are replaced with the two sibling layers described earlier (a fully connected layer and softmax over K &#43; 1 categories and category-specific bounding-box regressors). Third, the network is modified to take two data inputs: a list of images and a list of RoIs in those images.
 Don’t worry if you don’t understand the above. This obviously is a little confusing, so let us break this down. But for that, we need to see VGG16 architecture first.
The last pooling layer is 7x7x512. This is the layer the network authors intend to replace by the ROI pooling layers. This pooling layer has got as input the location of the region proposal(xmin_roi,ymin_roi,h_roi,w_roi) and the previous feature map(14x14x512).
Now the location of ROI coordinates is in the units of the input image i.e. 224x224 pixels. But the layer on which we have to apply the ROI pooling operation is 14x14x512.
As we are using VGG, we have transformed the image (224 x 224 x 3) into (14 x 14 x 512) — i.e. the height and width are divided by 16. We can map ROIs coordinates onto the feature map just by dividing them by 16.
 In its depth, the convolutional feature map has encoded all the information for the image while maintaining the location of the “things” it has encoded relative to the original image. For example, if there was a red square on the top left of the image and the convolutional layers activate for it, then the information for that red square would still be on the top left of the convolutional feature map.
 What is ROI pooling?
Remember that the final classifier runs for each crop. And so each crop needs to be of the same size. And that is what ROI Pooling does.
In the above image, our region proposal is (0,3,5,7) in x,y,w,h format.
We divide that area into 4 regions since we want to have an ROI pooling layer of 2x2. We divide the whole area into buckets by rounding 5&amp;frasl;2 and 7&amp;frasl;2 and then just do a max-pool.
How do you do ROI-Pooling on Areas smaller than the target size? if region proposal size is 5x5 and ROI pooling layer of size 7x7. If this happens, we resize to 35x35 just by copying 7 times each cell and then max-pooling back to 7x7.
After replacing the pooling layer, the authors also replaced the 1000 layer imagenet classification layer by a fully connected layer and softmax over K &#43; 1 categories(&#43;1 for Background) and category-specific bounding-box regressors.
Training Fast-RCNN What is the input to a Fast- RCNN?
Pretty much similar to R-CNN: So we have got an image, Region Proposals from the RPN strategy and the ground truths of the labels (labels, ground truth boxes)
Next, we treat all region proposals with ≥ 0.5 IoU(Intersection over Union) overlap with a ground-truth box as a positive training example for that box’s class and the rest as negative. This time we have a dense layer on top, and we use multi-task loss.
So every ROI becomes a training example. The main difference is that there is a concept of multi-task loss:
A Fast R-CNN network has two sibling output layers.
The first outputs a discrete probability distribution (per RoI), p = (p0, &amp;hellip; , pK), over K &#43; 1 categories. As usual, p is computed by a softmax over the K&#43;1 outputs of a fully connected layer.
The second sibling layer outputs bounding-box regression offsets, t= (tx, ty, tw, th), for each of the K object classes. Each training RoI is labelled with a ground-truth class u and a ground-truth bounding-box regression target v. We use a multi-task loss L on each labelled RoI to jointly train for classification and bounding-box regression
Where Lcls is the softmax classification loss and Lloc is the regression loss. u=0 is for BG class and hence we add to loss only when we have a boundary box for any of the other class.
Problem: Region proposals are still taking up most of the time. Can we reduce the time taken for Region proposals?
3. Faster-RCNN The next question that got asked was: Can the network itself do region proposals?
 The intuition is that: With FastRCNN we’re already computing an Activation Map in the CNN, why not run the Activation Map through a few more layers to find the interesting regions, and then finish off the forward pass by predicting the classes &#43; bbox coordinates?
 How does the Region Proposal Network work? One of the main ideas in the paper is the idea of Anchors. Anchors are fixed bounding boxes that are placed throughout the image with different sizes and ratios that are going to be used for reference when first predicting object locations.
So, first of all, we define anchor centres on the image.
The anchor centres are separated by 16 px in case of VGG16 network as the final convolution layer of (14x14x512) subsamples the image by a factor of 16(224&amp;frasl;14).
This is how anchors look like:
 So we start with some predefined regions we think our objects could be with Anchors.
 Our Region Proposal Network(RPN) classifies which regions have the object and the offset of the object bounding box. Training is done using the same logic. 1 if IOU for anchor with bounding box&amp;gt;0.5 0 otherwise.
 Non-Maximum suppression to reduce region proposals
 Fast RCNN detection network on top of proposals
  Faster-RCNN Loss The whole network is then jointly trained with 4 losses:
 RPN classify object / not object
 RPN regress box coordinates offset
 Final classification score (object classes)
 Final box coordinates offset
  Performance Instance Segmentation Now comes the most interesting part — Instance segmentation. Can we create masks for each individual object in the image? Specifically something like:
Mask-RCNN The same authors come to rescue again. The basic idea is to add another output layer that predicts the mask. And to use ROIAlign instead of ROIPooling.
Source: Everything remains the same. Just one more output layer to predict masks and ROI pooling replaced by ROIAlign
Mask R-CNN adopts the same two-stage procedure, with an identical first stage (RPN).
In the second stage, in parallel to predicting the class and box offset, Mask R-CNN also outputs a binary mask for each RoI.
ROIAlign vs ROIPooling In ROI pooling we lose the exact location-based information. See how we arbitrarily divided our region into 4 different sized boxes. For a classification task, it works well.
But for providing masks on a pixel level, we don’t want to lose this information. And hence we don’t quantize the pooling layer and use bilinear interpolation to find out values that properly aligns the extracted features with the input. See how 0.8 differs from 0.88
Source
Training During training, we define a multi-task loss on each sampled RoI as
L = Lcls &#43; Lbox &#43; Lmask
The classification loss Lcls and bounding-box loss Lbox are identical as in Faster R-CNN. The mask branch has a K × m × m — dimensional output for each RoI, which encodes K binary masks of resolution m × m, one for each of the K classes.
To this, we apply a per-pixel sigmoid and define Lmask as the average binary cross-entropy loss. For an RoI associated with ground-truth class k, Lmask is only defined on the kth mask (other mask outputs do not contribute to the loss).
Mask Prediction The mask layer is K × m × m dimensional where K is the number of classes. The m×m floating-number mask output is resized to the RoI size and binarized at a threshold of 0.5 to get final masks.
Conclusion Congrats for reaching the end. This post was a long one.
In this post, I talked about some of the most important advancements in the field of Object detection and Instance segmentation and tried to explain them as easily as I can.
This is my own understanding of these papers with inputs from many blogs and slides on the internet and I sincerely thank the creators. Let me know if you find something wrong with my understanding.
Object detection is a vast field and there are a lot of other methods that dominate this field. Some of them being U-net, SSD and YOLO.
There is no dearth of resources to learn them so I would encourage you to go and take a look at them. You have got a solid backing/understanding now.
In this post, I didn’t write about coding and implementation. So stay tuned for my next post in which we will train a Mask RCNN model for a custom dataset.
If you want to know more about various Object Detection techniques, motion estimation, object tracking in video etc., I would like to recommend this awesome course on Deep Learning in Computer Vision in the Advanced machine learning specialization.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog.
Also, a small disclaimer — There might be some affiliate links in this post to relevant resources as sharing knowledge is never a bad idea.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>The Simple Math behind 3 Decision Tree Splitting criterions</title>
      <link>https://mlwhiz.com/blog/2019/11/12/dtsplits/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/11/12/dtsplits/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/dtsplits/main.png"></media:content>
      

      
      <description>Decision Trees are great and are useful for a variety of tasks. They form the backbone of most of the best performing models in the industry like XGboost and Lightgbm.
But how do they work exactly? In fact, this is one of the most asked questions in ML/DS interviews.
We generally know they work in a stepwise manner and have a tree structure where we split a node using some feature on some criterion.</description>

      <content:encoded>  
        
        <![CDATA[  Decision Trees are great and are useful for a variety of tasks. They form the backbone of most of the best performing models in the industry like XGboost and Lightgbm.
But how do they work exactly? In fact, this is one of the most asked questions in ML/DS interviews.
We generally know they work in a stepwise manner and have a tree structure where we split a node using some feature on some criterion.
But how do these features get selected and how a particular threshold or value gets chosen for a feature?
In this post, I will talk about three of the main splitting criteria used in Decision trees and why they work. This is something that has been written about repeatedly but never really well enough.
1. Gini Impurity According to Wikipedia,
 Gini impurity is a measure of how often a randomly chosen element from the set would be incorrectly labeled if it was randomly labeled according to the distribution of labels in the subset.
 In simple terms, Gini impurity is the measure of impurity in a node. Its formula is:
where J is the number of classes present in the node and p is the distribution of the class in the node.
So to understand the formula a little better, let us talk specifically about the binary case where we have nodes with only two classes.
So in the below five examples of candidate nodes labelled A-E and with the distribution of positive and negative class shown, which is the ideal condition to be in?
I reckon you would say A or E and you are right. What is the worst situation to be in? C, I suppose as the data is precisely 50:50 in that node.
Now, this all looks good, intuitively. Gini Impurity gives us a way to quantify it.
Let us calculate the Gini impurity for all five nodes separately and check the values.
✅ Gini Impurity works as expected. Maximum for Node C and the minimum for both A and E. We need to choose the node with Minimum Gini Impurity.
We could also see the plot of Gini Impurity for the binary case to verify the above.
❓So how do we exactly use it in a Decision Tree?
Suppose, we have the UCI Heart Disease data. The “target” field refers to the presence of heart disease in the patient. It is 0 (no presence) or 1.
We now already have a measure in place(Gini Impurity) using which we can evaluate a split on a particular variable with a certain threshold(continuous) or value(categorical).
Categorical Variable Splits For simplicity, let us start with a categorical variable — sex.
If we split by Sex, our tree will look like below:
Notice that we use Sex=0 and Sex!=0 so that this generalises well to categories with multiple levels. Our root node has 165 &#43;ve examples and 138 -ve examples. And we get two child nodes when we split by sex.
We already know how to calculate the impurity for a node. So we calculate the impurity of the left child as well as the right child.
I_Left = 1 - (72/96)**2 - (24/96)**2 I_Right = 1 - (93/207)**2 - (114/207)**2 print(&amp;#34;Left Node Impurity:&amp;#34;,I_Left) print(&amp;#34;Right Node Impurity:&amp;#34;,I_Right) Left Node Impurity: 0.375 Right Node Impurity: 0.4948540222642302  We get two numbers here. We need to get a single number which provides the impurity of a single split. So what do we do? Should, we take an average? We can take an average, but what will happen if one node gets only one example and another node has all other examples?
To mitigate the above, we take a weighted average of the two impurities weighted by the number of examples in the individual node. In code:
gender_split_impurity = 96/(96&#43;207)*I_Left &#43; 207/(96&#43;207)*I_Right print(gender_split_impurity) 0.45688047065576126  Continuous Variable Splits We can split by a continuous variable too. Let us try to split using cholesterol feature in the dataset. We chose a threshold of 250 and created a tree.
I_Left = 1 - (58/126)**2 - (68/126)**2 I_Right = 1 - (107/177)**2 - (70/177)**2 print(&amp;#34;Left Node Impurity:&amp;#34;,I_Left) print(&amp;#34;Right Node Impurity:&amp;#34;,I_Right) Left Node Impurity: 0.49685059208868737 Right Node Impurity: 0.47815123368125373  Just by looking at both the impurities close to 0.5, we can infer that it is not a good split. Still, we calculate our weighted Gini impurity as before:
chol_split_impurity = 126/(126&#43;177)*I_Left &#43; 177/(126&#43;177)*I_Right print(chol_split_impurity) 0.48592720450414695  Since the chol_split_impurity&amp;gt;gender_split_impurity, we split based on Gender.
In reality, we evaluate a lot of different splits. With different threshold values for a continuous variable. And all the levels for categorical variables. And then choose the split which provides us with the lowest weighted impurity in the child nodes.
2. Entropy Another very popular way to split nodes in the decision tree is Entropy. Entropy is the measure of Randomness in the system. The formula for Entropy is:
where C is the number of classes present in the node and p is the distribution of the class in the node.
So again talking about the binary case we talked about before. What is the value of Entropy for all the 5 cases from A-E?
Entropy values work as expected. Maximum for Node C and the minimum for both A and E. We need to choose the node with Minimum Entropy.
We could also see the plot of Entropy for the binary case to verify the above.
So how do we exactly use Entropy in a Decision Tree?
We are using the Heartrate example as before. We now already have a measure in place(Entropy) using which we can evaluate a split on an individual variable with a certain threshold(continuous) or value(categorical).
Categorical Variable Splits For simplicity, let us start with a categorical variable — sex.
If we split by Sex, our tree will look like below:
If we split on Gender
We already know how to calculate the randomness for a node. So we calculate the randomness of the left child as well as the right child.
E_Left = -(72/96)*np.log2(72/96) - (24/96)*np.log2(24/96) E_Right = -(93/207)*np.log2(93/207) - (114/207)*np.log2(114/207) print(&amp;#34;Left Node Randomness:&amp;#34;,E_Left) print(&amp;#34;Right Node Randomness:&amp;#34;,E_Right) Left Node Randomness: 0.8112781244591328 Right Node Randomness: 0.992563136012236  We get two numbers here. We need to get a single number which provides the Randomness of a single split. So what do we do? We again take a weighted average where we weight by the number of examples in the individual node. In code:
gender_split_randomness = 96/(96&#43;207)*E_Left &#43; 207/(96&#43;207)*E_Right print(gender_split_randomness) 0.9351263006686785  Continuous Variable Splits Again as before, we can split by a continuous variable too. Let us try to split using cholesterol feature in the dataset. We chose a threshold of 250 and create a tree.
E_Left = -(58/126)*np.log2(58/126) - (68/126)*np.log2(68/126) E_Right = -(107/177)*np.log2(107/177) - (70/177)*np.log2(70/177) print(&amp;#34;Left Node Randomness:&amp;#34;,E_Left) print(&amp;#34;Right Node Randomness:&amp;#34;,E_Right) Left Node Randomness: 0.9954515828457715 Right Node Randomness: 0.9682452182690404  Just by looking at both the randomness close to 1, we can infer that it is not a good split. Still, we calculate our weighted Entropy as before:
chol_split_randomness = 126/(126&#43;177)*E_Left &#43; 177/(126&#43;177)*E_Right print(chol_split_randomness) 0.9795587560138196  Since the chol_split_randomness&amp;gt;gender_split_randomness, we split based on Gender. Precisely the same results we got from Gini.
3. Variance Gini Impurity and Entropy work pretty well for the classification scenario.
But what about regression?
In the case of regression, the most common split measure used is just the weighted variance of the nodes. It makes sense too: We want minimum variation in the nodes after the split.
We want a regression task for this. So, we have the data for 50 startups, and we want to predict Profit.
Categorical Variable Splits Let us try a split by a categorical variable ⇒State=Florida.
If we split by State=FL, our tree will look like below:
Overall Variance then is just the weighted sums of individual variances:
overall_variance = 16/(16&#43;34)*Var_Left &#43; 34/(16&#43;34)*Var_Right print(overall_variance) 1570582843  Continuous Variable Splits Again as before, we can split by a continuous variable too. Let us try to split using R&amp;amp;D spend feature in the dataset. We chose a threshold of 100000 and create a tree.
Splitting on R&amp;amp;D
Just by looking at this, we can see it is better than our previous split. So, we find the overall variance in this case:
overall_variance = 14/(14&#43;36)*419828105 &#43; 36/(14&#43;36)*774641406 print(overall_variance) 675293681.7199999  Since the overall_variance(R&amp;amp;D&amp;gt;=100000)&amp;lt; overall_variance(State==FL), we prefer a split based on R&amp;amp;D.
Continue Learning If you want to learn more about Data Science, I would like to call out this excellent course by Andrew Ng. This was the one that got me started. Do check it out.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog.
Also, a small disclaimer — There might be some affiliate links in this post to relevant resources as sharing knowledge is never a bad idea.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>P-value Explained Simply for Data Scientists</title>
      <link>https://mlwhiz.com/blog/2019/11/11/pval/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/11/11/pval/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/pval/main.png"></media:content>
      

      
      <description>Recently, I got asked about how to explain p-values in simple terms to a layperson. I found that it is hard to do that.
P-Values are always a headache to explain even to someone who knows about them let alone someone who doesn’t understand statistics.
I went to Wikipedia to find something and here is the definition: &amp;amp;gt; In statistical hypothesis testing, the p-value or probability value is, for a given statistical model, the probability that, when the null hypothesis is true, the statistical summary (such as the sample mean difference between two groups) would be equal to, or more extreme than, the actual observed results.</description>

      <content:encoded>  
        
        <![CDATA[  Recently, I got asked about how to explain p-values in simple terms to a layperson. I found that it is hard to do that.
P-Values are always a headache to explain even to someone who knows about them let alone someone who doesn’t understand statistics.
I went to Wikipedia to find something and here is the definition: &amp;gt; In statistical hypothesis testing, the p-value or probability value is, for a given statistical model, the probability that, when the null hypothesis is true, the statistical summary (such as the sample mean difference between two groups) would be equal to, or more extreme than, the actual observed results.
And my first thought was that might be they have written it like this so that nobody could understand it. The problem here lies with a lot of terminology and language that statisticians enjoy to employ.
This post is about explaining p-values in an easy to understand way without all that pretentiousness of statisticians.
A Real-Life problem In our lives, we certainly believe one thing over another.
From the obvious ones like — The earth is round. Or that the earth revolves around the Sun. The Sun rises in the east.
To the more non-obvious ones with varying level of uncertainties - Exercising reduces weight? Or that Trump is going to win/lose in his next election? Or that a particular drug works? Or that sleeping for 8 hours is good for your health?
While the former category is facts, the latter category differs from person to person.
So, what if I come to you and say that exercising does not affect weight?
All the gym-goers may call me not so kind words. But is there a mathematical and logical structure in which someone can disprove me?
This brings us to the notion of Hypothesis testing.
Hypothesis Testing So the statement I made in the above example — exercising does not affect weight. This statement is my Hypothesis. Let’s call it Null hypothesisfor now. For now, it is the status quo as in we consider it to be true.
The Alternative Hypothesis from people who swear by exercising is — exercising does reduce weight.
But how do we test these hypotheses? We collect Data. We collect weight loss data for a sample of 10 people who regularly exercise for over 3 months.
WeightLoss Sample Mean = 2 kg Sample Standard Deviation = 1 kg  Does this prove that exercise does reduce weight? From a cursory look, it sort of looks like that exercising does have its benefits as people who exercise have lost on an average 2 kgs.
But you will find that such clear cut findings are not always the case when you do hypothesis testing. What if the weight loss mean for people who do exercise was just 0.2 kg. Would you still be so sure that exercise does reduce weight?
So how can we quantify this and put some maths behind it all?
Let us set up our experiment to do this.
Experiment Let’s go back to our Hypotheses again:
Hº: Exercising does not affect weight. Or equivalently 𝜇 = 0
Hᴬ: Exercise does reduce weight. Or equivalently 𝜇&amp;gt;0
We see our data sample of 10 people, and we try to find out the value of
Observed Mean(Weightloss of People who exercise) = 2 kg
Observed Sample Standard Deviation = 1 kg
Now a good question to ask ourselves is — Assuming that the null hypothesis is true, what is the probability of observing a sample mean of 2 kg or more extreme than 2 kg?
Assuming we can calculate this — If this probability value is meagre (lesser than a threshold value), we reject our null hypothesis. And otherwise, we fail to reject our null hypothesis. Why fail to reject and not accept? I will answer this later.
This probability value is actually the p-value. Simply, it is just the probability of observing what we observed or extreme results if we assume our null hypothesis to be true.
The statisticians call the threshold as the significance level(𝜶), and in most of the cases, 𝜶 is taken to be 0.05.
So how do we answer: Assuming that the null hypothesis is true, what is the probability of getting a value of 2 kg or more than 2 kg?
And here comes our favourite distribution, Normal distribution in the picture.
The Normal Distribution We create a Sampling Distribution of the mean of the WeightLoss samples assuming our Null hypothesis is True.
Central Limit Theorem: The central limit theorem simply states that if you have a population with mean μ and standard deviation σ, and take random samples from the population, then the distribution of the sample means will be approximately normally distributed with mean as the population mean and standard deviation σ/√n. Where σ is the standard deviation of the sample and n is the number of observations in the sample.
Now we already know the mean of our population as given by our null hypothesis. So, we use that and have a normal distribution whose mean is 0. And whose standard deviation is given by 1/√10
This is, in fact, the distribution of the mean of the samples from the population. We observed a particular value of the mean that is Xobserved = 2 kg.
Now we can use some statistical software to find the area under this particular curve:
from scipy.stats import norm import numpy as np p = 1-norm.cdf(2, loc=0, scale = 1/np.sqrt(10)) print(p) 1.269814253745949e-10  As such, this is a very small probability p-value ( less than the significance level of 0.05) for the mean of a sample to take a value of 2 or more.
And so we can reject our Null hypothesis. And we can call our results statistically significant as in they don’t just occur due to mere chance.
The Z statistic You might have heard about the Z statistic too when you have read about Hypothesis testing. Again as I said, terminology.
That is the extension of basically the same above idea where we use a standard normal with mean 0 and variance 1 as our sampling distribution after transforming our observed value x using:
This makes it easier to use statistical tables. In our running example, our z statistic is:
z = (2-0)/(1/np.sqrt(10)) print(z) 6.324555320336758  Just looking at the Z statistic of &amp;gt;6 should give you an idea that the observed value is at least six standard deviations away and so the p-value should be very less. We can still find the p-value using:
from scipy.stats import norm import numpy as np p = 1-norm.cdf(z, loc=0, scale=1) print(p) 1.269814253745949e-10  As you can see, we get the same answer using the Z statistic.
An Important Distinction So we said before that we reject our null hypothesis as in we got sufficient evidence to prove that our null hypothesis is false.
But what if the p-value was higher than the significance level. Then we say that we fail to reject the null hypothesis. Why don’t we say accept the null hypothesis?
The best intuitive example of this is using trial courts. In a trial court, the null hypothesis is that the accused is not guilty. Then we see some evidence to disprove the null hypothesis.
If we are not able to disprove the null hypotheses the judge doesn’t say that the accused hasn’t committed the crime. The judge only says that based on the given evidence, we are not able to convict the accused.
Another example to drive this point forward: Assuming that we are exploring life on an alien planet. And our null hypothesis(Hº) is that there is no life on the planet. We roam around a few miles for some time and look for people/aliens on that planet. If we see any alien, we can reject the null hypothesis in favour of the alternative.
But if we don’t see any alien, can we definitively say that there is no alien life on the planet or accept our null hypotheses? Maybe we needed to explore more, or perhaps we needed more time and we may have found an alien. So, in this case, we cannot accept the null hypothesis; we can only fail to reject it. Or In Cassie Kozyrkov’s words from whom the example comes, we can say that “we learned nothing interesting”.
 In STAT101 class, they teach you to write a convoluted paragraph when that happens. (“We fail to reject the null hypothesis and conclude that there is insufficient statistical evidence to support the existence of alien life on this planet.”) I’m convinced that the only purpose of this expression is to strain students’ wrists. I’ve always allowed my undergraduate students to write it like it is: we learned nothing interesting.
 In essence, hypothesis testing is just about checking if our observed values make the null hypothesis look ridiculous. If yes, we reject the null hypothesis and call our results statistically significant. And otherwise we have learned nothing interesting, and we continue with our status quo.
Continue Learning If you want to learn more about hypothesis testing, confidence intervals, and statistical inference methods for numerical and categorical data, Mine Çetinkaya-Rundel teaches Inferential Statistics course on coursera and it cannot get simpler than this one. She is a great instructor and explains the fundamentals of Statistical inference nicely.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog
Also, a small disclaimer — There might be some affiliate links in this post to relevant resources as sharing knowledge is never a bad idea.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>The 5 Classification Evaluation metrics every Data Scientist must know</title>
      <link>https://mlwhiz.com/blog/2019/11/07/eval_metrics/</link>
      <pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/11/07/eval_metrics/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/eval/main.jpeg"></media:content>
      

      
      <description>What do we want to optimize for? Most of the businesses fail to answer this simple question.
Every business problem is a little different, and it should be optimized differently.
We all have created classification models. A lot of time we try to increase evaluate our models on accuracy. But do we really want accuracy as a metric of our model performance?
What if we are predicting the number of asteroids that will hit the earth.</description>

      <content:encoded>  
        
        <![CDATA[  What do we want to optimize for? Most of the businesses fail to answer this simple question.
Every business problem is a little different, and it should be optimized differently.
We all have created classification models. A lot of time we try to increase evaluate our models on accuracy. But do we really want accuracy as a metric of our model performance?
What if we are predicting the number of asteroids that will hit the earth.
Just say zero all the time. And you will be 99% accurate. My model can be reasonably accurate, but not at all valuable. What should we do in such cases?
 Designing a Data Science project is much more important than the modeling itself.
 This post is about various evaluation metrics and how and when to use them.
1. Accuracy, Precision, and Recall: A. Accuracy Accuracy is the quintessential classification metric. It is pretty easy to understand. And easily suited for binary as well as a multiclass classification problem.
Accuracy = (TP&#43;TN)/(TP&#43;FP&#43;FN&#43;TN)
Accuracy is the proportion of true results among the total number of cases examined.
When to use? Accuracy is a valid choice of evaluation for classification problems which are well balanced and not skewed or No class imbalance.
Caveats Let us say that our target class is very sparse. Do we want accuracy as a metric of our model performance? What if we are predicting if an asteroid will hit the earth? Just say No all the time. And you will be 99% accurate. My model can be reasonably accurate, but not at all valuable.
B. Precision Let’s start with precision, which answers the following question: what proportion of predicted Positives is truly Positive?
Precision = (TP)/(TP&#43;FP)
In the asteroid prediction problem, we never predicted a true positive.
And thus precision=0
When to use? Precision is a valid choice of evaluation metric when we want to be very sure of our prediction. For example: If we are building a system to predict if we should decrease the credit limit on a particular account, we want to be very sure about our prediction or it may result in customer dissatisfaction.
Caveats Being very precise means our model will leave a lot of credit defaulters untouched and hence lose money.
C. Recall Another very useful measure is recall, which answers a different question: what proportion of actual Positives is correctly classified?
Recall = (TP)/(TP&#43;FN)
In the asteroid prediction problem, we never predicted a true positive.
And thus recall is also equal to 0.
When to use? Recall is a valid choice of evaluation metric when we want to capture as many positives as possible. For example: If we are building a system to predict if a person has cancer or not, we want to capture the disease even if we are not very sure.
Caveats Recall is 1 if we predict 1 for all examples.
And thus comes the idea of utilizing tradeoff of precision vs. recall — F1 Score.
2. F1 Score: This is my favorite evaluation metric and I tend to use this a lot in my classification projects.
The F1 score is a number between 0 and 1 and is the harmonic mean of precision and recall.
Let us start with a binary prediction problem. We are predicting if an asteroid will hit the earth or not.
So if we say “No” for the whole training set. Our precision here is 0. What is the recall of our positive class? It is zero. What is the accuracy? It is more than 99%.
And hence the F1 score is also 0. And thus we get to know that the classifier that has an accuracy of 99% is basically worthless for our case. And hence it solves our problem.
When to use? We want to have a model with both good precision and recall.
Simply stated the F1 score sort of maintains a balance between the precision and recall for your classifier. If your precision is low, the F1 is low and if the recall is low again your F1 score is low. &amp;gt; # If you are a police inspector and you want to catch criminals, you want to be sure that the person you catch is a criminal (Precision) and you also want to capture as many criminals (Recall) as possible. The F1 score manages this tradeoff.
How to Use? You can calculate the F1 score for binary prediction problems using:
from sklearn.metrics import f1_score y_true = [0, 1, 1, 0, 1, 1] y_pred = [0, 0, 1, 0, 0, 1] f1_score(y_true, y_pred) This is one of my functions which I use to get the best threshold for maximizing F1 score for binary predictions. The below function iterates through possible threshold values to find the one that gives the best F1 score.
# y_pred is an array of predictions def bestThresshold(y_true,y_pred): best_thresh = None best_score = 0 for thresh in np.arange(0.1, 0.501, 0.01): score = f1_score(y_true, np.array(y_pred)&amp;gt;thresh) if score &amp;gt; best_score: best_thresh = thresh best_score = score return best_score , best_thresh Caveats The main problem with the F1 score is that it gives equal weight to precision and recall. We might sometimes need to include domain knowledge in our evaluation where we want to have more recall or more precision.
To solve this, we can do this by creating a weighted F1 metric as below where beta manages the tradeoff between precision and recall.
Here we give β times as much importance to recall as precision.
from sklearn.metrics import fbeta_score y_true = [0, 1, 1, 0, 1, 1] y_pred = [0, 0, 1, 0, 0, 1] fbeta_score(y_true, y_pred,beta=0.5) F1 Score can also be used for Multiclass problems. See this awesome blog post by Boaz Shmueli for details.
3. Log Loss/Binary Crossentropy Log loss is a pretty good evaluation metric for binary classifiers and it is sometimes the optimization objective as well in case of Logistic regression and Neural Networks.
Binary Log loss for an example is given by the below formula where p is the probability of predicting 1.
As you can see the log loss decreases as we are fairly certain in our prediction of 1 and the true label is 1.
When to Use? When the output of a classifier is prediction probabilities. Log Loss takes into account the uncertainty of your prediction based on how much it varies from the actual label. This gives us a more nuanced view of the performance of our model. In general, minimizing Log Loss gives greater accuracy for the classifier.
How to Use? from sklearn.metrics import log_loss # where y_pred are probabilities and y_true are binary class labels log_loss(y_true, y_pred, eps=1e-15) Caveats It is susceptible in case of imbalanced datasets. You might have to introduce class weights to penalize minority errors more or you may use this after balancing your dataset.
4. Categorical Crossentropy The log loss also generalizes to the multiclass problem. The classifier in a multiclass setting must assign a probability to each class for all examples. If there are N samples belonging to M classes, then the Categorical Crossentropy is the summation of -ylogp values:
$y_{ij}$ is 1 if the sample i belongs to class j else 0
$p_{ij}$ is the probability our classifier predicts of sample i belonging to class j.
When to Use? When the output of a classifier is multiclass prediction probabilities. We generally use Categorical Crossentropy in case of Neural Nets. In general, minimizing Categorical cross-entropy gives greater accuracy for the classifier.
How to Use? from sklearn.metrics import log_loss # Where y_pred is a matrix of probabilities with shape ***= (n_samples, n_classes)*** and y_true is an array of class labels log_loss(y_true, y_pred, eps=1e-15) Caveats: It is susceptible in case of imbalanced datasets.
5. AUC AUC is the area under the ROC curve.
AUC ROC indicates how well the probabilities from the positive classes are separated from the negative classes
What is the ROC curve?
We have got the probabilities from our classifier. We can use various threshold values to plot our sensitivity(TPR) and (1-specificity)(FPR) on the cure and we will have a ROC curve.
Where True positive rate or TPR is just the proportion of trues we are capturing using our algorithm.
Sensitivty = TPR(True Positive Rate)= Recall = TP/(TP&#43;FP)
and False positive rate or FPR is just the proportion of false we are capturing using our algorithm.
1- Specificity = FPR(False Positive Rate)= FP/(TN&#43;FP)
Here we can use the ROC curves to decide on a Threshold value. The choice of threshold value will also depend on how the classifier is intended to be used.
If it is a cancer classification application you don’t want your threshold to be as big as 0.5. Even if a patient has a 0.3 probability of having cancer you would classify him to be 1.
Otherwise, in an application for reducing the limits on the credit card, you don’t want your threshold to be as less as 0.5. You are here a little worried about the negative effect of decreasing limits on customer satisfaction.
When to Use? AUC is scale-invariant. It measures how well predictions are ranked, rather than their absolute values. So, for example, if you as a marketer want to find a list of users who will respond to a marketing campaign. AUC is a good metric to use since the predictions ranked by probability is the order in which you will create a list of users to send the marketing campaign.
Another benefit of using AUC is that it is classification-threshold-invariant like log loss. It measures the quality of the model’s predictions irrespective of what classification threshold is chosen, unlike F1 score or accuracy which depend on the choice of threshold.
How to Use? import numpy as np from sklearn.metrics import roc_auc_score y_true = np.array([0, 0, 1, 1]) y_scores = np.array([0.1, 0.4, 0.35, 0.8]) print(roc_auc_score(y_true, y_scores)) Caveats Sometimes we will need well-calibrated probability outputs from our models and AUC doesn’t help with that.
Conclusion An important step while creating our machine learning pipeline is evaluating our different models against each other. A bad choice of an evaluation metric could wreak havoc to your whole system.
So, always be watchful of what you are predicting and how the choice of evaluation metric might affect/alter your final predictions.
Also, the choice of an evaluation metric should be well aligned with the business objective and hence it is a bit subjective. And you can come up with your own evaluation metric as well.
Continue Learning If you want to learn more about how to structure a Machine Learning project and the best practices, I would like to call out his awesome third course named Structuring Machine learning projects in the Coursera Deep Learning Specialization. Do check it out. It talks about the pitfalls and a lot of basic ideas to improve your models.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog
Also, a small disclaimer — There might be some affiliate links in this post to relevant resources as sharing knowledge is never a bad idea.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>The Ultimate Guide to using the Python regex module</title>
      <link>https://mlwhiz.com/blog/2019/09/01/regex/</link>
      <pubDate>Sun, 01 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/09/01/regex/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/regex/1.png"></media:content>
      

      
      <description>One of the main tasks while working with text data is to create a lot of text-based features.
One could like to find out certain patterns in the text, emails if present in a text as well as phone numbers in a large text.
While it may sound fairly trivial to achieve such functionalities it is much simpler if we use the power of Python’s regex module.
For example, let&amp;amp;rsquo;s say you are tasked with finding the number of punctuations in a particular piece of text.</description>

      <content:encoded>  
        
        <![CDATA[  One of the main tasks while working with text data is to create a lot of text-based features.
One could like to find out certain patterns in the text, emails if present in a text as well as phone numbers in a large text.
While it may sound fairly trivial to achieve such functionalities it is much simpler if we use the power of Python’s regex module.
For example, let&amp;rsquo;s say you are tasked with finding the number of punctuations in a particular piece of text. Using text from Dickens here.
How do you normally go about it?
A simple enough way is to do something like:
target = [&amp;#39;;&amp;#39;,&amp;#39;.&amp;#39;,&amp;#39;,&amp;#39;,&amp;#39;–&amp;#39;] string = &amp;#34;It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way – in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only.**&amp;#34; num_puncts = 0 for punct in target: if punct in string: num_puncts&#43;=string.count(punct) print(num_puncts) 19  And that is all but fine if we didn’t have the re module at our disposal. With re it is simply 2 lines of code:
import re pattern = r&amp;#34;[;.,–]&amp;#34; print(len(re.findall(pattern,string)))  19  This post is about one of the most commonly used regex patterns and some regex functions I end up using regularly.
What is regex? In simpler terms, a regular expression(regex) is used to find patterns in a given string.
The pattern we want to find could be anything.
We can create patterns that resemble an email or a mobile number. We can create patterns that find out words that start with a and ends with z from a string.
In the above example:
import re pattern = r&amp;#39;[,;.,–]&amp;#39; print(len(re.findall(pattern,string))) The pattern we wanted to find out was r’[,;.,–]’. This pattern captures any of the 4 characters we wanted to capture. I find regex101 a great tool for testing patterns. This is how the pattern looks when applied to the target string.
As we can see we are able to find all the occurrences of ,;.,– in the target string as required.
I use the above tool whenever I need to test a regex. Much faster than running a python program again and again and much easier to debug.
So now we know that we can find patterns in a target string but how do we really create these patterns?
Creating Patterns The first thing we need to learn while using regex is how to create patterns.
I will go through some most commonly used patterns one by one.
As you would think, the simplest pattern is a simple string.
pattern = r&amp;#39;times&amp;#39; string = &amp;#34;It was the best of times, it was the worst of times.&amp;#34; print(len(re.findall(pattern,string))) But that is not very useful. To help with creating complex patterns regex provides us with special characters/operators. Let us go through some of these operators one by one. Please wait for the gifs to load.
1. the [] operator This is the one we used in our first example. We want to find one instance of any character within these square brackets.
[abc]- will find all occurrences of a or b or c.
[a-z]- will find all occurrences of a to z.
[a-z0–9A-Z]- will find all occurrences of a to z, A to Z and 0 to 9.
We can easily use this pattern as below in Python:
pattern = r&amp;#39;[a-zA-Z]&amp;#39; string = &amp;#34;It was the best of times, it was the worst of times.&amp;#34; print(len(re.findall(pattern,string))) There are other functionalities in regex apart from .findall but we will get to them a little bit later.
2. The dot Operator The dot operator(.) is used to match a single instance of any character except the newline character.
The best part about the operators is that we can use them in conjunction with one another.
For example, We want to find out the substrings in the string that start with small d or Capital D and end with e with a length of 6.
3. Some Meta Sequences There are some patterns that we end up using again and again while using regex. And so regex has created a few shortcuts for them. The most useful shortcuts are:
\w, Matches any letter, digit or underscore. Equivalent to [a-zA-Z0–9_]
\W, Matches anything other than a letter, digit or underscore.
\d, Matches any decimal digit. Equivalent to [0–9].
\D, Matches anything other than a decimal digit.
4. The Plus and Star operator The dot character is used to get a single instance of any character. What if we want to find more.
The Plus character &#43;, is used to signify 1 or more instance of the leftmost character.
The Star character *, is used to signify 0 or more instance of the leftmost character.
For example, if we want to find out all substrings that start with d and end with e, we can have zero characters or more characters between d and e. We can use: d\w*e
If we want to find out all substrings that start with d and end with e with at least one character between d and e, we can use: d\w&#43;e
We could also have used a more generic approach using {} \w{n} - Repeat \w exactly n number of times.
\w{n,} - Repeat \w at least n times or more.
\w{n1, n2} - Repeat \w at least n1 times but no more than n2 times.
5. ^ Caret Operator and $ Dollar operator. ^ Matches the start of a string, and $ Matches the end of the string.
6. Word Boundary This is an important concept.
Did you notice how I always matched substring and never a word in the above examples?
So, what if we want to find all words that start with d?
Can we use d\w* as the pattern? Let&amp;rsquo;s see using the web tool.
Regex Functions Till now we have only used the findall function from the re package, but it also supports a lot more functions. Let us look into the functions one by one.
1. findall We already have used findall. It is one of the regex functions I end up using most often. Let us understand it a little more formally.
Input: Pattern and test string
Output: List of strings.
#USAGE: pattern = r&amp;#39;[iI]t&amp;#39; string = &amp;#34;It was the best of times, it was the worst of times.&amp;#34; matches = re.findall(pattern,string) for match in matches: print(match) It it  2. Search Input: Pattern and test string
Output: Location object for the first match.
#USAGE: pattern = r&amp;#39;[iI]t&amp;#39; string = &amp;#34;It was the best of times, it was the worst of times.&amp;#34; location = re.search(pattern,string) print(location) &amp;lt;_sre.SRE_Match object; span=(0, 2), match=&#39;It&#39;&amp;gt;  We can get this location object’s data using
print(location.group()) &#39;It&#39;  3. Substitute This is another great functionality. When you work with NLP you sometimes need to substitute integers with X’s. Or you might need to redact some document. Just the basic find and replace in any of the text editors.
Input: search pattern, replacement pattern, and the target string
Output: Substituted string
string = &amp;#34;It was the best of times, it was the worst of times.&amp;#34; string = re.sub(r&amp;#39;times&amp;#39;, r&amp;#39;life&amp;#39;, string) print(string) It was the best of life, it was the worst of life.  Some Case Studies: Regex is used in many cases when validation is required. You might have seen prompts on websites like “This is not a valid email address”. While such a prompt could be written using multiple if and else conditions, regex is probably the best for such use cases.
1. PAN Numbers In India, we have got PAN Numbers for Tax identification rather than SSN numbers in the US. The basic validation criteria for PAN is that it must have all its letters in uppercase and characters in the following order:
&amp;lt;char&amp;gt;&amp;lt;char&amp;gt;&amp;lt;char&amp;gt;&amp;lt;char&amp;gt;&amp;lt;char&amp;gt;&amp;lt;digit&amp;gt;&amp;lt;digit&amp;gt;&amp;lt;digit&amp;gt;&amp;lt;digit&amp;gt;&amp;lt;char&amp;gt;  So the question is:
Is ‘ABcDE1234L’ a valid PAN?
How would you normally attempt to solve this without regex? You will most probably write a for loop and keep an index going through the string. With regex it is as simple as below:
match=re.search(r&amp;#39;[A-Z]{5}[0–9]{4}[A-Z]&amp;#39;,&amp;#39;ABcDE1234L&amp;#39;) if match: print(True) else: print(False) False  2. Find Domain Names Sometimes we have got a large text document and we have got to find out instances of telephone numbers or email IDs or domain names from the big text document.
For example, Suppose you have this text:
&amp;lt;div class=&amp;#34;reflist&amp;#34; style=&amp;#34;list-style-type: decimal;&amp;#34;&amp;gt; &amp;lt;ol class=&amp;#34;references&amp;#34;&amp;gt; &amp;lt;li id=&amp;#34;cite_note-1&amp;#34;&amp;gt;&amp;lt;span class=&amp;#34;mw-cite-backlink&amp;#34;&amp;gt;&amp;lt;b&amp;gt;^ [&amp;#34;Train (noun)&amp;#34;](http://www.askoxford.com/concise_oed/train?view=uk). &amp;lt;i&amp;gt;(definition – Compact OED)&amp;lt;/i&amp;gt;. Oxford University Press&amp;lt;span class=&amp;#34;reference-accessdate&amp;#34;&amp;gt;. Retrieved 2008-03-18&amp;lt;/span&amp;gt;.&amp;lt;/span&amp;gt;&amp;lt;span title=&amp;#34;ctx_ver=Z39.88-2004&amp;amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrain&amp;amp;rft.atitle=Train&#43;%28noun%29&amp;amp;rft.genre=article&amp;amp;rft_id=http%3A%2F%2Fwww.askoxford.com%2Fconcise_oed%2Ftrain%3Fview%3Duk&amp;amp;rft.jtitle=%28definition&#43;%E2%80%93&#43;Compact&#43;OED%29&amp;amp;rft.pub=Oxford&#43;University&#43;Press&amp;amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;#34; class=&amp;#34;Z3988&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;display:none;&amp;#34;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li id=&amp;#34;cite_note-2&amp;#34;&amp;gt;&amp;lt;span class=&amp;#34;mw-cite-backlink&amp;#34;&amp;gt;&amp;lt;b&amp;gt;^&amp;lt;/b&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;#34;reference-text&amp;#34;&amp;gt;&amp;lt;span class=&amp;#34;citation book&amp;#34;&amp;gt;Atchison, Topeka and Santa Fe Railway (1948). &amp;lt;i&amp;gt;Rules: Operating Department&amp;lt;/i&amp;gt;. p. 7.&amp;lt;/span&amp;gt;&amp;lt;span title=&amp;#34;ctx_ver=Z39.88-2004&amp;amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrain&amp;amp;rft.au=Atchison%2C&#43;Topeka&#43;and&#43;Santa&#43;Fe&#43;Railway&amp;amp;rft.aulast=Atchison%2C&#43;Topeka&#43;and&#43;Santa&#43;Fe&#43;Railway&amp;amp;rft.btitle=Rules%3A&#43;Operating&#43;Department&amp;amp;rft.date=1948&amp;amp;rft.genre=book&amp;amp;rft.pages=7&amp;amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;#34; class=&amp;#34;Z3988&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;display:none;&amp;#34;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li id=&amp;#34;cite_note-3&amp;#34;&amp;gt;&amp;lt;span class=&amp;#34;mw-cite-backlink&amp;#34;&amp;gt;&amp;lt;b&amp;gt;^ [Hydrogen trains](http://www.hydrogencarsnow.com/blog2/index.php/hydrogen-vehicles/i-hear-the-hydrogen-train-a-comin-its-rolling-round-the-bend/)&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li id=&amp;#34;cite_note-4&amp;#34;&amp;gt;&amp;lt;span class=&amp;#34;mw-cite-backlink&amp;#34;&amp;gt;&amp;lt;b&amp;gt;^ [Vehicle Projects Inc. Fuel cell locomotive](http://www.bnsf.com/media/news/articles/2008/01/2008-01-09a.html)&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li id=&amp;#34;cite_note-5&amp;#34;&amp;gt;&amp;lt;span class=&amp;#34;mw-cite-backlink&amp;#34;&amp;gt;&amp;lt;b&amp;gt;^&amp;lt;/b&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;#34;reference-text&amp;#34;&amp;gt;&amp;lt;span class=&amp;#34;citation book&amp;#34;&amp;gt;Central Japan Railway (2006). &amp;lt;i&amp;gt;Central Japan Railway Data Book 2006&amp;lt;/i&amp;gt;. p. 16.&amp;lt;/span&amp;gt;&amp;lt;span title=&amp;#34;ctx_ver=Z39.88-2004&amp;amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrain&amp;amp;rft.au=Central&#43;Japan&#43;Railway&amp;amp;rft.aulast=Central&#43;Japan&#43;Railway&amp;amp;rft.btitle=Central&#43;Japan&#43;Railway&#43;Data&#43;Book&#43;2006&amp;amp;rft.date=2006&amp;amp;rft.genre=book&amp;amp;rft.pages=16&amp;amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;#34; class=&amp;#34;Z3988&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;display:none;&amp;#34;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li id=&amp;#34;cite_note-6&amp;#34;&amp;gt;&amp;lt;span class=&amp;#34;mw-cite-backlink&amp;#34;&amp;gt;&amp;lt;b&amp;gt;^ [&amp;#34;Overview Of the existing Mumbai Suburban Railway&amp;#34;](http://web.archive.org/web/20080620033027/http://www.mrvc.indianrail.gov.in/overview.htm). _Official webpage of Mumbai Railway Vikas Corporation_. Archived from [the original](http://www.mrvc.indianrail.gov.in/overview.htm) on 2008-06-20&amp;lt;span class=&amp;#34;reference-accessdate&amp;#34;&amp;gt;. Retrieved 2008-12-11&amp;lt;/span&amp;gt;.&amp;lt;/span&amp;gt;&amp;lt;span title=&amp;#34;ctx_ver=Z39.88-2004&amp;amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrain&amp;amp;rft.atitle=Overview&#43;Of&#43;the&#43;existing&#43;Mumbai&#43;Suburban&#43;Railway&amp;amp;rft.genre=article&amp;amp;rft_id=http%3A%2F%2Fwww.mrvc.indianrail.gov.in%2Foverview.htm&amp;amp;rft.jtitle=Official&#43;webpage&#43;of&#43;Mumbai&#43;Railway&#43;Vikas&#43;Corporation&amp;amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;#34; class=&amp;#34;Z3988&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;display:none;&amp;#34;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ol&amp;gt; &amp;lt;/div&amp;gt; And you need to find out all the primary domains from this text- askoxford.com;bnsf.com;hydrogencarsnow.com;mrvc.indianrail.gov.in;web.archive.org
How would you do this?
match=re.findall(r&amp;#39;http(s:|:)\/\/([www.|ww2.|)([0-9a-z.A-Z-]*\.\w{2,3})&amp;#39;,string)](http://www.|ww2.|)([0-9a-z.A-Z-]*\.\w{2,3})&amp;#39;,string))for elem in match:print(elem) (&#39;:&#39;, &#39;www.&#39;, &#39;askoxford.com&#39;) (&#39;:&#39;, &#39;www.&#39;, &#39;hydrogencarsnow.com&#39;) (&#39;:&#39;, &#39;www.&#39;, &#39;bnsf.com&#39;) (&#39;:&#39;, &#39;&#39;, &#39;web.archive.org&#39;) (&#39;:&#39;, &#39;www.&#39;, &#39;mrvc.indianrail.gov.in&#39;) (&#39;:&#39;, &#39;www.&#39;, &#39;mrvc.indianrail.gov.in&#39;)  | is the or operator here and match returns tuples where the pattern part inside () is kept.
3. Find Email Addresses: Below is a regex to find email addresses in a long text.
match=re.findall(r&amp;#39;([\w0-9-._]&#43;@[\w0-9-.]&#43;[\w0-9]{2,3})&amp;#39;,string) These are advanced examples but if you try to understand these examples for yourself you should be fine with the info provided.
Conclusion While it might look a little daunting at first, regex provides a great degree of flexibility when it comes to data manipulation, creating features and finding patterns.
I use it quite regularly when I work with text data and it can also be included while working on data validation tasks.
I am also a fan of the regex101 tool and use it frequently to check my regexes. I wonder if I would be using regexes as much if not for this awesome tool.
Also if you want to learn more about NLP here is an excellent course. You can start for free with the 7-day Free Trial.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>The 5 Feature Selection Algorithms every Data Scientist should know</title>
      <link>https://mlwhiz.com/blog/2019/08/07/feature_selection/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/08/07/feature_selection/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/fs/1.png"></media:content>
      

      
      <description>Data Science is the study of algorithms.
I grapple through with many algorithms on a day to day basis, so I thought of listing some of the most common and most used algorithms one will end up using in this new DS Algorithm series.
How many times it has happened when you create a lot of features and then you need to come up with ways to reduce the number of features.</description>

      <content:encoded>  
        
        <![CDATA[  Data Science is the study of algorithms.
I grapple through with many algorithms on a day to day basis, so I thought of listing some of the most common and most used algorithms one will end up using in this new DS Algorithm series.
How many times it has happened when you create a lot of features and then you need to come up with ways to reduce the number of features.
We sometimes end up using correlation or tree-based methods to find out the important features.
Can we add some structure to it?
This post is about some of the most common feature selection techniques one can use while working with data.
Why Feature Selection? Before we proceed, we need to answer this question. Why don’t we give all the features to the ML algorithm and let it decide which feature is important?
So there are three reasons why we don’t:
1. Curse of dimensionality — Overfitting If we have more columns in the data than the number of rows, we will be able to fit our training data perfectly, but that won’t generalize to the new samples. And thus we learn absolutely nothing.
2. Occam’s Razor: We want our models to be simple and explainable. We lose explainability when we have a lot of features.
3. Garbage In Garbage out: Most of the times, we will have many non-informative features. For Example, Name or ID variables. Poor-quality input will produce Poor-Quality output.
Also, a large number of features make a model bulky, time-taking, and harder to implement in production.
So What do we do? We select only useful features.
Fortunately, Scikit-learn has made it pretty much easy for us to make the feature selection. There are a lot of ways in which we can think of feature selection, but most feature selection methods can be divided into three major buckets
 Filter based: We specify some metric and based on that filter features. An example of such a metric could be correlation/chi-square.
 Wrapper-based: Wrapper methods consider the selection of a set of features as a search problem. Example: Recursive Feature Elimination
 Embedded: Embedded methods use algorithms that have built-in feature selection methods. For instance, Lasso and RF have their own feature selection methods.
  So enough of theory let us start with our five feature selection methods.
We will try to do this using a dataset to understand it better.
I am going to be using a football player dataset to find out what makes a good player great?
Don’t worry if you don’t understand football terminologies. I will try to keep it at a minimum.
Here is the Kaggle Kernel with the code to try out yourself.
Some Simple Data Preprocessing We have done some basic preprocessing such as removing Nulls and one hot encoding. And converting the problem to a classification problem using:
y = traindf[&#39;Overall&#39;]&amp;gt;=87  Here we use High Overall as a proxy for a great player.
Our dataset(X) looks like below and has 223 columns.
1. Pearson Correlation This is a filter-based method.
We check the absolute value of the Pearson’s correlation between the target and numerical features in our dataset. We keep the top n features based on this criterion.
def cor_selector(X, y,num_feats): cor_list = [] feature_name = X.columns.tolist() # calculate the correlation with y for each feature for i in X.columns.tolist(): cor = np.corrcoef(X[i], y)[0, 1] cor_list.append(cor) # replace NaN with 0 cor_list = [0 if np.isnan(i) else i for i in cor_list] # feature name cor_feature = X.iloc[:,np.argsort(np.abs(cor_list))[-num_feats:]].columns.tolist() # feature selection? 0 for not select, 1 for select cor_support = [True if i in cor_feature else False for i in feature_name] return cor_support, cor_feature cor_support, cor_feature = cor_selector(X, y,num_feats) print(str(len(cor_feature)), &amp;#39;selected features&amp;#39;) 2. Chi-Squared This is another filter-based method.
In this method, we calculate the chi-square metric between the target and the numerical variable and only select the variable with the maximum chi-squared values.
Let us create a small example of how we calculate the chi-squared statistic for a sample.
So let’s say we have 75 Right-Forwards in our dataset and 25 Non-Right-Forwards. We observe that 40 of the Right-Forwards are good, and 35 are not good. Does this signify that the player being right forward affects the overall performance?
We calculate the chi-squared value:
To do this, we first find out the values we would expect to be falling in each bucket if there was indeed independence between the two categorical variables.
This is simple. We multiply the row sum and the column sum for each cell and divide it by total observations.
so Good and NotRightforward Bucket Expected value= 25(Row Sum)*60(Column Sum)/100(Total Observations)
Why is this expected? Since there are 25% notRightforwards in the data, we would expect 25% of the 60 good players we observed in that cell. Thus 15 players.
Then we could just use the below formula to sum over all the 4 cells:
I won’t show it here, but the chi-squared statistic also works in a hand-wavy way with non-negative numerical and categorical features.
We can get chi-squared features from our dataset as:
from sklearn.feature_selection import SelectKBest from sklearn.feature_selection import chi2 from sklearn.preprocessing import MinMaxScaler X_norm = MinMaxScaler().fit_transform(X) chi_selector = SelectKBest(chi2, k=num_feats) chi_selector.fit(X_norm, y) chi_support = chi_selector.get_support() chi_feature = X.loc[:,chi_support].columns.tolist() print(str(len(chi_feature)), &amp;#39;selected features&amp;#39;) 3. Recursive Feature Elimination This is a wrapper based method. As I said before, wrapper methods consider the selection of a set of features as a search problem.
From sklearn Documentation:
 The goal of recursive feature elimination (RFE) is to select features by recursively considering smaller and smaller sets of features. First, the estimator is trained on the initial set of features and the importance of each feature is obtained either through a coef_ attribute or through a feature_importances_ attribute. Then, the least important features are pruned from current set of features. That procedure is recursively repeated on the pruned set until the desired number of features to select is eventually reached.
 As you would have guessed, we could use any estimator with the method. In this case, we use LogisticRegression, and the RFE observes the coef_ attribute of the LogisticRegression object
from sklearn.feature_selection import RFE from sklearn.linear_model import LogisticRegression rfe_selector = RFE(estimator=LogisticRegression(), n_features_to_select=num_feats, step=10, verbose=5) rfe_selector.fit(X_norm, y) rfe_support = rfe_selector.get_support() rfe_feature = X.loc[:,rfe_support].columns.tolist() print(str(len(rfe_feature)), &amp;#39;selected features&amp;#39;) 4. Lasso: SelectFromModel This is an Embedded method. As said before, Embedded methods use algorithms that have built-in feature selection methods.
For example, Lasso and RF have their own feature selection methods. Lasso Regularizer forces a lot of feature weights to be zero.
Here we use Lasso to select variables.
from sklearn.feature_selection import SelectFromModel from sklearn.linear_model import LogisticRegression embeded_lr_selector = SelectFromModel(LogisticRegression(penalty=&amp;#34;l1&amp;#34;), max_features=num_feats) embeded_lr_selector.fit(X_norm, y) embeded_lr_support = embeded_lr_selector.get_support() embeded_lr_feature = X.loc[:,embeded_lr_support].columns.tolist() print(str(len(embeded_lr_feature)), &amp;#39;selected features&amp;#39;) 5. Tree-based: SelectFromModel This is an Embedded method. As said before, Embedded methods use algorithms that have built-in feature selection methods.
We can also use RandomForest to select features based on feature importance.
We calculate feature importance using node impurities in each decision tree. In Random forest, the final feature importance is the average of all decision tree feature importance.
from sklearn.feature_selection import SelectFromModel from sklearn.ensemble import RandomForestClassifier embeded_rf_selector = SelectFromModel(RandomForestClassifier(n_estimators=100), max_features=num_feats) embeded_rf_selector.fit(X, y) embeded_rf_support = embeded_rf_selector.get_support() embeded_rf_feature = X.loc[:,embeded_rf_support].columns.tolist() print(str(len(embeded_rf_feature)), &amp;#39;selected features&amp;#39;) We could also have used a LightGBM. Or an XGBoost object as long it has a feature_importances_ attribute.
from sklearn.feature_selection import SelectFromModel from lightgbm import LGBMClassifier lgbc=LGBMClassifier(n_estimators=500, learning_rate=0.05, num_leaves=32, colsample_bytree=0.2, reg_alpha=3, reg_lambda=1, min_split_gain=0.01, min_child_weight=40) embeded_lgb_selector = SelectFromModel(lgbc, max_features=num_feats) embeded_lgb_selector.fit(X, y) embeded_lgb_support = embeded_lgb_selector.get_support() embeded_lgb_feature = X.loc[:,embeded_lgb_support].columns.tolist() print(str(len(embeded_lgb_feature)), &amp;#39;selected features&amp;#39;) Bonus Why use one, when we can have all?
The answer is sometimes it won’t be possible with a lot of data and time crunch.
But whenever possible, why not do this?
# put all selection together feature_selection_df = pd.DataFrame({&amp;#39;Feature&amp;#39;:feature_name, &amp;#39;Pearson&amp;#39;:cor_support, &amp;#39;Chi-2&amp;#39;:chi_support, &amp;#39;RFE&amp;#39;:rfe_support, &amp;#39;Logistics&amp;#39;:embeded_lr_support, &amp;#39;Random Forest&amp;#39;:embeded_rf_support, &amp;#39;LightGBM&amp;#39;:embeded_lgb_support}) # count the selected times for each feature feature_selection_df[&amp;#39;Total&amp;#39;] = np.sum(feature_selection_df, axis=1) # display the top 100 feature_selection_df = feature_selection_df.sort_values([&amp;#39;Total&amp;#39;,&amp;#39;Feature&amp;#39;] , ascending=False) feature_selection_df.index = range(1, len(feature_selection_df)&#43;1) We check if we get a feature based on all the methods. In this case, as we can see Reactions and LongPassing are excellent attributes to have in a high rated player. And as expected Ballcontrol and Finishing occupy the top spot too.
Conclusion Feature engineering and feature selection are critical parts of any machine learning pipeline.
We strive for accuracy in our models, and one cannot get to a good accuracy without revisiting these pieces again and again.
In this article, I tried to explain some of the most used feature selection techniques as well as my workflow when it comes to feature selection.
I also tried to provide some intuition into these methods, but you should probably try to see more into it and try to incorporate these methods into your work.
Do read my post on feature engineering too if you are interested.
If you want to learn more about Data Science, I would like to call out this excellent course by Andrew Ng. This was the one that got me started. Do check it out.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>The 5 Sampling Algorithms every Data Scientist need to know</title>
      <link>https://mlwhiz.com/blog/2019/07/30/sampling/</link>
      <pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/07/30/sampling/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/sampling/1.jpg"></media:content>
      

      
      <description>Data Science is the study of algorithms.
I grapple through with many algorithms on a day to day basis so I thought of listing some of the most common and most used algorithms one will end up using in this new DS Algorithm series.
This post is about some of the most common sampling techniques one can use while working with data.
Simple Random Sampling Say you want to select a subset of a population in which each member of the subset has an equal probability of being chosen.</description>

      <content:encoded>  
        
        <![CDATA[  Data Science is the study of algorithms.
I grapple through with many algorithms on a day to day basis so I thought of listing some of the most common and most used algorithms one will end up using in this new DS Algorithm series.
This post is about some of the most common sampling techniques one can use while working with data.
Simple Random Sampling Say you want to select a subset of a population in which each member of the subset has an equal probability of being chosen.
Below we select 100 sample points from a dataset.
sample_df = df.sample(100) Stratified Sampling Assume that we need to estimate the average number of votes for each candidate in an election. Assume that the country has 3 towns:
Town A has 1 million factory workers,
Town B has 2 million workers, and
Town C has 3 million retirees.
We can choose to get a random sample of size 60 over the entire population but there is some chance that the random sample turns out to be not well balanced across these towns and hence is biased causing a significant error in estimation.
Instead, if we choose to take a random sample of 10, 20 and 30 from Town A, B and C respectively then we can produce a smaller error in estimation for the same total size of the sample.
You can do something like this pretty easily with Python:
from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.25) Reservoir Sampling I love this problem statement:
Say you have a stream of items of large and unknown length that we can only iterate over once.
Create an algorithm that randomly chooses an item from this stream such that each item is equally likely to be selected.
How can we do that?
Let us assume we have to sample 5 objects out of an infinite stream such that each element has an equal probability of getting selected.
import random def generator(max): number = 1 while number &amp;lt; max: number &#43;= 1 yield number # Create as stream generator stream = generator(10000) # Doing Reservoir Sampling from the stream k=5 reservoir = [] for i, element in enumerate(stream): if i&#43;1&amp;lt;= k: reservoir.append(element) else: probability = k/(i&#43;1) if random.random() &amp;lt; probability: # Select item in stream and remove one of the k items already selected reservoir[random.choice(range(0,k))] = element print(reservoir) [1369, 4108, 9986, 828, 5589]  It can be mathematically proved that in the sample each element has the same probability of getting selected from the stream.
How?
It always helps to think of a smaller problem when it comes to mathematics.
So, let us think of a stream of only 3 items and we have to keep 2 of them.
We see the first item, we hold it in the list as our reservoir has space. We see the second item, we hold it in the list as our reservoir has space.
We see the third item. Here is where things get interesting. We choose the third item to be in the list with probability 2&amp;frasl;3.
Let us now see the probability of first item getting selected:
The probability of removing the first item is the probability of element 3 getting selected multiplied by the probability of Element 1 getting randomly chosen as the replacement candidate from the 2 elements in the reservoir. That probability is:
2&amp;frasl;3*1&amp;frasl;2 = 1&amp;frasl;3
Thus the probability of 1 getting selected is:
1–1/3 = 2&amp;frasl;3
We can have the exact same argument for the Second Element and we can extend it for many elements.
Thus each item has the same probability of getting selected: 2&amp;frasl;3 or in general k/n
Random Undersampling and Oversampling It is too often that we encounter an imbalanced dataset.
A widely adopted technique for dealing with highly imbalanced datasets is called resampling. It consists of removing samples from the majority class (under-sampling) and/or adding more examples from the minority class (over-sampling).
Let us first create some example imbalanced data.
from sklearn.datasets import make_classification X, y = make_classification( n_classes=2, class_sep=1.5, weights=[0.9, 0.1], n_informative=3, n_redundant=1, flip_y=0, n_features=20, n_clusters_per_class=1, n_samples=100, random_state=10 ) X = pd.DataFrame(X) X[&amp;#39;target&amp;#39;] = y We can now do random oversampling and undersampling using:
num_0 = len(X[X[&amp;#39;target&amp;#39;]==0]) num_1 = len(X[X[&amp;#39;target&amp;#39;]==1]) print(num_0,num_1) # random undersample undersampled_data = pd.concat([ X[X[&amp;#39;target&amp;#39;]==0].sample(num_1) , X[X[&amp;#39;target&amp;#39;]==1] ]) print(len(undersampled_data)) # random oversample oversampled_data = pd.concat([ X[X[&amp;#39;target&amp;#39;]==0] , X[X[&amp;#39;target&amp;#39;]==1].sample(num_0, replace=True) ]) print(len(oversampled_data)) OUTPUT: 90 10 20 180  Undersampling and Oversampling using imbalanced-learn imbalanced-learn(imblearn) is a Python Package to tackle the curse of imbalanced datasets.
It provides a variety of methods to undersample and oversample.
a. Undersampling using Tomek Links: One of such methods it provides is called Tomek Links. Tomek links are pairs of examples of opposite classes in close vicinity.
In this algorithm, we end up removing the majority element from the Tomek link which provides a better decision boundary for a classifier.
from imblearn.under_sampling import TomekLinks tl = TomekLinks(return_indices=True, ratio=&amp;#39;majority&amp;#39;) X_tl, y_tl, id_tl = tl.fit_sample(X, y) b. Oversampling using SMOTE: In SMOTE (Synthetic Minority Oversampling Technique) we synthesize elements for the minority class, in the vicinity of already existing elements.
from imblearn.over_sampling import SMOTE smote = SMOTE(ratio=&amp;#39;minority&amp;#39;) X_sm, y_sm = smote.fit_sample(X, y) There are a variety of other methods in the imblearn package for both undersampling(Cluster Centroids, NearMiss, etc.) and oversampling(ADASYN and bSMOTE) that you can check out.
Conclusion Algorithms are the lifeblood of data science.
Sampling is an important topic in data science and we really don’t talk about it as much as we should.
A good sampling strategy sometimes could pull the whole project forward. A bad sampling strategy could give us incorrect results. So one should be careful while selecting a sampling strategy.
So use sampling, be it at work or at bars.
If you want to learn more about Data Science, I would like to call out this excellent course by Andrew Ng. This was the one that got me started. Do check it out.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Minimal Pandas Subset for Data Scientists</title>
      <link>https://mlwhiz.com/blog/2019/07/20/pandas_subset/</link>
      <pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/07/20/pandas_subset/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/pandas_subset/1.jpeg"></media:content>
      

      
      <description>Pandas is a vast library.
Data manipulation is a breeze with pandas, and it has become such a standard for it that a lot of parallelization libraries like Rapids and Dask are being created in line with Pandas syntax.
Still, I generally have some issues with it.
There are multiple ways to doing the same thing in Pandas, and that might make it troublesome for the beginner user.</description>

      <content:encoded>  
        
        <![CDATA[    Pandas is a vast library.
Data manipulation is a breeze with pandas, and it has become such a standard for it that a lot of parallelization libraries like Rapids and Dask are being created in line with Pandas syntax.
Still, I generally have some issues with it.
There are multiple ways to doing the same thing in Pandas, and that might make it troublesome for the beginner user.
This has inspired me to come up with a minimal subset of pandas functions I use while coding.
I have tried it all, and currently, I stick to a particular way. It is like a mind map.
Sometimes because it is fast and sometimes because it’s more readable and sometimes because I can do it with my current knowledge. And sometimes because I know that a particular way will be a headache in the long run(think multi-index)
This post is about handling most of the data manipulation cases in Python using a straightforward, simple, and matter of fact way.
With a sprinkling of some recommendations throughout.
I will be using a data set of 1,000 popular movies on IMDB in the last ten years. You can also follow along in the Kaggle Kernel.
Some Default Pandas Requirements As good as the Jupyter notebooks are, some things still need to be specified when working with Pandas.
***Sometimes your notebook won’t show you all the columns. Sometimes it will display all the rows if you print the dataframe. ***You can control this behavior by setting some defaults of your own while importing Pandas. You can automate it using this addition to your notebook.
For instance, this is the setting I use.
import pandas as pd # pandas defaults pd.options.display.max_columns = 500 pd.options.display.max_rows = 500 Reading Data with Pandas The first thing we do is reading the data source and so here is the code for that.
df = pd.read_csv(&amp;#34;IMDB-Movie-Data.csv&amp;#34;) Recommendation: I could also have used pd.read_table to read the file. The thing is that pd.read_csv has default separator as , and thus it saves me some code. I also genuinely don’t understand the use of pd.read_table
If your data is in some SQL Datasource, you could have used the following code. You get the results in the dataframe format.
# Reading from SQL Datasource import MySQLdb from pandas import DataFrame from pandas.io.sql import read_sql db = MySQLdb.connect(host=&amp;#34;localhost&amp;#34;, # your host, usually localhost user=&amp;#34;root&amp;#34;, # your username passwd=&amp;#34;password&amp;#34;, # your password db=&amp;#34;dbname&amp;#34;) # name of the data base query = &amp;#34;SELECT * FROM tablename&amp;#34; df = read_sql(query, db) Data Snapshot Always useful to see some of the data.
You can use simple head and tail commands with an option to specify the number of rows.
# top 5 rows df.head() # top 50 rows df.head(50) # last 5 rows df.tail() # last 50 rows df.tail(50) You can also see simple dataframe statistics with the following commands.
# To get statistics of numerical columns df.describe() # To get maximum value of a column. When you take a single column you can think of it as a list and apply functions you would apply to a list. You can also use min for instance. print(max(df[&amp;#39;rating&amp;#39;])) # no of rows in dataframe print(len(df)) # Shape of Dataframe print(df.shape) 9.0 1000 (1000,12)  Recommendation: Generally working with Jupyter notebook,I make it a point of having the first few cells in my notebook containing these snapshots of the data. This helps me see the structure of the data whenever I want to. If I don’t follow this practice, I notice that I end up repeating the .head() command a lot of times in my code.
Handling Columns in Dataframes a. Selecting a column For some reason Pandas lets you choose columns in two ways. Using the dot operator like df.Title and using square brackets like df[&#39;Title&#39;]
I prefer the second version, mostly. Why?
There are a couple of reasons you would be better off with the square bracket version in the longer run.
 If your column name contains spaces, then the dot version won’t work. For example, df.Revenue (Millions) won’t work while df[&#39;Revenue (Millions)&#39;] will.
 It also won’t work if your column name is count or mean or any of pandas predefined functions.
 Sometimes you might need to create a for loop over your column names in which your column name might be in a variable. In that case, the dot notation will not work. For Example, This works:
  colname = &amp;#39;height&amp;#39; df[colname] While this doesn’t:
colname = &amp;#39;height&amp;#39; df.colname Trust me. Saving a few characters is not worth it.
Recommendation: Stop using the dot operator. It is a construct that originated from a different language&amp;reg; and respectfully should be left there.
b. Getting Column Names in a list You might need a list of columns for some later processing.
columnnames = df.columns c. Specifying user-defined Column Names: Sometimes you want to change the column names as per your taste. I don’t like spaces in my column names, so I change them as such.
df.columns = [&amp;#39;Rank&amp;#39;, &amp;#39;Title&amp;#39;, &amp;#39;Genre&amp;#39;, &amp;#39;Description&amp;#39;, &amp;#39;Director&amp;#39;, &amp;#39;Actors&amp;#39;, &amp;#39;Year&amp;#39;, &amp;#39;Runtime_Minutes&amp;#39;, &amp;#39;Rating&amp;#39;, &amp;#39;Votes&amp;#39;, &amp;#39;Revenue_Millions&amp;#39;, &amp;#39;Metascore&amp;#39;] I could have used another way.
This is the one case where both of the versions are important. When I have to change a lot of column names, I go with the way above. When I have to change the name of just one or two columns I use:
df.rename(columns = {&amp;#39;Revenue (Millions)&amp;#39;:&amp;#39;Rev_M&amp;#39;,&amp;#39;Runtime (Minutes)&amp;#39;:&amp;#39;Runtime_min&amp;#39;},inplace=True) d. Subsetting specific columns: Sometimes you only need to work with particular columns in a dataframe. e.g., to separate numerical and categorical columns, or remove unnecessary columns. Let’s say in our example; we don’t need the description, director, and actor column.
df = df[[&amp;#39;Rank&amp;#39;, &amp;#39;Title&amp;#39;, &amp;#39;Genre&amp;#39;, &amp;#39;Year&amp;#39;,&amp;#39;Runtime_min&amp;#39;, &amp;#39;Rating&amp;#39;, &amp;#39;Votes&amp;#39;, &amp;#39;Rev_M&amp;#39;, &amp;#39;Metascore&amp;#39;]] e. Seeing column types: Very useful while debugging. If your code throws an error that you cannot add a str and int, you will like to run this command.
df.dtypes Applying Functions on DataFrame: Apply and Lambda apply and lambda are some of the best things I have learned to use with pandas.
I use apply and lambda anytime I get stuck while building a complex logic for a new column or filter.
a. Creating a Column You can create a new column in many ways.
If you want a column that is a sum or difference of columns, you can pretty much use simple basic arithmetic. Here I get the average rating based on IMDB and Normalized Metascore.
df[&amp;#39;AvgRating&amp;#39;] = (df[&amp;#39;Rating&amp;#39;] &#43; df[&amp;#39;Metascore&amp;#39;]/10)/2 But sometimes we may need to build complex logic around the creation of new columns.
To give you a convoluted example, let’s say that we want to build a custom movie score based on a variety of factors.
Say, If the movie is of the thriller genre, I want to add 1 to the IMDB rating subject to the condition that IMDB rating remains less than or equal to 10. And If a movie is a comedy I want to subtract one from the rating.
How do we do that?
Whenever I get a hold of such complex problems, I use apply/lambda. Let me first show you how I will do this.
def custom_rating(genre,rating): if &amp;#39;Thriller&amp;#39; in genre: return min(10,rating&#43;1) elif &amp;#39;Comedy&amp;#39; in genre: return max(0,rating-1) else: return rating df[&amp;#39;CustomRating&amp;#39;] = df.apply(lambda x: custom_rating(x[&amp;#39;Genre&amp;#39;],x[&amp;#39;Rating&amp;#39;]),axis=1) The general structure is:
 You define a function that will take the column values you want to play with to come up with your logic. Here the only two columns we end up using are genre and rating.
 You use an apply function with lambda along the row with axis=1. The general syntax is:
  df.apply(lambda x: func(x[&amp;#39;col1&amp;#39;],x[&amp;#39;col2&amp;#39;]),axis=1) You should be able to create pretty much any logic using apply/lambda since you just have to worry about the custom function.
b. Filtering a dataframe Pandas make filtering and subsetting dataframes pretty easy. You can filter and subset dataframes using normal operators and &amp;amp;,|,~ operators.
# Single condition: dataframe with all movies rated greater than 8 df_gt_8 = df[df[&amp;#39;Rating&amp;#39;]&amp;gt;8] # Multiple conditions: AND - dataframe with all movies rated greater than 8 and having more than 100000 votes And_df = df[(df[&amp;#39;Rating&amp;#39;]&amp;gt;8) &amp;amp; (df[&amp;#39;Votes&amp;#39;]&amp;gt;100000)] # Multiple conditions: OR - dataframe with all movies rated greater than 8 or having a metascore more than 90 Or_df = df[(df[&amp;#39;Rating&amp;#39;]&amp;gt;8) | (df[&amp;#39;Metascore&amp;#39;]&amp;gt;80)] # Multiple conditions: NOT - dataframe with all emovies rated greater than 8 or having a metascore more than 90 have to be excluded Not_df = df[~((df[&amp;#39;Rating&amp;#39;]&amp;gt;8) | (df[&amp;#39;Metascore&amp;#39;]&amp;gt;80))] Pretty simple stuff.
But sometimes we may need to do complex filtering operations.
And sometimes we need to do some operations which we won’t be able to do using just the above format.
For instance: Let us say we want to filter those rows where the number of words in the movie title is greater than or equal to than 4.
How would you do it?
Trying the below will give you an error. Apparently, you cannot do anything as simple as split with a series.
new_df = df[len(df[&amp;#39;Title&amp;#39;].split(&amp;#34; &amp;#34;))&amp;gt;=4] AttributeError: &#39;Series&#39; object has no attribute &#39;split&#39;  One way is first to create a column which contains no of words in the title using apply and then filter on that column.
#create a new column df[&amp;#39;num_words_title&amp;#39;] = df.apply(lambda x : len(x[&amp;#39;Title&amp;#39;].split(&amp;#34; &amp;#34;)),axis=1) #simple filter on new column new_df = df[df[&amp;#39;num_words_title&amp;#39;]&amp;gt;=4] And that is a perfectly fine way as long as you don’t have to create a lot of columns. But I prefer this:
new_df = df[df.apply(lambda x : len(x[&amp;#39;Title&amp;#39;].split(&amp;#34; &amp;#34;))&amp;gt;=4,axis=1)] What I did here is that my apply function returns a boolean which can be used to filter.
Now once you understand that you just have to create a column of booleans to filter, you can use any function/logic in your apply statement to get however complex a logic you want to build.
Let us see another example. I will try to do something a little complex to show the structure.
We want to find movies for which the revenue is less than the average revenue for that particular year?
year_revenue_dict = df.groupby([&amp;#39;Year&amp;#39;]).agg({&amp;#39;Rev_M&amp;#39;:np.mean}).to_dict()[&amp;#39;Rev_M&amp;#39;] def bool_provider(revenue, year): return revenue&amp;lt;year_revenue_dict[year] new_df = df[df.apply(lambda x : bool_provider(x[&amp;#39;Rev_M&amp;#39;],x[&amp;#39;Year&amp;#39;]),axis=1)] We have a function here which we can use to write any logic. That provides a lot of power for advanced filtering as long as we can play with simple variables.
c. Change Column Types I even use apply to change the column types since I don’t want to remember the syntax for changing column type and also since it lets me do much more complicated things.
The usual syntax to change column type is astype in Pandas. So if I had a column named price in my data in an str format. I could do this:
df[&amp;#39;Price&amp;#39;] = newDf[&amp;#39;Price&amp;#39;].astype(&amp;#39;int&amp;#39;) But sometimes it won’t work as expected.
You might get the error: ValueError: invalid literal for long() with base 10: ‘13,000’. That is you cannot cast a string with “,” to an int. To do that we first have to get rid of the comma.
After facing this problem time and again, I have stopped using astype altogether now and just use apply to change column types.
df[&amp;#39;Price&amp;#39;] = df.apply(lambda x: int(x[&amp;#39;Price&amp;#39;].replace(&amp;#39;,&amp;#39;, &amp;#39;&amp;#39;)),axis=1) And lastly, there is progress_apply progress_apply is a function that comes with tqdm package.
And this has saved me a lot of time.
Sometimes when you have got a lot of rows in your data, or you end up writing a pretty complex apply function, you will see that apply might take a lot of time.
I have seen apply taking hours when working with Spacy. In such cases, you might like to see the progress bar with apply.
You can use tqdm for that.
After the initial imports at the top of your notebook, just replace apply with progress_apply and everything remains the same.
from tqdm import tqdm, tqdm_notebook tqdm_notebook().pandas() df.progress_apply(lambda x: custom_rating_function(x[&amp;#39;Genre&amp;#39;],x[&amp;#39;Rating&amp;#39;]),axis=1) And you get progress bars.
Recommendation:vWhenever you see that you have to create a column with custom complex logic, think of apply and lambda. Try using progress_apply too.
Aggregation on Dataframes: groupby groupby will come up a lot of times whenever you want to aggregate your data. Pandas lets you do this efficiently with the groupby function.
There are a lot of ways that you can use groupby. I have seen a lot of versions, but I prefer a particular style since I feel the version I use is easy, intuitive, and scalable for different use cases.
df.groupby(list of columns to groupby on).aggregate({&amp;#39;colname&amp;#39;:func1, &amp;#39;colname2&amp;#39;:func2}).reset_index() Now you see it is pretty simple. You just have to worry about supplying two primary pieces of information.
 List of columns to groupby on, and
 A dictionary of columns and functions you want to apply to those columns
  reset_index() is a function that resets the index of a dataframe. I apply this function ALWAYS whenever I do a groupby, and you might think of it as a default syntax for groupby operations.
Let us check out an example.
# Find out the sum of votes and revenue by year import numpy as np df.groupby([&amp;#39;Year&amp;#39;]).aggregate({&amp;#39;Votes&amp;#39;:np.sum, &amp;#39;Rev_M&amp;#39;:np.sum}).reset_index() You might also want to group by more than one column. It is fairly straightforward.
df.groupby([&amp;#39;Year&amp;#39;,&amp;#39;Genre&amp;#39;]).aggregate({&amp;#39;Votes&amp;#39;:np.sum, &amp;#39;Rev_M&amp;#39;:np.sum}).reset_index() Recommendation: Stick to one syntax for groupby. Pick your own if you don’t like mine but stick to one.
Dealing with Multiple Dataframes: Concat and Merge: a. concat Sometimes we get data from different sources. Or someone comes to you with multiple files with each file having data for a particular year.
How do we create a single dataframe from a single dataframe?
Here we will create our use case artificially since we just have a single file. We are creating two dataframes first using the basic filter operations we already know.
movies_2006 = df[df[&amp;#39;Year&amp;#39;]==2006] movies_2007 = df[df[&amp;#39;Year&amp;#39;]==2007] Here we start with two dataframes: movies_2006 containing info for movies released in 2006 and movies_2007 containing info for movies released in 2007. We want to create a single dataframe that includes movies from both 2006 and 2007
movies_06_07 = pd.concat([movies_2006,movies_2007]) b. merge Most of the data that you will encounter will never come in a single file. One of the files might contain ratings for a particular movie, and another might provide the number of votes for a movie.
In such a case we have two dataframes which need to be merged so that we can have all the information in a single view.
Here we will create our use case artificially since we just have a single file. We are creating two dataframes first using the basic column subset operations we already know.
rating_dataframe = df[[&amp;#39;Title&amp;#39;,&amp;#39;Rating&amp;#39;]] votes_dataframe = df[[&amp;#39;Title&amp;#39;,&amp;#39;Votes&amp;#39;]] We need to have all this information in a single dataframe. How do we do this?
rating_vote_df = pd.merge(rating_dataframe,votes_dataframe,on=&amp;#39;Title&amp;#39;,how=&amp;#39;left&amp;#39;) rating_vote_df.head() We provide this merge function with four attributes- 1st DF, 2nd DF, join on which column and the joining criteria:[&#39;left&#39;,&#39;right&#39;,&#39;inner&#39;,&#39;outer&#39;]
Recommendation: I usually always end up using left join. You will rarely need to join using outer or right. Actually whenever you need to do a right join you actually just really need a left join with the order of dataframes reversed in the merge function.
Reshaping Dataframes: Melt and pivot_table(reverseMelt) Most of the time, we don’t get data in the exact form we want.
For example, sometimes we might have data in columns which we might need in rows.
Let us create an artificial example again. You can look at the code below that I use to create the example, but really it doesn’t matter.
genre_set = set() for genre in df[&amp;#39;Genre&amp;#39;].unique(): for g in genre.split(&amp;#34;,&amp;#34;): genre_set.add(g) for genre in genre_set: df[genre] = df[&amp;#39;Genre&amp;#39;].apply(lambda x: 1 if genre in x else 0) working_df = df[[&amp;#39;Title&amp;#39;,&amp;#39;Rating&amp;#39;, &amp;#39;Votes&amp;#39;, &amp;#39;Rev_M&amp;#39;]&#43;list(genre_set)] working_df.head() So we start from a working_df like this:
Now, this is not particularly a great structure to have data in. We might like it better if we had a dataframe with only one column Genre and we can have multiple rows repeated for the same movie. So the movie ‘Prometheus’ might be having three rows since it has three genres. How do we make that work?
We use melt:
reshaped_df = pd.melt(working_df,id_vars = [&amp;#39;Title&amp;#39;,&amp;#39;Rating&amp;#39;,&amp;#39;Votes&amp;#39;,&amp;#39;Rev_M&amp;#39;],value_vars = list(genre_set),var_name = &amp;#39;Genre&amp;#39;, value_name =&amp;#39;Flag&amp;#39;) reshaped_df.head() So in this melt function, we provided five attributes:
 dataframe_name = working_df
 id_vars: List of vars we want in the current form only.
 value_vars: List of vars we want to melt/put in the same column
 var_name: name of the column for value_vars
 value_name: name of the column for value of value_vars
  There is still one thing remaining. For Prometheus, we see that it is a thriller and the flag is 0. The flag 0 is unnecessary data we can filter out, and we will have our results. We keep only the genres with flag 1
reshaped_df = reshaped_df[reshaped_df[&amp;#39;Flag&amp;#39;]==1] What if we want to go back?
We need the values in a column to become multiple columns. How? We use pivot_table
re_reshaped_df = reshaped_df.pivot_table(index=[&amp;#39;Title&amp;#39;,&amp;#39;Rating&amp;#39;,&amp;#39;Votes&amp;#39;,&amp;#39;Rev_M&amp;#39;], columns=&amp;#39;Genre&amp;#39;, values=&amp;#39;Flag&amp;#39;, aggfunc=&amp;#39;sum&amp;#39;).reset_index() re_reshaped_df.head() We provided four attributes to the pivot_table function.
 index: We don’t want to change these column structures
 columns: explode this column into multiple columns
 values: use this column to aggregate
 aggfunc: the aggregation function.
  We can then fill the missing values by 0 using fillna
re_reshaped_df=re_reshaped_df.fillna(0) Recommendation: Multiple columns to one column: melt and One column to multiple columns: pivot_table . There are other ways to do melt — stack and different ways to do pivot_table: pivot,unstack. Stay away from them and just use melt and pivot_table. There are some valid reasons for this like unstack and stack will create multi-index and we don’t want to deal with that, and pivot cannot take multiple columns as the index.
Conclusion  With Pandas, less choice is more
 Here I have tried to profile some of the most useful functions in pandas I end up using most often.
Pandas is a vast library with a lot of functionality and custom options. That makes it essential that you should have a mindmap where you stick to a particular syntax for a specific thing.
Here I have shared mine, and you can proceed with it and make it better as your understanding of the library grows.
I hope you found this post useful and worth your time. I tried to make this as simple as possible, but you may always ask me or see the documentation for doubts.
Whole code and data are posted in the Kaggle Kernel.
Also, if you want to learn more about Python 3, I would like to call out an excellent course on Learn Intermediate level Python from the University of Michigan. Do check it out.
I am going to be writing more of such posts in the future too. Let me know what you think about them. Follow me up at Medium or Subscribe to my blog.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>The Hitchhikers guide to handle Big Data using Spark</title>
      <link>https://mlwhiz.com/blog/2019/07/07/spark_hitchhiker/</link>
      <pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/07/07/spark_hitchhiker/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/spark/spark.jpeg"></media:content>
      

      
      <description>Big Data has become synonymous with Data engineering.
But the line between Data Engineering and Data scientists is blurring day by day.
At this point in time, I think that Big Data must be in the repertoire of all data scientists.
Reason: Too much data is getting generated day by day
And that brings us to Spark.
Now most of the Spark documentation, while good, did not explain it from the perspective of a data scientist.</description>

      <content:encoded>  
        
        <![CDATA[    Big Data has become synonymous with Data engineering.
But the line between Data Engineering and Data scientists is blurring day by day.
At this point in time, I think that Big Data must be in the repertoire of all data scientists.
Reason: Too much data is getting generated day by day
And that brings us to Spark.
Now most of the Spark documentation, while good, did not explain it from the perspective of a data scientist.
So I thought of giving it a shot.
This post is going to be about — “How to make Spark work?”
This post is going to be quite long. Actually my longest post on medium, so go pick up a Coffee.
How it all started?-MapReduce   Suppose you are tasked with cutting all the trees in the forest. Perhaps not a good business with all the global warming, but here it serves our purpose and we are talking hypothetically, so I will continue. You have two options:
 Get Batista with an electric powered chainsaw to do your work and make him cut each tree one by one.
 Get 500 normal guys with normal axes and make them work on different trees.
  Which would you prefer?
Although Option 1 is still the way some people would go, the need for option 2 led to the emergence of MapReduce.
In Bigdata speak, we call the Batista solution as scaling vertically/scaling-upas in we add/stuff a lot of RAM and hard disk in a single worker.
And the second solution is called scaling horizontally/scaling-sideways. As in you connect a lot of ordinary machines(with less RAM) together and use them in parallel.
Now, vertical scaling has certain benefits over Horizontal scaling:
 It is fast if the size of the problem is small: Think 2 trees. Batista would be through with both of them with his awesome chainsaw while our two guys would be still hacking with their axes.
 It is easy to understand. This is how we have always done things. We normally think about things in a sequential pattern and that is how our whole computer architecture and design has evolved.
  But, Horizontal Scaling is
 Less Expensive: Getting 50 normal guys itself is much cheaper than getting a single guy like Batista. Apart from that Batista needs a lot of care and maintenance to keep him cool and he is very sensitive to even small things just like machines with a high amount of RAM.
 Faster when the size of the problem is big: Now imagine 1000 trees and 1000 workers vs a single Batista. With Horizontal Scaling, if we face a very large problem we will just hire 100 or maybe 1000 more cheap workers. It doesn’t work like that with Batista. You have to increase RAM and that means more cooling infrastructure and more maintenance costs.
    MapReduce is what makes the second option possible by letting us use a cluster of computers for parallelization.
Now, MapReduce looks like a fairly technical term. But let us break it a little. MapReduce is made up of two terms:
Map: It is basically the apply/map function. We split our data into n chunks and send each chunk to a different worker(Mapper). If there is any function we would like to apply over the rows of Data our worker does that.
Reduce: Aggregate the data using some function based on a groupby key. It is basically a groupby.
Of course, there is a lot going in the background to make the system work as intended.
Don’t worry, if you don’t understand it yet. Just keep reading. Maybe you will understand it when we use MapReduce ourselves in the examples I am going to provide.
Why Spark?   Hadoop was the first open source system that introduced us to the MapReduce paradigm of programming and Spark is the system that made it faster, much much faster(100x).
There used to be a lot of data movement in Hadoop as it used to write intermediate results to the file system.
This affected the speed at which you could do analysis.
Spark provided us with an in-memory model, so Spark doesn’t write too much to the disk while working.
Simply, Spark is faster than Hadoop and a lot of people use Spark now.
So without further ado let us get started.
Getting Started with Spark Installing Spark is actually a headache of its own.
Since we want to understand how it works and really work with it, I would suggest that you use Sparks on Databricks here online with the community edition. Don’t worry it is free.
  Once you register and login will be presented with the following screen.
  You can start a new notebook here.
Select the Python notebook and give any name to your notebook.
Once you start a new notebook and try to execute any command, the notebook will ask you if you want to start a new cluster. Do it.
The next step will be to check if the sparkcontext is present. To check if the sparkcontext is present you just have to run this command:
sc   This means that we are set up with a notebook where we can run Spark.
Load Some Data The next step is to upload some data we will use to learn Spark. Just click on ‘Import and Explore Data’ on the home tab.
I will end up using multiple datasets by the end of this post but let us start with something very simple.
Let us add the file shakespeare.txt which you can download from here.
  You can see that the file is loaded to /FileStore/tables/shakespeare.txt location.
Our First Spark Program I like to learn by examples so let’s get done with the “Hello World” of Distributed computing: The WordCount Program.
# Distribute the data - Create a RDD lines = sc.textFile(&amp;#34;/FileStore/tables/shakespeare.txt&amp;#34;) # Create a list with all words, Create tuple (word,1), reduce by key i.e. the word counts = (lines.flatMap(lambda x: x.split(&amp;#39; &amp;#39;)) .map(lambda x: (x, 1)) .reduceByKey(lambda x,y : x &#43; y)) # get the output on local output = counts.take(10) # print output for (word, count) in output: print(&amp;#34;%s: %i&amp;#34; % (word, count))   So that is a small example which counts the number of words in the document and prints 10 of them.
And most of the work gets done in the second command.
Don’t worry if you are not able to follow this yet as I still need to tell you about the things that make Spark work.
But before we get into Spark basics, Let us refresh some of our Python Basics. Understanding Spark becomes a lot easier if you have used functional programming with Python.
For those of you who haven’t used it, below is a brief intro.
A functional approach to programming in Python   1. Map map is used to map a function to an array or a list. Say you want to apply some function to every element in a list.
You can do this by simply using a for loop but python lambda functions let you do this in a single line in Python.
my_list = [1,2,3,4,5,6,7,8,9,10] # Lets say I want to square each term in my_list. squared_list = map(lambda x:x**2,my_list) print(list(squared_list)) ------------------------------------------------------------ [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] In the above example, you could think of map as a function which takes two arguments — A function and a list.
It then applies the function to every element of the list.
What lambda allows you to do is write an inline function. In here the part lambda x:x**2 defines a function that takes x as input and returns x².
You could have also provided a proper function in place of lambda. For example:
def squared(x): return x**2 my_list = [1,2,3,4,5,6,7,8,9,10] # Lets say I want to square each term in my_list. squared_list = map(squared,my_list) print(list(squared_list)) ------------------------------------------------------------ [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] The same result, but the lambda expressions make the code compact and a lot more readable.
2. Filter The other function that is used extensively is the filter function. This function takes two arguments — A condition and the list to filter.
If you want to filter your list using some condition you use filter.
my_list = [1,2,3,4,5,6,7,8,9,10] # Lets say I want only the even numbers in my list. filtered_list = filter(lambda x:x%2==0,my_list) print(list(filtered_list)) --------------------------------------------------------------- [2, 4, 6, 8, 10] 3. Reduce The next function I want to talk about is the reduce function. This function will be the workhorse in Spark.
This function takes two arguments — a function to reduce that takes two arguments, and a list over which the reduce function is to be applied.
import functools my_list = [1,2,3,4,5] # Lets say I want to sum all elements in my list. sum_list = functools.reduce(lambda x,y:x&#43;y,my_list) print(sum_list) In python2 reduce used to be a part of Python, now we have to use reduce as a part of functools.
Here the lambda function takes in two values x, y and returns their sum. Intuitively you can think that the reduce function works as:
 Reduce function first sends 1,2 ; the lambda function returns 3 Reduce function then sends 3,3 ; the lambda function returns 6 Reduce function then sends 6,4 ; the lambda function returns 10 Reduce function finally sends 10,5 ; the lambda function returns 15  A condition on the lambda function we use in reduce is that it must be:
 commutative that is a &#43; b = b &#43; a and
 associative that is (a &#43; b) &#43; c == a &#43; (b &#43; c).
  In the above case, we used sum which is commutative as well as associative. Other functions that we could have used: max, min, * etc.
Moving Again to Spark As we have now got the fundamentals of Python Functional Programming out of the way, lets again head to Spark.
But first, let us delve a little bit into how spark works. Spark actually consists of two things a driver and workers.
Workers normally do all the work and the driver makes them do that work.
RDD An RDD(Resilient Distributed Dataset) is a parallelized data structure that gets distributed across the worker nodes. They are the basic units of Spark programming.
In our wordcount example, in the first line
lines = sc.textFile(&amp;quot;/FileStore/tables/shakespeare.txt&amp;quot;)  We took a text file and distributed it across worker nodes so that they can work on it in parallel. We could also parallelize lists using the function sc.parallelize
For example:
data = [1,2,3,4,5,6,7,8,9,10] new_rdd = sc.parallelize(data,4) new_rdd --------------------------------------------------------------- ParallelCollectionRDD[22] at parallelize at PythonRDD.scala:267 In Spark, we can do two different types of operations on RDD: Transformations and Actions.
 Transformations: Create new datasets from existing RDDs
 Actions: Mechanism to get results out of Spark
  Transformation Basics   So let us say you have got your data in the form of an RDD.
To requote your data is now accessible to the worker machines. You want to do some transformations on the data now.
You may want to filter, apply some function, etc.
In Spark, this is done using Transformation functions.
Spark provides many transformation functions. You can see a comprehensive list here. Some of the main ones that I use frequently are:
1. Map: Applies a given function to an RDD.
Note that the syntax is a little bit different from Python, but it necessarily does the same thing. Don’t worry about collect yet. For now, just think of it as a function that collects the data in squared_rdd back to a list.
data = [1,2,3,4,5,6,7,8,9,10] rdd = sc.parallelize(data,4) squared_rdd = rdd.map(lambda x:x**2) squared_rdd.collect() ------------------------------------------------------ [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] 2. Filter: Again no surprises here. Takes as input a condition and keeps only those elements that fulfill that condition.
data = [1,2,3,4,5,6,7,8,9,10] rdd = sc.parallelize(data,4) filtered_rdd = rdd.filter(lambda x:x%2==0) filtered_rdd.collect() ------------------------------------------------------ [2, 4, 6, 8, 10] 3. distinct: Returns only distinct elements in an RDD.
data = [1,2,2,2,2,3,3,3,3,4,5,6,7,7,7,8,8,8,9,10] rdd = sc.parallelize(data,4) distinct_rdd = rdd.distinct() distinct_rdd.collect() ------------------------------------------------------ [8, 4, 1, 5, 9, 2, 10, 6, 3, 7]  4. flatmap: Similar to map, but each input item can be mapped to 0 or more output items.
data = [1,2,3,4] rdd = sc.parallelize(data,4) flat_rdd = rdd.flatMap(lambda x:[x,x**3]) flat_rdd.collect() ------------------------------------------------------ [1, 1, 2, 8, 3, 27, 4, 64] 5. Reduce By Key: The parallel to the reduce in Hadoop MapReduce.
Now Spark cannot provide the value if it just worked with Lists.
In Spark, there is a concept of pair RDDs that makes it a lot more flexible. Let&amp;rsquo;s assume we have a data in which we have a product, its category, and its selling price. We can still parallelize the data.
data = [(&amp;#39;Apple&amp;#39;,&amp;#39;Fruit&amp;#39;,200),(&amp;#39;Banana&amp;#39;,&amp;#39;Fruit&amp;#39;,24),(&amp;#39;Tomato&amp;#39;,&amp;#39;Fruit&amp;#39;,56),(&amp;#39;Potato&amp;#39;,&amp;#39;Vegetable&amp;#39;,103),(&amp;#39;Carrot&amp;#39;,&amp;#39;Vegetable&amp;#39;,34)] rdd = sc.parallelize(data,4) Right now our RDD rdd holds tuples.
Now we want to find out the total sum of revenue that we got from each category.
To do that we have to transform our rdd to a pair rdd so that it only contains key-value pairs/tuples.
category_price_rdd = rdd.map(lambda x: (x[1],x[2])) category_price_rdd.collect() ----------------------------------------------------------------- [(‘Fruit’, 200), (‘Fruit’, 24), (‘Fruit’, 56), (‘Vegetable’, 103), (‘Vegetable’, 34)] Here we used the map function to get it in the format we wanted. When working with textfile, the RDD that gets formed has got a lot of strings. We use map to convert it into a format that we want.
So now our category_price_rdd contains the product category and the price at which the product sold.
Now we want to reduce on the key category and sum the prices. We can do this by:
category_total_price_rdd = category_price_rdd.reduceByKey(lambda x,y:x&#43;y) category_total_price_rdd.collect() --------------------------------------------------------- [(‘Vegetable’, 137), (‘Fruit’, 280)] 6. Group By Key: Similar to reduceByKey but does not reduces just puts all the elements in an iterator. For example, if we wanted to keep as key the category and as the value all the products we would use this function.
Let us again use map to get data in the required form.
data = [(&amp;#39;Apple&amp;#39;,&amp;#39;Fruit&amp;#39;,200),(&amp;#39;Banana&amp;#39;,&amp;#39;Fruit&amp;#39;,24),(&amp;#39;Tomato&amp;#39;,&amp;#39;Fruit&amp;#39;,56),(&amp;#39;Potato&amp;#39;,&amp;#39;Vegetable&amp;#39;,103),(&amp;#39;Carrot&amp;#39;,&amp;#39;Vegetable&amp;#39;,34)] rdd = sc.parallelize(data,4) category_product_rdd = rdd.map(lambda x: (x[1],x[0])) category_product_rdd.collect() ------------------------------------------------------------ [(&amp;#39;Fruit&amp;#39;, &amp;#39;Apple&amp;#39;), (&amp;#39;Fruit&amp;#39;, &amp;#39;Banana&amp;#39;), (&amp;#39;Fruit&amp;#39;, &amp;#39;Tomato&amp;#39;), (&amp;#39;Vegetable&amp;#39;, &amp;#39;Potato&amp;#39;), (&amp;#39;Vegetable&amp;#39;, &amp;#39;Carrot&amp;#39;)] We then use groupByKey as:
grouped_products_by_category_rdd = category_product_rdd.groupByKey() findata = grouped_products_by_category_rdd.collect() for data in findata: print(data[0],list(data[1])) ------------------------------------------------------------ Vegetable [&amp;#39;Potato&amp;#39;, &amp;#39;Carrot&amp;#39;] Fruit [&amp;#39;Apple&amp;#39;, &amp;#39;Banana&amp;#39;, &amp;#39;Tomato&amp;#39;] Here the groupByKey function worked and it returned the category and the list of products in that category.
Action Basics   You have filtered your data, mapped some functions on it. Done your computation.
Now you want to get the data on your local machine or save it to a file or show the results in the form of some graphs in excel or any visualization tool.
You will need actions for that. A comprehensive list of actions is provided here.
Some of the most common actions that I tend to use are:
1. collect: We have already used this action many times. It takes the whole RDD and brings it back to the driver program.
2. reduce: Aggregate the elements of the dataset using a function func (which takes two arguments and returns one). The function should be commutative and associative so that it can be computed correctly in parallel.
rdd = sc.parallelize([1,2,3,4,5]) rdd.reduce(lambda x,y : x&#43;y) --------------------------------- 15 3. take: Sometimes you will need to see what your RDD contains without getting all the elements in memory itself. take returns a list with the first n elements of the RDD.
rdd = sc.parallelize([1,2,3,4,5]) rdd.take(3) --------------------------------- [1, 2, 3] 4. takeOrdered: takeOrdered returns the first n elements of the RDD using either their natural order or a custom comparator.
rdd = sc.parallelize([5,3,12,23]) # descending order rdd.takeOrdered(3,lambda s:-1*s) ---- [23, 12, 5] rdd = sc.parallelize([(5,23),(3,34),(12,344),(23,29)]) # descending order rdd.takeOrdered(3,lambda s:-1*s[1]) --- [(12, 344), (3, 34), (23, 29)] We have our basics covered finally. Let us get back to our wordcount example
Understanding The WordCount Example   Now we sort of understand the transformations and the actions provided to us by Spark.
It should not be difficult to understand the wordcount program now. Let us go through the program line by line.
The first line creates an RDD and distributes it to the workers.
lines = sc.textFile(&amp;quot;/FileStore/tables/shakespeare.txt&amp;quot;)  This RDD lines contains a list of sentences in the file. You can see the rdd content using take
lines.take(5) -------------------------------------------- [&#39;The Project Gutenberg EBook of The Complete Works of William Shakespeare, by &#39;, &#39;William Shakespeare&#39;, &#39;&#39;, &#39;This eBook is for the use of anyone anywhere at no cost and with&#39;, &#39;almost no restrictions whatsoever. You may copy it, give it away or&#39;]  This RDD is of the form:
[&#39;word1 word2 word3&#39;,&#39;word4 word3 word2&#39;]  This next line is actually the workhorse function in the whole script.
counts = (lines.flatMap(lambda x: x.split(&#39; &#39;)) .map(lambda x: (x, 1)) .reduceByKey(lambda x,y : x &#43; y))  It contains a series of transformations that we do to the lines RDD. First of all, we do a flatmap transformation.
The flatmap transformation takes as input the lines and gives words as output. So after the flatmap transformation, the RDD is of the form:
[&#39;word1&#39;,&#39;word2&#39;,&#39;word3&#39;,&#39;word4&#39;,&#39;word3&#39;,&#39;word2&#39;]  Next, we do a map transformation on the flatmap output which converts the RDD to :
[(&#39;word1&#39;,1),(&#39;word2&#39;,1),(&#39;word3&#39;,1),(&#39;word4&#39;,1),(&#39;word3&#39;,1),(&#39;word2&#39;,1)]  Finally, we do a reduceByKey transformation which counts the number of time each word appeared.
After which the RDD approaches the final desirable form.
[(&#39;word1&#39;,1),(&#39;word2&#39;,2),(&#39;word3&#39;,2),(&#39;word4&#39;,1)]  This next line is an action that takes the first 10 elements of the resulting RDD locally.
output = counts.take(10)  This line just prints the output
for (word, count) in output: print(&amp;quot;%s: %i&amp;quot; % (word, count))  And that is it for the wordcount program. Hope you understand it now.
So till now, we talked about the Wordcount example and the basic transformations and actions that you could use in Spark. But we don’t do wordcount in real life.
We have to work on bigger problems which are much more complex. Worry not! Whatever we have learned till now will let us do that and more.
Spark in Action with Example   Let us work with a concrete example which takes care of some usual transformations.
We will work on Movielens ml-100k.zip dataset which is a stable benchmark dataset. 100,000 ratings from 1000 users on 1700 movies. Released 4&amp;frasl;1998.
The Movielens dataset contains a lot of files but we are going to be working with 3 files only:
1) Users: This file name is kept as “u.user”, The columns in this file are:
[&#39;user_id&#39;, &#39;age&#39;, &#39;sex&#39;, &#39;occupation&#39;, &#39;zip_code&#39;]  2) Ratings: This file name is kept as “u.data”, The columns in this file are:
[&#39;user_id&#39;, &#39;movie_id&#39;, &#39;rating&#39;, &#39;unix_timestamp&#39;]  3) Movies: This file name is kept as “u.item”, The columns in this file are:
[&#39;movie_id&#39;, &#39;title&#39;, &#39;release_date&#39;, &#39;video_release_date&#39;, &#39;imdb_url&#39;, and 18 more columns.....]  Let us start by importing these 3 files into our spark instance using ‘Import and Explore Data’ on the home tab.
  Our business partner now comes to us and asks us to find out the 25 most rated movie titles from this data. How many times a movie has been rated?
Let us load the data in different RDDs and see what the data contains.
userRDD = sc.textFile(&amp;#34;/FileStore/tables/u.user&amp;#34;) ratingRDD = sc.textFile(&amp;#34;/FileStore/tables/u.data&amp;#34;) movieRDD = sc.textFile(&amp;#34;/FileStore/tables/u.item&amp;#34;) print(&amp;#34;userRDD:&amp;#34;,userRDD.take(1)) print(&amp;#34;ratingRDD:&amp;#34;,ratingRDD.take(1)) print(&amp;#34;movieRDD:&amp;#34;,movieRDD.take(1)) ----------------------------------------------------------- userRDD: [&amp;#39;1|24|M|technician|85711&amp;#39;] ratingRDD: [&amp;#39;196\t242\t3\t881250949&amp;#39;] movieRDD: [&amp;#39;1|Toy Story (1995)|01-Jan-1995||http://us.imdb.com/M/title-exact?Toy%20Story%20(1995)|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0&amp;#39;] We note that to answer this question we will need to use the ratingRDD. But the ratingRDD does not have the movie name.
So we would have to merge movieRDD and ratingRDD using movie_id.
How we would do that in Spark?
Below is the code. We also use a new transformation leftOuterJoin. Do read the docs and comments in the below code.
# Create a RDD from RatingRDD that only contains the two columns of interest i.e. movie_id,rating. RDD_movid_rating = ratingRDD.map(lambda x : (x.split(&amp;#34;\t&amp;#34;)[1],x.split(&amp;#34;\t&amp;#34;)[2])) print(&amp;#34;RDD_movid_rating:&amp;#34;,RDD_movid_rating.take(4)) # Create a RDD from MovieRDD that only contains the two columns of interest i.e. movie_id,title. RDD_movid_title = movieRDD.map(lambda x : (x.split(&amp;#34;|&amp;#34;)[0],x.split(&amp;#34;|&amp;#34;)[1])) print(&amp;#34;RDD_movid_title:&amp;#34;,RDD_movid_title.take(2)) # merge these two pair RDDs based on movie_id. For this we will use the transformation leftOuterJoin(). See the transformation document. rdd_movid_title_rating = RDD_movid_rating.leftOuterJoin(RDD_movid_title) print(&amp;#34;rdd_movid_title_rating:&amp;#34;,rdd_movid_title_rating.take(1)) # use the RDD in previous step to create (movie,1) tuple pair RDD rdd_title_rating = rdd_movid_title_rating.map(lambda x: (x[1][1],1 )) print(&amp;#34;rdd_title_rating:&amp;#34;,rdd_title_rating.take(2)) # Use the reduceByKey transformation to reduce on the basis of movie_title rdd_title_ratingcnt = rdd_title_rating.reduceByKey(lambda x,y: x&#43;y) print(&amp;#34;rdd_title_ratingcnt:&amp;#34;,rdd_title_ratingcnt.take(2)) # Get the final answer by using takeOrdered Transformation print &amp;#34;#####################################&amp;#34; print &amp;#34;25 most rated movies:&amp;#34;,rdd_title_ratingcnt.takeOrdered(25,lambda x:-x[1]) print &amp;#34;#####################################&amp;#34; OUTPUT: --------------------------------------------------------------------RDD_movid_rating: [(&#39;242&#39;, &#39;3&#39;), (&#39;302&#39;, &#39;3&#39;), (&#39;377&#39;, &#39;1&#39;), (&#39;51&#39;, &#39;2&#39;)] RDD_movid_title: [(&#39;1&#39;, &#39;Toy Story (1995)&#39;), (&#39;2&#39;, &#39;GoldenEye (1995)&#39;)] rdd_movid_title_rating: [(&#39;1440&#39;, (&#39;3&#39;, &#39;Above the Rim (1994)&#39;))] rdd_title_rating: [(&#39;Above the Rim (1994)&#39;, 1), (&#39;Above the Rim (1994)&#39;, 1)] rdd_title_ratingcnt: [(&#39;Mallrats (1995)&#39;, 54), (&#39;Michael Collins (1996)&#39;, 92)] ##################################### 25 most rated movies: [(&#39;Star Wars (1977)&#39;, 583), (&#39;Contact (1997)&#39;, 509), (&#39;Fargo (1996)&#39;, 508), (&#39;Return of the Jedi (1983)&#39;, 507), (&#39;Liar Liar (1997)&#39;, 485), (&#39;English Patient, The (1996)&#39;, 481), (&#39;Scream (1996)&#39;, 478), (&#39;Toy Story (1995)&#39;, 452), (&#39;Air Force One (1997)&#39;, 431), (&#39;Independence Day (ID4) (1996)&#39;, 429), (&#39;Raiders of the Lost Ark (1981)&#39;, 420), (&#39;Godfather, The (1972)&#39;, 413), (&#39;Pulp Fiction (1994)&#39;, 394), (&#39;Twelve Monkeys (1995)&#39;, 392), (&#39;Silence of the Lambs, The (1991)&#39;, 390), (&#39;Jerry Maguire (1996)&#39;, 384), (&#39;Chasing Amy (1997)&#39;, 379), (&#39;Rock, The (1996)&#39;, 378), (&#39;Empire Strikes Back, The (1980)&#39;, 367), (&#39;Star Trek: First Contact (1996)&#39;, 365), (&#39;Back to the Future (1985)&#39;, 350), (&#39;Titanic (1997)&#39;, 350), (&#39;Mission: Impossible (1996)&#39;, 344), (&#39;Fugitive, The (1993)&#39;, 336), (&#39;Indiana Jones and the Last Crusade (1989)&#39;, 331)] #####################################  Star Wars is the most rated movie in the Movielens Dataset.
Now we could have done all this in a single command using the below command but the code is a little messy now.
I did this to show that you can use chaining functions with Spark and you could bypass the process of variable creation.
print(((ratingRDD.map(lambda x : (x.split(&amp;#34;\t&amp;#34;)[1],x.split(&amp;#34;\t&amp;#34;)[2]))). leftOuterJoin(movieRDD.map(lambda x : (x.split(&amp;#34;|&amp;#34;)[0],x.split(&amp;#34;|&amp;#34;)[1])))). map(lambda x: (x[1][1],1)). reduceByKey(lambda x,y: x&#43;y). takeOrdered(25,lambda x:-x[1])) Let us do one more. For practice:
Now we want to find the most highly rated 25 movies using the same dataset. We actually want only those movies which have been rated at least 100 times.
# We already have the RDD rdd_movid_title_rating: [(u&amp;#39;429&amp;#39;, (u&amp;#39;5&amp;#39;, u&amp;#39;Day the Earth Stood Still, The (1951)&amp;#39;))] # We create an RDD that contains sum of all the ratings for a particular movie rdd_title_ratingsum = (rdd_movid_title_rating. map(lambda x: (x[1][1],int(x[1][0]))). reduceByKey(lambda x,y:x&#43;y)) print(&amp;#34;rdd_title_ratingsum:&amp;#34;,rdd_title_ratingsum.take(2)) # Merge this data with the RDD rdd_title_ratingcnt we created in the last step # And use Map function to divide ratingsum by rating count. rdd_title_ratingmean_rating_count = (rdd_title_ratingsum. leftOuterJoin(rdd_title_ratingcnt). map(lambda x:(x[0],(float(x[1][0])/x[1][1],x[1][1])))) print(&amp;#34;rdd_title_ratingmean_rating_count:&amp;#34;,rdd_title_ratingmean_rating_count.take(1)) # We could use take ordered here only but we want to only get the movies which have count # of ratings more than or equal to 100 so lets filter the data RDD. rdd_title_rating_rating_count_gt_100 = (rdd_title_ratingmean_rating_count. filter(lambda x: x[1][1]&amp;gt;=100)) print(&amp;#34;rdd_title_rating_rating_count_gt_100:&amp;#34;,rdd_title_rating_rating_count_gt_100.take(1)) # Get the final answer by using takeOrdered Transformation print(&amp;#34;#####################################&amp;#34;) print (&amp;#34;25 highly rated movies:&amp;#34;) print(rdd_title_rating_rating_count_gt_100.takeOrdered(25,lambda x:-x[1][0])) print(&amp;#34;#####################################&amp;#34;) OUTPUT: ------------------------------------------------------------ rdd_title_ratingsum: [(&#39;Mallrats (1995)&#39;, 186), (&#39;Michael Collins (1996)&#39;, 318)] rdd_title_ratingmean_rating_count: [(&#39;Mallrats (1995)&#39;, (3.4444444444444446, 54))] rdd_title_rating_rating_count_gt_100: [(&#39;Butch Cassidy and the Sundance Kid (1969)&#39;, (3.949074074074074, 216))] ##################################### 25 highly rated movies: [(&#39;Close Shave, A (1995)&#39;, (4.491071428571429, 112)), (&amp;quot;Schindler&#39;s List (1993)&amp;quot;, (4.466442953020135, 298)), (&#39;Wrong Trousers, The (1993)&#39;, (4.466101694915254, 118)), (&#39;Casablanca (1942)&#39;, (4.45679012345679, 243)), (&#39;Shawshank Redemption, The (1994)&#39;, (4.445229681978798, 283)), (&#39;Rear Window (1954)&#39;, (4.3875598086124405, 209)), (&#39;Usual Suspects, The (1995)&#39;, (4.385767790262173, 267)), (&#39;Star Wars (1977)&#39;, (4.3584905660377355, 583)), (&#39;12 Angry Men (1957)&#39;, (4.344, 125)), (&#39;Citizen Kane (1941)&#39;, (4.292929292929293, 198)), (&#39;To Kill a Mockingbird (1962)&#39;, (4.292237442922374, 219)), (&amp;quot;One Flew Over the Cuckoo&#39;s Nest (1975)&amp;quot;, (4.291666666666667, 264)), (&#39;Silence of the Lambs, The (1991)&#39;, (4.28974358974359, 390)), (&#39;North by Northwest (1959)&#39;, (4.284916201117318, 179)), (&#39;Godfather, The (1972)&#39;, (4.283292978208232, 413)), (&#39;Secrets &amp;amp; Lies (1996)&#39;, (4.265432098765432, 162)), (&#39;Good Will Hunting (1997)&#39;, (4.262626262626263, 198)), (&#39;Manchurian Candidate, The (1962)&#39;, (4.259541984732825, 131)), (&#39;Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb (1963)&#39;, (4.252577319587629, 194)), (&#39;Raiders of the Lost Ark (1981)&#39;, (4.252380952380952, 420)), (&#39;Vertigo (1958)&#39;, (4.251396648044692, 179)), (&#39;Titanic (1997)&#39;, (4.2457142857142856, 350)), (&#39;Lawrence of Arabia (1962)&#39;, (4.23121387283237, 173)), (&#39;Maltese Falcon, The (1941)&#39;, (4.2101449275362315, 138)), (&#39;Empire Strikes Back, The (1980)&#39;, (4.204359673024523, 367))] #####################################  We have talked about RDDs till now as they are very powerful.
You can use RDDs to work with non-relational databases too.
They let you do a lot of things that you couldn’t do with SparkSQL?
Yes, you can use SQL with Spark too which I am going to talk about now.
Spark DataFrames   Spark has provided DataFrame API for us Data Scientists to work with relational data. Here is the documentation for the adventurous folks.
Remember that in the background it still is all RDDs and that is why the starting part of this post focussed on RDDs.
I will start with some common functionalities you will need to work with Spark DataFrames. Would look a lot like Pandas with some syntax changes.
1. Reading the File ratings = spark.read.load(&amp;#34;/FileStore/tables/u.data&amp;#34;,format=&amp;#34;csv&amp;#34;, sep=&amp;#34;\t&amp;#34;, inferSchema=&amp;#34;true&amp;#34;, header=&amp;#34;false&amp;#34;) 2. Show File We have two ways to show files using Spark Dataframes.
ratings.show()   display(ratings)   I prefer display as it looks a lot nicer and clean.
3. Change Column names Good functionality. Always required. Don’t forget the * in front of the list.
ratings = ratings.toDF(*[&amp;#39;user_id&amp;#39;, &amp;#39;movie_id&amp;#39;, &amp;#39;rating&amp;#39;, &amp;#39;unix_timestamp&amp;#39;]) display(ratings)   4. Some Basic Stats print(ratings.count()) #Row Count print(len(ratings.columns)) #Column Count --------------------------------------------------------- 100000 4 We can also see the dataframe statistics using:
display(ratings.describe())   5. Select a few columns display(ratings.select(&amp;#39;user_id&amp;#39;,&amp;#39;movie_id&amp;#39;))   6. Filter Filter a dataframe using multiple conditions:
display(ratings.filter((ratings.rating==5) &amp;amp; (ratings.user_id==253)))   7. Groupby We can use groupby function with a spark dataframe too. Pretty much same as a pandas groupby with the exception that you will need to import pyspark.sql.functions
from pyspark.sql import functions as F display(ratings.groupBy(&amp;#34;user_id&amp;#34;).agg(F.count(&amp;#34;user_id&amp;#34;),F.mean(&amp;#34;rating&amp;#34;))) Here we have found the count of ratings and average rating from each user_id
  8. Sort display(ratings.sort(&amp;#34;user_id&amp;#34;))   We can also do a descending sort using F.desc function as below.
# descending Sort from pyspark.sql import functions as F display(ratings.sort(F.desc(&amp;#34;user_id&amp;#34;)))   Joins/Merging with Spark Dataframes I was not able to find a pandas equivalent of merge with Spark DataFrames but we can use SQL with dataframes and thus we can merge dataframes using SQL.
Let us try to run some SQL on Ratings.
We first register the ratings df to a temporary table ratings_table on which we can run sql operations.
As you can see the result of the SQL select statement is again a Spark Dataframe.
ratings.registerTempTable(&amp;#39;ratings_table&amp;#39;) newDF = sqlContext.sql(&amp;#39;select * from ratings_table where rating&amp;gt;4&amp;#39;) display(newDF)   Let us now add one more Spark Dataframe to the mix to see if we can use join using the SQL queries:
#get one more dataframe to join movies = spark.read.load(&amp;#34;/FileStore/tables/u.item&amp;#34;,format=&amp;#34;csv&amp;#34;, sep=&amp;#34;|&amp;#34;, inferSchema=&amp;#34;true&amp;#34;, header=&amp;#34;false&amp;#34;) # change column names movies = movies.toDF(*[&amp;#34;movie_id&amp;#34;,&amp;#34;movie_title&amp;#34;,&amp;#34;release_date&amp;#34;,&amp;#34;video_release_date&amp;#34;,&amp;#34;IMDb_URL&amp;#34;,&amp;#34;unknown&amp;#34;,&amp;#34;Action&amp;#34;,&amp;#34;Adventure&amp;#34;,&amp;#34;Animation &amp;#34;,&amp;#34;Children&amp;#34;,&amp;#34;Comedy&amp;#34;,&amp;#34;Crime&amp;#34;,&amp;#34;Documentary&amp;#34;,&amp;#34;Drama&amp;#34;,&amp;#34;Fantasy&amp;#34;,&amp;#34;Film_Noir&amp;#34;,&amp;#34;Horror&amp;#34;,&amp;#34;Musical&amp;#34;,&amp;#34;Mystery&amp;#34;,&amp;#34;Romance&amp;#34;,&amp;#34;Sci_Fi&amp;#34;,&amp;#34;Thriller&amp;#34;,&amp;#34;War&amp;#34;,&amp;#34;Western&amp;#34;]) display(movies)   Now let us try joining the tables on movie_id to get the name of the movie in the ratings table.
movies.registerTempTable(&amp;#39;movies_table&amp;#39;) display(sqlContext.sql(&amp;#39;select ratings_table.*,movies_table.movie_title from ratings_table left join movies_table on movies_table.movie_id = ratings_table.movie_id&amp;#39;))   Let us try to do what we were doing earlier with the RDDs. Finding the top 25 most rated movies:
mostrateddf = sqlContext.sql(&amp;#39;select movie_id,movie_title, count(user_id) as num_ratings from (select ratings_table.*,movies_table.movie_title from ratings_table left join movies_table on movies_table.movie_id = ratings_table.movie_id)A group by movie_id,movie_title order by num_ratings desc &amp;#39;) display(mostrateddf)   And finding the top 25 highest rated movies having more than 100 votes:
highrateddf = sqlContext.sql(&amp;#39;select movie_id,movie_title, avg(rating) as avg_rating,count(movie_id) as num_ratings from (select ratings_table.*,movies_table.movie_title from ratings_table left join movies_table on movies_table.movie_id = ratings_table.movie_id)A group by movie_id,movie_title having num_ratings&amp;gt;100 order by avg_rating desc &amp;#39;) display(highrateddf)   I have used GROUP BY, HAVING, AND ORDER BY clauses as well as aliases in the above query. That shows that you can do pretty much complex stuff using sqlContext.sql
A Small Note About Display You can also use display command to display charts in your notebooks.
  You can see more options when you select Plot Options.
  Converting from Spark Dataframe to RDD and vice versa: Sometimes you may want to convert to RDD from a spark Dataframe or vice versa so that you can have the best of both worlds.
To convert from DF to RDD, you can simply do :
highratedrdd =highrateddf.rdd highratedrdd.take(2)   To go from an RDD to a dataframe:
from pyspark.sql import Row # creating a RDD first data = [(&amp;#39;A&amp;#39;,1),(&amp;#39;B&amp;#39;,2),(&amp;#39;C&amp;#39;,3),(&amp;#39;D&amp;#39;,4)] rdd = sc.parallelize(data) # map the schema using Row. rdd_new = rdd.map(lambda x: Row(key=x[0], value=int(x[1]))) # Convert the rdd to Dataframe rdd_as_df = sqlContext.createDataFrame(rdd_new) display(rdd_as_df)   RDD provides you with more control at the cost of time and coding effort. While Dataframes provide you with familiar coding platform. And now you can move back and forth between these two.
Conclusion   This was a big post and congratulations if you reached the end.
Spark has provided us with an interface where we could use transformations and actions on our data. Spark also has the Dataframe API to ease the transition of Data scientists to Big Data.
Hopefully, I’ve covered the basics well enough to pique your interest and help you get started with Spark.
You can find all the code at the GitHub repository.
Also, if you want to learn more about Spark and Spark DataFrames, I would like to call out an excellent course on Big Data Essentials which is part of the Big Data Specialization provided by Yandex.
I am going to be writing more of such posts in the future too. Let me know what you think about the series. Follow me up at Medium or Subscribe to my blog.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>The Hitchhiker’s Guide to Feature Extraction</title>
      <link>https://mlwhiz.com/blog/2019/05/19/feature_extraction/</link>
      <pubDate>Sun, 19 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/05/19/feature_extraction/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/features/brain.png"></media:content>
      

      
      <description>Good Features are the backbone of any machine learning model.
And good feature creation often needs domain knowledge, creativity, and lots of time.
In this post, I am going to talk about:
 Various methods of feature creation- Both Automated and manual
 Different Ways to handle categorical features
 Longitude and Latitude features
 Some kaggle tricks
 And some other ideas to think about feature creation.</description>

      <content:encoded>  
        
        <![CDATA[    Good Features are the backbone of any machine learning model.
And good feature creation often needs domain knowledge, creativity, and lots of time.
In this post, I am going to talk about:
 Various methods of feature creation- Both Automated and manual
 Different Ways to handle categorical features
 Longitude and Latitude features
 Some kaggle tricks
 And some other ideas to think about feature creation.
  TLDR; this post is about useful feature engineering methods and tricks that I have learned and end up using often.
1. Automatic Feature Creation using featuretools:   Automation is the future    Have you read about featuretools yet? If not, then you are going to be delighted.
Featuretools is a framework to perform automated feature engineering. It excels at transforming temporal and relational datasets into feature matrices for machine learning.
How? Let us work with a toy example to show you the power of featuretools.
Let us say that we have three tables in our database: Customers, Sessions, and Transactions.
  Datasets and relationships          This is a reasonably good toy dataset to work on since it has time-based columns as well as categorical and numerical columns.
If we were to create features on this data, we would need to do a lot of merging and aggregations using Pandas.
Featuretools makes it so easy for us. Though there are a few things, we will need to learn before our life gets easier.
Featuretools works with entitysets.
You can understand an entityset as a bucket for dataframes as well as relationships between them.
  Entityset = Bucket of dataframes and relationships    So without further ado, let us create an empty entityset. I just gave the name as customers. You can use any name here. It is just an empty bucket right now.
# Create new entityset es = ft.EntitySet(id = &amp;#39;customers&amp;#39;) Let us add our dataframes to it. The order of adding dataframes is not important. To add a dataframe to an existing entityset, we do the below operation.
# Create an entity from the customers dataframe es = es.entity_from_dataframe(entity_id = &amp;#39;customers&amp;#39;, dataframe = customers_df, index = &amp;#39;customer_id&amp;#39;, time_index = &amp;#39;join_date&amp;#39; ,variable_types = {&amp;#34;zip_code&amp;#34;: ft.variable_types.ZIPCode}) So here are a few things we did here to add our dataframe to the empty entityset bucket.
 Provided a entity_id: This is just a name. Put it as customers.
 dataframe name set as customers_df
 index : This argument takes as input the primary key in the table
 time_index : The time index is defined as the first time that any information from a row can be used. For customers, it is the joining date. For transactions, it will be the transaction time.
 variable_types: This is used to specify if a particular variable must be handled differently. In our Dataframe, we have the zip_code variable, and we want to treat it differently, so we use this. These are the different variable types we could use:
  [featuretools.variable_types.variable.Datetime, featuretools.variable_types.variable.Numeric, featuretools.variable_types.variable.Timedelta, featuretools.variable_types.variable.Categorical, featuretools.variable_types.variable.Text, featuretools.variable_types.variable.Ordinal, featuretools.variable_types.variable.Boolean, featuretools.variable_types.variable.LatLong, featuretools.variable_types.variable.ZIPCode, featuretools.variable_types.variable.IPAddress, featuretools.variable_types.variable.EmailAddress, featuretools.variable_types.variable.URL, featuretools.variable_types.variable.PhoneNumber, featuretools.variable_types.variable.DateOfBirth, featuretools.variable_types.variable.CountryCode, featuretools.variable_types.variable.SubRegionCode, featuretools.variable_types.variable.FilePath]  This is how our entityset bucket looks right now. It has just got one dataframe in it. And no relationships
  Let us add all our dataframes:
# adding the transactions_df es = es.entity_from_dataframe(entity_id=&amp;#34;transactions&amp;#34;, dataframe=transactions_df, index=&amp;#34;transaction_id&amp;#34;, time_index=&amp;#34;transaction_time&amp;#34;, variable_types={&amp;#34;product_id&amp;#34;: ft.variable_types.Categorical}) # adding sessions_df es = es.entity_from_dataframe(entity_id=&amp;#34;sessions&amp;#34;, dataframe=sessions_df, index=&amp;#34;session_id&amp;#34;, time_index = &amp;#39;session_start&amp;#39;) This is how our entityset buckets look now.
  All three dataframes but no relationships. By relationships, I mean that my bucket doesn’t know that customer_id in customers_df and session_df are the same columns.
We can provide this information to our entityset as:
# adding the customer_id relationship cust_relationship = ft.Relationship(es[&amp;#34;customers&amp;#34;][&amp;#34;customer_id&amp;#34;], es[&amp;#34;sessions&amp;#34;][&amp;#34;customer_id&amp;#34;]) # Add the relationship to the entity set es = es.add_relationship(cust_relationship) # adding the session_id relationship sess_relationship = ft.Relationship(es[&amp;#34;sessions&amp;#34;][&amp;#34;session_id&amp;#34;], es[&amp;#34;transactions&amp;#34;][&amp;#34;session_id&amp;#34;]) # Add the relationship to the entity set es = es.add_relationship(sess_relationship) After this our entityset looks like:
  We can see the datasets as well as the relationships. Most of our work here is done. We are ready to cook features.
  Cooking is no different from feature engineering. Think of features as ingredients.    Creating features is as simple as:
feature_matrix, feature_defs = ft.dfs(entityset=es, target_entity=&amp;#34;customers&amp;#34;,max_depth = 2) feature_matrix.head()   And we end up with 73 new features. You can see the feature names from feature_defs. Some of the features that we end up creating are:
[&amp;lt;Feature: NUM_UNIQUE(sessions.device)&amp;gt;, &amp;lt;Feature: MODE(sessions.device)&amp;gt;, &amp;lt;Feature: SUM(transactions.amount)&amp;gt;, &amp;lt;Feature: STD(transactions.amount)&amp;gt;, &amp;lt;Feature: MAX(transactions.amount)&amp;gt;, &amp;lt;Feature: SKEW(transactions.amount)&amp;gt;, &amp;lt;Feature: DAY(join_date)&amp;gt;, &amp;lt;Feature: YEAR(join_date)&amp;gt;, &amp;lt;Feature: MONTH(join_date)&amp;gt;, &amp;lt;Feature: WEEKDAY(join_date)&amp;gt;, &amp;lt;Feature: SUM(sessions.STD(transactions.amount))&amp;gt;, &amp;lt;Feature: SUM(sessions.MAX(transactions.amount))&amp;gt;, &amp;lt;Feature: SUM(sessions.SKEW(transactions.amount))&amp;gt;, &amp;lt;Feature: SUM(sessions.MIN(transactions.amount))&amp;gt;, &amp;lt;Feature: SUM(sessions.MEAN(transactions.amount))&amp;gt;, &amp;lt;Feature: SUM(sessions.NUM_UNIQUE(transactions.product_id))&amp;gt;, &amp;lt;Feature: STD(sessions.SUM(transactions.amount))&amp;gt;, &amp;lt;Feature: STD(sessions.MAX(transactions.amount))&amp;gt;, &amp;lt;Feature: STD(sessions.SKEW(transactions.amount))&amp;gt;, &amp;lt;Feature: STD(sessions.MIN(transactions.amount))&amp;gt;, &amp;lt;Feature: STD(sessions.MEAN(transactions.amount))&amp;gt;, &amp;lt;Feature: STD(sessions.COUNT(transactions))&amp;gt;, &amp;lt;Feature: STD(sessions.NUM_UNIQUE(transactions.product_id))&amp;gt;]  You can get features like the Sum of std of amount(SUM(sessions.STD(transactions.amount))) or Std of the sum of amount(STD(sessions.SUM(transactions.amount))) This is what max_depth parameter means in the function call. Here we specify it as 2 to get two level aggregations.
If we change max_depth to 3 we can get features like: MAX(sessions.NUM_UNIQUE(transactions.YEAR(transaction_time)))
Just think of how much time you would have to spend if you had to write code to get such features. Also, a caveat is that increasing the max_depth might take longer times.
2. Handling Categorical Features: Label/Binary/Hashing and Target/Mean Encoding Creating automated features has its perks. But why would we data scientists be required if a simple library could do all our work?
This is the section where I will talk about handling categorical features.
One hot encoding   One Hot Coffee    We can use One hot encoding to encode our categorical features. So if we have n levels in a category, we will get n-1 features.
In our sessions_df table, we have a column named device, which contains three levels — desktop, mobile, or tablet. We can get two columns from such a column using:
pd.get_dummies(sessions_df[&amp;#39;device&amp;#39;],drop_first=True)   This is the most natural thing that comes to mind when talking about categorical features and works well in many cases.
OrdinalEncoding Sometimes there is an order associated with categories. In such a case, I usually use a simple map/apply function in pandas to create a new ordinal column.
For example, if I had a dataframe containing temperature as three levels: high medium and low, I would encode that as:
map_dict = {&amp;#39;low&amp;#39;:0,&amp;#39;medium&amp;#39;:1,&amp;#39;high&amp;#39;:2} def map_values(x): return map_dict[x] df[&amp;#39;Temperature_oe&amp;#39;] = df[&amp;#39;Temperature&amp;#39;].apply(lambda x: map_values(x))   Using this I preserve the information that low &amp;lt; medium &amp;lt; high
LabelEncoder We could also have used LabelEncoder to encode our variable to numbers. What a label encoder essentially does is that it sees the first value in the column and converts it to 0, next value to 1 and so on. This approach works reasonably well with tree models, and I end up using it when I have a lot of levels in the categorical variable. We can use this as:
from sklearn.preprocessing import LabelEncoder # create a labelencoder object le = LabelEncoder() # fit and transform on the data sessions_df[&amp;#39;device_le&amp;#39;] = le.fit_transform(sessions_df[&amp;#39;device&amp;#39;]) sessions_df.head()   BinaryEncoder BinaryEncoder is another method that one can use to encode categorical variables. It is an excellent method to use if you have many levels in a column. While we can encode a column with 1024 levels using 1023 columns using One Hot Encoding, using Binary encoding we can do it by just using ten columns.
Let us say we have a column in our FIFA 19 player data that contains all club names. This column has 652 unique values. One Hot encoding means creating 651 columns that would mean a lot of memory usage and a lot of sparse columns.
If we use Binary encoder, we will only need ten columns as 2⁹&amp;lt;652 &amp;lt;2¹⁰.
We can binaryEncode this variable easily by using BinaryEncoder object from category_encoders:
from category_encoders.binary import BinaryEncoder # create a Binaryencoder object be = BinaryEncoder(cols = [&amp;#39;Club&amp;#39;]) # fit and transform on the data players = be.fit_transform(players)   HashingEncoder   One can think of Hashing Encoder as a black box function that converts a string to a number between 0 to some prespecified value.
It differs from binary encoding as in binary encoding two or more of the club parameters could have been 1 while in hashing only one value is 1.
We can use hashing as:
players = pd.read_csv(&amp;#34;../input/fifa19/data.csv&amp;#34;) from category_encoders.hashing import HashingEncoder # create a HashingEncoder object he = HashingEncoder(cols = [&amp;#39;Club&amp;#39;]) # fit and transform on the data players = he.fit_transform(players)   There are bound to be collisions(two clubs having the same encoding. For example, Juventus and PSG have the same encoding) but sometimes this technique works well.
Target/Mean Encoding   This is a technique that I found works pretty well in Kaggle competitions. If both training/test comes from the same dataset from the same time period(cross-sectional), we can get crafty with features.
For example: In the Titanic knowledge challenge, the test data is randomly sampled from the train data. In this case, we can use the target variable averaged over different categorical variable as a feature.
In Titanic, we can create a target encoded feature over the PassengerClass variable.
We have to be careful when using Target encoding as it might induce overfitting in our models. Thus we use k-fold target encoding when we use it.
# taken from https://medium.com/@pouryaayria/k-fold-target-encoding-dfe9a594874b from sklearn import base from sklearn.model_selection import KFold class KFoldTargetEncoderTrain(base.BaseEstimator, base.TransformerMixin): def __init__(self,colnames,targetName, n_fold=5, verbosity=True, discardOriginal_col=False): self.colnames = colnames self.targetName = targetName self.n_fold = n_fold self.verbosity = verbosity self.discardOriginal_col = discardOriginal_col def fit(self, X, y=None): return self def transform(self,X): assert(type(self.targetName) == str) assert(type(self.colnames) == str) assert(self.colnames in X.columns) assert(self.targetName in X.columns) mean_of_target = X[self.targetName].mean() kf = KFold(n_splits = self.n_fold, shuffle = True, random_state=2019) col_mean_name = self.colnames &#43; &amp;#39;_&amp;#39; &#43; &amp;#39;Kfold_Target_Enc&amp;#39; X[col_mean_name] = np.nan for tr_ind, val_ind in kf.split(X): X_tr, X_val = X.iloc[tr_ind], X.iloc[val_ind] X.loc[X.index[val_ind], col_mean_name] = X_val[self.colnames].map(X_tr.groupby(self.colnames) [self.targetName].mean()) X[col_mean_name].fillna(mean_of_target, inplace = True) if self.verbosity: encoded_feature = X[col_mean_name].values print(&amp;#39;Correlation between the new feature, {} and, {} is {}.&amp;#39;.format(col_mean_name,self.targetName, np.corrcoef(X[self.targetName].values, encoded_feature)[0][1])) if self.discardOriginal_col: X = X.drop(self.targetName, axis=1) return X We can then create a mean encoded feature as:
targetc = KFoldTargetEncoderTrain(&amp;#39;Pclass&amp;#39;,&amp;#39;Survived&amp;#39;,n_fold=5) new_train = targetc.fit_transform(train) new_train[[&amp;#39;Pclass_Kfold_Target_Enc&amp;#39;,&amp;#39;Pclass&amp;#39;]]   You can see how the passenger class 3 gets encoded as 0.261538 and 0.230570 based on which fold the average is taken from.
This feature is pretty helpful as it encodes the value of the target for the category. Just looking at this feature, we can say that the Passenger in class 1 has a high propensity of surviving compared with Class 3.
3. Some Kaggle Tricks: While not necessarily feature creation techniques, some postprocessing techniques that you may find useful.
log loss clipping Technique: Something that I learned in the Neural Network course by Jeremy Howard. It is based on an elementary Idea.
Log loss penalizes us a lot if we are very confident and wrong.
So in the case of Classification problems where we have to predict probabilities in Kaggle, it would be much better to clip our probabilities between 0.05–0.95 so that we are never very sure about our prediction. And in turn, get penalized less. Can be done by a simple np.clip
Kaggle submission in gzip format: A small piece of code that will help you save countless hours of uploading. Enjoy.
df.to_csv(‘submission.csv.gz’, index=False, compression=’gzip’) 4. Using Latitude and Longitude features: This part will tread upon how to use Latitude and Longitude features well.
For this task, I will be using Data from the Playground competition: New York City Taxi Trip Duration
The train data looks like:
  Most of the functions I am going to write here are inspired by a Kernel on Kaggle written by Beluga.
In this competition, we had to predict the trip duration. We were given many features in which Latitude and Longitude of pickup and Dropoff were also there. We created features like:
A. Haversine Distance Between the Two Lat/Lons:  The haversine formula determines the great-circle distance between two points on a sphere given their longitudes and latitudes
 def haversine_array(lat1, lng1, lat2, lng2): lat1, lng1, lat2, lng2 = map(np.radians, (lat1, lng1, lat2, lng2)) AVG_EARTH_RADIUS = 6371 # in km lat = lat2 - lat1 lng = lng2 - lng1 d = np.sin(lat * 0.5) ** 2 &#43; np.cos(lat1) * np.cos(lat2) * np.sin(lng * 0.5) ** 2 h = 2 * AVG_EARTH_RADIUS * np.arcsin(np.sqrt(d)) return h We could then use the function as:
train[&amp;#39;haversine_distance&amp;#39;] = train.apply(lambda x: haversine_array(x[&amp;#39;pickup_latitude&amp;#39;], x[&amp;#39;pickup_longitude&amp;#39;], x[&amp;#39;dropoff_latitude&amp;#39;], x[&amp;#39;dropoff_longitude&amp;#39;]),axis=1) B. Manhattan Distance Between the two Lat/Lons:   Manhattan Skyline     The distance between two points measured along axes at right angles
def dummy_manhattan_distance(lat1, lng1, lat2, lng2): a = haversine_array(lat1, lng1, lat1, lng2) b = haversine_array(lat1, lng1, lat2, lng1) return a &#43; b We could then use the function as:
train[&amp;#39;manhattan_distance&amp;#39;] = train.apply(lambda x: dummy_manhattan_distance(x[&amp;#39;pickup_latitude&amp;#39;], x[&amp;#39;pickup_longitude&amp;#39;], x[&amp;#39;dropoff_latitude&amp;#39;], x[&amp;#39;dropoff_longitude&amp;#39;]),axis=1) C. Bearing Between the two Lat/Lons: A bearing is used to represent the direction of one point relative to another point.
def bearing_array(lat1, lng1, lat2, lng2): AVG_EARTH_RADIUS = 6371 # in km lng_delta_rad = np.radians(lng2 - lng1) lat1, lng1, lat2, lng2 = map(np.radians, (lat1, lng1, lat2, lng2)) y = np.sin(lng_delta_rad) * np.cos(lat2) x = np.cos(lat1) * np.sin(lat2) - np.sin(lat1) * np.cos(lat2) * np.cos(lng_delta_rad) return np.degrees(np.arctan2(y, x)) We could then use the function as:
train[&amp;#39;bearing&amp;#39;] = train.apply(lambda x: bearing_array(x[&amp;#39;pickup_latitude&amp;#39;], x[&amp;#39;pickup_longitude&amp;#39;], x[&amp;#39;dropoff_latitude&amp;#39;], x[&amp;#39;dropoff_longitude&amp;#39;]),axis=1) D. Center Latitude and Longitude between Pickup and Dropoff: train.loc[:, &amp;#39;center_latitude&amp;#39;] = (train[&amp;#39;pickup_latitude&amp;#39;].values &#43; train[&amp;#39;dropoff_latitude&amp;#39;].values) / 2 train.loc[:, &amp;#39;center_longitude&amp;#39;] = (train[&amp;#39;pickup_longitude&amp;#39;].values &#43; train[&amp;#39;dropoff_longitude&amp;#39;].values) / 2 These are the new columns that we create:
  5. AutoEncoders: Sometimes people use Autoencoders too for creating automatic features.
What are Autoencoders?
Encoders are deep learning functions which approximate a mapping from X to X, i.e. input=output. They first compress the input features into a lower-dimensional representation/code and then reconstruct the output from this representation.
  We can use this representation vector as a feature for our models.
6. Some Normal Things you can do with your features:  Scaling by Max-Min: This is good and often required preprocessing for Linear models, Neural Networks
 Normalization using Standard Deviation: This is good and often required preprocessing for Linear models, Neural Networks
 Log-based feature/Target: Use log based features or log-based target function. If one is using a Linear model which assumes that the features are normally distributed, a log transformation could make the feature normal. It is also handy in case of skewed variables like income.
  Or in our case trip duration. Below is the graph of trip duration without log transformation.
  And with log transformation:
train[&amp;#39;log_trip_duration&amp;#39;] = train[&amp;#39;trip_duration&amp;#39;].apply(lambda x: np.log(1&#43;x))   A log transformation on trip duration is much less skewed and thus much more helpful for a model.
7. Some Additional Features based on Intuition: Date time Features: One could create additional Date time features based on domain knowledge and intuition. For example, Time-based Features like “Evening,” “Noon,” “Night,” “Purchases_last_month,” “Purchases_last_week,” etc. could work for a particular application.
Domain Specific Features:   Style matters    Suppose you have got some shopping cart data and you want to categorize the TripType. It was the exact problem in Walmart Recruiting: Trip Type Classification on Kaggle.
Some examples of trip types: a customer may make a small daily dinner trip, a weekly large grocery trip, a trip to buy gifts for an upcoming holiday, or a seasonal trip to buy clothes.
To solve this problem, you could think of creating a feature like “Stylish” where you create this variable by adding together the number of items that belong to category Men’s Fashion, Women’s Fashion, Teens Fashion.
Or you could create a feature like “Rare” which is created by tagging some items as rare, based on the data we have and then counting the number of those rare items in the shopping cart.
Such features might work or might not work. From what I have observed, they usually provide a lot of value.
I feel this is the way that Target’s “Pregnant Teen model” was made. They would have had a variable in which they kept all the items that a pregnant teen could buy and put them into a classification algorithm.
Interaction Features: If you have features A and B, you can create features A*B, A&#43;B, A/B, A-B, etc.
For example, to predict the price of a house, if we have two features length and breadth, a better idea would be to create an area(length x breadth) feature.
Or in some case, a ratio might be more valuable than having two features alone. Example: Credit Card utilization ratio is more valuable than having the Credit limit and limit utilized variables.
Conclusion   Creativity is vital!!!    These were just some of the methods I use for creating features.
But there is surely no limit when it comes to feature engineering, and it is only your imagination that limits you.
On that note, I always think about feature engineering while keeping what model I am going to use in mind. Features that work in a random forest may not work well with Logistic Regression.
Feature creation is the territory of trial and error. You won’t be able to know what transformation works or what encoding works best before trying it. It is always a trade-off between time and utility.
Sometimes the feature creation process might take a lot of time. In such cases, you might want to parallelize your Pandas function.
While I have tried to keep this post as exhaustive as possible, I might have missed some of the useful methods. Let me know about them in the comments.
You can find all the code for this post and run it yourself in this Kaggle Kernel
Take a look at the How to Win a Data Science Competition: Learn from Top Kagglers course in the Advanced machine learning specialization by Kazanova. This course talks about a lot of intuitive ways to improve your model. Definitely recommended.
I am going to be writing more beginner friendly posts in the future too. Let me know what you think about the series. Follow me up at Medium or Subscribe to my blog.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Chatbots  aren&#39;t as difficult to make as You Think</title>
      <link>https://mlwhiz.com/blog/2019/04/15/chatbot/</link>
      <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/04/15/chatbot/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/chatbot/dvader.jpeg"></media:content>
      

      
      <description>Chatbots are the in thing now. Every website must implement it. Every Data Scientist must know about them. Anytime we talk about AI; Chatbots must be discussed. But they look intimidating to someone very new to the field. We struggle with a lot of questions before we even begin to start working on them. Are they hard to create? What technologies should I know before attempting to work on them?</description>

      <content:encoded>  
        
        <![CDATA[  Chatbots are the in thing now. Every website must implement it. Every Data Scientist must know about them. Anytime we talk about AI; Chatbots must be discussed. But they look intimidating to someone very new to the field. We struggle with a lot of questions before we even begin to start working on them. Are they hard to create? What technologies should I know before attempting to work on them? In the end, we end up discouraged reading through many posts on the internet and effectively accomplishing nothing.
  Let me assure you this is not going to be &amp;ldquo;that kind of a post&amp;rdquo;.
I will try to distill some of the knowledge I acquired while working through a project in the Natural Language Processing course in the Advanced machine learning specialization.
So before I start, let me first say it for once that don&amp;rsquo;t be intimidated by the hype and the enigma surrounding Chatbots. They are pretty much using pretty simple NLP techniques which most of us already know. If you don&amp;rsquo;t, you are welcome to check out my NLP Learning Series, where I go through the problem of text classification in fair detail using Conventional, Deep Learning and Transfer Learning methods.
A Very brief Intro to Chatbots We can logically divide of Chatbots in the following two categories.
 Database/FAQ based - We have a database with some questions and answers, and we would like that a user can query that using Natural Language. This is the sort of Chatbots you find at most of the Banking websites for answering FAQs.
 Chit-Chat Based - Simulate dialogue with the user. These are the kind of chatbots that bring the cool in chatbots. We can use Seq-2-Seq models to create such bots.
  The Chatbot we will be creating We will be creating a dialogue chat bot, which will be able to:
 Answer programming-related questions (using StackOverflow dataset) Chit-Chat and simulate dialogue on all non-programming related questions  Once we will have it up and running our final chatbot should look like this.
  Seems quite fun.
We will be taking help of resources like Telegram and Chatterbot to build our Chatbot. So before we start, I think I should get you up and running with these two tools.
1. Telegram: From the website:
 Telegram is a messaging app with a focus on speed and security, it’s super-fast, simple and free. You can use Telegram on all your devices at the same time — your messages sync seamlessly across any number of your phones, tablets or computers.
 For us, Telegram provides us with an easy way to create a Chatbot UI. It provides us with an access token which we will use to connect to the Telegram App backend and run our chatbot logic. Naturally, we need to have a window where we will write our questions to the chatbot, for us that is provided by Telegram. Also, telegram powers the chatbot by communicating with our chatbot logic. The above screenshot is taken from the telegram app only.
Set up Telegram: Don&amp;rsquo;t worry if you don&amp;rsquo;t understand how it works yet; I will try to give step by step instructions as we go forward.
 Step 1: Download and Install Telegram App on your Laptop.
 Step 2: Talk with BotFather by opening this link in Chrome and subsequently your Telegram App.
 Step 3: The above steps will take you to a Chatbot called Botfather which can help you create a new bot. Inception Anyone? It will look something like this.
 Set up a new bot using command &amp;ldquo;/newbot&amp;rdquo; Create a name for Your bot. Create a username for your bot.      Step 4: You will get an access token for the bot. Copy the Token at a safe place. Step 5: Click on the &amp;ldquo;t.me/MLWhizbot&amp;rdquo; link to open Chat with your chatbot in a new window.  Right now if you try to communicate with the chatbot, you won&amp;rsquo;t receive any answers. And that is how it should be.
  But that&amp;rsquo;s not at all fun. Is it? Let&amp;rsquo;s do some python magic to make it responsive.
Making our Telegram Chatbot responsive Create a file main.py and put the following code in it. Don&amp;rsquo;t worry most of the code here is Boilerplate code to make our Chatbot communicate with Telegram using the Access token. We need to worry about implementing the class SimpleDialogueManager. This class contains a function called generate_answer which is where we will write our bot logic.
#!/usr/bin/env python3 import requests import time import argparse import os import json from requests.compat import urljoin class BotHandler(object): &amp;#34;&amp;#34;&amp;#34; BotHandler is a class which implements all back-end of the bot. It has three main functions: &amp;#39;get_updates&amp;#39; — checks for new messages &amp;#39;send_message&amp;#39; – posts new message to user &amp;#39;get_answer&amp;#39; — computes the most relevant on a user&amp;#39;s question &amp;#34;&amp;#34;&amp;#34; def __init__(self, token, dialogue_manager): self.token = token self.api_url = &amp;#34;https://api.telegram.org/bot{}/&amp;#34;.format(token) self.dialogue_manager = dialogue_manager def get_updates(self, offset=None, timeout=30): params = {&amp;#34;timeout&amp;#34;: timeout, &amp;#34;offset&amp;#34;: offset} raw_resp = requests.get(urljoin(self.api_url, &amp;#34;getUpdates&amp;#34;), params) try: resp = raw_resp.json() except json.decoder.JSONDecodeError as e: print(&amp;#34;Failed to parse response {}: {}.&amp;#34;.format(raw_resp.content, e)) return [] if &amp;#34;result&amp;#34; not in resp: return [] return resp[&amp;#34;result&amp;#34;] def send_message(self, chat_id, text): params = {&amp;#34;chat_id&amp;#34;: chat_id, &amp;#34;text&amp;#34;: text} return requests.post(urljoin(self.api_url, &amp;#34;sendMessage&amp;#34;), params) def get_answer(self, question): if question == &amp;#39;/start&amp;#39;: return &amp;#34;Hi, I am your project bot. How can I help you today?&amp;#34; return self.dialogue_manager.generate_answer(question) def is_unicode(text): return len(text) == len(text.encode()) class SimpleDialogueManager(object): &amp;#34;&amp;#34;&amp;#34; This is a simple dialogue manager to test the telegram bot. The main part of our bot will be written here. &amp;#34;&amp;#34;&amp;#34; def generate_answer(self, question): if &amp;#34;Hi&amp;#34; in question: return &amp;#34;Hello, You&amp;#34; else: return &amp;#34;Don&amp;#39;t be rude. Say Hi first.&amp;#34; def main(): # Put your own Telegram Access token here... token = &amp;#39;839585958:AAEfTDo2X6PgHb9IEdb62ueS4SmdpCkhtmc&amp;#39; simple_manager = SimpleDialogueManager() bot = BotHandler(token, simple_manager) ############################################################### print(&amp;#34;Ready to talk!&amp;#34;) offset = 0 while True: updates = bot.get_updates(offset=offset) for update in updates: print(&amp;#34;An update received.&amp;#34;) if &amp;#34;message&amp;#34; in update: chat_id = update[&amp;#34;message&amp;#34;][&amp;#34;chat&amp;#34;][&amp;#34;id&amp;#34;] if &amp;#34;text&amp;#34; in update[&amp;#34;message&amp;#34;]: text = update[&amp;#34;message&amp;#34;][&amp;#34;text&amp;#34;] if is_unicode(text): print(&amp;#34;Update content: {}&amp;#34;.format(update)) bot.send_message(chat_id, bot.get_answer(update[&amp;#34;message&amp;#34;][&amp;#34;text&amp;#34;])) else: bot.send_message(chat_id, &amp;#34;Hmm, you are sending some weird characters to me...&amp;#34;) offset = max(offset, update[&amp;#39;update_id&amp;#39;] &#43; 1) time.sleep(1) if __name__ == &amp;#34;__main__&amp;#34;: main() You can run the file main.py in the terminal window to make your bot responsive.
$ python main.py   Nice. It is following simple logic. But the good thing is that our bot now does something.
Also, take a look at the terminal window where we have run our main.py File. Whenever a user asks a question, we get the sort of dictionary below containing Unique Chat ID, Chat Text, User Information, etc.
Update content: {&#39;update_id&#39;: 484689748, &#39;message&#39;: {&#39;message_id&#39;: 115, &#39;from&#39;: {&#39;id&#39;: 844474950, &#39;is_bot&#39;: False, &#39;first_name&#39;: &#39;Rahul&#39;, &#39;last_name&#39;: &#39;Agarwal&#39;, &#39;language_code&#39;: &#39;en&#39;}, &#39;chat&#39;: {&#39;id&#39;: 844474950, &#39;first_name&#39;: &#39;Rahul&#39;, &#39;last_name&#39;: &#39;Agarwal&#39;, &#39;type&#39;: &#39;private&#39;}, &#39;date&#39;: 1555266010, &#39;text&#39;: &#39;What is 2&#43;2&#39;}}  Until now whatever we had done was sort of setting up and engineering sort of work.
Only if we can write some sound Data Science logic in the generate_answer function in our main.py we should have a decent chatbot.
2. ChatterBot From the Documentation:
 ChatterBot is a Python library that makes it easy to generate automated responses to a user’s input. ChatterBot uses a selection of machine learning algorithms to produce different types of reactions. This makes it easy for developers to create chat bots and automate conversations with users.
 Simply. It is a Blackbox system which can provide us with responses for Chitchat type questions for our Chatbot. And the best part about it is that it is pretty easy to integrate with our current flow. We could also have trained a SeqtoSeq model to do the same thing. Might be I will do it in a later post. I digress.
So, install it with:
$ pip install chatterbot And change the SimpleDialogueManager Class in main.py to the following. We can have a bot that can talk to the user and answer random queries.
class SimpleDialogueManager(object): &amp;#34;&amp;#34;&amp;#34; This is a simple dialogue manager to test the telegram bot. The main part of our bot will be written here. &amp;#34;&amp;#34;&amp;#34; def __init__(self): from chatterbot import ChatBot from chatterbot.trainers import ChatterBotCorpusTrainer chatbot = ChatBot(&amp;#39;MLWhizChatterbot&amp;#39;) trainer = ChatterBotCorpusTrainer(chatbot) trainer.train(&amp;#39;chatterbot.corpus.english&amp;#39;) self.chitchat_bot = chatbot def generate_answer(self, question): response = self.chitchat_bot.get_response(question) return response The code in init instantiates a chatbot using chatterbot and trains it on the provided english corpus data. The data is pretty small, but you can always train it on your dataset too. Just see the documentation. We can then give our responses using the Chatterbot chatbot in the generate_answer function.
  Not too &amp;ldquo;ba a a a a a d&amp;rdquo; , I must say.
Creating our StackOverFlow ChatBot Ok, so finally we are at a stage where we can do something we love. Use Data Science to power our Application/Chatbot. Let us start with creating a rough architecture of what we are going to do next.
  We will need to create two classifiers and save them as .pkl files.
 Intent-Classifier: This classifier will predict if it a question is a Stack-Overflow question or not. If it is not a Stack-overflow question, we let Chatterbot handle it.
 Programming-Language(Tag) Classifier: This classifier will predict which language a question belongs to if the question is a Stack-Overflow question. We do this so that we can search for those language questions in our database only.
  To keep it simple we will create simple TFIDF models. We will need to save these TFIDF vectorizers.
We will also need to store word vectors for every question for similarity calculations later.
Let us go through the process step by step. You can get the full code in this jupyter notebook in my project repository.
Step 1. Reading and Visualizing the Data dialogues = pd.read_csv(&amp;#34;data/dialogues.tsv&amp;#34;,sep=&amp;#34;\t&amp;#34;) posts = pd.read_csv(&amp;#34;data/tagged_posts.tsv&amp;#34;,sep=&amp;#34;\t&amp;#34;)dialogues.head()  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: left; }    text tag     0 Okay -- you&#39;re gonna need to learn how to lie. dialogue   1 I&#39;m kidding. You know how sometimes you just ... dialogue   2 Like my fear of wearing pastels? dialogue   3 I figured you&#39;d get to the good stuff eventually. dialogue   4 Thank God! If I had to hear one more story ab... dialogue     posts.head()  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    post_id title tag     0 9 Calculate age in C# c#   1 16 Filling a DataSet or DataTable from a LINQ que... c#   2 39 Reliable timer in a console application c#   3 42 Best way to allow plugins for a PHP application php   4 59 How do I get a distinct, ordered list of names... c#     print(&amp;#34;Num Posts:&amp;#34;,len(posts)) print(&amp;#34;Num Dialogues:&amp;#34;,len(dialogues)) Num Posts: 2171575 Num Dialogues: 218609  Step 2: Create training data for intent classifier - Chitchat/StackOverflow Question We will be creating a TFIDF model with Logistic regression to do this. If you want to know about the TFIDF model you can read it here.
We could also have used one of the Deep Learning models or transfer learning approaches to do this, but since the main objective of this post is to get a chatbot up and running and not worry too much about the accuracy we sort of work with the TFIDF based model only.
texts = list(dialogues[:200000].text.values) &#43; list(posts[:200000].title.values) labels = [&amp;#39;dialogue&amp;#39;]*200000 &#43; [&amp;#39;stackoverflow&amp;#39;]*200000 data = pd.DataFrame({&amp;#39;text&amp;#39;:texts,&amp;#39;target&amp;#39;:labels}) def text_prepare(text): &amp;#34;&amp;#34;&amp;#34;Performs tokenization and simple preprocessing.&amp;#34;&amp;#34;&amp;#34; replace_by_space_re = re.compile(&amp;#39;[/(){}\[\]\|@,;]&amp;#39;) bad_symbols_re = re.compile(&amp;#39;[^0-9a-z #&#43;_]&amp;#39;) stopwords_set = set(stopwords.words(&amp;#39;english&amp;#39;)) text = text.lower() text = replace_by_space_re.sub(&amp;#39; &amp;#39;, text) text = bad_symbols_re.sub(&amp;#39;&amp;#39;, text) text = &amp;#39; &amp;#39;.join([x for x in text.split() if x and x not in stopwords_set]) return text.strip() # Doing some data cleaning data[&amp;#39;text&amp;#39;] = data[&amp;#39;text&amp;#39;].apply(lambda x : text_prepare(x)) X_train, X_test, y_train, y_test = train_test_split(data[&amp;#39;text&amp;#39;],data[&amp;#39;target&amp;#39;],test_size = .1 , random_state=0) print(&amp;#39;Train size = {}, test size = {}&amp;#39;.format(len(X_train), len(X_test))) Train size = 360000, test size = 40000  Step 3. Create Intent classifier Here we Create a TFIDF Vectorizer to create features and also train a Logistic regression model to create the intent_classifier. Please note how we are saving TFIDF Vectorizer to resources/tfidf.pkl and intent_classifier to resources/intent_clf.pkl. We will need these files once we are going to write the SimpleDialogueManager class for our final Chatbot.
# We will keep our models and vectorizers in this folder !mkdir resources def tfidf_features(X_train, X_test, vectorizer_path): &amp;#34;&amp;#34;&amp;#34;Performs TF-IDF transformation and dumps the model.&amp;#34;&amp;#34;&amp;#34; tfv = TfidfVectorizer(dtype=np.float32, min_df=3, max_features=None, strip_accents=&amp;#39;unicode&amp;#39;, analyzer=&amp;#39;word&amp;#39;,token_pattern=r&amp;#39;\w{1,}&amp;#39;, ngram_range=(1, 3), use_idf=1,smooth_idf=1,sublinear_tf=1, stop_words = &amp;#39;english&amp;#39;) X_train = tfv.fit_transform(X_train) X_test = tfv.transform(X_test) pickle.dump(tfv,vectorizer_path) return X_train, X_test X_train_tfidf, X_test_tfidf = tfidf_features(X_train, X_test, open(&amp;#34;resources/tfidf.pkl&amp;#34;,&amp;#39;wb&amp;#39;)) intent_recognizer = LogisticRegression(C=10,random_state=0) intent_recognizer.fit(X_train_tfidf,y_train) pickle.dump(intent_recognizer, open(&amp;#34;resources/intent_clf.pkl&amp;#34; , &amp;#39;wb&amp;#39;)) # Check test accuracy. y_test_pred = intent_recognizer.predict(X_test_tfidf) test_accuracy = accuracy_score(y_test, y_test_pred) print(&amp;#39;Test accuracy = {}&amp;#39;.format(test_accuracy)) Test accuracy = 0.989825  The Intent Classifier has a pretty good test accuracy of 98%. TFIDF is not so bad.
Step 4: Create Programming Language classifier Let us first create the data for Programming Language classifier and then train a Logistic Regression model using TFIDF features. We save this tag Classifier at the location resources/tag_clf.pkl. We do this step mostly because we don&amp;rsquo;t want to do similarity calculations over the whole database of questions but only on the subset of questions by the language tag.
# creating the data for Programming Language classifier X = posts[&amp;#39;title&amp;#39;].values y = posts[&amp;#39;tag&amp;#39;].values X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) print(&amp;#39;Train size = {}, test size = {}&amp;#39;.format(len(X_train), len(X_test))) Train size = 1737260, test size = 434315  vectorizer = pickle.load(open(&amp;#34;resources/tfidf.pkl&amp;#34;, &amp;#39;rb&amp;#39;)) X_train_tfidf, X_test_tfidf = vectorizer.transform(X_train), vectorizer.transform(X_test) tag_classifier = OneVsRestClassifier(LogisticRegression(C=5,random_state=0)) tag_classifier.fit(X_train_tfidf,y_train) pickle.dump(tag_classifier, open(&amp;#34;resources/tag_clf.pkl&amp;#34;, &amp;#39;wb&amp;#39;)) # Check test accuracy. y_test_pred = tag_classifier.predict(X_test_tfidf) test_accuracy = accuracy_score(y_test, y_test_pred) print(&amp;#39;Test accuracy = {}&amp;#39;.format(test_accuracy)) Test accuracy = 0.8043816124241622  Not Bad again.
Step 5: Store Question database Embeddings One can use pre-trained word vectors from Google or get a better result by training their embeddings using their data. Since again accuracy and precision is not the primary goal of this post, we will use pretrained vectors.
# Load Google&amp;#39;s pre-trained Word2Vec model. model = gensim.models.KeyedVectors.load_word2vec_format(&amp;#39;GoogleNews-vectors-negative300.bin&amp;#39;, binary=True) We want to convert every question to an embedding and store them so that we don&amp;rsquo;t calculate the embeddings for the whole dataset every time. In essence, whenever the user asks a Stack Overflow question, we want to use some distance similarity measure to get the most similar question.
def question_to_vec(question, embeddings, dim=300): &amp;#34;&amp;#34;&amp;#34; question: a string embeddings: dict where the key is a word and a value is its&amp;#39; embedding dim: size of the representation result: vector representation for the question &amp;#34;&amp;#34;&amp;#34; word_tokens = question.split(&amp;#34; &amp;#34;) question_len = len(word_tokens) question_mat = np.zeros((question_len,dim), dtype = np.float32) for idx, word in enumerate(word_tokens): if word in embeddings: question_mat[idx,:] = embeddings[word] # remove zero-rows which stand for OOV words  question_mat = question_mat[~np.all(question_mat == 0, axis = 1)] # Compute the mean of each word along the sentence if question_mat.shape[0] &amp;gt; 0: vec = np.array(np.mean(question_mat, axis = 0), dtype = np.float32).reshape((1,dim)) else: vec = np.zeros((1,dim), dtype = np.float32) return vec counts_by_tag = posts.groupby(by=[&amp;#39;tag&amp;#39;])[&amp;#34;tag&amp;#34;].count().reset_index(name = &amp;#39;count&amp;#39;).sort_values([&amp;#39;count&amp;#39;], ascending = False) counts_by_tag = list(zip(counts_by_tag[&amp;#39;tag&amp;#39;],counts_by_tag[&amp;#39;count&amp;#39;])) print(counts_by_tag) [(&#39;c#&#39;, 394451), (&#39;java&#39;, 383456), (&#39;javascript&#39;, 375867), (&#39;php&#39;, 321752), (&#39;c_cpp&#39;, 281300), (&#39;python&#39;, 208607), (&#39;ruby&#39;, 99930), (&#39;r&#39;, 36359), (&#39;vb&#39;, 35044), (&#39;swift&#39;, 34809)]  We save the embeddings in a folder aptly named resources/embeddings_folder. This folder will contain a .pkl file for every tag. For example one of the files will be python.pkl.
! mkdir resources/embeddings_folder for tag, count in counts_by_tag: tag_posts = posts[posts[&amp;#39;tag&amp;#39;] == tag] tag_post_ids = tag_posts[&amp;#39;post_id&amp;#39;].values tag_vectors = np.zeros((count, 300), dtype=np.float32) for i, title in enumerate(tag_posts[&amp;#39;title&amp;#39;]): tag_vectors[i, :] = question_to_vec(title, model, 300) # Dump post ids and vectors to a file. filename = &amp;#39;resources/embeddings_folder/&amp;#39;&#43; tag &#43; &amp;#39;.pkl&amp;#39; pickle.dump((tag_post_ids, tag_vectors), open(filename, &amp;#39;wb&amp;#39;)) We are nearing the end now. We need to have a function to get most similar question&amp;rsquo;s post id in the dataset given we know the programming Language of the question. Here it is:
def get_similar_question(question,tag): # get the path where all question embeddings are kept and load the post_ids and post_embeddings embeddings_path = &amp;#39;resources/embeddings_folder/&amp;#39; &#43; tag &#43; &amp;#34;.pkl&amp;#34; post_ids, post_embeddings = pickle.load(open(embeddings_path, &amp;#39;rb&amp;#39;)) # Get the embeddings for the question question_vec = question_to_vec(question, model, 300) # find index of most similar post best_post_index = pairwise_distances_argmin(question_vec, post_embeddings) # return best post id return post_ids[best_post_index] get_similar_question(&amp;#34;how to use list comprehension in python?&amp;#34;,&amp;#39;python&amp;#39;) array([5947137])  we can use this post ID and find this question at https://stackoverflow.com/questions/5947137
The question the similarity checker suggested has the actual text: &amp;ldquo;How can I use a list comprehension to extend a list in python? [duplicate]&amp;rdquo;
Not too bad. It could have been better if we train our embeddings or use starspace embeddings.
Assemble the Puzzle - SimpleDialogueManager Class Finally, we have reached the end of the whole exercise, and we have to fit all the pieces in the puzzle in our SimpleDialogueManager Class. Here is the code for that. Go in the main.py file again to paste this code and see if it works or not.
Go through the comments to understand how the pieces are fitting together to build one wholesome logic.
import gensim import pickle import re import nltk from nltk.corpus import stopwords import numpy as np from sklearn.metrics.pairwise import pairwise_distances_argmin # We will need this function to prepare text at prediction time def text_prepare(text): &amp;#34;&amp;#34;&amp;#34;Performs tokenization and simple preprocessing.&amp;#34;&amp;#34;&amp;#34; replace_by_space_re = re.compile(&amp;#39;[/(){}\[\]\|@,;]&amp;#39;) bad_symbols_re = re.compile(&amp;#39;[^0-9a-z #&#43;_]&amp;#39;) stopwords_set = set(stopwords.words(&amp;#39;english&amp;#39;)) text = text.lower() text = replace_by_space_re.sub(&amp;#39; &amp;#39;, text) text = bad_symbols_re.sub(&amp;#39;&amp;#39;, text) text = &amp;#39; &amp;#39;.join([x for x in text.split() if x and x not in stopwords_set]) return text.strip() # need this to convert questions asked by user to vectors def question_to_vec(question, embeddings, dim=300): &amp;#34;&amp;#34;&amp;#34; question: a string embeddings: dict where the key is a word and a value is its&amp;#39; embedding dim: size of the representation result: vector representation for the question &amp;#34;&amp;#34;&amp;#34; word_tokens = question.split(&amp;#34; &amp;#34;) question_len = len(word_tokens) question_mat = np.zeros((question_len,dim), dtype = np.float32) for idx, word in enumerate(word_tokens): if word in embeddings: question_mat[idx,:] = embeddings[word] # remove zero-rows which stand for OOV words  question_mat = question_mat[~np.all(question_mat == 0, axis = 1)] # Compute the mean of each word along the sentence if question_mat.shape[0] &amp;gt; 0: vec = np.array(np.mean(question_mat, axis = 0), dtype = np.float32).reshape((1,dim)) else: vec = np.zeros((1,dim), dtype = np.float32) return vec class SimpleDialogueManager(object): &amp;#34;&amp;#34;&amp;#34; This is a simple dialogue manager to test the telegram bot. The main part of our bot will be written here. &amp;#34;&amp;#34;&amp;#34; def __init__(self): # Instantiate all the models and TFIDF Objects. print(&amp;#34;Loading resources...&amp;#34;) # Instantiate a Chatterbot for Chitchat type questions from chatterbot import ChatBot from chatterbot.trainers import ChatterBotCorpusTrainer chatbot = ChatBot(&amp;#39;MLWhizChatterbot&amp;#39;) trainer = ChatterBotCorpusTrainer(chatbot) trainer.train(&amp;#39;chatterbot.corpus.english&amp;#39;) self.chitchat_bot = chatbot print(&amp;#34;Loading Word2vec model...&amp;#34;) # Instantiate the Google&amp;#39;s pre-trained Word2Vec model. self.model = gensim.models.KeyedVectors.load_word2vec_format(&amp;#39;GoogleNews-vectors-negative300.bin&amp;#39;, binary=True) print(&amp;#34;Loading Classifier objects...&amp;#34;) # Load the intent classifier and tag classifier self.intent_recognizer = pickle.load(open(&amp;#39;resources/intent_clf.pkl&amp;#39;, &amp;#39;rb&amp;#39;)) self.tag_classifier = pickle.load(open(&amp;#39;resources/tag_clf.pkl&amp;#39;, &amp;#39;rb&amp;#39;)) # Load the TFIDF vectorizer object self.tfidf_vectorizer = pickle.load(open(&amp;#39;resources/tfidf.pkl&amp;#39;, &amp;#39;rb&amp;#39;)) print(&amp;#34;Finished Loading Resources&amp;#34;) # We created this function just above. We just need to have a function to get most similar question&amp;#39;s *post id* in the dataset given we know the programming Language of the question. Here it is: def get_similar_question(self,question,tag): # get the path where all question embeddings are kept and load the post_ids and post_embeddings embeddings_path = &amp;#39;resources/embeddings_folder/&amp;#39; &#43; tag &#43; &amp;#34;.pkl&amp;#34; post_ids, post_embeddings = pickle.load(open(embeddings_path, &amp;#39;rb&amp;#39;)) # Get the embeddings for the question question_vec = question_to_vec(question, self.model, 300) # find index of most similar post best_post_index = pairwise_distances_argmin(question_vec, post_embeddings) # return best post id return post_ids[best_post_index] def generate_answer(self, question): prepared_question = text_prepare(question) features = self.tfidf_vectorizer.transform([prepared_question]) # find intent intent = self.intent_recognizer.predict(features)[0] # Chit-chat part:  if intent == &amp;#39;dialogue&amp;#39;: response = self.chitchat_bot.get_response(question) # Stack Overflow Question else: # find programming language tag = self.tag_classifier.predict(features)[0] # find most similar question post id post_id = self.get_similar_question(question,tag)[0] # respond with response = &amp;#39;I think its about %s\nThis thread might help you: https://stackoverflow.com/questions/%s&amp;#39; % (tag, post_id) return response Here is the code for the whole main.py for you to use and see. Just run the whole main.py using
$ python main.py And we will have our bot up and running.
Again, here is the link to the github repository
The possibilities are really endless This is just a small demo project of what you can do with the chatbots. You can do a whole lot more once you recognize that the backend is just python.
 One idea is to run a chatbot script on all the servers I have to run system commands straight from telegram. We can use os.system to run any system command. Bye Bye SSH.
 You can make chatbots to do some daily tasks by using simple keyword-based intents. It is just simple logic. Find out the weather, find out cricket scores or maybe newly released movies. Whatever floats your boat.
 Or maybe try to integrate Telegram based Chatbot in your website. See livechatbot
 Or maybe just try to have fun with it.
    Conclusion Here we learned how to create a simple chatbot. And it works well. We can improve a whole lot on this present chatbot by increasing classifier accuracy, handling edge cases, making it respond faster or maybe adding more logic to handle more use cases. But the fact remains the same. The AI in chatbots is just simple human logic and nothing magic.
In this post, I closely followed one of the projects from this course to create this chatbot. Do check out this course if you get confused, or tell me your problems in the comments I will certainly try to help.
Follow me up at Medium or Subscribe to my blog to be informed about my next posts.
Till then Ciao!!
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>NLP  Learning Series: Part 4 - Transfer Learning Intuition for Text Classification</title>
      <link>https://mlwhiz.com/blog/2019/03/30/transfer_learning_text_classification/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/03/30/transfer_learning_text_classification/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/nlp_tl/spiderman.jpeg"></media:content>
      

      
      <description>This post is the fourth post of the NLP Text classification series. To give you a recap, I started up with an NLP text classification competition on Kaggle called Quora Question insincerity challenge. So I thought to share the knowledge via a series of blog posts on text classification. The first post talked about the different preprocessing techniques that work with Deep learning models and increasing embeddings coverage.</description>

      <content:encoded>  
        
        <![CDATA[    This post is the fourth post of the NLP Text classification series. To give you a recap, I started up with an NLP text classification competition on Kaggle called Quora Question insincerity challenge. So I thought to share the knowledge via a series of blog posts on text classification. The first post talked about the different preprocessing techniques that work with Deep learning models and increasing embeddings coverage. In the second post, I talked through some basic conventional models like TFIDF, Count Vectorizer, Hashing, etc. that have been used in text classification and tried to access their performance to create a baseline. In the third post, I delved deeper into Deep learning models and the various architectures we could use to solve the text Classification problem. In this post, I will try to use ULMFit model which is a transfer learning approach to this data.
As a side note: if you want to know more about NLP, I would like to recommend this excellent course on Natural Language Processing in the Advanced machine learning specialization. You can start for free with the 7-day Free Trial. This course covers a wide range of tasks in Natural Language Processing from basic to advanced: sentiment analysis, summarization, dialogue state tracking, to name a few. You can start for free with the 7-day Free Trial.
Before introducing the notion of transfer learning to NLP applications, we will first need to understand a little bit about Language models.
Language Models And NLP Transfer Learning Intuition: In very basic terms the objective of the language model is to predict the next word given a stream of input words. In the past, many different approaches have been used to solve this particular problem. Probabilistic models using Markov assumption is one example of this sort of models.
$$ P(W_n) = P(W_n|W_{n-1}) $$
In the recent era, people have been using RNNs/LSTMs to create such language models. They take as input a word embedding and at each time state return the probability distribution of next word probability over the dictionary words. An example of this is shown below in which the below Neural Network uses multiple stacked layers of RNN cells to learn a language model to predict the next word.
  Now why do we need the concept of Language Modeling? Or How does predicting the next word tie with the current task of text classification? The intuition ties to the way that the neural network gets trained. The neural network that can predict the next word after being trained on a massive corpus like Wikipedia already has learned a lot of structure in a particular language. Can we use this knowledge in the weights of the network for our advantage? Yes, we can, and that is where the idea of Transfer Learning in NLP stems from. So to make this intuition more concrete, Let us think that our neural network is divided into two parts -
 Language Specific: The lower part of the neural network is language specific. That is it learns the features of the language. This part could be used to transfer our knowledge from a language corpus to our current task Task Specific: I will call the upper part of our network as task specific. The weights in these layers are trained so that it learns to predict the next word.    Now as it goes in a lot of transfer learning models for Image, we stack the Language Specific part with some dense and softmax layers(Our new task) and train on our new task to achieve what we want to do.
ULMFit: Now the concept of Transfer learning in NLP is not entirely new and people already used Language models for transfer learning back in 2015-16 without good result. So what has changed now?
The thing that has changed is that people like Jeremy Howard and Sebastian Ruder have done a lot of research on how to train these networks. And so we have achieved state of the art results on many text datasets with Transfer Learning approaches.
Let&amp;rsquo;s follow up with the key research findings in the ULMFit paper written by them along with the code.
Change in the way Transfer Learning networks are trained:   Training a model as per ULMFiT we need to take these three steps:
a) Create a Base Language Model: Training the language model on a general-domain corpus that captures high-level natural language features
b) Finetune Base Language Model on Task Specific Data: Fine-tuning the pre-trained language model on target task data
c) Finetune Base Language Model Layers &#43; Task Specific Layers on Task Specific Data: Fine-tuning the classifier on target task data
So let us go through these three steps one by one along with the code that is provided to us with the FastAI library.
a) Create a Base Language Model: This task might be the most time-consuming task. This model is analogous to resnet50 or Inception for the vision task. In the paper, they use the language model AWD-LSTM, a regular LSTM architecture trained with various tuned dropout hyperparameters. This model was trained on Wikitext-103 consisting of 28,595 preprocessed Wikipedia articles and 103 million words. We won&amp;rsquo;t perform this task ourselves and will use the fabulous FastAI library to use this model as below. The code below will take our data and preprocess it for usage in the AWD_LSTM model as well as load the model.
# Language model data : We use test_df as validation for language model data_lm = TextLMDataBunch.from_df(path = &amp;#34;&amp;#34;,train_df= train_df ,valid_df = test_df) learn = language_model_learner(data_lm, AWD_LSTM, drop_mult=0.5) It is also where we preprocess the data as per the required usage for the FastAI models. For example:
print(train_df)   print(data_lm) TextLMDataBunch; Train: LabelList (1306122 items) x: LMTextList xxbos xxmaj how did xxmaj quebec nationalists see their province as a nation in the 1960s ?,xxbos xxmaj do you have an adopted dog , how would you encourage people to adopt and not shop ?,xxbos xxmaj why does velocity affect time ? xxmaj does velocity affect space geometry ?,xxbos xxmaj how did xxmaj otto von xxmaj guericke used the xxmaj magdeburg hemispheres ?,xxbos xxmaj can i convert montra xxunk d to a mountain bike by just changing the tyres ? y: LMLabelList ,,,, Path: .; Valid: LabelList (375806 items) x: LMTextList xxbos xxmaj why do so many women become so rude and arrogant when they get just a little bit of wealth and power ?,xxbos xxmaj when should i apply for xxup rv college of engineering and xxup bms college of engineering ? xxmaj should i wait for the xxup comedk result or am i supposed to apply before the result ?,xxbos xxmaj what is it really like to be a nurse practitioner ?,xxbos xxmaj who are entrepreneurs ?,xxbos xxmaj is education really making good people nowadays ? y: LMLabelList ,,,, Path: .; Test: None  The tokenized prepared data is based on a lot of research from the FastAI developers. To make this post a little bit complete, I am sharing some of the tokens definition as well.
 xxunk is for an unknown word (one that isn&amp;rsquo;t present in the current vocabulary) xxpad is the token used for padding, if we need to regroup several texts of different lengths in a batch xxbos represents the beginning of a text in your dataset xxmaj is used to indicate the next word begins with a capital in the original text xxup is used to indicate the next word is written in all caps in the original text  b) Finetune Base Language Model on Task Specific Data This task is also pretty easy when we look at the code. The specific details of how we do the training is what holds the essence.
# Learning with Discriminative fine tuning learn.fit_one_cycle(1, 1e-2) learn.unfreeze() learn.fit_one_cycle(1, 1e-3) # Save encoder Object learn.save_encoder(&amp;#39;ft_enc&amp;#39;) The paper introduced two general concepts for this learning stage:
 Discriminative fine-tuning:  The Main Idea is: As different layers capture different types of information, they should be fine-tuned to different extents. Instead of using the same learning rate for all layers of the model, discriminative fine-tuning allows us to tune each layer with different learning rates. In the paper, the authors suggest first to finetune only the last layer, and then unfreeze all the layers with a learning rate lowered by a factor of 2.6.
 Slanted triangular learning rates:    According to the authors: &amp;ldquo;For adapting its parameters to task-specific features, we would like the model to quickly converge to a suitable region of the parameter space in the beginning of training and then refine its parameters&amp;rdquo; The Main Idea is to use a high learning rate at the starting stage for increased learning and low learning rates to finetune at later stages in an epoch.
After training our Language model on the Quora dataset, we should be able to see how our model performs on the Language Model task itself. FastAI library provides us with a simple function to do that.
# check how the language model performs learn.predict(&amp;#34;What should&amp;#34;, n_words=10) &#39;What should be the likelihood of a tourist visiting Mumbai for&#39;  c) Finetune Base Language Model Layers &#43; Task Specific Layers on Task Specific Data This is the stage where task-specific learning takes place that is we add the classification layers and fine tune them.
The authors augment the pretrained language model with two additional linear blocks. Each block uses batch normalization (Ioffe and Szegedy, 2015) and dropout, with ReLU activations for the intermediate layer and a softmax activation that outputs a probability distribution over target classes at the last layer. The params of these task-specific layers are the only ones that are learned from scratch.
#Creating Classification Data data_clas = TextClasDataBunch.from_df(path =&amp;#34;&amp;#34;, train_df=train, valid_df =valid, test_df=test_df, vocab=data_lm.train_ds.vocab, bs=32,label_cols = &amp;#39;target&amp;#39;) # Creating Classifier Object learn = text_classifier_learner(data_clas, AWD_LSTM, drop_mult=0.5) # Add weights of finetuned Language model learn.load_encoder(&amp;#39;ft_enc&amp;#39;) # Fitting Classifier Object learn.fit_one_cycle(1, 1e-2) # Fitting Classifier Object after freezing all but last 2 layers learn.freeze_to(-2) learn.fit_one_cycle(1, slice(5e-3/2., 5e-3)) # Fitting Classifier Object - discriminative learning learn.unfreeze() learn.fit_one_cycle(1, slice(2e-3/100, 2e-3)) Here also the Authors have derived a few novel methods:
 Concat Pooling:  The authors use not only the concatenation of all the hidden state but also the Maxpool and Meanpool representation of all hidden states as input to the linear layers.
$$ H = [h_1, &amp;hellip; , h_T ] $$
$$ h_c = [h_T , maxpool(H), meanpool(H)] $$
 Gradual Unfreezing:  Rather than fine-tuning all layers at once, which risks catastrophic forgetting(Forgetting everything we have learned so far from language models), the authors propose to gradually unfreeze the model starting from the last layer as this contains the least general knowledge. The Authors first unfreeze the last layer and fine-tune all unfrozen layers for one epoch. They then unfreeze the next lower frozen layer and repeat, until they finetune all layers until convergence at the last iteration. The function slice(2e-3/100, 2e-3) means that we train every layer with different learning rates ranging from max to min value.
One can get the predictions for the test data at once using:
test_preds = np.array(learn.get_preds(DatasetType.Test, ordered=True)[0])[:,1] I am a big fan of Kaggle Kernels. One could not have imagined having all that compute for free. You can find a running version of the above code in this kaggle kernel. Do try to experiment with it after forking and running the code. Also please upvote the kernel if you find it helpful.
Results: Here are the final results of all the different approaches I have tried on the Kaggle Dataset. I ran a 5 fold Stratified CV.
a. Conventional Methods:   b. Deep Learning Methods:   c. Transfer Learning Methods(ULMFIT):   The results achieved were not very good compared to deep learning methods, but I still liked the idea of the transfer learning approach, and it was so easy to implement it using fastAI. Also running the code took a lot of time at 9 hours, compared to other methods which got over in 2 hours.
Even if this approach didn&amp;rsquo;t work well for this dataset, it is a valid approach for other datasets, as the Authors of the paper have achieved pretty good results on different datasets — definitely a genuine method to try out.
PS: Note that I didn&amp;rsquo;t work on tuning the above models, so these results are only cursory. You can try to squeeze more performance by performing hyperparams tuning using hyperopt or just old fashioned Grid-search.
Conclusion: Finally, this post concludes my NLP Learning series. It took a lot of time to write, but the effort was well worth it. I hope you found it helpful in your work. I will try to write some more on this topic when I get some time. Follow me up at Medium or Subscribe to my blog to be informed about my next posts.
Also if you want to learn more about NLP here is an excellent course. You can start for free with the 7-day Free Trial.
Let me know if you think I can add something more to the post; I will try to incorporate it.
Cheers!!!
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>NLP  Learning Series: Part 3 - Attention, CNN and what not for Text Classification</title>
      <link>https://mlwhiz.com/blog/2019/03/09/deeplearning_architectures_text_classification/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/03/09/deeplearning_architectures_text_classification/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/birnn.png"></media:content>
      

      
      <description>This post is the third post of the NLP Text classification series. To give you a recap, I started up with an NLP text classification competition on Kaggle called Quora Question insincerity challenge. So I thought to share the knowledge via a series of blog posts on text classification. The first post talked about the different preprocessing techniques that work with Deep learning models and increasing embeddings coverage. In the second post, I talked through some basic conventional models like TFIDF, Count Vectorizer, Hashing, etc.</description>

      <content:encoded>  
        
        <![CDATA[  This post is the third post of the NLP Text classification series. To give you a recap, I started up with an NLP text classification competition on Kaggle called Quora Question insincerity challenge. So I thought to share the knowledge via a series of blog posts on text classification. The first post talked about the different preprocessing techniques that work with Deep learning models and increasing embeddings coverage. In the second post, I talked through some basic conventional models like TFIDF, Count Vectorizer, Hashing, etc. that have been used in text classification and tried to access their performance to create a baseline. In this post, I delve deeper into Deep learning models and the various architectures we could use to solve the text Classification problem. To make this post platform generic, I am going to code in both Keras and Pytorch. I will use various other models which we were not able to use in this competition like ULMFit transfer learning approaches in the fourth post in the series.
As a side note: if you want to know more about NLP, I would like to recommend this excellent course on Natural Language Processing in the Advanced machine learning specialization. You can start for free with the 7-day Free Trial. This course covers a wide range of tasks in Natural Language Processing from basic to advanced: sentiment analysis, summarization, dialogue state tracking, to name a few. You can start for free with the 7-day Free Trial.
So let me try to go through some of the models which people are using to perform text classification and try to provide a brief intuition for them — also, some code in Keras and Pytorch. So you can try them out for yourself.
1. TextCNN The idea of using a CNN to classify text was first presented in the paper Convolutional Neural Networks for Sentence Classification by Yoon Kim.
Representation: The central intuition about this idea is to see our documents as images. How? Let us say we have a sentence and we have maxlen = 70 and embedding size = 300. We can create a matrix of numbers with the shape 70x300 to represent this sentence. For images, we also have a matrix where individual elements are pixel values. Instead of image pixels, the input to the tasks is sentences or documents represented as a matrix. Each row of the matrix corresponds to one-word vector.
  Convolution Idea: While for an image we move our conv filter horizontally as well as vertically, for text we fix kernel size to filter_size x embed_size, i.e. (3,300) we are just going to move vertically down for the convolution taking look at three words at once since our filter size is 3 in this case. This idea seems right since our convolution filter is not splitting word embedding. It gets to look at the full embedding of each word. Also one can think of filter sizes as unigrams, bigrams, trigrams, etc. Since we are looking at a context window of 1,2,3, and 5 words respectively.
Here is the text classification network coded in Pytorch:
import torch import torch.nn as nn import torch.nn.functional as F from torch.autograd import Variable class CNN_Text(nn.Module): def __init__(self): super(CNN_Text, self).__init__() filter_sizes = [1,2,3,5] num_filters = 36 self.embedding = nn.Embedding(max_features, embed_size) self.embedding.weight = nn.Parameter(torch.tensor(embedding_matrix, dtype=torch.float32)) self.embedding.weight.requires_grad = False self.convs1 = nn.ModuleList([nn.Conv2d(1, num_filters, (K, embed_size)) for K in filter_sizes]) self.dropout = nn.Dropout(0.1) self.fc1 = nn.Linear(len(Ks)*num_filters, 1) def forward(self, x): x = self.embedding(x) x = x.unsqueeze(1) x = [F.relu(conv(x)).squeeze(3) for conv in self.convs1] x = [F.max_pool1d(i, i.size(2)).squeeze(2) for i in x] x = torch.cat(x, 1) x = self.dropout(x) logit = self.fc1(x) return logit And for the Keras enthusiasts:
# https://www.kaggle.com/yekenot/2dcnn-textclassifier def model_cnn(embedding_matrix): filter_sizes = [1,2,3,5] num_filters = 36 inp = Input(shape=(maxlen,)) x = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp) x = Reshape((maxlen, embed_size, 1))(x) maxpool_pool = [] for i in range(len(filter_sizes)): conv = Conv2D(num_filters, kernel_size=(filter_sizes[i], embed_size), kernel_initializer=&amp;#39;he_normal&amp;#39;, activation=&amp;#39;relu&amp;#39;)(x) maxpool_pool.append(MaxPool2D(pool_size=(maxlen - filter_sizes[i] &#43; 1, 1))(conv)) z = Concatenate(axis=1)(maxpool_pool) z = Flatten()(z) z = Dropout(0.1)(z) outp = Dense(1, activation=&amp;#34;sigmoid&amp;#34;)(z) model = Model(inputs=inp, outputs=outp) model.compile(loss=&amp;#39;binary_crossentropy&amp;#39;, optimizer=&amp;#39;adam&amp;#39;, metrics=[&amp;#39;accuracy&amp;#39;]) return model I am a big fan of Kaggle Kernels. One could not have imagined having all that compute for free. You can find a running version of the above two code snippets in this kaggle kernel. Do try to experiment with it after forking and running the code. Also please upvote the kernel if you find it helpful.
The Keras model and Pytorch model performed similarly with Pytorch model beating the keras model by a small margin. The Out-Of-Fold CV F1 score for the Pytorch model came out to be 0.6609 while for Keras model the same score came out to be 0.6559. I used the same preprocessing in both the models to be better able to compare the platforms.
2. BiDirectional RNN(LSTM/GRU): TextCNN works well for Text Classification. It takes care of words in close range. It can see &amp;ldquo;new york&amp;rdquo; together. However, it still can&amp;rsquo;t take care of all the context provided in a particular text sequence. It still does not learn the sequential structure of the data, where every word is dependent on the previous word. Or a word in the previous sentence.
RNN help us with that. They can remember previous information using hidden states and connect it to the current task.
Long Short Term Memory networks (LSTM) are a subclass of RNN, specialized in remembering information for an extended period. Moreover, the Bidirectional LSTM keeps the contextual information in both directions which is pretty useful in text classification task (But won&amp;rsquo;t work for a time series prediction task as we don&amp;rsquo;t have visibility into the future in this case).
  For a most simplistic explanation of Bidirectional RNN, think of RNN cell as a black box taking as input a hidden state(a vector) and a word vector and giving out an output vector and the next hidden state. This box has some weights which are to be tuned using Backpropagation of the losses. Also, the same cell is applied to all the words so that the weights are shared across the words in the sentence. This phenomenon is called weight-sharing.
   Hidden state, Word vector -&amp;gt;(RNN Cell) -&amp;gt; Output Vector , Next Hidden state  For a sequence of length 4 like &amp;ldquo;you will never believe&amp;rdquo;, The RNN cell gives 4 output vectors, which can be concatenated and then used as part of a dense feedforward architecture.
In the Bidirectional RNN, the only change is that we read the text in the usual fashion as well in reverse. So we stack two RNNs in parallel, and hence we get 8 output vectors to append.
Once we get the output vectors, we send them through a series of dense layers and finally a softmax layer to build a text classifier.
In most cases, you need to understand how to stack some layers in a neural network to get the best results. We can try out multiple bidirectional GRU/LSTM layers in the network if it performs better.
Due to the limitations of RNNs like not remembering long term dependencies, in practice, we almost always use LSTM/GRU to model long term dependencies. In such a case you can think of the RNN cell being replaced by an LSTM cell or a GRU cell in the above figure. An example model is provided below. You can use CuDNNGRU interchangeably with CuDNNLSTM when you build models. (CuDNNGRU/LSTM are just implementations of LSTM/GRU that are created to run faster on GPUs. In most cases always use them instead of the vanilla LSTM/GRU implementations)
So here is some code in Pytorch for this network.
class BiLSTM(nn.Module): def __init__(self): super(BiLSTM, self).__init__() self.hidden_size = 64 drp = 0.1 self.embedding = nn.Embedding(max_features, embed_size) self.embedding.weight = nn.Parameter(torch.tensor(embedding_matrix, dtype=torch.float32)) self.embedding.weight.requires_grad = False self.lstm = nn.LSTM(embed_size, self.hidden_size, bidirectional=True, batch_first=True) self.linear = nn.Linear(self.hidden_size*4 , 64) self.relu = nn.ReLU() self.dropout = nn.Dropout(drp) self.out = nn.Linear(64, 1) def forward(self, x): h_embedding = self.embedding(x) h_embedding = torch.squeeze(torch.unsqueeze(h_embedding, 0)) h_lstm, _ = self.lstm(h_embedding) avg_pool = torch.mean(h_lstm, 1) max_pool, _ = torch.max(h_lstm, 1) conc = torch.cat(( avg_pool, max_pool), 1) conc = self.relu(self.linear(conc)) conc = self.dropout(conc) out = self.out(conc) return out Also, here is the same code in Keras.
# BiDirectional LSTM def model_lstm_du(embedding_matrix): inp = Input(shape=(maxlen,)) x = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp) &amp;#39;&amp;#39;&amp;#39; Here 64 is the size(dim) of the hidden state vector as well as the output vector. Keeping return_sequence we want the output for the entire sequence. So what is the dimension of output for this layer? 64*70(maxlen)*2(bidirection concat) CuDNNLSTM is fast implementation of LSTM layer in Keras which only runs on GPU &amp;#39;&amp;#39;&amp;#39; x = Bidirectional(CuDNNLSTM(64, return_sequences=True))(x) avg_pool = GlobalAveragePooling1D()(x) max_pool = GlobalMaxPooling1D()(x) conc = concatenate([avg_pool, max_pool]) conc = Dense(64, activation=&amp;#34;relu&amp;#34;)(conc) conc = Dropout(0.1)(conc) outp = Dense(1, activation=&amp;#34;sigmoid&amp;#34;)(conc) model = Model(inputs=inp, outputs=outp) model.compile(loss=&amp;#39;binary_crossentropy&amp;#39;, optimizer=&amp;#39;adam&amp;#39;, metrics=[&amp;#39;accuracy&amp;#39;]) return model You can run this code in my BiLSTM with Pytorch and Keras kaggle kernel for this competition. Please do upvote the kernel if you find it helpful.
In the BiLSTM case also, Pytorch model beats the keras model by a small margin. The Out-Of-Fold CV F1 score for the Pytorch model came out to be 0.6741 while for Keras model the same score came out to be 0.6727. This score is around a 1-2% increase from the TextCNN performance which is pretty good. Also, note that it is around 6-7% better than conventional methods.
3. Attention Models Dzmitry Bahdanau et al first presented attention in their paper Neural Machine Translation by Jointly Learning to Align and Translate but I find that the paper on Hierarchical Attention Networks for Document Classification written jointly by CMU and Microsoft in 2016 is a much easier read and provides more intuition.
So let us talk about the intuition first. In the past conventional methods like TFIDF/CountVectorizer etc. we used to find features from the text by doing a keyword extraction. Some word is more helpful in determining the category of a text than others. However, in this method we sort of lost the sequential structure of the text. With LSTM and deep learning methods, while we can take care of the sequence structure, we lose the ability to give higher weight to more important words. Can we have the best of both worlds?
The answer is Yes. Actually, Attention is all you need. In the author&amp;rsquo;s words:
 Not all words contribute equally to the representation of the sentence meaning. Hence, we introduce attention mechanism to extract such words that are important to the meaning of the sentence and aggregate the representation of those informative words to form a sentence vector
   In essence, we want to create scores for every word in the text, which is the attention similarity score for a word.
To do this, we start with a weight matrix(W), a bias vector(b) and a context vector u. The optimization algorithm learns all of these weights. On this note I would like to highlight something I like a lot about neural networks - If you don&amp;rsquo;t know some params, let the network learn them. We only have to worry about creating architectures and params to tune.
Then there are a series of mathematical operations. See the figure for more clarification. We can think of u1 as nonlinearity on RNN word output. After that v1 is a dot product of u1 with a context vector u raised to exponentiation. From an intuition viewpoint, the value of v1 will be high if u and u1 are similar. Since we want the sum of scores to be 1, we divide v by the sum of v’s to get the Final Scores,s
These final scores are then multiplied by RNN output for words to weight them according to their importance. After which the outputs are summed and sent through dense layers and softmax for the task of text classification.
Here is the code in Pytorch. Do try to read through the pytorch code for attention layer. It just does what I have explained above.
class Attention(nn.Module): def __init__(self, feature_dim, step_dim, bias=True, **kwargs): super(Attention, self).__init__(**kwargs) self.supports_masking = True self.bias = bias self.feature_dim = feature_dim self.step_dim = step_dim self.features_dim = 0 weight = torch.zeros(feature_dim, 1) nn.init.kaiming_uniform_(weight) self.weight = nn.Parameter(weight) if bias: self.b = nn.Parameter(torch.zeros(step_dim)) def forward(self, x, mask=None): feature_dim = self.feature_dim step_dim = self.step_dim eij = torch.mm( x.contiguous().view(-1, feature_dim), self.weight ).view(-1, step_dim) if self.bias: eij = eij &#43; self.b eij = torch.tanh(eij) a = torch.exp(eij) if mask is not None: a = a * mask a = a / (torch.sum(a, 1, keepdim=True) &#43; 1e-10) weighted_input = x * torch.unsqueeze(a, -1) return torch.sum(weighted_input, 1) class Attention_Net(nn.Module): def __init__(self): super(Attention_Net, self).__init__() drp = 0.1 self.embedding = nn.Embedding(max_features, embed_size) self.embedding.weight = nn.Parameter(torch.tensor(embedding_matrix, dtype=torch.float32)) self.embedding.weight.requires_grad = False self.embedding_dropout = nn.Dropout2d(0.1) self.lstm = nn.LSTM(embed_size, 128, bidirectional=True, batch_first=True) self.lstm2 = nn.GRU(128*2, 64, bidirectional=True, batch_first=True) self.attention_layer = Attention(128, maxlen) self.linear = nn.Linear(64*2 , 64) self.relu = nn.ReLU() self.out = nn.Linear(64, 1) def forward(self, x): h_embedding = self.embedding(x) h_embedding = torch.squeeze(torch.unsqueeze(h_embedding, 0)) h_lstm, _ = self.lstm(h_embedding) h_lstm, _ = self.lstm2(h_lstm) h_lstm_atten = self.attention_layer(h_lstm) conc = self.relu(self.linear(h_lstm_atten)) out = self.out(conc) return out Same code for Keras.
def dot_product(x, kernel): &amp;#34;&amp;#34;&amp;#34; Wrapper for dot product operation, in order to be compatible with both Theano and Tensorflow Args: x (): input kernel (): weights Returns: &amp;#34;&amp;#34;&amp;#34; if K.backend() == &amp;#39;tensorflow&amp;#39;: return K.squeeze(K.dot(x, K.expand_dims(kernel)), axis=-1) else: return K.dot(x, kernel) class AttentionWithContext(Layer): &amp;#34;&amp;#34;&amp;#34; Attention operation, with a context/query vector, for temporal data. Supports Masking. Follows the work of Yang et al. [https://www.cs.cmu.edu/~diyiy/docs/naacl16.pdf] &amp;#34;Hierarchical Attention Networks for Document Classification&amp;#34; by using a context vector to assist the attention # Input shape 3D tensor with shape: `(samples, steps, features)`. # Output shape 2D tensor with shape: `(samples, features)`. How to use: Just put it on top of an RNN Layer (GRU/LSTM/SimpleRNN) with return_sequences=True. The dimensions are inferred based on the output shape of the RNN. Note: The layer has been tested with Keras 2.0.6 Example: model.add(LSTM(64, return_sequences=True)) model.add(AttentionWithContext()) # next add a Dense layer (for classification/regression) or whatever... &amp;#34;&amp;#34;&amp;#34; def __init__(self, W_regularizer=None, u_regularizer=None, b_regularizer=None, W_constraint=None, u_constraint=None, b_constraint=None, bias=True, **kwargs): self.supports_masking = True self.init = initializers.get(&amp;#39;glorot_uniform&amp;#39;) self.W_regularizer = regularizers.get(W_regularizer) self.u_regularizer = regularizers.get(u_regularizer) self.b_regularizer = regularizers.get(b_regularizer) self.W_constraint = constraints.get(W_constraint) self.u_constraint = constraints.get(u_constraint) self.b_constraint = constraints.get(b_constraint) self.bias = bias super(AttentionWithContext, self).__init__(**kwargs) def build(self, input_shape): assert len(input_shape) == 3 self.W = self.add_weight((input_shape[-1], input_shape[-1],), initializer=self.init, name=&amp;#39;{}_W&amp;#39;.format(self.name), regularizer=self.W_regularizer, constraint=self.W_constraint) if self.bias: self.b = self.add_weight((input_shape[-1],), initializer=&amp;#39;zero&amp;#39;, name=&amp;#39;{}_b&amp;#39;.format(self.name), regularizer=self.b_regularizer, constraint=self.b_constraint) self.u = self.add_weight((input_shape[-1],), initializer=self.init, name=&amp;#39;{}_u&amp;#39;.format(self.name), regularizer=self.u_regularizer, constraint=self.u_constraint) super(AttentionWithContext, self).build(input_shape) def compute_mask(self, input, input_mask=None): # do not pass the mask to the next layers return None def call(self, x, mask=None): uit = dot_product(x, self.W) if self.bias: uit &#43;= self.b uit = K.tanh(uit) ait = dot_product(uit, self.u) a = K.exp(ait) # apply mask after the exp. will be re-normalized next if mask is not None: # Cast the mask to floatX to avoid float64 upcasting in theano a *= K.cast(mask, K.floatx()) # in some cases especially in the early stages of training the sum may be almost zero # and this results in NaN&amp;#39;s. A workaround is to add a very small positive number ε to the sum. # a /= K.cast(K.sum(a, axis=1, keepdims=True), K.floatx()) a /= K.cast(K.sum(a, axis=1, keepdims=True) &#43; K.epsilon(), K.floatx()) a = K.expand_dims(a) weighted_input = x * a return K.sum(weighted_input, axis=1) def compute_output_shape(self, input_shape): return input_shape[0], input_shape[-1] def model_lstm_atten(embedding_matrix): inp = Input(shape=(maxlen,)) x = Embedding(max_features, embed_size, weights=[embedding_matrix], trainable=False)(inp) x = Bidirectional(CuDNNLSTM(128, return_sequences=True))(x) x = Bidirectional(CuDNNLSTM(64, return_sequences=True))(x) x = AttentionWithContext()(x) x = Dense(64, activation=&amp;#34;relu&amp;#34;)(x) x = Dense(1, activation=&amp;#34;sigmoid&amp;#34;)(x) model = Model(inputs=inp, outputs=x) model.compile(loss=&amp;#39;binary_crossentropy&amp;#39;, optimizer=&amp;#39;adam&amp;#39;, metrics=[&amp;#39;accuracy&amp;#39;]) return model Again, my Attention with Pytorch and Keras Kaggle kernel contains the working versions for this code. Please do upvote the kernel if you find it useful.
This method performed well with Pytorch CV scores reaching around 0.6758 and Keras CV scores reaching around 0.678. This score is more than what we were able to achieve with BiLSTM and TextCNN. However, please note that we didn&amp;rsquo;t work on tuning any of the given methods yet and so the scores might be different.
With this, I leave you to experiment with new architectures and playing around with stacking multiple GRU/LSTM layers to improve your network performance. You can also look at including more techniques in these network like Bucketing, handmade features, etc. Some of the tips and new techniques are mentioned here on my blog post: What my first Silver Medal taught me about Text Classification and Kaggle in general?. Also, here is another Kaggle kernel which is my silver-winning entry for this competition.
Results Here are the final results of all the different approaches I have tried on the Kaggle Dataset. I ran a 5 fold Stratified CV.
a. Conventional Methods:   b. Deep Learning Methods:   PS: Note that I didn&amp;rsquo;t work on tuning the above models, so these results are only cursory. You can try to squeeze more performance by performing hyperparams tuning using hyperopt or just old fashioned Grid-search.
Conclusion In this post, I went through with the explanations of various deep learning architectures people are using for Text classification tasks. In the next post, we will delve further into the next new phenomenon in NLP space - Transfer Learning with BERT and ULMFit. Follow me up at Medium or Subscribe to my blog to be informed about my next post.
Also if you want to learn more about NLP here is an excellent course. You can start for free with the 7-day Free Trial.
Let me know if you think I can add something more to the post; I will try to incorporate it.
Cheers!!!
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>What my first Silver Medal taught me about Text Classification and Kaggle in general?</title>
      <link>https://mlwhiz.com/blog/2019/02/19/siver_medal_kaggle_learnings/</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/02/19/siver_medal_kaggle_learnings/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/silver/CV_vs_LB.png"></media:content>
      

      
      <description>Kaggle is an excellent place for learning. And I learned a lot of things from the recently concluded competition on Quora Insincere questions classification in which I got a rank of 182/4037. In this post, I will try to provide a summary of the things I tried. I will also try to summarize the ideas which I missed but were a part of other winning solutions.
As a side note: if you want to know more about NLP, I would like to recommend this awesome course on Natural Language Processing in the Advanced machine learning specialization.</description>

      <content:encoded>  
        
        <![CDATA[    Kaggle is an excellent place for learning. And I learned a lot of things from the recently concluded competition on Quora Insincere questions classification in which I got a rank of 182/4037. In this post, I will try to provide a summary of the things I tried. I will also try to summarize the ideas which I missed but were a part of other winning solutions.
As a side note: if you want to know more about NLP, I would like to recommend this awesome course on Natural Language Processing in the Advanced machine learning specialization. You can start for free with the 7-day Free Trial. This course covers a wide range of tasks in Natural Language Processing from basic to advanced: sentiment analysis, summarization, dialogue state tracking, to name a few. You can start for free with the 7-day Free Trial.
So first a little bit of summary about the competition for the uninitiated. In this competition, we had to develop models that identify and flag insincere questions. The challenge was not only a test for performance but also a test of efficient code writing skills. As it was a kernel competition with limited outside data options, competitors were limited to use only the word embeddings provided by the competition organizers. That means we were not allowed to use State of the art models like BERT. We were also limited in the sense that all our models should run in a time of 2 hours. So say bye bye to stacking and monster ensembles though some solutions were able to do this by making their code ultra-efficient. More on this later.
Some Kaggle Learnings: There were a couple of learnings about kaggle as a whole that I would like to share before jumping into my final solution:
1. Always trust your CV   One of the things that genuinely baffled a lot of people in this competition was that a good CV score did not necessarily translate well to a good LB score. The main reason for this was small test dataset(only 65k rows) in the first stage(around 15% of total test data).
A common theme on discussion forums was focussing on which submissions we should select as the final submission:
 The one having the best local CV? or The one having the best LB?  And while it seems simple to say to trust your CV, common sense goes for a toss when you see that your LB score is going down or remaining constant whenever your Local CV score increases.
Luckily I didn&amp;rsquo;t end up making the mistake of not trusting my CV score. Owing to a lot of excellent posts on Kaggle discussion board, I selected a kernel with Public LB score of 0.697 and a Local CV of 0.701, which was around &amp;gt;1200 rank on Public LB as of the final submission. It achieved a score of 0.702 and ranked 182 on the private LB.
While this seems like a straightforward choice post-facto, it was a hard decision to make at a time when you have at your disposal some public kernels having Public LB score &amp;gt;= 0.70
2. Use the code from public kernels but check for errors This Pytorch kernel by Benjamin Minixhofer is awesome. It made the base of many of my submissions for this competition. But this kernel had a mistake. It didn&amp;rsquo;t implement spatial dropout in the right way. You can find the correct implementation of spatial dropout in my post here or on my kernel. Implementing spatial dropout in the right way gave a boost of around 0.004 to the local CV.
Nonetheless, I learned pytorch using this kernel, and I am grateful to him for the same.
3. Don&amp;rsquo;t trust everything that goes on the discussion forums   I will talk about two things here:
 Seed tuning: While in the middle of the competition, everyone was trying to get the best possible rank on the public LB. It is just human nature. A lot of discussions was around good seeds and bad seeds for neural network initialization. While it seems okay in the first look, the conversation went a stage further where people started tuning seeds in the kernel as a hyper param. Some discussions even went on to say that it was a valid strategy. And that is where a large amount of overfitting to public LB started happening. The same submission would score 0.704 from 0.699 just by changing the seed. For a reference, that meant you could go from anywhere near 400-500 rank to top 50 only by changing seed in a public kernel. And that spelled disaster. Some people did that. They went up the public LB. Went crashing out at the private stage.
 CV score disclosure on discussion forums: We always try to gauge our performance against other people. In a lot of discussions, people provided their CV scores and corresponding Public LB scores. The scores were all over the place and not comparable due to Different CV schemes, No of folds in CV, Metric reported, Overfitting or just plain Wrong implementation of Cross-Validation. But they ended up influencing a lot of starters and newcomers.
  4. On that note, be active on Discussion forums and check public kernels regularly You can learn a lot just by being part of discussion forums and following public kernels. This competition had a lot of excellent public kernels on embeddings by SRK, Models by Shujian, and Preprocessing by Theo Viel which gave everyone a headstart. As the competition progressed, the discussions also evolved. There were discussions on speeding up the code, working approaches, F1 threshold finders, and other exciting topics which kept me occupied with new ideas and improvements.
Even after the end, while reading up discussions on solutions overview, I learned a lot. And I would say it is very ** vital to check out the winning solutions.**
5. Share a lot Sharing is everything on Kaggle. People have shared their codes as well as their ideas while competing as well as after the competition ended. It is only together that we can go forward. I like blogging, so I am sharing the knowledge via a series of blog posts on text classification. The first post talked about the different preprocessing techniques that work with Deep learning models and increasing embeddings coverage. In the second post, I talked through some basic conventional models like TFIDF, Count Vectorizer, Hashing, etc. that have been used in text classification and tried to access their performance to create a baseline. In the third post, I will delve deeper into Deep learning models and the various architectures we could use to solve the text Classification problem. To make this post platform generic I will try to write code in both Keras and Pytorch. We will try to use various other models which we were not able to use in this competition like ULMFit transfer learning approaches in the fourth post in the series.
It might take me a little time to write the whole series. Till then you can take a look at my other posts too: What Kagglers are using for Text Classification, which talks about various deep learning models in use in NLP and how to switch from Keras to Pytorch.
6. Beware of trolls :) We were going along happily towards the end of the competition with two weeks left. Scores were increasing slowly. The top players were somewhat stagnant. And then came Pavel and team with a Public LB score of 0.782. The next group had an LB score of 0.713. Such a huge difference. I was so sure that there was some leakage in the data which nobody has caught yet except for Pavel. I spent nearly half a day to do EDA again.
In the end, it turned out that what they did was scraping — nicely played!
They also have some pretty awesome ideas around including additional data, which could have worked but did not in this competition.
My Final Solution:   My main focus was on meta-feature engineering and on increasing embedding coverage and quality. That means I did not play much with various Neural Net architectures. Here are the things that I included in my final submission:
 I noticed that Glove embeddings were doing good on the local CV but not on LB, while meta embeddings(mean of glove and paragram) were doing good on LB but not that good on the CV. I took a mixed approach so some of my models are trained with only glove embedding and some on meta embeddings. Included four more features in embedding. Thus my embedding was a 304-dimensional vector. The four new values corresponded to title case flag, uppercase flag, Textblob word polarity, textblob word subjectivity Found out NER tokens from the whole train and test data using spacy and kept the tokens and the entities in a dict. I used this dict to create extra features like counts of GPE, PERSON, ORG, NORP, WORK_OF_ART.Added some value and were highly correlated with the target. Other features that I used include total_length,capitals,words_vs_unique as well as some engineered features like sum_feat(sum of expletives), question_start_with_why, question_start_with_how_or_what, question_start_with_do_or_are. Might not have added much value but still kept them. My final solution consisted of a stacked ensemble for four models. I stacked the four models using Logistic regression(with positive weights and 0 intercept) and gave the weights as a list in the final kernel.  You can find the kernel for my final submission here.
Tips and Tricks used in other solutions: 1. Increasing Embeddings Coverage: In the third place solution kernel, wowfattie uses stemming, lemmatization, capitalize, lower, uppercase, as well as embedding of the nearest word using a spell checker to get embeddings for all words in his vocab. Such a great idea. I liked this solution the best as it can do what I was trying to do and finished at a pretty good place. Also, the code is very clean.
from nltk.stem import PorterStemmer ps = PorterStemmer() from nltk.stem.lancaster import LancasterStemmer lc = LancasterStemmer() from nltk.stem import SnowballStemmer sb = SnowballStemmer(&amp;#34;english&amp;#34;) def load_glove(word_dict, lemma_dict): EMBEDDING_FILE = &amp;#39;../input/embeddings/glove.840B.300d/glove.840B.300d.txt&amp;#39; def get_coefs(word,*arr): return word, np.asarray(arr, dtype=&amp;#39;float32&amp;#39;) embeddings_index = dict(get_coefs(*o.split(&amp;#34; &amp;#34;)) for o in open(EMBEDDING_FILE)) embed_size = 300 nb_words = len(word_dict)&#43;1 embedding_matrix = np.zeros((nb_words, embed_size), dtype=np.float32) unknown_vector = np.zeros((embed_size,), dtype=np.float32) - 1. print(unknown_vector[:5]) for key in tqdm(word_dict): word = key embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue word = key.lower() embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue word = key.upper() embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue word = key.capitalize() embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue word = ps.stem(key) embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue word = lc.stem(key) embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue word = sb.stem(key) embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue word = lemma_dict[key] embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue if len(key) &amp;gt; 1: word = correction(key) embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[word_dict[key]] = embedding_vector continue embedding_matrix[word_dict[key]] = unknown_vector return embedding_matrix, nb_words 2. Checkpoint Ensembling: Get a lot of models at no cost. Most of the winning solutions have some version of checkpoint ensembling. For the third place solution, the predictions are a weighted average of predictions after the 4th epoch and predictions after the 5th epoch. I got this idea but forgot to implement it in my ensemble based kernel submission.
3. Meta Embeddings: A lot of winning solutions ended up using weighted meta embeddings where they provided a higher weight to the Glove embedding. Some solutions also used concatenated embeddings.
4. Model Architecture: One surprising thing I saw people doing was to use a 1Dconv layer just after the Bidirectional layer. For example, This is the architecture used by the team that placed first in the competition.
  5. Bucketing/Variable Sequence Length and increased hidden units: Another thing I noticed is the increased number of hidden units as compared to many public kernels. Most of the public kernels used a hidden unit size of 60 due to time constraints. I used 80 units at the cost of training one less network. A lot of high scoring kernels were able to use a higher number of hidden units owing to variable sequence length idea or bucketing. From the 1st place kernel discussion:
 We do not pad sequences to the same length based on the whole data, but just on a batch level. That means we conduct padding and truncation on the data generator level for each batch separately, so that length of the sentences in a batch can vary in size. Additionally, we further improved this by not truncating based on the length of the longest sequence in the batch but based on the 95% percentile of lengths within the sequence. This improved runtime heavily and kept accuracy quite robust on single model level, and improved it by being able to average more models.
 Also from 7th place discussion:
 Bucketing is to make a minibatch from instances that have similar lengths to alleviate the cost of padding. This makes the training speed more than 3x faster, and thus I can run 9 epochs for each split of 5-fold.
 Thus the use of this technique also allowed some competitors to fit many more epochs in less time and run more models at the same time. Pretty Neat!
6. For those winners who didn&amp;rsquo;t use bucketing, Maxlen = 72 was too large: Most of us saw a distribution of question length and took the length that covered maximum questions fully as the maxlen parameter. I never tried to tune it, but it seems like it could have been tuned. One of the tricks was to use maxlen ranging from 35 to 60. This made the kernels run a lot faster.
7. Time taking models/complex architectures like Capsule were mostly not used: Most of the winning solutions didn&amp;rsquo;t use capsule networks as they took a lot of time to train.
8. Backprop errors on embeddings weights in last few epochs: Another thing I saw was in the 18th place kernel which uses a single model
if epoch &amp;gt;= 3: model.embedding.embeddings.weight.requires_grad = True Conclusion: It was a good and long 2-month competition, and I learned a lot about Text and NLP during this time. I want to emphasize here is that I ended up trying a lot of things that didn&amp;rsquo;t work before reaching my final solution. It was a little frustrating at times, but in the end, I was happy that I ended up with the best data science practices. Would also like to thank Kaggle master Kazanova who along with some of his friends released a “How to win a data science competition” Coursera course. I learned a lot from this course.
Let me know in the comments if you think something is missing/wrong or if I could add more tips/tricks for this competition.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>NLP  Learning Series: Part 2 - Conventional Methods for Text Classification</title>
      <link>https://mlwhiz.com/blog/2019/02/08/deeplearning_nlp_conventional_methods/</link>
      <pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/02/08/deeplearning_nlp_conventional_methods/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/tfidf.png"></media:content>
      

      
      <description>This is the second post of the NLP Text classification series. To give you a recap, recently I started up with an NLP text classification competition on Kaggle called Quora Question insincerity challenge. And I thought to share the knowledge via a series of blog posts on text classification. The first post talked about the various preprocessing techniques that work with Deep learning models and increasing embeddings coverage. In this post, I will try to take you through some basic conventional models like TFIDF, Count Vectorizer, Hashing etc.</description>

      <content:encoded>  
        
        <![CDATA[  This is the second post of the NLP Text classification series. To give you a recap, recently I started up with an NLP text classification competition on Kaggle called Quora Question insincerity challenge. And I thought to share the knowledge via a series of blog posts on text classification. The first post talked about the various preprocessing techniques that work with Deep learning models and increasing embeddings coverage. In this post, I will try to take you through some basic conventional models like TFIDF, Count Vectorizer, Hashing etc. that have been used in text classification and try to access their performance to create a baseline. We will delve deeper into Deep learning models in the third post which will focus on different architectures for solving the text classification problem. We will try to use various other models which we were not able to use in this competition like ULMFit transfer learning approaches in the fourth post in the series.
As a side note: if you want to know more about NLP, I would like to recommend this awesome course on Natural Language Processing in the Advanced machine learning specialization. You can start for free with the 7-day Free Trial. This course covers a wide range of tasks in Natural Language Processing from basic to advanced: sentiment analysis, summarization, dialogue state tracking, to name a few. You can start for free with the 7-day Free Trial.
It might take me a little time to write the whole series. Till then you can take a look at my other posts too: What Kagglers are using for Text Classification, which talks about various deep learning models in use in NLP and how to switch from Keras to Pytorch.
So again we start with the first step: Preprocessing.
Basic Preprocessing Techniques for text data(Continued) So in the last post, we talked about various preprocessing methods for text for deep learning purpose. Most of the preprocessing for conventional methods remains the same. We will still remove special characters, punctuations, and contractions. But We also may want to do stemming/lemmatization when it comes to conventional methods. Let us talk about them.
 For grammatical reasons, documents are going to use different forms of a word, such as organize, organizes, and organizing. Additionally, there are families of derivationally related words with similar meanings, such as democracy, democratic, and democratization.
 Since we are going to create features for words in the feature creation step, it makes sense to reduce words to a common denominator so that &amp;lsquo;organize&amp;rsquo;,&amp;lsquo;organizes&amp;rsquo; and &amp;lsquo;organizing&amp;rsquo; could be referred to by a single word &amp;lsquo;organize&amp;rsquo;
a) Stemming Stemming is the process of converting words to their base forms using crude Heuristic rules. For example, one rule could be to remove &amp;rsquo;s&amp;rsquo; from the end of any word, so that &amp;lsquo;cats&amp;rsquo; becomes &amp;lsquo;cat&amp;rsquo;. or another rule could be to replace &amp;lsquo;ies&amp;rsquo; with &amp;lsquo;i&amp;rsquo; so that &amp;lsquo;ponies becomes &amp;lsquo;poni&amp;rsquo;. One of the main point to note here is that when we stem the word we might get a nonsense word like &amp;lsquo;poni&amp;rsquo;. But it will still work for our use case as we count the number of occurrences of a particular word and not focus on the meanings of these words in conventional methods. It doesn&amp;rsquo;t work with deep learning for precisely the same reason.
  We can do this pretty simply by using this function in python.
from nltk.stem import SnowballStemmer from nltk.tokenize.toktok import ToktokTokenizer def stem_text(text): tokenizer = ToktokTokenizer() stemmer = SnowballStemmer(&amp;#39;english&amp;#39;) tokens = tokenizer.tokenize(text) tokens = [token.strip() for token in tokens] tokens = [stemmer.stem(token) for token in tokens] return &amp;#39; &amp;#39;.join(tokens) b) Lemmatization Lemmatization is very similar to stemming but it aims to remove endings only if the base form is present in a dictionary.
from nltk.stem import WordNetLemmatizer from nltk.tokenize.toktok import ToktokTokenizer def lemma_text(text): tokenizer = ToktokTokenizer() tokens = tokenizer.tokenize(text) tokens = [token.strip() for token in tokens] tokens = [wordnet_lemmatizer.lemmatize(token) for token in tokens] return &amp;#39; &amp;#39;.join(tokens) Once we are done with processing a text, our text will necessarily go through these following steps.
def clean_sentence(x): x = x.lower() x = clean_text(x) x = clean_numbers(x) x = replace_typical_misspell(x) x = remove_stopwords(x) x = replace_contractions(x) x = lemma_text(x) x = x.replace(&amp;#34;&amp;#39;&amp;#34;,&amp;#34;&amp;#34;) return x Text Representation In Conventional Machine learning methods, we ought to create features for a text. There are a lot of representations that are present to achieve this. Let us talk about them one by one.
a) Bag of Words - Countvectorizer Features Suppose we have a series of sentences(documents)
X = [ &amp;#39;This is good&amp;#39;, &amp;#39;This is bad&amp;#39;, &amp;#39;This is awesome&amp;#39; ]    Bag of words will create a dictionary of the most common words in all the sentences. For the example above the dictionary would look like:
word_index {&amp;#39;this&amp;#39;:0,&amp;#39;is&amp;#39;:1,&amp;#39;good&amp;#39;:2,&amp;#39;bad&amp;#39;:3,&amp;#39;awesome&amp;#39;:4} And then encode the sentences using the above dict.
This is good - [1,1,1,0,0] This is bad - [1,1,0,1,0] This is awesome - [1,1,0,0,1] We could do this pretty simply in Python by using the CountVectorizer class from Python. Don&amp;rsquo;t worry much about the heavy name, it just does what I explained above. It has a lot of parameters most significant of which are:
 ngram_range: I specify in the code (1,3). This means that unigrams, bigrams, and trigrams will be taken into account while creating features. min_df: Minimum no of time an ngram should appear in a corpus to be used as a feature.  cnt_vectorizer = CountVectorizer(dtype=np.float32, strip_accents=&amp;#39;unicode&amp;#39;, analyzer=&amp;#39;word&amp;#39;,token_pattern=r&amp;#39;\w{1,}&amp;#39;, ngram_range=(1, 3),min_df=3) # we fit count vectorizer to get ngrams from both train and test data. cnt_vectorizer.fit(list(train_df.cleaned_text.values) &#43; list(test_df.cleaned_text.values)) xtrain_cntv = cnt_vectorizer.transform(train_df.cleaned_text.values) xtest_cntv = cnt_vectorizer.transform(test_df.cleaned_text.values) We could then use these features with any machine learning classification model like Logistic Regression, Naive Bayes, SVM or LightGBM as we would like. For example:
# Fitting a simple Logistic Regression on CV Feats clf = LogisticRegression(C=1.0) clf.fit(xtrain_cntv,y_train) Here is a link to a kernel where I tried these features on the Quora Dataset. If you like it please don&amp;rsquo;t forget to upvote.
b) TFIDF Features TFIDF is a simple technique to find features from sentences. While in Count features we take count of all the words/ngrams present in a document, with TFIDF we take features only for the significant words. How do we do that? If you think of a document in a corpus, we will consider two things about any word in that document:
   Term Frequency: How important is the word in the document?  $$TF(word\ in\ a\ document) = \dfrac{No\ of\ occurances\ of\ that\ word\ in\ document}{No\ of\ words\ in\ document}$$
 Inverse Document Frequency: How important the term is in the whole corpus?  $$IDF(word\ in\ a\ corpus) = -log(ratio\ of\ documents\ that\ include\ the\ word)$$
TFIDF then is just multiplication of these two scores.
Intuitively, One can understand that a word is important if it occurs many times in a document. But that creates a problem. Words like &amp;ldquo;a&amp;rdquo;, &amp;ldquo;the&amp;rdquo; occur many times in sentence. Their TF score will always be high. We solve that by using Inverse Document frequency, which is high if the word is rare, and low if the word is common across the corpus.
In essence, we want to find important words in a document which are also not very common.
We could do this pretty simply in Python by using the TFIDFVectorizer class from Python. It has a lot of parameters most significant of which are:
 ngram_range: I specify in the code (1,3). This means that unigrams, bigrams, and trigrams will be taken into account while creating features. min_df: Minimum no of time an ngram should appear in a corpus to be used as a feature.  # Always start with these features. They work (almost) everytime! tfv = TfidfVectorizer(dtype=np.float32, min_df=3, max_features=None, strip_accents=&amp;#39;unicode&amp;#39;, analyzer=&amp;#39;word&amp;#39;,token_pattern=r&amp;#39;\w{1,}&amp;#39;, ngram_range=(1, 3), use_idf=1,smooth_idf=1,sublinear_tf=1, stop_words = &amp;#39;english&amp;#39;) # Fitting TF-IDF to both training and test sets (semi-supervised learning) tfv.fit(list(train_df.cleaned_text.values) &#43; list(test_df.cleaned_text.values)) xtrain_tfv = tfv.transform(train_df.cleaned_text.values) xvalid_tfv = tfv.transform(test_df.cleaned_text.values) Again, we could use these features with any machine learning classification model like Logistic Regression, Naive Bayes, SVM or LightGBM as we would like. Here is a link to a kernel where I tried these features on the Quora Dataset. If you like it please don&amp;rsquo;t forget to upvote.
c) Hashing Features Normally there will be a lot of ngrams in a document corpus. The number of features that our TFIDFVectorizer generated was in excess of 2,00,000 features. This might lead to a problem on very large datasets as we have to hold a very large vocabulary dictionary in memory. One way to counter this is to use the Hash Trick.
  One can think of hashing as a single function which maps any ngram to a number range for example between 0 to 1024. Now we don&amp;rsquo;t have to store our ngrams in a dictionary. We can just use the function to get the index of any word, rather than getting the index from a dictionary.
Since there can be more than 1024 ngrams, different ngrams might map to the same number, and this is called collision. The larger the range we provide our Hashing function, the less is the chance of collisions.
We could do this pretty simply in Python by using the HashingVectorizer class from Python. It has a lot of parameters most significant of which are:
 ngram_range: I specify in the code (1,3). This means that unigrams, bigrams, and trigrams will be taken into account while creating features. n_features: No of features you want to consider. The range I gave above.  # Always start with these features. They work (almost) everytime! hv = HashingVectorizer(dtype=np.float32, strip_accents=&amp;#39;unicode&amp;#39;, analyzer=&amp;#39;word&amp;#39;, ngram_range=(1, 4),n_features=2**12,non_negative=True) # Fitting Hash Vectorizer to both training and test sets (semi-supervised learning) hv.fit(list(train_df.cleaned_text.values) &#43; list(test_df.cleaned_text.values)) xtrain_hv = hv.transform(train_df.cleaned_text.values) xvalid_hv = hv.transform(test_df.cleaned_text.values) y_train = train_df.target.values Here is a link to a kernel where I tried these features on the Quora Dataset. If you like it please don&amp;rsquo;t forget to upvote.
d) Word2vec Features We already talked a little about word2vec in the previous post. We can use the word to vec features to create sentence level feats also. We want to create a d dimensional vector for sentence. For doing this, we will simply average the word embedding of all the words in a sentence.
  We can do this in Python using the following functions.
# load the GloVe vectors in a dictionary: def load_glove_index(): EMBEDDING_FILE = &amp;#39;../input/embeddings/glove.840B.300d/glove.840B.300d.txt&amp;#39; def get_coefs(word,*arr): return word, np.asarray(arr, dtype=&amp;#39;float32&amp;#39;)[:300] embeddings_index = dict(get_coefs(*o.split(&amp;#34; &amp;#34;)) for o in open(EMBEDDING_FILE)) return embeddings_index embeddings_index = load_glove_index() print(&amp;#39;Found %sword vectors.&amp;#39; % len(embeddings_index)) from nltk.corpus import stopwords stop_words = stopwords.words(&amp;#39;english&amp;#39;) def sent2vec(s): words = str(s).lower() words = word_tokenize(words) words = [w for w in words if not w in stop_words] words = [w for w in words if w.isalpha()] M = [] for w in words: try: M.append(embeddings_index[w]) except: continue M = np.array(M) v = M.sum(axis=0) if type(v) != np.ndarray: return np.zeros(300) return v / np.sqrt((v ** 2).sum()) # create glove features xtrain_glove = np.array([sent2vec(x) for x in tqdm(train_df.cleaned_text.values)]) xtest_glove = np.array([sent2vec(x) for x in tqdm(test_df.cleaned_text.values)]) Here is a link to a kernel where I tried these features on the Quora Dataset. If you like it please don&amp;rsquo;t forget to upvote.
Results Here are the results of different approaches on the Kaggle Dataset. I ran a 5 fold Stratified CV.
  Here is the code. If you like it please don&amp;rsquo;t forget to upvote. Also note that I didn&amp;rsquo;t work on tuning the models, so these results are only cursory. You can try to squeeze more performance by performing hyperparams tuning using hyperopt or just old fashioned Grid-search and the performance of models may change after that substantially.
Conclusion While Deep Learning works a lot better for NLP classification task, it still makes sense to have an understanding of how these problems were solved in the past, so that we can appreciate the nature of the problem. I have tried to provide a perspective on the conventional methods and one should experiment with them too to create baselines before moving to Deep Learning methods. If you want to learn more about NLP here is an awesome course. You can start for free with the 7-day Free Trial. If you think I can add something to the flow, do mention it in the comments.
Endnotes and References This post is a result of an effort of a lot of excellent Kagglers and I will try to reference them in this section. If I leave out someone, do understand that it was not my intention to do so.
 Approaching (Almost) Any NLP Problem on Kaggle How to: Preprocessing when using embeddings  ]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>NLP  Learning Series: Part 1 - Text Preprocessing Methods for Deep Learning</title>
      <link>https://mlwhiz.com/blog/2019/01/17/deeplearning_nlp_preprocess/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/01/17/deeplearning_nlp_preprocess/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/text_processing_flow_1.png"></media:content>
      

      
      <description>Recently, I started up with an NLP competition on Kaggle called Quora Question insincerity challenge. It is an NLP Challenge on text classification and as the problem has become more clear after working through the competition as well as by going through the invaluable kernels put up by the kaggle experts, I thought of sharing the knowledge.
Since we have a large amount of material to cover, I am splitting this post into a series of posts.</description>

      <content:encoded>  
        
        <![CDATA[  Recently, I started up with an NLP competition on Kaggle called Quora Question insincerity challenge. It is an NLP Challenge on text classification and as the problem has become more clear after working through the competition as well as by going through the invaluable kernels put up by the kaggle experts, I thought of sharing the knowledge.
Since we have a large amount of material to cover, I am splitting this post into a series of posts. The first post i.e. this one will be based on preprocessing techniques that work with Deep learning models and we will also talk about increasing embeddings coverage. In the second post, I will try to take you through some basic conventional models like TFIDF, Count Vectorizer, Hashing etc. that have been used in text classification and try to access their performance to create a baseline. We will delve deeper into Deep learning models in the third post which will focus on different architectures for solving the text classification problem. We will try to use various other models which we were not able to use in this competition like ULMFit transfer learning approaches in the fourth post in the series.
As a side note: if you want to know more about NLP, I would like to recommend this awesome course on Natural Language Processing in the Advanced machine learning specialization. You can start for free with the 7-day Free Trial. This course covers a wide range of tasks in Natural Language Processing from basic to advanced: sentiment analysis, summarization, dialogue state tracking, to name a few. You can start for free with the 7-day Free Trial.
It might take me a little time to write the whole series. Till then you can take a look at my other posts: What Kagglers are using for Text Classification, which talks about various deep learning models in use in NLP and how to switch from Keras to Pytorch.
So first let me start with explaining a little more about the text classification problem. Text classification is a common task in natural language processing, which transforms a sequence of a text of indefinite length into a category of text. How could you use that?
 To find the sentiment of a review. Find toxic comments on a platform like Facebook Find Insincere questions on Quora. A current ongoing competition on kaggle Find fake reviews on websites Will a text advert get clicked or not?  Now each of these problems has something in common. From a Machine Learning perspective, these are essentially the same problem with just the target labels changing and nothing else. With that said, the addition of business knowledge can help make these models more robust and that is what we want to incorporate while preprocessing the data for test classification. While the preprocessing pipeline I am focussing on in this post is mainly centered around Deep Learning but most of it will also be applicable to conventional machine learning models too.
But let me first go through the flow of a deep learning pipeline for text data before going through all the steps to get a higher level perspective about the whole process.
  We normally start with cleaning up the text data and performing basic EDA. Here we try to improve our data quality by cleaning up the data. We also try to improve the quality of our word2vec embeddings by removing OOV(Out-of-Vocabulary) words. These first two steps normally don&amp;rsquo;t have much order between them and I generally go back and forth between these two steps. Next, we create a representation for text that could be fed into a deep learning model. We then start with creating our models and training them. Finally, we evaluate the models using appropriate metrics and get approval from respective shareholders to deploy our models. Don&amp;rsquo;t worry if these terms don&amp;rsquo;t make much sense now. I will try to explain them through the course of this article.
Here at this junction, let us take a little detour to talk a little about word embeddings. We will have to think about them while preprocessing data for our Deep Learning models.
A Primer on word2vec embeddings: We need to have a way to represent words in a vocab. One way to do that could be to use One hot encoding of word vectors but that is not really a good choice. One of the major reasons is that the one-hot word vectors cannot accurately express the similarity between different words, such as the cosine similarity.
$$\frac{\boldsymbol{x}^\top \boldsymbol{y}}{|\boldsymbol{x}| |\boldsymbol{y}|} \in [-1, 1].$$
Given the structure of one hot encoded vectors, the similarity is always going to come as 0 between different words. Another reason is that as the size of vocabulary increases these one hot encoded vectors become very large.
Word2Vec overcomes the above difficulties by providing us with a fixed length vector representation of words and by capturing the similarity and analogy relationships between different words.
  Word2vec vectors of words are learned in such a way that they allow us to learn different analogies. It enables us to do algebraic manipulations on words which were not possible before. For example: What is king - man &#43; woman? It comes out to be Queen.
Word2Vec vectors also help us to find out the similarity between words. If we try to find similar words to &amp;ldquo;good&amp;rdquo;, we will find awesome, great etc. It is this property of word2vec that makes it invaluable for text classification. Now our deep learning network understands that &amp;ldquo;good&amp;rdquo; and &amp;ldquo;great&amp;rdquo; are essentially words with similar meaning.
Thus in very simple terms, word2vec creates vectors for words. Thus we have a d dimensional vector for every word(common bigrams too) in a dictionary. We normally use pretrained word vectors which are provided to us by others after training on large corpora of texts like Wikipedia, twitter etc. The most commonly used pretrained word vectors are Glove and Fasttext with 300-dimensional word vectors. We are going to use Glove in this post.
Basic Preprocessing Techniques for text data: In most of the cases, we observe that text data is not entirely clean. Data coming from different sources have different characteristics and that makes Text Preprocessing as one of the most important steps in the classification pipeline. For example, Text data from Twitter is totally different from text data on Quora, or some news/blogging platform, and thus would need to be treated differently. Helpfully, the techniques I am going to talk about in this post are generic enough for any kind of data you might encounter in the jungles of NLP.
a) Cleaning Special Characters and Removing Punctuations: Our preprocessing pipeline depends a lot on the word2vec embeddings we are going to use for our classification task. In principle our preprocessing should match the preprocessing that was used before training the word embedding. Since most of the embeddings don&amp;rsquo;t provide vector values for punctuations and other special chars, the first thing you want to do is to get rid of is the special characters in your text data. These are some of the special chars that were there in the Quora Question data and we use replace function to get rid of these special chars.
# Some preprocesssing that will be common to all the text classification methods you will see. puncts = [&amp;#39;,&amp;#39;, &amp;#39;.&amp;#39;, &amp;#39;&amp;#34;&amp;#39;, &amp;#39;:&amp;#39;, &amp;#39;)&amp;#39;, &amp;#39;(&amp;#39;, &amp;#39;-&amp;#39;, &amp;#39;!&amp;#39;, &amp;#39;?&amp;#39;, &amp;#39;|&amp;#39;, &amp;#39;;&amp;#39;, &amp;#34;&amp;#39;&amp;#34;, &amp;#39;$&amp;#39;, &amp;#39;&amp;amp;&amp;#39;, &amp;#39;/&amp;#39;, &amp;#39;[&amp;#39;, &amp;#39;]&amp;#39;, &amp;#39;&amp;gt;&amp;#39;, &amp;#39;%&amp;#39;, &amp;#39;=&amp;#39;, &amp;#39;#&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;&#43;&amp;#39;, &amp;#39;\\&amp;#39;, &amp;#39;•&amp;#39;, &amp;#39;~&amp;#39;, &amp;#39;@&amp;#39;, &amp;#39;£&amp;#39;, &amp;#39;·&amp;#39;, &amp;#39;_&amp;#39;, &amp;#39;{&amp;#39;, &amp;#39;}&amp;#39;, &amp;#39;©&amp;#39;, &amp;#39;^&amp;#39;, &amp;#39;®&amp;#39;, &amp;#39;`&amp;#39;, &amp;#39;&amp;lt;&amp;#39;, &amp;#39;→&amp;#39;, &amp;#39;°&amp;#39;, &amp;#39;€&amp;#39;, &amp;#39;™&amp;#39;, &amp;#39;›&amp;#39;, &amp;#39;♥&amp;#39;, &amp;#39;←&amp;#39;, &amp;#39;×&amp;#39;, &amp;#39;§&amp;#39;, &amp;#39;″&amp;#39;, &amp;#39;′&amp;#39;, &amp;#39;Â&amp;#39;, &amp;#39;█&amp;#39;, &amp;#39;½&amp;#39;, &amp;#39;à&amp;#39;, &amp;#39;…&amp;#39;, &amp;#39;“&amp;#39;, &amp;#39;★&amp;#39;, &amp;#39;”&amp;#39;, &amp;#39;–&amp;#39;, &amp;#39;●&amp;#39;, &amp;#39;â&amp;#39;, &amp;#39;►&amp;#39;, &amp;#39;−&amp;#39;, &amp;#39;¢&amp;#39;, &amp;#39;²&amp;#39;, &amp;#39;¬&amp;#39;, &amp;#39;░&amp;#39;, &amp;#39;¶&amp;#39;, &amp;#39;↑&amp;#39;, &amp;#39;±&amp;#39;, &amp;#39;¿&amp;#39;, &amp;#39;▾&amp;#39;, &amp;#39;═&amp;#39;, &amp;#39;¦&amp;#39;, &amp;#39;║&amp;#39;, &amp;#39;―&amp;#39;, &amp;#39;¥&amp;#39;, &amp;#39;▓&amp;#39;, &amp;#39;—&amp;#39;, &amp;#39;‹&amp;#39;, &amp;#39;─&amp;#39;, &amp;#39;▒&amp;#39;, &amp;#39;：&amp;#39;, &amp;#39;¼&amp;#39;, &amp;#39;⊕&amp;#39;, &amp;#39;▼&amp;#39;, &amp;#39;▪&amp;#39;, &amp;#39;†&amp;#39;, &amp;#39;■&amp;#39;, &amp;#39;’&amp;#39;, &amp;#39;▀&amp;#39;, &amp;#39;¨&amp;#39;, &amp;#39;▄&amp;#39;, &amp;#39;♫&amp;#39;, &amp;#39;☆&amp;#39;, &amp;#39;é&amp;#39;, &amp;#39;¯&amp;#39;, &amp;#39;♦&amp;#39;, &amp;#39;¤&amp;#39;, &amp;#39;▲&amp;#39;, &amp;#39;è&amp;#39;, &amp;#39;¸&amp;#39;, &amp;#39;¾&amp;#39;, &amp;#39;Ã&amp;#39;, &amp;#39;⋅&amp;#39;, &amp;#39;‘&amp;#39;, &amp;#39;∞&amp;#39;, &amp;#39;∙&amp;#39;, &amp;#39;）&amp;#39;, &amp;#39;↓&amp;#39;, &amp;#39;、&amp;#39;, &amp;#39;│&amp;#39;, &amp;#39;（&amp;#39;, &amp;#39;»&amp;#39;, &amp;#39;，&amp;#39;, &amp;#39;♪&amp;#39;, &amp;#39;╩&amp;#39;, &amp;#39;╚&amp;#39;, &amp;#39;³&amp;#39;, &amp;#39;・&amp;#39;, &amp;#39;╦&amp;#39;, &amp;#39;╣&amp;#39;, &amp;#39;╔&amp;#39;, &amp;#39;╗&amp;#39;, &amp;#39;▬&amp;#39;, &amp;#39;❤&amp;#39;, &amp;#39;ï&amp;#39;, &amp;#39;Ø&amp;#39;, &amp;#39;¹&amp;#39;, &amp;#39;≤&amp;#39;, &amp;#39;‡&amp;#39;, &amp;#39;√&amp;#39;, ] def clean_text(x): x = str(x) for punct in puncts: if punct in x: x = x.replace(punct, f&amp;#39; {punct} &amp;#39;) return x This could also have been done with the help of a simple regex. But I normally like the above way of doing things as it helps to understand the sort of characters we are removing from our data.
def clean_text(x): pattern = r&amp;#39;[^a-zA-z0-9\s]&amp;#39; text = re.sub(pattern, &amp;#39;&amp;#39;, x) return x b) Cleaning Numbers: Why do we want to replace numbers with #s? Because most embeddings have preprocessed their text like this.
Small Python Trick: We use an if statement in the code below to check beforehand if a number exists in a text. It is as an if is always fast than a re.sub command and most of our text doesn&amp;rsquo;t contain numbers.
def clean_numbers(x): if bool(re.search(r&amp;#39;\d&amp;#39;, x)): x = re.sub(&amp;#39;[0-9]{5,}&amp;#39;, &amp;#39;#####&amp;#39;, x) x = re.sub(&amp;#39;[0-9]{4}&amp;#39;, &amp;#39;####&amp;#39;, x) x = re.sub(&amp;#39;[0-9]{3}&amp;#39;, &amp;#39;###&amp;#39;, x) x = re.sub(&amp;#39;[0-9]{2}&amp;#39;, &amp;#39;##&amp;#39;, x) return x c) Removing Misspells: It always helps to find out misspells in the data. As those word embeddings are not present in the word2vec, we should replace words with their correct spellings to get better embedding coverage. The following code artifact is an adaptation of Peter Norvig&amp;rsquo;s spell checker. It uses word2vec ordering of words to approximate word probabilities. As Google word2vec apparently orders words in decreasing order of frequency in the training corpus. You can use this to find out some misspelled words in the data you have.
# This comes from CPMP script in the Quora questions similarity challenge. import re from collections import Counter import gensim import heapq from operator import itemgetter from multiprocessing import Pool model = gensim.models.KeyedVectors.load_word2vec_format(&amp;#39;../input/embeddings/GoogleNews-vectors-negative300/GoogleNews-vectors-negative300.bin&amp;#39;, binary=True) words = model.index2word w_rank = {} for i,word in enumerate(words): w_rank[word] = i WORDS = w_rank def words(text): return re.findall(r&amp;#39;\w&#43;&amp;#39;, text.lower()) def P(word): &amp;#34;Probability of `word`.&amp;#34; # use inverse of rank as proxy # returns 0 if the word isn&amp;#39;t in the dictionary return - WORDS.get(word, 0) def correction(word): &amp;#34;Most probable spelling correction for word.&amp;#34; return max(candidates(word), key=P) def candidates(word): &amp;#34;Generate possible spelling corrections for word.&amp;#34; return (known([word]) or known(edits1(word)) or known(edits2(word)) or [word]) def known(words): &amp;#34;The subset of `words` that appear in the dictionary of WORDS.&amp;#34; return set(w for w in words if w in WORDS) def edits1(word): &amp;#34;All edits that are one edit away from `word`.&amp;#34; letters = &amp;#39;abcdefghijklmnopqrstuvwxyz&amp;#39; splits = [(word[:i], word[i:]) for i in range(len(word) &#43; 1)] deletes = [L &#43; R[1:] for L, R in splits if R] transposes = [L &#43; R[1] &#43; R[0] &#43; R[2:] for L, R in splits if len(R)&amp;gt;1] replaces = [L &#43; c &#43; R[1:] for L, R in splits if R for c in letters] inserts = [L &#43; c &#43; R for L, R in splits for c in letters] return set(deletes &#43; transposes &#43; replaces &#43; inserts) def edits2(word): &amp;#34;All edits that are two edits away from `word`.&amp;#34; return (e2 for e1 in edits1(word) for e2 in edits1(e1)) def build_vocab(texts): sentences = texts.apply(lambda x: x.split()).values vocab = {} for sentence in sentences: for word in sentence: try: vocab[word] &#43;= 1 except KeyError: vocab[word] = 1 return vocab vocab = build_vocab(train.question_text) top_90k_words = dict(heapq.nlargest(90000, vocab.items(), key=itemgetter(1))) pool = Pool(4) corrected_words = pool.map(correction,list(top_90k_words.keys())) for word,corrected_word in zip(top_90k_words,corrected_words): if word!=corrected_word: print(word,&amp;#34;:&amp;#34;,corrected_word) Once we are through with finding misspelled data, the next thing remains to replace them using a misspell mapping and regex functions.
mispell_dict = {&amp;#39;colour&amp;#39;: &amp;#39;color&amp;#39;, &amp;#39;centre&amp;#39;: &amp;#39;center&amp;#39;, &amp;#39;favourite&amp;#39;: &amp;#39;favorite&amp;#39;, &amp;#39;travelling&amp;#39;: &amp;#39;traveling&amp;#39;, &amp;#39;counselling&amp;#39;: &amp;#39;counseling&amp;#39;, &amp;#39;theatre&amp;#39;: &amp;#39;theater&amp;#39;, &amp;#39;cancelled&amp;#39;: &amp;#39;canceled&amp;#39;, &amp;#39;labour&amp;#39;: &amp;#39;labor&amp;#39;, &amp;#39;organisation&amp;#39;: &amp;#39;organization&amp;#39;, &amp;#39;wwii&amp;#39;: &amp;#39;world war 2&amp;#39;, &amp;#39;citicise&amp;#39;: &amp;#39;criticize&amp;#39;, &amp;#39;youtu &amp;#39;: &amp;#39;youtube &amp;#39;, &amp;#39;Qoura&amp;#39;: &amp;#39;Quora&amp;#39;, &amp;#39;sallary&amp;#39;: &amp;#39;salary&amp;#39;, &amp;#39;Whta&amp;#39;: &amp;#39;What&amp;#39;, &amp;#39;narcisist&amp;#39;: &amp;#39;narcissist&amp;#39;, &amp;#39;howdo&amp;#39;: &amp;#39;how do&amp;#39;, &amp;#39;whatare&amp;#39;: &amp;#39;what are&amp;#39;, &amp;#39;howcan&amp;#39;: &amp;#39;how can&amp;#39;, &amp;#39;howmuch&amp;#39;: &amp;#39;how much&amp;#39;, &amp;#39;howmany&amp;#39;: &amp;#39;how many&amp;#39;, &amp;#39;whydo&amp;#39;: &amp;#39;why do&amp;#39;, &amp;#39;doI&amp;#39;: &amp;#39;do I&amp;#39;, &amp;#39;theBest&amp;#39;: &amp;#39;the best&amp;#39;, &amp;#39;howdoes&amp;#39;: &amp;#39;how does&amp;#39;, &amp;#39;mastrubation&amp;#39;: &amp;#39;masturbation&amp;#39;, &amp;#39;mastrubate&amp;#39;: &amp;#39;masturbate&amp;#39;, &amp;#34;mastrubating&amp;#34;: &amp;#39;masturbating&amp;#39;, &amp;#39;pennis&amp;#39;: &amp;#39;penis&amp;#39;, &amp;#39;Etherium&amp;#39;: &amp;#39;Ethereum&amp;#39;, &amp;#39;narcissit&amp;#39;: &amp;#39;narcissist&amp;#39;, &amp;#39;bigdata&amp;#39;: &amp;#39;big data&amp;#39;, &amp;#39;2k17&amp;#39;: &amp;#39;2017&amp;#39;, &amp;#39;2k18&amp;#39;: &amp;#39;2018&amp;#39;, &amp;#39;qouta&amp;#39;: &amp;#39;quota&amp;#39;, &amp;#39;exboyfriend&amp;#39;: &amp;#39;ex boyfriend&amp;#39;, &amp;#39;airhostess&amp;#39;: &amp;#39;air hostess&amp;#39;, &amp;#34;whst&amp;#34;: &amp;#39;what&amp;#39;, &amp;#39;watsapp&amp;#39;: &amp;#39;whatsapp&amp;#39;, &amp;#39;demonitisation&amp;#39;: &amp;#39;demonetization&amp;#39;, &amp;#39;demonitization&amp;#39;: &amp;#39;demonetization&amp;#39;, &amp;#39;demonetisation&amp;#39;: &amp;#39;demonetization&amp;#39;} def _get_mispell(mispell_dict): mispell_re = re.compile(&amp;#39;(%s)&amp;#39; % &amp;#39;|&amp;#39;.join(mispell_dict.keys())) return mispell_dict, mispell_re mispellings, mispellings_re = _get_mispell(mispell_dict) def replace_typical_misspell(text): def replace(match): return mispellings[match.group(0)] return mispellings_re.sub(replace, text) # Usage replace_typical_misspell(&amp;#34;Whta is demonitisation&amp;#34;) d) Removing Contractions: Contractions are words that we write with an apostrophe. Examples of contractions are words like &amp;ldquo;ain&amp;rsquo;t&amp;rdquo; or &amp;ldquo;aren&amp;rsquo;t&amp;rdquo;. Since we want to standardize our text, it makes sense to expand these contractions. Below we have done this using a contraction mapping and regex functions.
contraction_dict = {&amp;#34;ain&amp;#39;t&amp;#34;: &amp;#34;is not&amp;#34;, &amp;#34;aren&amp;#39;t&amp;#34;: &amp;#34;are not&amp;#34;,&amp;#34;can&amp;#39;t&amp;#34;: &amp;#34;cannot&amp;#34;, &amp;#34;&amp;#39;cause&amp;#34;: &amp;#34;because&amp;#34;, &amp;#34;could&amp;#39;ve&amp;#34;: &amp;#34;could have&amp;#34;, &amp;#34;couldn&amp;#39;t&amp;#34;: &amp;#34;could not&amp;#34;, &amp;#34;didn&amp;#39;t&amp;#34;: &amp;#34;did not&amp;#34;, &amp;#34;doesn&amp;#39;t&amp;#34;: &amp;#34;does not&amp;#34;, &amp;#34;don&amp;#39;t&amp;#34;: &amp;#34;do not&amp;#34;, &amp;#34;hadn&amp;#39;t&amp;#34;: &amp;#34;had not&amp;#34;, &amp;#34;hasn&amp;#39;t&amp;#34;: &amp;#34;has not&amp;#34;, &amp;#34;haven&amp;#39;t&amp;#34;: &amp;#34;have not&amp;#34;, &amp;#34;he&amp;#39;d&amp;#34;: &amp;#34;he would&amp;#34;,&amp;#34;he&amp;#39;ll&amp;#34;: &amp;#34;he will&amp;#34;, &amp;#34;he&amp;#39;s&amp;#34;: &amp;#34;he is&amp;#34;, &amp;#34;how&amp;#39;d&amp;#34;: &amp;#34;how did&amp;#34;, &amp;#34;how&amp;#39;d&amp;#39;y&amp;#34;: &amp;#34;how do you&amp;#34;, &amp;#34;how&amp;#39;ll&amp;#34;: &amp;#34;how will&amp;#34;, &amp;#34;how&amp;#39;s&amp;#34;: &amp;#34;how is&amp;#34;, &amp;#34;I&amp;#39;d&amp;#34;: &amp;#34;I would&amp;#34;, &amp;#34;I&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;I would have&amp;#34;, &amp;#34;I&amp;#39;ll&amp;#34;: &amp;#34;I will&amp;#34;, &amp;#34;I&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;I will have&amp;#34;,&amp;#34;I&amp;#39;m&amp;#34;: &amp;#34;I am&amp;#34;, &amp;#34;I&amp;#39;ve&amp;#34;: &amp;#34;I have&amp;#34;, &amp;#34;i&amp;#39;d&amp;#34;: &amp;#34;i would&amp;#34;, &amp;#34;i&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;i would have&amp;#34;, &amp;#34;i&amp;#39;ll&amp;#34;: &amp;#34;i will&amp;#34;, &amp;#34;i&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;i will have&amp;#34;,&amp;#34;i&amp;#39;m&amp;#34;: &amp;#34;i am&amp;#34;, &amp;#34;i&amp;#39;ve&amp;#34;: &amp;#34;i have&amp;#34;, &amp;#34;isn&amp;#39;t&amp;#34;: &amp;#34;is not&amp;#34;, &amp;#34;it&amp;#39;d&amp;#34;: &amp;#34;it would&amp;#34;, &amp;#34;it&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;it would have&amp;#34;, &amp;#34;it&amp;#39;ll&amp;#34;: &amp;#34;it will&amp;#34;, &amp;#34;it&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;it will have&amp;#34;,&amp;#34;it&amp;#39;s&amp;#34;: &amp;#34;it is&amp;#34;, &amp;#34;let&amp;#39;s&amp;#34;: &amp;#34;let us&amp;#34;, &amp;#34;ma&amp;#39;am&amp;#34;: &amp;#34;madam&amp;#34;, &amp;#34;mayn&amp;#39;t&amp;#34;: &amp;#34;may not&amp;#34;, &amp;#34;might&amp;#39;ve&amp;#34;: &amp;#34;might have&amp;#34;,&amp;#34;mightn&amp;#39;t&amp;#34;: &amp;#34;might not&amp;#34;,&amp;#34;mightn&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;might not have&amp;#34;, &amp;#34;must&amp;#39;ve&amp;#34;: &amp;#34;must have&amp;#34;, &amp;#34;mustn&amp;#39;t&amp;#34;: &amp;#34;must not&amp;#34;, &amp;#34;mustn&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;must not have&amp;#34;, &amp;#34;needn&amp;#39;t&amp;#34;: &amp;#34;need not&amp;#34;, &amp;#34;needn&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;need not have&amp;#34;,&amp;#34;o&amp;#39;clock&amp;#34;: &amp;#34;of the clock&amp;#34;, &amp;#34;oughtn&amp;#39;t&amp;#34;: &amp;#34;ought not&amp;#34;, &amp;#34;oughtn&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;ought not have&amp;#34;, &amp;#34;shan&amp;#39;t&amp;#34;: &amp;#34;shall not&amp;#34;, &amp;#34;sha&amp;#39;n&amp;#39;t&amp;#34;: &amp;#34;shall not&amp;#34;, &amp;#34;shan&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;shall not have&amp;#34;, &amp;#34;she&amp;#39;d&amp;#34;: &amp;#34;she would&amp;#34;, &amp;#34;she&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;she would have&amp;#34;, &amp;#34;she&amp;#39;ll&amp;#34;: &amp;#34;she will&amp;#34;, &amp;#34;she&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;she will have&amp;#34;, &amp;#34;she&amp;#39;s&amp;#34;: &amp;#34;she is&amp;#34;, &amp;#34;should&amp;#39;ve&amp;#34;: &amp;#34;should have&amp;#34;, &amp;#34;shouldn&amp;#39;t&amp;#34;: &amp;#34;should not&amp;#34;, &amp;#34;shouldn&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;should not have&amp;#34;, &amp;#34;so&amp;#39;ve&amp;#34;: &amp;#34;so have&amp;#34;,&amp;#34;so&amp;#39;s&amp;#34;: &amp;#34;so as&amp;#34;, &amp;#34;this&amp;#39;s&amp;#34;: &amp;#34;this is&amp;#34;,&amp;#34;that&amp;#39;d&amp;#34;: &amp;#34;that would&amp;#34;, &amp;#34;that&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;that would have&amp;#34;, &amp;#34;that&amp;#39;s&amp;#34;: &amp;#34;that is&amp;#34;, &amp;#34;there&amp;#39;d&amp;#34;: &amp;#34;there would&amp;#34;, &amp;#34;there&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;there would have&amp;#34;, &amp;#34;there&amp;#39;s&amp;#34;: &amp;#34;there is&amp;#34;, &amp;#34;here&amp;#39;s&amp;#34;: &amp;#34;here is&amp;#34;,&amp;#34;they&amp;#39;d&amp;#34;: &amp;#34;they would&amp;#34;, &amp;#34;they&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;they would have&amp;#34;, &amp;#34;they&amp;#39;ll&amp;#34;: &amp;#34;they will&amp;#34;, &amp;#34;they&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;they will have&amp;#34;, &amp;#34;they&amp;#39;re&amp;#34;: &amp;#34;they are&amp;#34;, &amp;#34;they&amp;#39;ve&amp;#34;: &amp;#34;they have&amp;#34;, &amp;#34;to&amp;#39;ve&amp;#34;: &amp;#34;to have&amp;#34;, &amp;#34;wasn&amp;#39;t&amp;#34;: &amp;#34;was not&amp;#34;, &amp;#34;we&amp;#39;d&amp;#34;: &amp;#34;we would&amp;#34;, &amp;#34;we&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;we would have&amp;#34;, &amp;#34;we&amp;#39;ll&amp;#34;: &amp;#34;we will&amp;#34;, &amp;#34;we&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;we will have&amp;#34;, &amp;#34;we&amp;#39;re&amp;#34;: &amp;#34;we are&amp;#34;, &amp;#34;we&amp;#39;ve&amp;#34;: &amp;#34;we have&amp;#34;, &amp;#34;weren&amp;#39;t&amp;#34;: &amp;#34;were not&amp;#34;, &amp;#34;what&amp;#39;ll&amp;#34;: &amp;#34;what will&amp;#34;, &amp;#34;what&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;what will have&amp;#34;, &amp;#34;what&amp;#39;re&amp;#34;: &amp;#34;what are&amp;#34;, &amp;#34;what&amp;#39;s&amp;#34;: &amp;#34;what is&amp;#34;, &amp;#34;what&amp;#39;ve&amp;#34;: &amp;#34;what have&amp;#34;, &amp;#34;when&amp;#39;s&amp;#34;: &amp;#34;when is&amp;#34;, &amp;#34;when&amp;#39;ve&amp;#34;: &amp;#34;when have&amp;#34;, &amp;#34;where&amp;#39;d&amp;#34;: &amp;#34;where did&amp;#34;, &amp;#34;where&amp;#39;s&amp;#34;: &amp;#34;where is&amp;#34;, &amp;#34;where&amp;#39;ve&amp;#34;: &amp;#34;where have&amp;#34;, &amp;#34;who&amp;#39;ll&amp;#34;: &amp;#34;who will&amp;#34;, &amp;#34;who&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;who will have&amp;#34;, &amp;#34;who&amp;#39;s&amp;#34;: &amp;#34;who is&amp;#34;, &amp;#34;who&amp;#39;ve&amp;#34;: &amp;#34;who have&amp;#34;, &amp;#34;why&amp;#39;s&amp;#34;: &amp;#34;why is&amp;#34;, &amp;#34;why&amp;#39;ve&amp;#34;: &amp;#34;why have&amp;#34;, &amp;#34;will&amp;#39;ve&amp;#34;: &amp;#34;will have&amp;#34;, &amp;#34;won&amp;#39;t&amp;#34;: &amp;#34;will not&amp;#34;, &amp;#34;won&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;will not have&amp;#34;, &amp;#34;would&amp;#39;ve&amp;#34;: &amp;#34;would have&amp;#34;, &amp;#34;wouldn&amp;#39;t&amp;#34;: &amp;#34;would not&amp;#34;, &amp;#34;wouldn&amp;#39;t&amp;#39;ve&amp;#34;: &amp;#34;would not have&amp;#34;, &amp;#34;y&amp;#39;all&amp;#34;: &amp;#34;you all&amp;#34;, &amp;#34;y&amp;#39;all&amp;#39;d&amp;#34;: &amp;#34;you all would&amp;#34;,&amp;#34;y&amp;#39;all&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;you all would have&amp;#34;,&amp;#34;y&amp;#39;all&amp;#39;re&amp;#34;: &amp;#34;you all are&amp;#34;,&amp;#34;y&amp;#39;all&amp;#39;ve&amp;#34;: &amp;#34;you all have&amp;#34;,&amp;#34;you&amp;#39;d&amp;#34;: &amp;#34;you would&amp;#34;, &amp;#34;you&amp;#39;d&amp;#39;ve&amp;#34;: &amp;#34;you would have&amp;#34;, &amp;#34;you&amp;#39;ll&amp;#34;: &amp;#34;you will&amp;#34;, &amp;#34;you&amp;#39;ll&amp;#39;ve&amp;#34;: &amp;#34;you will have&amp;#34;, &amp;#34;you&amp;#39;re&amp;#34;: &amp;#34;you are&amp;#34;, &amp;#34;you&amp;#39;ve&amp;#34;: &amp;#34;you have&amp;#34;} def _get_contractions(contraction_dict): contraction_re = re.compile(&amp;#39;(%s)&amp;#39; % &amp;#39;|&amp;#39;.join(contraction_dict.keys())) return contraction_dict, contraction_re contractions, contractions_re = _get_contractions(contraction_dict) def replace_contractions(text): def replace(match): return contractions[match.group(0)] return contractions_re.sub(replace, text) # Usage replace_contractions(&amp;#34;this&amp;#39;s a text with contraction&amp;#34;) Apart from the above techniques, there are other preprocessing techniques of text like Stemming, Lemmatization and Stopword Removal. Since these techniques are not used along with Deep Learning NLP models, we won&amp;rsquo;t talk about them.
Representation: Sequence Creation One of the things that have made Deep Learning the goto choice for NLP is the fact that we don&amp;rsquo;t really have to hand-engineer features from the text data. The deep learning algorithms take as input a sequence of text to learn the structure of text just like a human does. Since Machine cannot understand words they expect their data in numerical form. So we would like to represent out text data as a series of numbers. To understand how this is done we need to understand a little about the Keras Tokenizer function. One can use any other tokenizer also but keras tokenizer seems like a good choice for me.
a) Tokenizer: In simple words, a tokenizer is a utility function to split a sentence into words. keras.preprocessing.text.Tokenizer tokenizes(splits) the texts into tokens(words) while keeping only the most occurring words in the text corpus.
#Signature: Tokenizer(num_words=None, filters=&amp;#39;!&amp;#34;#$%&amp;amp;()*&#43;,-./:;&amp;lt;=&amp;gt;?@[\\]^_`{|}~\t\n&amp;#39;, lower=True, split=&amp;#39; &amp;#39;, char_level=False, oov_token=None, document_count=0, **kwargs) The num_words parameter keeps a prespecified number of words in the text only. This is helpful as we don&amp;rsquo;t want our models to get a lot of noise by considering words that occur very infrequently. In real-world data, most of the words we leave using num_words param are normally misspells. The tokenizer also filters some non-wanted tokens by default and converts the text into lowercase.
The tokenizer once fitted to the data also keeps an index of words(dictionary of words which we can use to assign a unique number to a word) which can be accessed by tokenizer.word_index. The words in the indexed dictionary are ranked in order of frequencies.
  So the whole code to use tokenizer is as follows:
from keras.preprocessing.text import Tokenizer ## Tokenize the sentences tokenizer = Tokenizer(num_words=max_features) tokenizer.fit_on_texts(list(train_X)&#43;list(test_X)) train_X = tokenizer.texts_to_sequences(train_X) test_X = tokenizer.texts_to_sequences(test_X) where train_X and test_X are lists of documents in the corpus.
b) Pad Sequence: Normally our model expects that each sequence(each training example) will be of the same length(same number of words/tokens). We can control this using the maxlen parameter.
For example:  
train_X = pad_sequences(train_X, maxlen=maxlen) test_X = pad_sequences(test_X, maxlen=maxlen) Now our train data contains a list of list of numbers. Each list has the same length. And we also have the word_index which is a dictionary of most occuring words in the text corpus.
Embedding Enrichment: As I said I will be using GLoVE Word2Vec embeddings to explain the enrichment. GLoVE pretrained vectors are trained on the Wikipedia corpus. (You can download them here). That means some of the words that might be present in your data might not be present in the embeddings. How could we deal with that? Let&amp;rsquo;s first load the Glove Embeddings first.
def load_glove_index(): EMBEDDING_FILE = &amp;#39;../input/embeddings/glove.840B.300d/glove.840B.300d.txt&amp;#39; def get_coefs(word,*arr): return word, np.asarray(arr, dtype=&amp;#39;float32&amp;#39;)[:300] embeddings_index = dict(get_coefs(*o.split(&amp;#34; &amp;#34;)) for o in open(EMBEDDING_FILE)) return embeddings_index glove_embedding_index = load_glove_index() Be sure to put the path of the folder where you download these GLoVE vectors. What does this glove_embedding_index contain? It is just a dictionary in which the key is the word and the value is the word vector, a np.array of length 300. The length of this dictionary is somewhere around a billion. Since we only want the embeddings of words that are in our word_index, we will create a matrix which just contains required embeddings.
  def create_glove(word_index,embeddings_index): emb_mean,emb_std = -0.005838499,0.48782197 all_embs = np.stack(embeddings_index.values()) embed_size = all_embs.shape[1] nb_words = min(max_features, len(word_index)) embedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size)) count_found = nb_words for word, i in tqdm(word_index.items()): if i &amp;gt;= max_features: continue embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[i] = embedding_vector else: count_found-=1 print(&amp;#34;Got embedding for &amp;#34;,count_found,&amp;#34; words.&amp;#34;) return embedding_matrix The above code works fine but is there a way that we can use the preprocessing in GLoVE to our advantage? Yes. When preprocessing was done for glove, the creators didn&amp;rsquo;t convert the words to lowercase. That means that it contains multiple variations of a word like &amp;lsquo;USA&amp;rsquo;, &amp;lsquo;usa&amp;rsquo; and &amp;lsquo;Usa&amp;rsquo;. That also means that in some cases while a word like &amp;lsquo;Word&amp;rsquo; is present, its analog in lowercase i.e. &amp;lsquo;word&amp;rsquo; is not present. We can get through this situation by using the below code.
def create_glove(word_index,embeddings_index): emb_mean,emb_std = -0.005838499,0.48782197 all_embs = np.stack(embeddings_index.values()) embed_size = all_embs.shape[1] nb_words = min(max_features, len(word_index)) embedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size)) count_found = nb_words for word, i in tqdm(word_index.items()): if i &amp;gt;= max_features: continue embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[i] = embedding_vector else: if word.islower(): # try to get the embedding of word in titlecase if lowercase is not present embedding_vector = embeddings_index.get(word.capitalize()) if embedding_vector is not None: embedding_matrix[i] = embedding_vector else: count_found-=1 else: count_found-=1 print(&amp;#34;Got embedding for &amp;#34;,count_found,&amp;#34; words.&amp;#34;) return embedding_matrix The above was just an example of how we can use our knowledge of an embedding to get better coverage. Sometimes depending on the problem, one might also derive value by adding extra information to the embeddings using some domain knowledge and NLP skills. For example, we can add external knowledge to the embeddings themselves by adding polarity and subjectivity of a word from the TextBlob package in Python.
from textblob import TextBlob word_sent = TextBlob(&amp;#34;good&amp;#34;).sentiment print(word_sent.polarity,word_sent.subjectivity) # 0.7 0.6 We can get the polarity and subjectivity of any word using TextBlob. Pretty neat. So let us try to add this extra information to our embeddings.
def create_glove(word_index,embeddings_index): emb_mean,emb_std = -0.005838499,0.48782197 all_embs = np.stack(embeddings_index.values()) embed_size = all_embs.shape[1] nb_words = min(max_features, len(word_index)) embedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size&#43;4)) count_found = nb_words for word, i in tqdm(word_index.items()): if i &amp;gt;= max_features: continue embedding_vector = embeddings_index.get(word) word_sent = TextBlob(word).sentiment # Extra information we are passing to our embeddings extra_embed = [word_sent.polarity,word_sent.subjectivity] if embedding_vector is not None: embedding_matrix[i] = np.append(embedding_vector,extra_embed) else: if word.islower(): embedding_vector = embeddings_index.get(word.capitalize()) if embedding_vector is not None: embedding_matrix[i] = np.append(embedding_vector,extra_embed) else: embedding_matrix[i,300:] = extra_embed count_found-=1 else: embedding_matrix[i,300:] = extra_embed count_found-=1 print(&amp;#34;Got embedding for &amp;#34;,count_found,&amp;#34; words.&amp;#34;) return embedding_matrix Engineering embeddings is an essential part of getting better performance from the Deep learning models at a later stage. Generally, I revisit this part of code multiple times during the stage of a project while trying to improve my models even further. You can show up a lot of creativity here to improve coverage over your word_index and to include extra features in your embedding.
More Engineered Features   One can always add sentence specific features like sentence length, number of unique words etc. as another input layer to give extra information to the Deep Neural Network. For example: I created these extra features as part of a feature engineering pipeline for Quora Insincerity Classification Challenge.
def add_features(df): df[&amp;#39;question_text&amp;#39;] = df[&amp;#39;question_text&amp;#39;].progress_apply(lambda x:str(x)) df[&amp;#34;lower_question_text&amp;#34;] = df[&amp;#34;question_text&amp;#34;].apply(lambda x: x.lower()) df[&amp;#39;total_length&amp;#39;] = df[&amp;#39;question_text&amp;#39;].progress_apply(len) df[&amp;#39;capitals&amp;#39;] = df[&amp;#39;question_text&amp;#39;].progress_apply(lambda comment: sum(1 for c in comment if c.isupper())) df[&amp;#39;caps_vs_length&amp;#39;] = df.progress_apply(lambda row: float(row[&amp;#39;capitals&amp;#39;])/float(row[&amp;#39;total_length&amp;#39;]), axis=1) df[&amp;#39;num_words&amp;#39;] = df.question_text.str.count(&amp;#39;\S&#43;&amp;#39;) df[&amp;#39;num_unique_words&amp;#39;] = df[&amp;#39;question_text&amp;#39;].progress_apply(lambda comment: len(set(w for w in comment.split()))) df[&amp;#39;words_vs_unique&amp;#39;] = df[&amp;#39;num_unique_words&amp;#39;] / df[&amp;#39;num_words&amp;#39;] return df Conclusion: NLP is still a very interesting problem in Deep Learning space and thus I would encourage you to do a lot of experimentation to see what works and what doesn&amp;rsquo;t. I have tried to provide a wholesome perspective of the preprocessing steps for a Deep Learning Neural network for any NLP problem. But that doesn&amp;rsquo;t mean it is definitive. If you want to learn more about NLP here is an awesome course. You can start for free with the 7-day Free Trial. If you think we can add something to the flow, do mention it in the comments.
Endnotes and References This post is a result of an effort of a lot of excellent Kagglers and I will try to reference them in this section. If I leave out someone, do understand that it was not my intention to do so.
 How to: Preprocessing when using embeddings Improve your Score with some Text Preprocessing Pytorch baseline Pytorch starter  ]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>A Layman guide to moving from Keras to Pytorch</title>
      <link>https://mlwhiz.com/blog/2019/01/06/pytorch_keras_conversion/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/01/06/pytorch_keras_conversion/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.comimages/artificial-neural-network.png"></media:content>
      

      
      <description>Recently I started up with a competition on kaggle on text classification, and as a part of the competition, I had to somehow move to Pytorch to get deterministic results. Now I have always worked with Keras in the past and it has given me pretty good results, but somehow I got to know that the CuDNNGRU/CuDNNLSTM layers in keras are not deterministic, even after setting the seeds.</description>

      <content:encoded>  
        
        <![CDATA[    Recently I started up with a competition on kaggle on text classification, and as a part of the competition, I had to somehow move to Pytorch to get deterministic results. Now I have always worked with Keras in the past and it has given me pretty good results, but somehow I got to know that the CuDNNGRU/CuDNNLSTM layers in keras are not deterministic, even after setting the seeds. So Pytorch did come to rescue. And am I glad that I moved.
As a side note: if you want to know more about NLP, I would like to recommend this awesome course on Natural Language Processing in the Advanced machine learning specialization. You can start for free with the 7-day Free Trial. This course covers a wide range of tasks in Natural Language Processing from basic to advanced: Sentiment Analysis, summarization, dialogue state tracking, to name a few.
Also take a look at my other post: Text Preprocessing Methods for Deep Learning, which talks about different preprocessing techniques you can use for your NLP task and What Kagglers are using for Text Classification, which talks about various deep learning models in use in NLP.
Ok back to the task at hand. While Keras is great to start with deep learning, with time you are going to resent some of its limitations. I sort of thought about moving to Tensorflow. It seemed like a good transition as TF is the backend of Keras. But was it hard? With the whole session.run commands and tensorflow sessions, I was sort of confused. It was not Pythonic at all.
Pytorch helps in that since it seems like the python way to do things. You have things under your control and you are not losing anything on the performance front. In the words of Andrej Karpathy:
I&amp;#39;ve been using PyTorch a few months now and I&amp;#39;ve never felt better. I have more energy. My skin is clearer. My eye sight has improved.
&amp;mdash; Andrej Karpathy (@karpathy) May 26, 2017 
So without further ado let me translate Keras to Pytorch for you.
The Classy way to write your network?   Ok, let us create an example network in keras first which we will try to port into Pytorch. Here I would like to give a piece of advice too. When you try to move from Keras to Pytorch take any network you have and try porting it to Pytorch. It will make you understand Pytorch in a much better way. Here I am trying to write one of the networks that gave pretty good results in the Quora Insincere questions classification challenge for me. This model has all the bells and whistles which at least any Text Classification deep learning network could contain with its GRU, LSTM and embedding layers and also a meta input layer. And thus would serve as a good example. Also if you want to read up more on how the BiLSTM/GRU and Attention model work do visit my post here.
def get_model(features,clipvalue=1.,num_filters=40,dropout=0.1,embed_size=501): features_input = Input(shape=(features.shape[1],)) inp = Input(shape=(maxlen, )) # Layer 1: Word2Vec Embeddings. x = Embedding(max_features, embed_size, weights=[embedding_matrix], trainable=False)(inp) # Layer 2: SpatialDropout1D(0.1) x = SpatialDropout1D(dropout)(x) # Layer 3: Bidirectional CuDNNLSTM x = Bidirectional(LSTM(num_filters, return_sequences=True))(x) # Layer 4: Bidirectional CuDNNGRU x, x_h, x_c = Bidirectional(GRU(num_filters, return_sequences=True, return_state = True))(x) # Layer 5: some pooling operations avg_pool = GlobalAveragePooling1D()(x) max_pool = GlobalMaxPooling1D()(x) # Layer 6: A concatenation of the last state, maximum pool, average pool and # additional features x = concatenate([avg_pool, x_h, max_pool,features_input]) # Layer 7: A dense layer x = Dense(16, activation=&amp;#34;relu&amp;#34;)(x) # Layer 8: A dropout layer x = Dropout(0.1)(x) # Layer 9: Output dense layer with one output for our Binary Classification problem. outp = Dense(1, activation=&amp;#34;sigmoid&amp;#34;)(x) # Some keras model creation and compiling model = Model(inputs=[inp,features_input], outputs=outp) adam = optimizers.adam(clipvalue=clipvalue) model.compile(loss=&amp;#39;binary_crossentropy&amp;#39;, optimizer=adam, metrics=[&amp;#39;accuracy&amp;#39;]) return model So a model in pytorch is defined as a class(therefore a little more classy) which inherits from nn.module . Every class necessarily contains an __init__ procedure block and a block for the forward pass.
 In the __init__ part the user defines all the layers the network is going to have but doesn&amp;rsquo;t yet define how those layers would be connected to each other
 In the forward pass block, the user defines how data flows from one layer to another inside the network.
  Why is this Classy? Obviously classy because of Classes. Duh! But jokes apart, I found it beneficial due to a couple of reasons:
1) It gives you a lot of control on how your network is built.
2) You understand a lot about the network when you are building it since you have to specify input and output dimensions. So ** fewer chances of error**. (Although this one is really up to the skill level)
3) Easy to debug networks. Any time you find any problem with the network just use something like print(&amp;quot;avg_pool&amp;quot;, avg_pool.size()) in the forward pass to check the sizes of the layer and you will debug the network easily
4) You can return multiple outputs from the forward layer. This is pretty helpful in the Encoder-Decoder architecture where you can return both the encoder and decoder output. Or in the case of autoencoder where you can return the output of the model and the hidden layer embedding for the data.
5) Pytorch tensors work in a very similar manner to numpy arrays. For example, I could have used Pytorch Maxpool function to write the maxpool layer but max_pool, _ = torch.max(h_gru, 1) will also work.
6) You can set up different layers with different initialization schemes. Something you won&amp;rsquo;t be able to do in Keras. For example, in the below network I have changed the initialization scheme of my LSTM layer. The LSTM layer has different initializations for biases, input layer weights, and hidden layer weights.
7) Wait until you see the training loop in Pytorch You will be amazed at the sort of control it provides.
Now the same model in Pytorch will look like something like this. Do go through the code comments to understand more on how to port.
class Alex_NeuralNet_Meta(nn.Module): def __init__(self,hidden_size,lin_size, embedding_matrix=embedding_matrix): super(Alex_NeuralNet_Meta, self).__init__() # Initialize some parameters for your model self.hidden_size = hidden_size drp = 0.1 # Layer 1: Word2Vec Embeddings. self.embedding = nn.Embedding(max_features, embed_size) self.embedding.weight = nn.Parameter(torch.tensor(embedding_matrix, dtype=torch.float32)) self.embedding.weight.requires_grad = False # Layer 2: Dropout1D(0.1) self.embedding_dropout = nn.Dropout2d(0.1) # Layer 3: Bidirectional CuDNNLSTM self.lstm = nn.LSTM(embed_size, hidden_size, bidirectional=True, batch_first=True) for name, param in self.lstm.named_parameters(): if &amp;#39;bias&amp;#39; in name: nn.init.constant_(param, 0.0) elif &amp;#39;weight_ih&amp;#39; in name: nn.init.kaiming_normal_(param) elif &amp;#39;weight_hh&amp;#39; in name: nn.init.orthogonal_(param) # Layer 4: Bidirectional CuDNNGRU self.gru = nn.GRU(hidden_size*2, hidden_size, bidirectional=True, batch_first=True) for name, param in self.gru.named_parameters(): if &amp;#39;bias&amp;#39; in name: nn.init.constant_(param, 0.0) elif &amp;#39;weight_ih&amp;#39; in name: nn.init.kaiming_normal_(param) elif &amp;#39;weight_hh&amp;#39; in name: nn.init.orthogonal_(param) # Layer 7: A dense layer self.linear = nn.Linear(hidden_size*6 &#43; features.shape[1], lin_size) self.relu = nn.ReLU() # Layer 8: A dropout layer self.dropout = nn.Dropout(drp) # Layer 9: Output dense layer with one output for our Binary Classification problem. self.out = nn.Linear(lin_size, 1) def forward(self, x): &amp;#39;&amp;#39;&amp;#39; here x[0] represents the first element of the input that is going to be passed. We are going to pass a tuple where first one contains the sequences(x[0]) and the second one is a additional feature vector(x[1]) &amp;#39;&amp;#39;&amp;#39; h_embedding = self.embedding(x[0]) # Based on comment by Ivank to integrate spatial dropout. embeddings = h_embedding.unsqueeze(2) # (N, T, 1, K) embeddings = embeddings.permute(0, 3, 2, 1) # (N, K, 1, T) embeddings = self.embedding_dropout(embeddings) # (N, K, 1, T), some features are masked embeddings = embeddings.permute(0, 3, 2, 1) # (N, T, 1, K) h_embedding = embeddings.squeeze(2) # (N, T, K) #h_embedding = torch.squeeze(self.embedding_dropout(torch.unsqueeze(h_embedding, 0))) #print(&amp;#34;emb&amp;#34;, h_embedding.size()) h_lstm, _ = self.lstm(h_embedding) #print(&amp;#34;lst&amp;#34;,h_lstm.size()) h_gru, hh_gru = self.gru(h_lstm) hh_gru = hh_gru.view(-1, 2*self.hidden_size ) #print(&amp;#34;gru&amp;#34;, h_gru.size()) #print(&amp;#34;h_gru&amp;#34;, hh_gru.size()) # Layer 5: is defined dynamically as an operation on tensors. avg_pool = torch.mean(h_gru, 1) max_pool, _ = torch.max(h_gru, 1) #print(&amp;#34;avg_pool&amp;#34;, avg_pool.size()) #print(&amp;#34;max_pool&amp;#34;, max_pool.size()) # the extra features you want to give to the model f = torch.tensor(x[1], dtype=torch.float).cuda() #print(&amp;#34;f&amp;#34;, f.size()) # Layer 6: A concatenation of the last state, maximum pool, average pool and # additional features conc = torch.cat(( hh_gru, avg_pool, max_pool,f), 1) #print(&amp;#34;conc&amp;#34;, conc.size()) # passing conc through linear and relu ops conc = self.relu(self.linear(conc)) conc = self.dropout(conc) out = self.out(conc) # return the final output return out Hope you are still there with me. One thing I would like to emphasize here is that you need to code something up in Pytorch to really understand how it works. And know that once you do that you would be glad that you put in the effort. On to the next section.
Tailored or Readymade: The Best Fit with a highly customizable Training Loop   In the above section I wrote that you will be amazed once you saw the training loop. That was an exaggeration. On the first try you will be a little baffled/confused. But as soon as you read through the loop more than once it will make a lot of intuituve sense. Once again read up the comments and the code to gain a better understanding.
This training loop does k-fold cross-validation on your training data and outputs Out-of-fold train_preds and test_preds averaged over the runs on the test data. I apologize if the flow looks something straight out of a kaggle competition, but if you understand this you would be able to create a training loop for your own workflow. And that is the beauty of Pytorch.
So a brief summary of this loop are as follows:
 Create stratified splits using train data Loop through the splits.  Convert your train and CV data to tensor and load your data to the GPU using the X_train_fold = torch.tensor(x_train[train_idx.astype(int)], dtype=torch.long).cuda() command Load the model onto the GPU using the model.cuda() command Define Loss function, Scheduler and Optimizer create train_loader and valid_loader` to iterate through batches. Start running epochs. In each epoch  Set the model mode to train using model.train(). Go through the batches in train_loader and run the forward pass Run a scheduler step to change the learning rate Compute loss Set the existing gradients in the optimizer to zero Backpropagate the losses through the network Clip the gradients Take an optimizer step to change the weights in the whole network Set the model mode to eval using model.eval(). Get predictions for the validation data using valid_loader and store in variable valid_preds_fold Calculate Loss and print  After all epochs are done. Predict the test data and store the predictions. These predictions will be averaged at the end of the split loop to get the final test_preds Get Out-of-fold(OOF) predictions for train set using train_preds[valid_idx] = valid_preds_fold These OOF predictions can then be used to calculate the Local CV score for your model.   def pytorch_model_run_cv(x_train,y_train,features,x_test, model_obj, feats = False,clip = True): seed_everything() avg_losses_f = [] avg_val_losses_f = [] # matrix for the out-of-fold predictions train_preds = np.zeros((len(x_train))) # matrix for the predictions on the test set test_preds = np.zeros((len(x_test))) splits = list(StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=SEED).split(x_train, y_train)) for i, (train_idx, valid_idx) in enumerate(splits): seed_everything(i*1000&#43;i) x_train = np.array(x_train) y_train = np.array(y_train) if feats: features = np.array(features) x_train_fold = torch.tensor(x_train[train_idx.astype(int)], dtype=torch.long).cuda() y_train_fold = torch.tensor(y_train[train_idx.astype(int), np.newaxis], dtype=torch.float32).cuda() if feats: kfold_X_features = features[train_idx.astype(int)] kfold_X_valid_features = features[valid_idx.astype(int)] x_val_fold = torch.tensor(x_train[valid_idx.astype(int)], dtype=torch.long).cuda() y_val_fold = torch.tensor(y_train[valid_idx.astype(int), np.newaxis], dtype=torch.float32).cuda() model = copy.deepcopy(model_obj) model.cuda() loss_fn = torch.nn.BCEWithLogitsLoss(reduction=&amp;#39;sum&amp;#39;) step_size = 300 base_lr, max_lr = 0.001, 0.003 optimizer = torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=max_lr) ################################################################################################ scheduler = CyclicLR(optimizer, base_lr=base_lr, max_lr=max_lr, step_size=step_size, mode=&amp;#39;exp_range&amp;#39;, gamma=0.99994) ############################################################################################### train = MyDataset(torch.utils.data.TensorDataset(x_train_fold, y_train_fold)) valid = MyDataset(torch.utils.data.TensorDataset(x_val_fold, y_val_fold)) train_loader = torch.utils.data.DataLoader(train, batch_size=batch_size, shuffle=True) valid_loader = torch.utils.data.DataLoader(valid, batch_size=batch_size, shuffle=False) print(f&amp;#39;Fold {i &#43; 1}&amp;#39;) for epoch in range(n_epochs): start_time = time.time() model.train() avg_loss = 0. for i, (x_batch, y_batch, index) in enumerate(train_loader): if feats: f = kfold_X_features[index] y_pred = model([x_batch,f]) else: y_pred = model(x_batch) if scheduler: scheduler.batch_step() # Compute and print loss. loss = loss_fn(y_pred, y_batch) optimizer.zero_grad() loss.backward() if clip: nn.utils.clip_grad_norm_(model.parameters(),1) optimizer.step() avg_loss &#43;= loss.item() / len(train_loader) model.eval() valid_preds_fold = np.zeros((x_val_fold.size(0))) test_preds_fold = np.zeros((len(x_test))) avg_val_loss = 0. for i, (x_batch, y_batch,index) in enumerate(valid_loader): if feats: f = kfold_X_valid_features[index] y_pred = model([x_batch,f]).detach() else: y_pred = model(x_batch).detach() avg_val_loss &#43;= loss_fn(y_pred, y_batch).item() / len(valid_loader) valid_preds_fold[index] = sigmoid(y_pred.cpu().numpy())[:, 0] elapsed_time = time.time() - start_time print(&amp;#39;Epoch {}/{} \tloss={:.4f} \tval_loss={:.4f} \ttime={:.2f}s&amp;#39;.format( epoch &#43; 1, n_epochs, avg_loss, avg_val_loss, elapsed_time)) avg_losses_f.append(avg_loss) avg_val_losses_f.append(avg_val_loss) # predict all samples in the test set batch per batch for i, (x_batch,) in enumerate(test_loader): if feats: f = test_features[i * batch_size:(i&#43;1) * batch_size] y_pred = model([x_batch,f]).detach() else: y_pred = model(x_batch).detach() test_preds_fold[i * batch_size:(i&#43;1) * batch_size] = sigmoid(y_pred.cpu().numpy())[:, 0] train_preds[valid_idx] = valid_preds_fold test_preds &#43;= test_preds_fold / len(splits) print(&amp;#39;All \tloss={:.4f} \tval_loss={:.4f} \t&amp;#39;.format(np.average(avg_losses_f),np.average(avg_val_losses_f))) return train_preds, test_preds But Why? Why so much code? Okay. I get it. That was probably a handful. What you could have done with a simple.fit in keras, takes a lot of code to accomplish in Pytorch. But understand that you get a lot of power too. Some use cases for you to understand:
 While in Keras you have prespecified schedulers like ReduceLROnPlateau (and it is a task to write them), in Pytorch you can experiment like crazy. If you know how to write Python you are going to get along just fine Want to change the structure of your model between the epochs. Yeah you can do it. Changing the input size for convolution networks on the fly. And much more. It is only your imagination that will stop you.  Wanna Run it Yourself?   So another small confession here. The code above will not run as is as there are some code artifacts which I have not shown here. I did this in favor of making the post more readable. Like you see the seed_everything, MyDataset and CyclicLR (From Jeremy Howard Course) functions and classes in the code above which are not really included with Pytorch. But fret not my friend. I have tried to write a Kaggle Kernel with the whole running code. You can see the code here and include it in your projects.
If you liked this post, please don&amp;rsquo;t forget to upvote the Kernel too. I will be obliged.
Endnotes and References This post is a result of an effort of a lot of excellent Kagglers and I will try to reference them in this section. If I leave out someone, do understand that it was not my intention to do so.
 Discussion on 3rd Place winner model in Toxic comment 3rd Place model in Keras by Larry Freeman Pytorch starter Capsule model How to: Preprocessing when using embeddings Improve your Score with some Text Preprocessing Pytorch baseline Pytorch starter  ]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Create basic graph visualizations with SeaBorn- The Most Awesome Python Library For Visualization yet</title>
      <link>https://mlwhiz.com/blog/2015/09/13/seaborn_visualizations/</link>
      <pubDate>Sun, 13 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2015/09/13/seaborn_visualizations/</guid>
      
      

      
      <description>When it comes to data preparation and getting acquainted with data, the one step we normally skip is the data visualization. While a part of it could be attributed to the lack of good visualization tools for the platforms we use, most of us also get lazy at times.
Now as we know of it Python never had any good Visualization library. For most of our plotting needs, I would read up blogs, hack up with StackOverflow solutions and haggle with Matplotlib documentation each and every time I needed to make a simple graph.</description>

      <content:encoded>  
        
        <![CDATA[  When it comes to data preparation and getting acquainted with data, the one step we normally skip is the data visualization. While a part of it could be attributed to the lack of good visualization tools for the platforms we use, most of us also get lazy at times.
Now as we know of it Python never had any good Visualization library. For most of our plotting needs, I would read up blogs, hack up with StackOverflow solutions and haggle with Matplotlib documentation each and every time I needed to make a simple graph. This led me to think that a Blog post to create common Graph types in Python is in order. But being the procrastinator that I am it always got pushed to the back of my head.
One thing that helped me in pursuit of my data visualization needs in Python was this awesome course about Data Visualization and applied plotting from University of Michigan which is a part of a pretty good Data Science Specialization with Python in itself. Highly Recommended.
But, yesterday I got introduced to Seaborn and I must say I am quite impressed with it. It makes beautiful graphs that are in my opinion better than R&amp;rsquo;s ggplot2. Gives you enough options to customize and the best part is that it is so easy to learn.
So I am finally writing this blog post with a basic purpose of creating a code base that provides me with ready to use codes which could be put into analysis in a fairly straight-forward manner.
Right. So here Goes.
We Start by importing the libraries that we will need to use.
import matplotlib.pyplot as plt #sets up plotting under plt import seaborn as sns #sets up styles and gives us more plotting options import pandas as pd #lets us handle data as dataframes To create a use case for our graphs, we will be working with the Tips data that contains the following information.
tips = sns.load_dataset(&amp;#34;tips&amp;#34;) tips.head()   Scatterplot With Regression Line Now let us work on visualizing this data. We will use the regplot option in seaborn.
# We dont Probably need the Gridlines. Do we? If yes comment this line sns.set(style=&amp;#34;ticks&amp;#34;) # Here we create a matplotlib axes object. The extra parameters we use # &amp;#34;ci&amp;#34; to remove confidence interval # &amp;#34;marker&amp;#34; to have a x as marker. # &amp;#34;scatter_kws&amp;#34; to provide style info for the points.[s for size] # &amp;#34;line_kws&amp;#34; to provide style info for the line.[lw for line width] g = sns.regplot(x=&amp;#34;tip&amp;#34;, y=&amp;#34;total_bill&amp;#34;, data=tips, ci = False, scatter_kws={&amp;#34;color&amp;#34;:&amp;#34;darkred&amp;#34;,&amp;#34;alpha&amp;#34;:0.3,&amp;#34;s&amp;#34;:90}, line_kws={&amp;#34;color&amp;#34;:&amp;#34;g&amp;#34;,&amp;#34;alpha&amp;#34;:0.5,&amp;#34;lw&amp;#34;:4},marker=&amp;#34;x&amp;#34;) # remove the top and right line in graph sns.despine() # Set the size of the graph from here g.figure.set_size_inches(12,8) # Set the Title of the graph from here g.axes.set_title(&amp;#39;Total Bill vs. Tip&amp;#39;, fontsize=34,color=&amp;#34;r&amp;#34;,alpha=0.5) # Set the xlabel of the graph from here g.set_xlabel(&amp;#34;Tip&amp;#34;,size = 67,color=&amp;#34;r&amp;#34;,alpha=0.5) # Set the ylabel of the graph from here g.set_ylabel(&amp;#34;Total Bill&amp;#34;,size = 67,color=&amp;#34;r&amp;#34;,alpha=0.5) # Set the ticklabel size and color of the graph from here g.tick_params(labelsize=14,labelcolor=&amp;#34;black&amp;#34;)   Now that required a bit of a code but i feel that it looks much better than what either Matplotlib or ggPlot2 could have rendered. We got a lot of customization without too much code.
But that is not really what actually made me like Seaborn. The plot type that actually got my attention was lmplot, which lets us use regplot in a faceted mode.
# So this function creates a faceted plot. The plot is parameterized by the following: # col : divides the data points into days and creates that many plots # palette: deep, muted, pastel, bright, dark, and colorblind. change the colors in graph. Experiment with these # col_wrap: we want 2 graphs in a row? Yes.We do # scatter_kws: attributes for points # hue: Colors on a particular column. # size: controls the size of graph g = sns.lmplot(x=&amp;#34;tip&amp;#34;, y=&amp;#34;total_bill&amp;#34;,ci=None,data=tips, col=&amp;#34;day&amp;#34;, palette=&amp;#34;muted&amp;#34;,col_wrap=2,scatter_kws={&amp;#34;s&amp;#34;: 100,&amp;#34;alpha&amp;#34;:.5}, line_kws={&amp;#34;lw&amp;#34;:4,&amp;#34;alpha&amp;#34;:0.5},hue=&amp;#34;day&amp;#34;,x_jitter=1.0,y_jitter=1.0,size=6) # remove the top and right line in graph sns.despine() # Additional line to adjust some appearance issue plt.subplots_adjust(top=0.9) # Set the Title of the graph from here g.fig.suptitle(&amp;#39;Total Bill vs. Tip&amp;#39;, fontsize=34,color=&amp;#34;r&amp;#34;,alpha=0.5) # Set the xlabel of the graph from here g.set_xlabels(&amp;#34;Tip&amp;#34;,size = 50,color=&amp;#34;r&amp;#34;,alpha=0.5) # Set the ylabel of the graph from here g.set_ylabels(&amp;#34;Total Bill&amp;#34;,size = 50,color=&amp;#34;r&amp;#34;,alpha=0.5) # Set the ticklabel size and color of the graph from here titles = [&amp;#39;Thursday&amp;#39;,&amp;#39;Friday&amp;#39;,&amp;#39;Saturday&amp;#39;,&amp;#39;Sunday&amp;#39;] for ax,title in zip(g.axes.flat,titles): ax.tick_params(labelsize=14,labelcolor=&amp;#34;black&amp;#34;)   A side Note on Palettes:
You can build your own color palettes using color_palette() function. color_palette() will accept the name of any seaborn palette or matplotlib colormap(except jet, which you should never use). It can also take a list of colors specified in any valid matplotlib format (RGB tuples, hex color codes, or HTML color names). The return value is always a list of RGB tuples. This allows you to use your own color palettes in graph.   Barplots sns.set(style=&amp;#34;ticks&amp;#34;) flatui = [&amp;#34;#9b59b6&amp;#34;, &amp;#34;#3498db&amp;#34;, &amp;#34;#95a5a6&amp;#34;, &amp;#34;#e74c3c&amp;#34;, &amp;#34;#34495e&amp;#34;, &amp;#34;#2ecc71&amp;#34;] # This Function takes as input a custom palette g = sns.barplot(x=&amp;#34;sex&amp;#34;, y=&amp;#34;tip&amp;#34;, hue=&amp;#34;day&amp;#34;, palette=sns.color_palette(flatui),data=tips,ci=None) # remove the top and right line in graph sns.despine() # Set the size of the graph from here g.figure.set_size_inches(12,7) # Set the Title of the graph from here g.axes.set_title(&amp;#39;Do We tend to \nTip high on Weekends?&amp;#39;, fontsize=34,color=&amp;#34;b&amp;#34;,alpha=0.3) # Set the xlabel of the graph from here g.set_xlabel(&amp;#34;Gender&amp;#34;,size = 67,color=&amp;#34;g&amp;#34;,alpha=0.5) # Set the ylabel of the graph from here g.set_ylabel(&amp;#34;Mean Tips&amp;#34;,size = 67,color=&amp;#34;r&amp;#34;,alpha=0.5) # Set the ticklabel size and color of the graph from here g.tick_params(labelsize=14,labelcolor=&amp;#34;black&amp;#34;)   Histograms and Distribution Diagrams They form another part of my workflow. Lets plot the normal Histogram using seaborn. For this we will use the distplot function. This function combines the matplotlib hist function (with automatic calculation of a good default bin size) with the seaborn kdeplot() function. It can also fit scipy.stats distributions and plot the estimated PDF over the data.
# Create a list of 1000 Normal RVs x = np.random.normal(size=1000) sns.set_context(&amp;#34;poster&amp;#34;) sns.set_style(&amp;#34;ticks&amp;#34;) # This Function creates a normed Histogram by default. # If we use the parameter kde=False and norm_hist=False then # we will be using a count histogram g=sns.distplot(x, kde_kws={&amp;#34;color&amp;#34;:&amp;#34;g&amp;#34;,&amp;#34;lw&amp;#34;:4,&amp;#34;label&amp;#34;:&amp;#34;KDE Estim&amp;#34;,&amp;#34;alpha&amp;#34;:0.5}, hist_kws={&amp;#34;color&amp;#34;:&amp;#34;r&amp;#34;,&amp;#34;alpha&amp;#34;:0.3,&amp;#34;label&amp;#34;:&amp;#34;Freq&amp;#34;}) # remove the top and right line in graph sns.despine() # Set the size of the graph from here g.figure.set_size_inches(12,7) # Set the Title of the graph from here g.axes.set_title(&amp;#39;Normal Simulation&amp;#39;, fontsize=34,color=&amp;#34;b&amp;#34;,alpha=0.3) # Set the xlabel of the graph from here g.set_xlabel(&amp;#34;X&amp;#34;,size = 67,color=&amp;#34;g&amp;#34;,alpha=0.5) # Set the ylabel of the graph from here g.set_ylabel(&amp;#34;Density&amp;#34;,size = 67,color=&amp;#34;r&amp;#34;,alpha=0.5) # Set the ticklabel size and color of the graph from here g.tick_params(labelsize=14,labelcolor=&amp;#34;black&amp;#34;)   import scipy.stats as stats a = 1.5 b = 1.5 x = np.arange(0.01, 1, 0.01) y = stats.beta.rvs(a,b,size=10000) y_act = stats.beta.pdf(x,a,b) g=sns.distplot(y,kde=False,norm_hist=True, kde_kws={&amp;#34;color&amp;#34;:&amp;#34;g&amp;#34;,&amp;#34;lw&amp;#34;:4,&amp;#34;label&amp;#34;:&amp;#34;KDE Estim&amp;#34;,&amp;#34;alpha&amp;#34;:0.5}, hist_kws={&amp;#34;color&amp;#34;:&amp;#34;r&amp;#34;,&amp;#34;alpha&amp;#34;:0.3,&amp;#34;label&amp;#34;:&amp;#34;Freq&amp;#34;}) # Note that we plotted on the graph using plt matlabplot function plt.plot(x,y_act) # remove the top and right line in graph sns.despine() # Set the size of the graph from here g.figure.set_size_inches(12,7) # Set the Title of the graph from here g.axes.set_title((&amp;#34;Beta Simulation vs. Calculated Beta Density\nFor a=%s,b=%s&amp;#34;) %(a,b),fontsize=34,color=&amp;#34;b&amp;#34;,alpha=0.3) # Set the xlabel of the graph from here g.set_xlabel(&amp;#34;X&amp;#34;,size = 67,color=&amp;#34;g&amp;#34;,alpha=0.5) # Set the ylabel of the graph from here g.set_ylabel(&amp;#34;Density&amp;#34;,size = 67,color=&amp;#34;r&amp;#34;,alpha=0.5) # Set the ticklabel size and color of the graph from here g.tick_params(labelsize=14,labelcolor=&amp;#34;black&amp;#34;)   PairPlots You need to see how variables vary with one another. What is the distribution of variables in the dataset. This is the graph to use with the pairplot function. Very helpful And Seaborn males it a joy to use. We will use Iris Dataset here for this example.
iris = sns.load_dataset(&amp;#34;iris&amp;#34;) iris.head()   # Create a Pairplot g = sns.pairplot(iris,hue=&amp;#34;species&amp;#34;,palette=&amp;#34;muted&amp;#34;,size=5, vars=[&amp;#34;sepal_width&amp;#34;, &amp;#34;sepal_length&amp;#34;],kind=&amp;#39;reg&amp;#39;,markers=[&amp;#39;o&amp;#39;,&amp;#39;x&amp;#39;,&amp;#39;&#43;&amp;#39;]) # To change the size of the scatterpoints in graph g = g.map_offdiag(plt.scatter, s=35,alpha=0.5) # remove the top and right line in graph sns.despine() # Additional line to adjust some appearance issue plt.subplots_adjust(top=0.9) # Set the Title of the graph from here g.fig.suptitle(&amp;#39;Relation between Sepal Width and Sepal Length&amp;#39;, fontsize=34,color=&amp;#34;b&amp;#34;,alpha=0.3)   Hope you found this post useful and worth your time. You can find the iPython notebook at github
I tried to make this as simple as possible but You may always ask me or see the documentation for doubts.
If you have any more ideas on how to use Seaborn or which graphs should i add here, please suggest in the comments section.
I will definitely try to add to this post as I start using more visualizations and encounter other libraries as good as seaborn.
Also since this is my first visualization post on this blog, I would like to call out a good course about Data Visualization and applied plotting from University of Michigan which is a part of a pretty good Data Science Specialization with Python in itself. Do check it out.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Behold the power of MCMC</title>
      <link>https://mlwhiz.com/blog/2015/08/21/mcmc_algorithm_cryptography/</link>
      <pubDate>Fri, 21 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2015/08/21/mcmc_algorithm_cryptography/</guid>
      
      

      
      <description>Last time I wrote an article on MCMC and how they could be useful. We learned how MCMC chains could be used to simulate from a random variable whose distribution is partially known i.e. we don&amp;amp;rsquo;t know the normalizing constant.
So MCMC Methods may sound interesting to some (for these what follows is a treat) and for those who don&amp;amp;rsquo;t really appreciate MCMC till now, I hope I will be able to pique your interest by the end of this blog post.</description>

      <content:encoded>  
        
        <![CDATA[    Last time I wrote an article on MCMC and how they could be useful. We learned how MCMC chains could be used to simulate from a random variable whose distribution is partially known i.e. we don&amp;rsquo;t know the normalizing constant.
So MCMC Methods may sound interesting to some (for these what follows is a treat) and for those who don&amp;rsquo;t really appreciate MCMC till now, I hope I will be able to pique your interest by the end of this blog post.
So here goes. This time we will cover some applications of MCMC in various areas of Computer Science using Python. If you feel the problems difficult to follow with, I would advice you to go back and read the previous post, which tries to explain MCMC Methods. We Will try to solve the following two problems:
 Breaking the Code - This problem has got somewhat of a great pedigree as this method was suggested by Persi Diaconis- The Mathemagician. So Someone comes to you with the below text. This text looks like gibberish but this is a code, Could you decrypyt it?
XZ STAVRK HXVR MYAZ OAKZM JKSSO SO MYR OKRR XDP JKSJRK XBMASD SO YAZ TWDHZ MYR JXMBYNSKF BSVRKTRM NYABY NXZ BXKRTRZZTQ OTWDH SVRK MYR AKSD ERPZMRXP KWZMTRP MYR JXTR OXBR SO X QSWDH NSIXD NXZ KXAZRP ORRETQ OKSI MYR JATTSN XDP X OXADM VSABR AIJRKORBMTQ XKMABWTXMRP MYR NSKPZ TRM IR ZRR MYR BYATP XDP PAR MYR ZWKHRSD YXP ERRD ZAMMADH NAMY YAZ OXBR MWKDRP MSNXKPZ MYR OAKR HAVADH MYR JXTIZ SO YAZ YXDPZ X NXKI XDP X KWE XTMRKDXMRTQ XZ MYR QSWDH NSIXD ZJSFR YR KSZR XDP XPVXDBADH MS MYR ERP Z YRXP ZXAP NAMY ISKR FADPDRZZ MYXD IAHYM YXVR ERRD RGJRBMRP SO YAI
 The Knapsack Problem - This problem comes from Introduction to Probability by Joseph Blitzstein. You should check out his courses STAT110 and CS109 as they are awesome. Also as it turns out Diaconis was the advisor of Joseph. So you have Bilbo a Thief who goes to Smaug&amp;rsquo;s Lair. He finds M treasures. Each treasure has some Weight and some Gold value. But Bilbo cannot really take all of that. He could only carry a certain Maximum Weight. But being a smart hobbit, he wants to Maximize the value of the treasures he takes. Given the values for weights and value of the treasures and the maximum weight that Bilbo could carry, could you find a good solution? This is known as the Knapsack Problem in Computer Science.
  Breaking the Code   So we look at the data and form a hypothesis that the data has been scrambled using a Substitution Cipher. We don&amp;rsquo;t know the encryption key, and we would like to know the Decryption Key so that we can decrypt the data and read the code.
To create this example, this data has actually been taken from Oliver Twist. We scrambled the data using a random encryption key, which we forgot after encrypting and we would like to decrypt this encrypted text using MCMC Chains. The real decryption key actually is &amp;ldquo;ICZNBKXGMPRQTWFDYEOLJVUAHS&amp;rdquo;
So lets think about this problem for a little bit. The decryption key could be any 26 letter string with all alphabets appearing exactly once. How many string permutations are there like that? That number would come out to be $26! \approx 10^{26}$ permutations. That is a pretty large number. If we go for using a brute force approach we are screwed. So what could we do? MCMC Chains come to rescue.
We will devise a Chain whose states theoritically could be any of these permutations. Then we will:
 Start by picking up a random current state. Create a proposal for a new state by swapping two random letters in the current state. Use a Scoring Function which calculates the score of the current state $Score_C$ and the proposed State $Score_P$. If the score of the proposed state is more than current state, Move to Proposed State. Else flip a coin which has a probability of Heads $Score_P/Score_C$. If it comes heads move to proposed State. Repeat from 2nd State.  If we get lucky we may reach a steady state where the chain has the stationary distribution of the needed states and the state that the chain is at could be used as a solution.
So the Question is what is the scoring function that we will want to use. We want to use a scoring function for each state(Decryption key) which assigns a positive score to each decryption key. This score intuitively should be more if the encrypted text looks more like actual english if decrypted using this decryption key.
So how can we quantify such a function. We will check a long text and calculate some statistics. See how many times one alphabet comes after another in a legitimate long text like War and Peace. For example we want to find out how many times does &amp;lsquo;BA&amp;rsquo; appears in the text or how many times &amp;lsquo;TH&amp;rsquo; occurs in the text.
For each pair of characters $\beta_1$ and $\beta_2$ (e.g. $\beta_1$ = T and $\beta_2$ =H), we let $R(\beta_1,\beta_2)$ record the number of times that specific pair(e.g. &amp;ldquo;TH&amp;rdquo;) appears consecutively in the reference text.
Similarly, for a putative decryption key x, we let $F_x(\beta_1,\beta_2)$ record the number of times that pair appears when the cipher text is decrypted using the decryption key x.
We then Score a particular decryption key x using:
$$Score(x) = \prod R(\beta_1,\beta_2)^{F_x(\beta_1,\beta_2)}$$ This function can be thought of as multiplying, for each consecutive pair of letters in the decrypted text, the number of times that pair occurred in the reference text. Intuitively, the score function is higher when the pair frequencies in the decrypted text most closely match those of the reference text, and the decryption key is thus most likely to be correct.
To make life easier with calculations we will calculate $log(Score(x))$
So lets start working through the problem step by step.
# AIM: To Decrypt a text using MCMC approach. i.e. find decryption key which we will call cipher from now on. import string import math import random # This function takes as input a decryption key and creates a dict for key where each letter in the decryption key # maps to a alphabet For example if the decryption key is &amp;#34;DGHJKL....&amp;#34; this function will create a dict like {D:A,G:B,H:C....} def create_cipher_dict(cipher): cipher_dict = {} alphabet_list = list(string.ascii_uppercase) for i in range(len(cipher)): cipher_dict[alphabet_list[i]] = cipher[i] return cipher_dict # This function takes a text and applies the cipher/key on the text and returns text. def apply_cipher_on_text(text,cipher): cipher_dict = create_cipher_dict(cipher) text = list(text) newtext = &amp;#34;&amp;#34; for elem in text: if elem.upper() in cipher_dict: newtext&#43;=cipher_dict[elem.upper()] else: newtext&#43;=&amp;#34; &amp;#34; return newtext # This function takes as input a path to a long text and creates scoring_params dict which contains the # number of time each pair of alphabet appears together # Ex. {&amp;#39;AB&amp;#39;:234,&amp;#39;TH&amp;#39;:2343,&amp;#39;CD&amp;#39;:23 ..} def create_scoring_params_dict(longtext_path): scoring_params = {} alphabet_list = list(string.ascii_uppercase) with open(longtext_path) as fp: for line in fp: data = list(line.strip()) for i in range(len(data)-1): alpha_i = data[i].upper() alpha_j = data[i&#43;1].upper() if alpha_i not in alphabet_list and alpha_i != &amp;#34; &amp;#34;: alpha_i = &amp;#34; &amp;#34; if alpha_j not in alphabet_list and alpha_j != &amp;#34; &amp;#34;: alpha_j = &amp;#34; &amp;#34; key = alpha_i&#43;alpha_j if key in scoring_params: scoring_params[key]&#43;=1 else: scoring_params[key]=1 return scoring_params # This function takes as input a text and creates scoring_params dict which contains the # number of time each pair of alphabet appears together # Ex. {&amp;#39;AB&amp;#39;:234,&amp;#39;TH&amp;#39;:2343,&amp;#39;CD&amp;#39;:23 ..} def score_params_on_cipher(text): scoring_params = {} alphabet_list = list(string.ascii_uppercase) data = list(text.strip()) for i in range(len(data)-1): alpha_i =data[i].upper() alpha_j = data[i&#43;1].upper() if alpha_i not in alphabet_list and alpha_i != &amp;#34; &amp;#34;: alpha_i = &amp;#34; &amp;#34; if alpha_j not in alphabet_list and alpha_j != &amp;#34; &amp;#34;: alpha_j = &amp;#34; &amp;#34; key = alpha_i&#43;alpha_j if key in scoring_params: scoring_params[key]&#43;=1 else: scoring_params[key]=1 return scoring_params # This function takes the text to be decrypted and a cipher to score the cipher. # This function returns the log(score) metric def get_cipher_score(text,cipher,scoring_params): cipher_dict = create_cipher_dict(cipher) decrypted_text = apply_cipher_on_text(text,cipher) scored_f = score_params_on_cipher(decrypted_text) cipher_score = 0 for k,v in scored_f.iteritems(): if k in scoring_params: cipher_score &#43;= v*math.log(scoring_params[k]) return cipher_score # Generate a proposal cipher by swapping letters at two random location def generate_cipher(cipher): pos1 = random.randint(0, len(list(cipher))-1) pos2 = random.randint(0, len(list(cipher))-1) if pos1 == pos2: return generate_cipher(cipher) else: cipher = list(cipher) pos1_alpha = cipher[pos1] pos2_alpha = cipher[pos2] cipher[pos1] = pos2_alpha cipher[pos2] = pos1_alpha return &amp;#34;&amp;#34;.join(cipher) # Toss a random coin with robability of head p. If coin comes head return true else false. def random_coin(p): unif = random.uniform(0,1) if unif&amp;gt;=p: return False else: return True # Takes as input a text to decrypt and runs a MCMC algorithm for n_iter. Returns the state having maximum score and also # the last few states def MCMC_decrypt(n_iter,cipher_text,scoring_params): current_cipher = string.ascii_uppercase # Generate a random cipher to start state_keeper = set() best_state = &amp;#39;&amp;#39; score = 0 for i in range(n_iter): state_keeper.add(current_cipher) proposed_cipher = generate_cipher(current_cipher) score_current_cipher = get_cipher_score(cipher_text,current_cipher,scoring_params) score_proposed_cipher = get_cipher_score(cipher_text,proposed_cipher,scoring_params) acceptance_probability = min(1,math.exp(score_proposed_cipher-score_current_cipher)) if score_current_cipher&amp;gt;score: best_state = current_cipher if random_coin(acceptance_probability): current_cipher = proposed_cipher if i%500==0: print &amp;#34;iter&amp;#34;,i,&amp;#34;:&amp;#34;,apply_cipher_on_text(cipher_text,current_cipher)[0:99] return state_keeper,best_state ## Run the Main Program: scoring_params = create_scoring_params_dict(&amp;#39;war_and_peace.txt&amp;#39;) plain_text = &amp;#34;As Oliver gave this first proof of the free and proper action of his lungs, \ the patchwork coverlet which was carelessly flung over the iron bedstead, rustled; \ the pale face of a young woman was raised feebly from the pillow; and a faint voice imperfectly \ articulated the words, Let me see the child, and die. \ The surgeon had been sitting with his face turned towards the fire: giving the palms of his hands a warm \ and a rub alternately. As the young woman spoke, he rose, and advancing to the bed&amp;#39;s head, said, with more kindness \ than might have been expected of him: &amp;#34; encryption_key = &amp;#34;XEBPROHYAUFTIDSJLKZMWVNGQC&amp;#34; cipher_text = apply_cipher_on_text(plain_text,encryption_key) decryption_key = &amp;#34;ICZNBKXGMPRQTWFDYEOLJVUAHS&amp;#34; print&amp;#34;Text To Decode:&amp;#34;, cipher_text print &amp;#34;\n&amp;#34; states,best_state = MCMC_decrypt(10000,cipher_text,scoring_params) print &amp;#34;\n&amp;#34; print &amp;#34;Decoded Text:&amp;#34;,apply_cipher_on_text(cipher_text,best_state) print &amp;#34;\n&amp;#34; print &amp;#34;MCMC KEY FOUND:&amp;#34;,best_state print &amp;#34;ACTUAL DECRYPTION KEY:&amp;#34;,decryption_key   This chain converges around the 2000th iteration and we are able to unscramble the code. That&amp;rsquo;s awesome!!! Now as you see the MCMC Key found is not exactly the encryption key. So the solution is not a deterministic one, but we can see that it does not actually decrease any of the value that the MCMC Methods provide. Now Lets Help Bilbo :)
The Knapsack Problem Restating, we have Bilbo a Thief who goes to Smaug&amp;rsquo;s Lair. He finds M treasures. Each treasure has some Weight and some Gold value. But Bilbo cannot really take all of that. He could only carry a certain Maximum Weight. But being a smart hobbit, he wants to Maximize the value of the treasures he takes. Given the values for weights and value of the treasures and the maximum weight that Bilbo could carry, could you find a good solution?
So in this problem we have an $1$x$M$ array of Weight Values W, Gold Values G and a value for the maximum weight $w_{MAX}$ that Bilbo can carry. We want to find out an $1$x$M$ array $X$ of 1&amp;rsquo;s and 0&amp;rsquo;s, which holds weather Bilbo Carries a particular treasure or not. This array needs to follow the constraint $WX^T &amp;lt; w_{MAX}$ and we want to maximize $GX^T$ for a particular state X.(Here the T means transpose)
So lets first discuss as to how we will create a proposal from a previous state.
 Pick a random index from the state and toggle the index value. Check if we satisfy our constraint. If yes this state is the proposal state. Else pick up another random index and repeat.  We also need to think about the Scoring Function. We need to give high values to states with high gold value. We will use: $$Score(X)=e^{\beta GX^T}$$ We give exponentially more value to higher score. The Beta here is a &#43;ve constant. But how to choose it? If $\beta$ is big we will give very high score to good solutions and the chain will not be able to try new solutions as it can get stuck in local optimas. If we give a small value the chain will not converge to very good solutions. So weuse an Optimization Technique called Simulated Annealing i.e. we will start with a small value of $\beta$ and increase as no of iterations go up. That way the chain will explore in the starting stages and stay at the best solution in the later stages.
So now we have everything we need to get started
import numpy as np W = [20,40,60,12,34,45,67,33,23,12,34,56,23,56] G = [120,420,610,112,341,435,657,363,273,812,534,356,223,516] W_max = 150 # This function takes a state X , The gold vector G and a Beta Value and return the Log of score def score_state_log(X,G,Beta): return Beta*np.dot(X,G) # This function takes as input a state X and the number of treasures M, The weight vector W and the maximum weight W_max # and returns a proposal state def create_proposal(X,W,W_max): M = len(W) random_index = random.randint(0,M-1) #print random_index proposal = list(X) proposal[random_index] = 1 - proposal[random_index] #Toggle #print proposal if np.dot(proposal,W)&amp;lt;=W_max: return proposal else: return create_proposal(X,W,W_max) # Takes as input a text to decrypt and runs a MCMC algorithm for n_iter. Returns the state having maximum score and also # the last few states def MCMC_Golddigger(n_iter,W,G,W_max, Beta_start = 0.05, Beta_increments=.02): M = len(W) Beta = Beta_start current_X = [0]*M # We start with all 0&amp;#39;s state_keeper = [] best_state = &amp;#39;&amp;#39; score = 0 for i in range(n_iter): state_keeper.append(current_X) proposed_X = create_proposal(current_X,W,W_max) score_current_X = score_state_log(current_X,G,Beta) score_proposed_X = score_state_log(proposed_X,G,Beta) acceptance_probability = min(1,math.exp(score_proposed_X-score_current_X)) if score_current_X&amp;gt;score: best_state = current_X if random_coin(acceptance_probability): current_X = proposed_X if i%500==0: Beta &#43;= Beta_increments # You can use these below two lines to tune value of Beta #if i%20==0: # print &amp;#34;iter:&amp;#34;,i,&amp;#34; |Beta=&amp;#34;,Beta,&amp;#34; |Gold Value=&amp;#34;,np.dot(current_X,G) return state_keeper,best_state Running the Main program:
max_state_value =0 Solution_MCMC = [0] for i in range(10): state_keeper,best_state = MCMC_Golddigger(50000,W,G,W_max,0.0005, .0005) state_value=np.dot(best_state,G) if state_value&amp;gt;max_state_value: max_state_value = state_value Solution_MCMC = best_state print &amp;#34;MCMC Solution is :&amp;#34; , str(Solution_MCMC) , &amp;#34;with Gold Value:&amp;#34;, str(max_state_value) MCMC Solution is : [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0] with Gold Value: 2435  Now I won&amp;rsquo;t say that this is the best solution. The deterministic solution using DP will be the best for such use case but sometimes when the problems gets large, having such techniques at disposal becomes invaluable.
So tell me What do you think about MCMC Methods?
Also, If you find any good applications or would like to apply these techniques to some area, I would really be glad to know about them and help if possible.
The codes for both examples are sourced at Github
References and Sources:  Introduction to Probability Joseph K Blitzstein, Jessica Hwang Wikipedia The Markov Chain Monte Carlo Revolution, Persi Diaconis Decrypting Classical Cipher Text Using Markov Chain Monte Carlo, Jian Chen and Jeffrey S. Rosenthal  One of the newest and best resources that you can keep an eye on is the Bayesian Methods for Machine Learning course in the Advanced machine learning specialization created jointly by Kazanova(Number 3 Kaggler at the time of writing)
Apart from that I also found a course on Bayesian Statistics on Coursera. In the process of doing it right now so couldn&amp;rsquo;t really comment on it. But since I had done an course on Inferential Statistics taught by the same professor before(Mine Çetinkaya-Rundel), I am very hopeful for this course. Let&amp;rsquo;s see.
Also look out for these two books to learn more about MCMC. I have not yet read them whole but still I liked whatever I read:
  Both these books are pretty high level and hard on math. But these are the best texts out there too. :)
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>My Tryst With MCMC Algorithms</title>
      <link>https://mlwhiz.com/blog/2015/08/19/mcmc_algorithms_b_distribution/</link>
      <pubDate>Wed, 19 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2015/08/19/mcmc_algorithms_b_distribution/</guid>
      
      

      
      <description>The things that I find hard to understand push me to my limits. One of the things that I have always found hard is Markov Chain Monte Carlo Methods. When I first encountered them, I read a lot about them but mostly it ended like this.
  The meaning is normally hidden in deep layers of Mathematical noise and not easy to decipher. This blog post is intended to clear up the confusion around MCMC methods, Know what they are actually useful for and Get hands on with some applications.</description>

      <content:encoded>  
        
        <![CDATA[  The things that I find hard to understand push me to my limits. One of the things that I have always found hard is Markov Chain Monte Carlo Methods. When I first encountered them, I read a lot about them but mostly it ended like this.
  The meaning is normally hidden in deep layers of Mathematical noise and not easy to decipher. This blog post is intended to clear up the confusion around MCMC methods, Know what they are actually useful for and Get hands on with some applications.
So what really are MCMC Methods? First of all we have to understand what are Monte Carlo Methods!!!
Monte Carlo methods derive their name from Monte Carlo Casino in Monaco. There are many card games that need probability of winning against the dealer. Sometimes calculating this probability can be mathematically complex or highly intractable. But we can always run a computer simulation to simulate the whole game many times and see the probability as the number of wins divided by the number of games played.
So that is all you need to know about Monte carlo Methods. Yes it is just a simple simulation technique with a Fancy Name.
So as we have got the first part of MCMC, we also need to understand what are Markov Chains. Before Jumping onto Markov Chains let us learn a little bit about Markov Property.
Suppose you have a system of $M$ possible states, and you are hopping from one state to another. Markov Property says that given a process which is at a state $X_n$ at a particular point of time, the probability of $X_{n&#43;1} = k$, where $k$ is any of the $M$ states the process can hop to, will only be dependent on which state it is at the given moment of time. And not on how it reached the current state.
Mathematically speaking:
 $$P(X_{n&#43;1}=k | X_n=k_n,X_{n-1}=k_{n-1},....,X_1=k_1) = P(X_{n&#43;1}=k|X_n=k_n)$$ If a process exhibits the Markov Property than it is known as a Markov Process.
Now Why is a Markov Chain important? It is important because of its stationary distribution.
So what is a Stationary Distribution?
Assume you have a markov process like below. You start from any state $X_i$ and want to find out the state Probability distribution at $X_{i&#43;1}$.
  You have a matrix of transition probability  
which defines the probability of going from a state $X_i$ to $X_j$. You start calculating the Probability distribution for the next state. If you are at Bull Market State at time $i$ , you have a state Probability distribution as [0,1,0]
you want to get the state pdf at $X_{i&#43;1}$. That is given by
$$s_{i&#43;1} = s_{i}Q$$ $$ s_{i&#43;1}=\left[ {\begin{array}{cc} .15 &amp; .8 &amp; .05 \end{array} } \right]$$ And the next state distribution could be found out by $$s_{i&#43;1} = s_iQ^2$$div and so on. Eventually you will reach a stationary state s where: $$sQ=s$$ For this transition matrix Q the Stationary distribution $s$ is $$ s_{i&#43;1}=\left[ {\begin{array}{cc} .625 &amp; .3125 &amp; .0625 \end{array} } \right]$$ The stationary state distribution is important because it lets you define the probability for every state of a system at a random time. That is for this particular example we can say that 62.5% of the times market will be in a bull market state, 31.25% of weeks it will be a bear market and 6.25% of weeks it will be stagnant
Intuitively you can think of it as an random walk on a chain. You might visit some nodes more often than others based on node probabilities. In the Google Pagerank problem you might think of a node as a page, and the probability of a page in the stationary distribution as its relative importance.
Woah! That was a lot of information and we have yet not started talking about the MCMC Methods. Well if you are with me till now, we can now get on to the real topic now.
So What is MCMC? According to Wikipedia:
 **Markov Chain Monte Carlo** (MCMC) methods are a class of algorithms for **sampling from a probability distribution** based on constructing a Markov chain that has the desired distribution as its stationary distribution. The state of the chain after a number of steps is then used as a sample of the desired distribution. The quality of the sample improves as a function of the number of steps.  So let&amp;rsquo;s explain this with an example: Assume that we want to sample from a Beta distribution. The PDF is:
$$f(x) = Cx^{\alpha -1}(1-x)^{\beta -1}$$ where $C$ is the normalizing constant (which we actually don&amp;rsquo;t need to Sample from the distribution as we will see later).
This is a fairly difficult problem with the Beta Distribution if not intractable. In reality you might need to work with a lot harder Distribution Functions and sometimes you won&amp;rsquo;t actually know the normalizing constants.
MCMC methods make life easier for us by providing us with algorithms that could create a Markov Chain which has the Beta distribution as its stationary distribution given that we can sample from a uniform distribution(which is fairly easy).
If we start from a random state and traverse to the next state based on some algorithm repeatedly, we will end up creating a Markov Chain which has the Beta distribution as its stationary distribution and the states we are at after a long time could be used as sample from the Beta Distribution.
One such MCMC Algorithm is the Metropolis Hastings Algorithm
Metropolis Hastings Algorithm Let $s=(s_1,s_2,&amp;hellip;.,s_M)$ be the desired stationary distribution. We want to create a Markov Chain that has this stationary distribution. We start with an arbitrary Markov Chain $P$ with $M$ states with transition matrix $Q$, so that $Q_{ij}$ represents the probability of going from state $i$ to $j$. Intuitively we know how to wander around this Markov Chain but this Markov Chain does not have the required Stationary Distribution. This chain does have some stationary distribution(which is not of our use)
Our Goal is to change the way we wander on the this Markov Chain $P$ so that this chain has the desired Stationary distribution.
To do this we:
 Start at a random initial State $i$. Randomly pick a new Proposal State by looking at the transition probabilities in the ith row of the transition matrix Q. Compute an measure called the Acceptance Probability which is defined as: $a_{ij} = min(s_jp_{ji}/s_{i}p_{ij},1)$ Now Flip a coin that lands head with probability $a_{ij}$. If the coin comes up heads, accept the proposal i.e move to next state else reject the proposal i.e. stay at the current state. Repeat for a long time  After a long time this chain will converge and will have a stationary distribution $s$. We can then use the states of the chain as the sample from any distribution.
While doing this to sample the Beta Distribution, the only time we are using the PDF is to find the acceptance probability and in that we divide $s_j$ by $s_i$, i.e. the normalizing constant $C$ gets cancelled.
Now Let&amp;rsquo;s Talk about the intuition. For the Intuition I am quoting an Answer from the site Stack Exchange,as this was the best intuitive explanation that I could find:  I think there&amp;rsquo;s a nice and simple intuition to be gained from the (independence-chain) Metropolis-Hastings algorithm. First, what&amp;rsquo;s the goal? The goal of MCMC is to draw samples from some probability distribution without having to know its exact height at any point(We don&amp;rsquo;t need to know C). The way MCMC achieves this is to &amp;ldquo;wander around&amp;rdquo; on that distribution in such a way that the amount of time spent in each location is proportional to the height of the distribution. If the &amp;ldquo;wandering around&amp;rdquo; process is set up correctly, you can make sure that this proportionality (between time spent and height of the distribution) is achieved. Intuitively, what we want to do is to to walk around on some (lumpy) surface in such a way that the amount of time we spend (or # samples drawn) in each location is proportional to the height of the surface at that location. So, e.g., we&amp;rsquo;d like to spend twice as much time on a hilltop that&amp;rsquo;s at an altitude of 100m as we do on a nearby hill that&amp;rsquo;s at an altitude of 50m. The nice thing is that we can do this even if we don&amp;rsquo;t know the absolute heights of points on the surface: all we have to know are the relative heights. e.g., if one hilltop A is twice as high as hilltop B, then we&amp;rsquo;d like to spend twice as much time at A as we spend at B. The simplest variant of the Metropolis-Hastings algorithm (independence chain sampling) achieves this as follows: assume that in every (discrete) time-step, we pick a random new &amp;ldquo;proposed&amp;rdquo; location (selected uniformly across the entire surface). If the proposed location is higher than where we&amp;rsquo;re standing now, move to it. If the proposed location is lower, then move to the new location with probability p, where p is the ratio of the height of that point to the height of the current location. (i.e., flip a coin with a probability p of getting heads; if it comes up heads, move to the new location; if it comes up tails, stay where we are). Keep a list of the locations you&amp;rsquo;ve been at on every time step, and that list will (asyptotically) have the right proportion of time spent in each part of the surface. (And for the A and B hills described above, you&amp;rsquo;ll end up with twice the probability of moving from B to A as you have of moving from A to B). There are more complicated schemes for proposing new locations and the rules for accepting them, but the basic idea is still: (1) pick a new &amp;ldquo;proposed&amp;rdquo; location; (2) figure out how much higher or lower that location is compared to your current location; (3) probabilistically stay put or move to that location in a way that respects the overall goal of spending time proportional to height of the location. 
Sampling from Beta Distribution Now Let&amp;rsquo;s Move on to the problem of Simulating from Beta Distribution. Now Beta Distribution is a continuous Distribution on [0,1] and it can have infinite states on [0,1].
Lets Assume an arbitrary Markov Chain P with infinite states on [0,1] having transition Matrix Q such that $Q_{ij} = Q_{ji} = $ All entries in Matrix. We don&amp;rsquo;t really need the Matrix Q as we will see later, But I want to keep the problem description as close to the algorihm we suggested.
 Start at a random initial State $i$ given by Unif(0,1). Randomly pick a new Proposal State by looking at the transition probabilities in the ith row of the transition matrix Q. Lets say we pick up another Unif(0,1) state as a proposal state $j$. Compute an measure called the Acceptance Probability :  $$a_{ij} = min(s_jp_{ji}/s_{i}p_{ij},1)$$ which is, $$a_{ij} = min(s_j/s_i,1)$$ where, $$s_i = Ci^{\alpha -1}(1-i)^{\beta -1}$$ and, $$s_j = Cj^{\alpha -1}(1-j)^{\beta -1}$$  Now Flip a coin that lands head with probability $a_{ij}$. If the coin comes up heads, accept the proposal i.e move to next state else reject the proposal i.e. stay at the current state. Repeat for a long time  So enough with theory, Let&amp;rsquo;s Move on to python to create our Beta Simulations Now&amp;hellip;.
import random # Lets define our Beta Function to generate s for any particular state. We don&amp;#39;t care for the normalizing constant here. def beta_s(w,a,b): return w**(a-1)*(1-w)**(b-1) # This Function returns True if the coin with probability P of heads comes heads when flipped. def random_coin(p): unif = random.uniform(0,1) if unif&amp;gt;=p: return False else: return True # This Function runs the MCMC chain for Beta Distribution. def beta_mcmc(N_hops,a,b): states = [] cur = random.uniform(0,1) for i in range(0,N_hops): states.append(cur) next = random.uniform(0,1) ap = min(beta_s(next,a,b)/beta_s(cur,a,b),1) # Calculate the acceptance probability if random_coin(ap): cur = next return states[-1000:] # Returns the last 100 states of the chain Let us check our results of the MCMC Sampled Beta distribution against the actual beta distribution.
import numpy as np import pylab as pl import scipy.special as ss %matplotlib inline pl.rcParams[&amp;#39;figure.figsize&amp;#39;] = (17.0, 4.0) # Actual Beta PDF. def beta(a, b, i): e1 = ss.gamma(a &#43; b) e2 = ss.gamma(a) e3 = ss.gamma(b) e4 = i ** (a - 1) e5 = (1 - i) ** (b - 1) return (e1/(e2*e3)) * e4 * e5 # Create a function to plot Actual Beta PDF with the Beta Sampled from MCMC Chain. def plot_beta(a, b): Ly = [] Lx = [] i_list = np.mgrid[0:1:100j] for i in i_list: Lx.append(i) Ly.append(beta(a, b, i)) pl.plot(Lx, Ly, label=&amp;#34;Real Distribution: a=&amp;#34;&#43;str(a)&#43;&amp;#34;, b=&amp;#34;&#43;str(b)) pl.hist(beta_mcmc(100000,a,b),normed=True,bins =25, histtype=&amp;#39;step&amp;#39;,label=&amp;#34;Simulated_MCMC: a=&amp;#34;&#43;str(a)&#43;&amp;#34;, b=&amp;#34;&#43;str(b)) pl.legend() pl.show() plot_beta(0.1, 0.1) plot_beta(1, 1) plot_beta(2, 3)  As we can see our sampled beta values closely resemble the beta distribution.
So MCMC Methods are useful for the following basic problems.
 Simulating from a Random Variable PDF. Example: Simulate from a Beta(0.5,0.5) or from a Normal(0,1). Solve problems with a large state space.For Example: Knapsack Problem, Encrytion Cipher etc. We will work on this in the Next Blog Post as this one has already gotten bigger than what I expected.  Till Then Ciao!!!!!!
References and Sources:  Introduction to Probability Joseph K Blitzstein, Jessica Hwang Wikipedia StackExchange  One of the newest and best resources that you can keep an eye on is the Bayesian Methods for Machine Learning course in the Advanced machine learning specialization created jointly by Kazanova(Number 3 Kaggler at the time of writing)
Apart from that I also found a course on Bayesian Statistics on Coursera. In the process of doing it right now so couldn&amp;rsquo;t really comment on it. But since I had done an course on Inferential Statistics taught by the same professor before(Mine Çetinkaya-Rundel), I am very hopeful for this course. Let&amp;rsquo;s see.
Also look out for these two books to learn more about MCMC. I have not yet read them whole but still I liked whatever I read:
  Both these books are pretty high level and hard on math. But these are the best texts out there too. :)
]]>
        
      </content:encoded>
      
      
      
    </item>
    
  </channel>
</rss>