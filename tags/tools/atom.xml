<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1" xmlns:content="http://purl.org/rss/1.0/modules/content" xmlns:media="http://search.yahoo.com/mrss/" >

  
  <channel>
    <title>Tools on MLWhiz</title>
    <link>https://mlwhiz.com/tags/tools/</link>
    <description>Recent content in Tools on MLWhiz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Jun 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://mlwhiz.com/tags/tools/atom.xml" rel="self" type="application/rss+xml" />
    

    

    <item>
      <title>Create an Awesome Development Setup for Data Science using Atom</title>
      <link>https://mlwhiz.com/blog/2020/09/02/atom_for_data_science/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2020/09/02/atom_for_data_science/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/atom_for_data_science/main.png"></media:content>
      

      
      <description>Before I even begin this article, let me just say that I love iPython Notebooks, and Atom is not an alternative to Jupyter in any way. Notebooks provide me an interface where I have to think of “Coding one code block at a time,” as I like to call it, and it helps me to think more clearly while helping me make my code more modular.
Yet, Jupyter is not suitable for some tasks in its present form.</description>

      <content:encoded>  
        
        <![CDATA[  Before I even begin this article, let me just say that I love iPython Notebooks, and Atom is not an alternative to Jupyter in any way. Notebooks provide me an interface where I have to think of “Coding one code block at a time,” as I like to call it, and it helps me to think more clearly while helping me make my code more modular.
Yet, Jupyter is not suitable for some tasks in its present form. And the most prominent is when I have to work with .py files. And one will need to work with .py files whenever they want to push your code to production or change other people’s code. So, until now, I used sublime text to edit Python files, and I found it excellent. But recently, when I looked at the Atom editor, my loyalties seemed to shift when I saw the multiple out of the box options provided by it.
Now, the real power to Atom comes from the various packages you can install. In this post, I will talk about the packages that help make Atom just the most hackable and wholesome development environment ever.
Installing Atom and Some Starting Tweaks Before we even begin, we need to install Atom. You can do it from the main website here. The installation process is pretty simple, whatever your platform is. For Linux, I just downloaded the .deb file and double-clicked it. Once you have installed Atom, You can look at doing some tweaks:
 Open Core settings in Atom using Ctrl&#43;Shift&#43;P and typing settings therein. This Ctrl&#43;Shift&#43;P command is going to be one of the most important commands in Atom as it lets you navigate and run a lot of commands.  Accessing the Settings window using Ctrl&#43;Shift&#43;P
 Now go to the Editor menu and Uncheck “Soft Tabs”. This is done so that TAB key registers as a TAB and not two spaces. If you want you can also activate “Soft Wrap” which wraps the text if the text exceeds the window width.  My preferred settings for soft-wrap and soft-tabs.
Now, as we have Atom installed, we can look at some of the most awesome packages it provides. And the most important of them is GitHub.
1. Commit to Github without leaving Editor Are you fed up with leaving your text editor to use terminal every time you push a commit to Github? If your answer is yes, Atom solves this very problem by letting you push commits without you ever leaving the text editor window.
This is one of the main features that pushed me towards Atom from Sublime Text. I like how this functionality comes preloaded with Atom and it doesn’t take much time to set it up.
To start using it, click on the GitHub link in the right bottom of the Atom screen, and the Atom screen will prompt you to log in to your Github to provide access. It is a one-time setup, and once you log in and give the token generated to Atom, you will be able to push your commits from the Atom screen itself without navigating to the terminal window.
  ![]  ![]   The process to push a commit is:
 Change any file or multiple files.
 Click on Git on the bottom right corner.
 Stage the Changes
 Write a commit message.
 Click on Push in the bottom right corner.
 And we are done:)
  Below, I am pushing a very simple commit to Github, where I add a title to my Markdown file. Its a GIF file, so it might take some time to load.
Committing in Atom
2. Write Markdown with real-time preview I am always torn between the medium editor vs. Markdown whenever I write blog posts for my site. For one, I prefer using Markdown when I have to use Math symbols for my post or have to use custom HTML. But, I also like the Medium editor as it is WYSIWYG(What You See Is What You Get). And with Atom, I have finally found the perfect markdown editor for me, which provides me with Markdown as well as WYSIWYG. And it has now become a default option for me to create any README.md files for GitHub.
Using Markdown in Atom is again a piece of cake and is activated by default. To see a live preview with Markdown in Atom:
 Use Ctrl&#43;Shift&#43;M to open Markdown Preview Pane.
 Whatever changes you do in the document will reflect near real-time in the preview window.
  Markdown Split Screen editor
3. Minimap — A navigation map for Large code files Till now, we haven’t installed any new package to Atom, so let’s install an elementary package as our first package. This package is called minimap, and it is something that I like to have from my Sublime Text days. It lets you have a side panel where you can click and reach any part of the code. Pretty useful for large files.
To install a package, you can go to settings and click on Install Packages. Ctrl&#43;Shift&#43;P &amp;gt; Settings &amp;gt; &#43; Install &amp;gt; Minimap&amp;gt; Install
Installing Minimap or any package
Once you install the package, you can see the minimap on the side of your screen.
Sidebar to navigate large files with ease
4. Python Autocomplete with function definitions in Text Editor An editor is never really complete until it provides you with some autocomplete options for your favorite language. Atom integrates well with Kite, which tries to integrate AI and autocomplete.
So, to enable autocomplete with Kite, we can use the package named autocomplete-python in Atom. The install steps remain the same as before. i.e.
Ctrl&#43;Shift&#43;P &amp;gt; Settings &amp;gt; &#43; Install &amp;gt; autocomplete-python&amp;gt; Install
You will also see the option of using Kite along with it. I usually end up using Kite instead of Jedi(Another autocomplete option). This is how it looks when you work on a Python document with Kite autocompletion.
Autocomplete with Kite lets you see function definitions too.
5. Hydrogen — Run Python code in Jupyter environment Want to run Python also in your Atom Editor with any Jupyter Kernel? There is a way for that too. We just need to install “Hydrogen” using the same method as before. Once Hydrogen is installed you can use it by:
 Run the command on which your cursor is on using Ctrl&#43;Enter.
 Select any Kernel from the Kernel Selection Screen. I select pyt kernel from the list.
 Now I can continue working in pyt kernel.
  Runnin command using Ctrl&#43;Enter will ask you which environment to use.
Sometimes it might happen that you don’t see an environment/kernel in Atom. In such cases, you can install ipykernel to make that kernel visible to Jupyter as well as Atom.
Here is how to make a new kernel and make it visible in Jupyter/Atom:
conda create -n exampleenv python=3.7 conda activate exampleenv conda install -c anaconda ipykernel python -m ipykernel install --user --name=exampleenv  Once you run these commands, your kernel will be installed. You can now update the Atom’s kernel list by using:
Ctrl&#43;Shift&#43;P &amp;gt;Hydrogen: Update Kernels
And your kernel should now be available in your Atom editor.
6. Search Stack Overflow from your Text Editor Stack Overflow is an integral part of any developer’s life. But you know what the hassle is? To leave the coding environment and go to Chrome to search for every simple thing you need to do. And we end up doing it back and forth throughout the day. So, what if we can access Stack Overflow from Atom? You can do precisely that through the “ask-stack” package, which lets one search for questions on SO. We can access it using Ctrl&#43;Alt&#43;A
Access Stack Overflow in Atom using Ctrl&#43;Alt&#43;A.
Some other honorable mentions of packages you could use are:
 Teletype: Do Pair Coding.
 Linter: Checks code for Stylistic and Programmatic errors. To enable linting in Python, You can use “linter” and “python-linters”.
 Highlight Selected: Highlight all occurrences of a text by double-clicking or selecting the text with a cursor.
 Atom-File-Icons: Provides you with file icons in the left side tree view. Looks much better than before, right?
  Icons for files
Conclusion In this post, I talked about how I use Atom in my Python Development flow.
There are a plethora of other packages in Atom which you may like, and you can look at them to make your environment even more customizable. Or one can even write their own packages as well as Atom is called as the “Most Hackable Editor”.
If you want to learn about Python and not exactly a Python editor, I would like to call out an excellent course on Learn Intermediate level Python from the University of Michigan. Do check it out. Also, here are my course recommendations to become a Data Scientist in 2020.
I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog.
Also, a small disclaimer — There might be some affiliate links in this post to relevant resources, as sharing knowledge is never a bad idea.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Deployment could be easy — A Data Scientist’s Guide to deploy an Image detection FastAPI API using Amazon ec2</title>
      <link>https://mlwhiz.com/blog/2020/08/08/deployment_fastapi/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2020/08/08/deployment_fastapi/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/deployment_fastapi/main.png"></media:content>
      

      
      <description>Just recently, I had written a simple tutorial on FastAPI, which was about simplifying and understanding how APIs work, and creating a simple API using the framework.
That post got quite a good response, but the most asked question was how to deploy the FastAPI API on ec2 and how to use images data rather than simple strings, integers, and floats as input to the API.
I scoured the net for this, but all I could find was some undercooked documentation and a lot of different ways people were taking to deploy using NGINX or ECS.</description>

      <content:encoded>  
        
        <![CDATA[  Just recently, I had written a simple tutorial on FastAPI, which was about simplifying and understanding how APIs work, and creating a simple API using the framework.
That post got quite a good response, but the most asked question was how to deploy the FastAPI API on ec2 and how to use images data rather than simple strings, integers, and floats as input to the API.
I scoured the net for this, but all I could find was some undercooked documentation and a lot of different ways people were taking to deploy using NGINX or ECS. None of those seemed particularly great or complete to me.
So, I tried to do this myself using some help from FastAPI documentation. In this post, we will look at predominantly four things:
 Setting Up an Amazon Instance
 Creating a FastAPI API for Object Detection
 Deploying FastAPI using Docker
 An End to End App with UI
  So, without further ado, let’s get started.
You can skip any part you feel you are versed with though I would expect you to go through the whole post, long as it may be, as there’s a lot of interconnection between concepts.
1. Setting Up Amazon Instance Before we start with using the Amazon ec2 instance, we need to set one up. You might need to sign up with your email ID and set up the payment information on the AWS website. Works just like a single sign-on. From here, I will assume that you have an AWS account and so I am going to explain the next essential parts so you can follow through.
 Go to AWS Management Console using https://us-west-2.console.aws.amazon.com/console.
 On the AWS Management Console, you can select “Launch a Virtual Machine.” Here we are trying to set up the machine where we will deploy our FastAPI API.
 In the first step, you need to choose the AMI template for the machine. I am selecting the 18.04 Ubuntu Server since Ubuntu.
   In the second step, I select the t2.xlarge machine, which has 4 CPUs and 16GB RAM rather than the free tier since I want to use an Object Detection model and will need some resources.   Keep pressing Next until you reach the “6. Configure Security Group” tab. This is the most crucial step here. You will need to add a rule with Type: “HTTP” and Port Range:80.   You can click on “Review and Launch” and finally on the “Launch” button to launch the instance. Once you click on Launch, you might need to create a new key pair. Here I am creating a new key pair named fastapi and downloading that using the “Download Key Pair” button. Keep this key safe as it would be required every time you need to login to this particular machine. Click on “Launch Instance” after downloading the key pair   You can now go to your instances to see if your instance has started. Hint: See the Instance state; it should be showing “Running.”   Also, to note here are the Public DNS(IPv4) address and the IPv4 public IP. We will need it to connect to this machine. For me, they are:  Public DNS (IPv4): ec2-18-237-28-174.us-west-2.compute.amazonaws.com IPv4 Public IP: 18.237.28.174   Once you have that run the following commands in the folder, you saved the fastapi.pem file. If the file is named fastapi.txt you might need to rename it to fastapi.pem.  # run fist command if fastapi.txt gets downloaded. # mv fastapi.txt fastapi.pem chmod 400 fastapi.pem ssh -i &amp;quot;fastapi.pem&amp;quot; ubuntu@&amp;lt;Your Public DNS(IPv4) Address&amp;gt;  Now we have got our Amazon instance up and running. We can move on here to the real part of the post.
2. Creating a FastAPI API for Object Detection Before we deploy an API, we need to have an API with us, right? In one of my last posts, I had written a simple tutorial to understand FastAPI and API basics. Do read the post if you want to understand FastAPI basics.
So, here I will try to create an Image detection API. As for how to pass the Image data to the API? The idea is — What is an image but a string? An image is just made up of bytes, and we can encode these bytes as a string. We will use the base64 string representation, which is a popular way to get binary data to ASCII characters. And, we will pass this string representation to give an image to our API.
A. Some Image Basics: What is Image, But a String? So, let us first see how we can convert an Image to a String. We read the binary data from an image file using the ‘rb’ flag and turn it into a base64 encoded data representation using the base64.b64encode function. We then use the decode to utf-8 function to get the base encoded data into human-readable characters. Don’t worry if it doesn’t make a lot of sense right now. Just understand that any data is binary, and we can convert binary data to its string representation using a series of steps.
As a simple example, if I have a simple image like below, we can convert it to a string using:
import base64 with open(&amp;#34;sample_images/dog_with_ball.jpg&amp;#34;, &amp;#34;rb&amp;#34;) as image_file: base64str = base64.b64encode(image_file.read()).decode(&amp;#34;utf-8&amp;#34;) Here I have got a string representation of a file named dog_with_ball.png on my laptop.
Great, we now have a string representation of an image. And, we can send this string representation to our FastAPI. But we also need to have a way to read an image back from its string representation. After all, our image detection API using PyTorch and any other package needs to have an image object that they can predict, and those methods don’t work on a string.
So here is a way to create a PIL image back from an image’s base64 string. Mostly we just do the reverse steps in the same order. We encode in ‘utf-8’ using .encode. We then use base64.b64decode to decode to bytes. We use these bytes to create a bytes object using io.BytesIO and use Image.open to open this bytes IO object as a PIL image, which can easily be used as an input to my PyTorch prediction code.*** Again simply, it is just a way to convert base64 image string to an actual image.***
import base64 import io from PIL import Image def base64str_to_PILImage(base64str): base64_img_bytes = base64str.encode(&amp;#39;utf-8&amp;#39;) base64bytes = base64.b64decode(base64_img_bytes) bytesObj = io.BytesIO(base64bytes) img = Image.open(bytesObj) return img So does this function work? Let’s see for ourselves. We can use just the string to get back the image.
And we have our happy dog back again. Looks better than the string.
B. Writing the Actual FastAPI code So, as now we understand that our API can get an image as a string from our user, let’s create an object detection API that makes use of this image as a string and outputs the bounding boxes for the object with the object classes as well.
Here, I will be using a Pytorch pre-trained fasterrcnn_resnet50_fpn detection model from the torchvision.models for object detection, which is trained on the COCO dataset to keep the code simple, but one can use any model. You can look at these posts if you want to train your custom image classification or image detection model using Pytorch.
Below is the full code for the FastAPI. Although it may look long, we already know all the parts. In this code, we essentially do the following steps:
 Create our fast API app using the FastAPI() constructor.
 Load our model and the classes it was trained on. I got the list of classes from the PyTorch docs.
 We also defined a new class Input , which uses a library called pydantic to validate the input data types that we will get from the API end-user. Here the end-user gives the base64str and some score threshold for object detection prediction.
 We add a function called base64str_to_PILImage which does just what it is named.
 And we write a predict function called get_predictionbase64 which returns a dict of bounding boxes and classes using a base64 string representation of an image and a threshold as an input. We also add @app.put(“/predict”) on top of this function to define our endpoint. If you need to understand put and endpoint refer to my previous post on FastAPI.
  from fastapi import FastAPI from pydantic import BaseModel import torchvision from torchvision import transforms import torch from torchvision.models.detection.faster_rcnn import FastRCNNPredictor from PIL import Image import numpy as np import cv2 import io, json import base64 app = FastAPI() # load a pre-trained Model and convert it to eval mode. # This model loads just once when we start the API. model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True) COCO_INSTANCE_CATEGORY_NAMES = [ &amp;#39;__background__&amp;#39;, &amp;#39;person&amp;#39;, &amp;#39;bicycle&amp;#39;, &amp;#39;car&amp;#39;, &amp;#39;motorcycle&amp;#39;, &amp;#39;airplane&amp;#39;, &amp;#39;bus&amp;#39;, &amp;#39;train&amp;#39;, &amp;#39;truck&amp;#39;, &amp;#39;boat&amp;#39;, &amp;#39;traffic light&amp;#39;, &amp;#39;fire hydrant&amp;#39;, &amp;#39;N/A&amp;#39;, &amp;#39;stop sign&amp;#39;, &amp;#39;parking meter&amp;#39;, &amp;#39;bench&amp;#39;, &amp;#39;bird&amp;#39;, &amp;#39;cat&amp;#39;, &amp;#39;dog&amp;#39;, &amp;#39;horse&amp;#39;, &amp;#39;sheep&amp;#39;, &amp;#39;cow&amp;#39;, &amp;#39;elephant&amp;#39;, &amp;#39;bear&amp;#39;, &amp;#39;zebra&amp;#39;, &amp;#39;giraffe&amp;#39;, &amp;#39;N/A&amp;#39;, &amp;#39;backpack&amp;#39;, &amp;#39;umbrella&amp;#39;, &amp;#39;N/A&amp;#39;, &amp;#39;N/A&amp;#39;, &amp;#39;handbag&amp;#39;, &amp;#39;tie&amp;#39;, &amp;#39;suitcase&amp;#39;, &amp;#39;frisbee&amp;#39;, &amp;#39;skis&amp;#39;, &amp;#39;snowboard&amp;#39;, &amp;#39;sports ball&amp;#39;, &amp;#39;kite&amp;#39;, &amp;#39;baseball bat&amp;#39;, &amp;#39;baseball glove&amp;#39;, &amp;#39;skateboard&amp;#39;, &amp;#39;surfboard&amp;#39;, &amp;#39;tennis racket&amp;#39;, &amp;#39;bottle&amp;#39;, &amp;#39;N/A&amp;#39;, &amp;#39;wine glass&amp;#39;, &amp;#39;cup&amp;#39;, &amp;#39;fork&amp;#39;, &amp;#39;knife&amp;#39;, &amp;#39;spoon&amp;#39;, &amp;#39;bowl&amp;#39;, &amp;#39;banana&amp;#39;, &amp;#39;apple&amp;#39;, &amp;#39;sandwich&amp;#39;, &amp;#39;orange&amp;#39;, &amp;#39;broccoli&amp;#39;, &amp;#39;carrot&amp;#39;, &amp;#39;hot dog&amp;#39;, &amp;#39;pizza&amp;#39;, &amp;#39;donut&amp;#39;, &amp;#39;cake&amp;#39;, &amp;#39;chair&amp;#39;, &amp;#39;couch&amp;#39;, &amp;#39;potted plant&amp;#39;, &amp;#39;bed&amp;#39;, &amp;#39;N/A&amp;#39;, &amp;#39;dining table&amp;#39;, &amp;#39;N/A&amp;#39;, &amp;#39;N/A&amp;#39;, &amp;#39;toilet&amp;#39;, &amp;#39;N/A&amp;#39;, &amp;#39;tv&amp;#39;, &amp;#39;laptop&amp;#39;, &amp;#39;mouse&amp;#39;, &amp;#39;remote&amp;#39;, &amp;#39;keyboard&amp;#39;, &amp;#39;cell phone&amp;#39;, &amp;#39;microwave&amp;#39;, &amp;#39;oven&amp;#39;, &amp;#39;toaster&amp;#39;, &amp;#39;sink&amp;#39;, &amp;#39;refrigerator&amp;#39;, &amp;#39;N/A&amp;#39;, &amp;#39;book&amp;#39;, &amp;#39;clock&amp;#39;, &amp;#39;vase&amp;#39;, &amp;#39;scissors&amp;#39;, &amp;#39;teddy bear&amp;#39;, &amp;#39;hair drier&amp;#39;, &amp;#39;toothbrush&amp;#39; ] model.eval() # define the Input class class Input(BaseModel): base64str : str threshold : float def base64str_to_PILImage(base64str): base64_img_bytes = base64str.encode(&amp;#39;utf-8&amp;#39;) base64bytes = base64.b64decode(base64_img_bytes) bytesObj = io.BytesIO(base64bytes) img = Image.open(bytesObj) return img @app.put(&amp;#34;/predict&amp;#34;) def get_predictionbase64(d:Input): &amp;#39;&amp;#39;&amp;#39; FastAPI API will take a base 64 image as input and return a json object &amp;#39;&amp;#39;&amp;#39; # Load the image img = base64str_to_PILImage(d.base64str) # Convert image to tensor transform = transforms.Compose([transforms.ToTensor()]) img = transform(img) # get prediction on image pred = model([img]) pred_class = [COCO_INSTANCE_CATEGORY_NAMES[i] for i in list(pred[0][&amp;#39;labels&amp;#39;].numpy())] pred_boxes = [[(float(i[0]), float(i[1])), (float(i[2]), float(i[3]))] for i in list(pred[0][&amp;#39;boxes&amp;#39;].detach().numpy())] pred_score = list(pred[0][&amp;#39;scores&amp;#39;].detach().numpy()) pred_t = [pred_score.index(x) for x in pred_score if x &amp;gt; d.threshold][-1] pred_boxes = pred_boxes[:pred_t&#43;1] pred_class = pred_class[:pred_t&#43;1] return {&amp;#39;boxes&amp;#39;: pred_boxes, &amp;#39;classes&amp;#39; : pred_class} C. Local Before Global: Test the FastAPI code locally Before we move on to AWS, let us check if the code works on our local machine. We can start the API on our laptop using:
uvicorn fastapiapp:app --reload  The above means that your API is now running on your local server, and the &amp;ndash;reload flag indicates that the API gets updated automatically when you change the fastapiapp.py file. This is very helpful while developing and testing, but you should remove this &amp;ndash;reload flag when you put the API in production.
You should see something like:
You can now try to access this API and see if it works using the requests module:
import requests,json payload = json.dumps({ &amp;#34;base64str&amp;#34;: base64str, &amp;#34;threshold&amp;#34;: 0.5 }) response = requests.put(&amp;#34;[http://127.0.0.1:8000/predict](http://127.0.0.1:8000/predict)&amp;#34;,data = payload) data_dict = response.json() And so we get our results using the API. This image contains a dog and a sports ball. We also have corner 1 (x1,y1) and corner 2 (x2,y2) coordinates of our bounding boxes.
D. Lets Visualize Although not strictly necessary, we can visualize how the results look in our Jupyter notebook:
from PIL import Image import numpy as np import cv2 import matplotlib.pyplot as plt def PILImage_to_cv2(img): return np.asarray(img) def drawboundingbox(img, boxes,pred_cls, rect_th=2, text_size=1, text_th=2): img = PILImage_to_cv2(img) class_color_dict = {} #initialize some random colors for each class for better looking bounding boxes for cat in pred_cls: class_color_dict[cat] = [random.randint(0, 255) for _ in range(3)] for i in range(len(boxes)): cv2.rectangle(img, (int(boxes[i][0][0]), int(boxes[i][0][1])), (int(boxes[i][1][0]),int(boxes[i][1][1])), color=class_color_dict[pred_cls[i]], thickness=rect_th) cv2.putText(img,pred_cls[i], (int(boxes[i][0][0]), int(boxes[i][0][1])), cv2.FONT_HERSHEY_SIMPLEX, text_size, class_color_dict[pred_cls[i]],thickness=text_th) # Write the prediction class plt.figure(figsize=(20,30)) plt.imshow(img) plt.xticks([]) plt.yticks([]) plt.show() img = Image.open(&amp;#34;sample_images/dog_with_ball.jpg&amp;#34;) drawboundingbox(img, data_dict[&amp;#39;boxes&amp;#39;], data_dict[&amp;#39;classes&amp;#39;]) Here is the output:
Here you will note that I got the image from the local file system, and that sort of can be considered as cheating as we don’t want to save every file that the user sends to us through a web UI. We should have been able to use the same base64string object that we also had to create this image. Right?
Not to worry, we could do that too. Remember our base64str_to_PILImage function? We could have used that also.
img = base64str_to_PILImage(base64str) drawboundingbox(img, data_dict[&#39;boxes&#39;], data_dict[&#39;classes&#39;])  That looks great. We have our working FastAPI, and we also have our amazon instance. We can now move on to Deployment.
3. Deployment on Amazon ec2 Till now, we have created an AWS instance and, we have also created a FastAPI that takes as input a base64 string representation of an image and returns bounding boxes and the associated class. But all the FastAPI code still resides in our local machine. How do we put it on the ec2 server? And run predictions on the cloud.
A. Install Docker We will deploy our app using docker, as is suggested by the fastAPI creator himself. I will try to explain how docker works as we go. The below part may look daunting but it just is a series of commands and steps. So stay with me.
We can start by installing docker using:
sudo apt-get update sudo apt install docker.io  We then start the docker service using:
sudo service docker start  B. Creating the folder structure for docker └── dockerfastapi ├── Dockerfile ├── app │ └── main.py └── requirements.txt  Here dockerfastapi is our project’s main folder. And here are the different files in this folder:
i. requirements.txt: Docker needs a file, which tells it which all libraries are required for our app to run. Here I have listed all the libraries I used in my Fastapi API.
numpy opencv-python matplotlib torchvision torch fastapi pydantic  ii. Dockerfile: The second file is Dockerfile.
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.7 COPY ./app /app COPY requirements.txt . RUN pip --no-cache-dir install -r requirements.txt  How Docker works?: You can skip this section, but it will help to get some understanding of how docker works.
The dockerfile can be thought of something like a sh file,which contains commands to create a docker image that can be run in a container. One can think of a docker image as an environment where everything like Python and Python libraries is installed. A container is a unit which is just an isolated box in our system that uses a dockerimage. The advantage of using docker is that we can create multiple docker images and use them in multiple containers. For example, one image might contain python36, and another can contain python37. And we can spawn multiple containers in a single Linux server.
Our Dockerfile contains a few things:
 FROM command: Here the first line FROM specifies that we start with tiangolo’s (FastAPI creator) Docker image. As per his site: “This image has an “auto-tuning” mechanism included so that you can just add your code and get that same high performance automatically. And without making sacrifices”. What we are doing is just starting from an image that installs python3.7 for us along with some added configurations for uvicorn and gunicorn ASGI servers and a start.sh file for ASGI servers automatically. For adventurous souls, particularly commandset1 and commandset2 get executed through a sort of a daisy-chaining of commands.
 COPY command: We can think of a docker image also as a folder that contains files and such. Here we copy our app folder and the requirements.txt file, which we created earlier to our docker image.
 RUN Command: We run pip install command to install all our python dependencies using the requirements.txt file that is now on the docker image.
  iii. main.py: This file contains the fastapiapp.py code we created earlier. Remember to keep the name of the file main.py only.
C. Docker Build We have got all our files in the required structure, but we haven’t yet used any docker command. We will first need to build an image containing all dependencies using Dockerfile.
We can do this simply by:
sudo docker build -t myimage .  This downloads, copies and installs some files and libraries from tiangolo’s image and creates an image called myimage. This myimage has python37 and some python packages as specified by requirements.txt file.
We will then just need to start a container that runs this image. We can do this using:
sudo docker run -d --name mycontainer -p 80:80 myimage  This will create a container named mycontainer which runs our docker image myimage. The part 80:80 connects our docker container port 80 to our Linux machine port 80.
And actually that’s it. At this point, you should be able to open the below URL in your browser.
# &amp;lt;IPV4 public IP&amp;gt;/docs URL: 18.237.28.174/docs  And we can check our app programmatically using:
payload = json.dumps({ &amp;#34;base64str&amp;#34;: base64str, &amp;#34;threshold&amp;#34;: 0.5 }) response = requests.put(&amp;#34;[http://18.237.28.174/predict](http://18.237.28.174/predict)&amp;#34;,data = payload) data_dict = response.json() print(data_dict) &amp;gt; # Yup, finally our API is deployed.
D. Troubleshooting as the real world is not perfect All the above was good and will just work out of the box if you follow the exact instructions, but the real world doesn’t work like that. You will surely get some errors along the way and would need to debug your code. So to help you with that, some docker commands may come handy:
 Logs: When we ran our container using sudo docker run we don’t get a lot of info, and that is a big problem when you are debugging. You can see the real-time logs using the below command. If you see an error here, you will need to change your code and build the image again.   sudo docker logs -f mycontainer   Starting and Stopping Docker: Sometimes, it might help just to restart your docker. In that case, you can use:   sudo service docker stop sudo service docker start   Listing images and containers: Working with docker, you will end up creating images and containers, but you won’t be able to see them in the working directory. You can list your images and containers using:   sudo docker container ls sudo docker image ls   Deleting unused docker images or containers: You might need to remove some images or containers as these take up a lot of space on the system. Here is how you do that.   # the prune command removes the unused containers and images sudo docker system prune # delete a particular container sudo docker rm mycontainer # remove myimage sudo docker image rm myimage # remove all images sudo docker image prune — all   Checking localhost:The Linux server doesn’t have a browser, but we can still see the browser output though it’s a little ugly:   curl localhost   Develop without reloading image again and again: For development, it’s useful to be able just to change the contents of the code on our machine and test it live, without having to build the image every time. In that case, it’s also useful to run the server with live auto-reload automatically at every code change. Here, we use our app directory on our Linux machine, and we replace the default (/start.sh) with the development alternative /start-reload.sh during development. After everything looks fine, we can build our image again run it inside the container.   sudo docker run -d -p 80:80 -v $(pwd):/app myimage /start-reload.sh  If this doesn’t seem sufficient, adding here a docker cheat sheet containing useful docker commands:
4. An End to End App with UI We are done here with our API creation, but we can also create a UI based app using Streamlit using our FastAPI API. This is not how you will do it in a production setting (where you might have developers making apps using react, node.js or javascript)but is mostly here to check the end-to-end flow of how to use an image API. I will host this barebones Streamlit app on local rather than the ec2 server, and it will get the bounding box info and classes from the FastAPI API hosted on ec2.
If you need to learn more about how streamlit works, you can check out this post. Also, if you would want to deploy this streamlit app also to ec2, here is a tutorial again.
Here is the flow of the whole app with UI and FastAPI API on ec2:
Project Architecture
The most important problems we need to solve in our streamlit app are:
How to get an image file from the user using Streamlit? A. Using File uploader: We can use the file uploader using:
bytesObj = st.file_uploader(“Choose an image file”) The next problem is, what is this bytesObj we get from the streamlit file uploader? In streamlit, we will get a bytesIO object from the file_uploader and we will need to convert it to base64str for our FastAPI app input. This can be done using:
def bytesioObj_to_base64str(bytesObj): return base64.b64encode(bytesObj.read()).decode(&amp;#34;utf-8&amp;#34;) base64str = bytesioObj_to_base64str(bytesObj) B. Using URL: We can also get an image URL from the user using text_input.
url = st.text_input(‘Enter URL’) We can then get image from URL in base64 string format using the requests module and base64 encode and utf-8 decode:
def ImgURL_to_base64str(url): return base64.b64encode(requests.get(url).content).decode(&amp;#34;utf-8&amp;#34;) base64str = ImgURL_to_base64str(url) And here is the complete code of our Streamlit app. You have seen most of the code in this post already.
import streamlit as st import base64 import io import requests,json from PIL import Image import cv2 import numpy as np import matplotlib.pyplot as plt import requests import random # use file uploader object to recieve image # Remember that this bytes object can be used only once def bytesioObj_to_base64str(bytesObj): return base64.b64encode(bytesObj.read()).decode(&amp;#34;utf-8&amp;#34;) # Image conversion functions def base64str_to_PILImage(base64str): base64_img_bytes = base64str.encode(&amp;#39;utf-8&amp;#39;) base64bytes = base64.b64decode(base64_img_bytes) bytesObj = io.BytesIO(base64bytes) img = Image.open(bytesObj) return img def PILImage_to_cv2(img): return np.asarray(img) def ImgURL_to_base64str(url): return base64.b64encode(requests.get(url).content).decode(&amp;#34;utf-8&amp;#34;) def drawboundingbox(img, boxes,pred_cls, rect_th=2, text_size=1, text_th=2): img = PILImage_to_cv2(img) class_color_dict = {} #initialize some random colors for each class for better looking bounding boxes for cat in pred_cls: class_color_dict[cat] = [random.randint(0, 255) for _ in range(3)] for i in range(len(boxes)): cv2.rectangle(img, (int(boxes[i][0][0]), int(boxes[i][0][1])), (int(boxes[i][1][0]),int(boxes[i][1][1])), color=class_color_dict[pred_cls[i]], thickness=rect_th) cv2.putText(img,pred_cls[i], (int(boxes[i][0][0]), int(boxes[i][0][1])), cv2.FONT_HERSHEY_SIMPLEX, text_size, class_color_dict[pred_cls[i]],thickness=text_th) plt.figure(figsize=(20,30)) plt.imshow(img) plt.xticks([]) plt.yticks([]) plt.show() st.markdown(&amp;#34;&amp;lt;h1&amp;gt;Our Object Detector App using FastAPI&amp;lt;/h1&amp;gt;&amp;lt;br&amp;gt;&amp;#34;, unsafe_allow_html=True) bytesObj = st.file_uploader(&amp;#34;Choose an image file&amp;#34;) st.markdown(&amp;#34;&amp;lt;center&amp;gt;&amp;lt;h2&amp;gt;or&amp;lt;/h2&amp;gt;&amp;lt;/center&amp;gt;&amp;#34;, unsafe_allow_html=True) url = st.text_input(&amp;#39;Enter URL&amp;#39;) if bytesObj or url: # In streamlit we will get a bytesIO object from the file_uploader # and we convert it to base64str for our FastAPI if bytesObj: base64str = bytesioObj_to_base64str(bytesObj) elif url: base64str = ImgURL_to_base64str(url) # We will also create the image in PIL Image format using this base64 str # Will use this image to show in matplotlib in streamlit img = base64str_to_PILImage(base64str) # Run FastAPI payload = json.dumps({ &amp;#34;base64str&amp;#34;: base64str, &amp;#34;threshold&amp;#34;: 0.5 }) response = requests.put(&amp;#34;http://18.237.28.174/predict&amp;#34;,data = payload) data_dict = response.json() st.markdown(&amp;#34;&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;App Result&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;&amp;#34;, unsafe_allow_html=True) drawboundingbox(img, data_dict[&amp;#39;boxes&amp;#39;], data_dict[&amp;#39;classes&amp;#39;]) st.pyplot() st.markdown(&amp;#34;&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;FastAPI Response&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;&amp;lt;br&amp;gt;&amp;#34;, unsafe_allow_html=True) st.write(data_dict) We can run this streamlit app in local using:
streamlit run streamlitapp.py  And we can see our app running on our localhost:8501. Works well with user-uploaded images as well as URL based images. Here is a cat image for some of you cat enthusiasts as well.
 So that’s it. We have created a whole workflow here to deploy image detection models through FastAPI on ec2 and utilizing those results in Streamlit. I hope this helps your woes around deploying models in production. You can find the code for this post as well as all my posts at my GitHub repository.
Let me know if you like this post and if you would like to include Docker or FastAPI or Streamlit in your day to day deployment needs. I am also looking to create a much detailed post on Docker so follow me up to stay tuned with my writing as well. Details below.
Continue Learning If you want to learn more about building and putting a Machine Learning model in production, this course on AWS for implementing Machine Learning applications promises just that.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog
Also, a small disclaimer — There might be some affiliate links in this post to relevant resources, as sharing knowledge is never a bad idea.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>A Layman’s Guide for Data Scientists to create APIs in minutes</title>
      <link>https://mlwhiz.com/blog/2020/06/06/fastapi_for_data_scientists/</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2020/06/06/fastapi_for_data_scientists/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/fastapi_for_data_scientists/main.png"></media:content>
      

      
      <description>Have you ever been in a situation where you want to provide your model predictions to a frontend developer without them having access to model related code? Or has a developer ever asked you to create an API that they can use? I have faced this a lot.
As Data Science and Web developers try to collaborate, API’s become an essential piece of the puzzle to make codes as well as skills more modular.</description>

      <content:encoded>  
        
        <![CDATA[  Have you ever been in a situation where you want to provide your model predictions to a frontend developer without them having access to model related code? Or has a developer ever asked you to create an API that they can use? I have faced this a lot.
As Data Science and Web developers try to collaborate, API’s become an essential piece of the puzzle to make codes as well as skills more modular. In fact, in the same way, that a data scientist can’t be expected to know much about Javascript or nodeJS, a frontend developer should be able to get by without knowing any Data Science Language. And APIs do play a considerable role in this abstraction.
But, APIs are confusing. I myself have been confused a lot while creating and sharing them with my development teams who talk in their API terminology like GET request, PUT request, endpoint, Payloads, etc.
This post will be about simplifying and understanding how APIs work, explaining some of the above terms, and creating an API using the excellent API building framework called FastAPI, which makes creating APIs a breeze.
What is an API? Before we go any further, we need to understand what an API is. According to Wikipedia:
 An application programming interface (API) is a computing interface which defines interactions between multiple software intermediaries. It defines the kinds of calls or requests that can be made, how to make them, the data formats that should be used, the conventions to follow, etc.
 The way I like to understand an API is that it’s an “online function,” a function that I can call online.
For example:
I can have a movie API, which returns me names of drama movies when I pass the “animation” genre as input.
The advantage of using such a sort of mechanism is that the API user doesn’t get access to the whole dataset or source code and yet they can get all the information they need. This is how many services on the internet like Amazon Rekognition, which is an image and video API, or Google Natural Language API, which is an NLP API works. They provide us access to some great functions without letting us have the source code, which is often valuable and kept hidden. For example, I can send an image to Amazon Rekognition API, and it can provide me with Face detection and Analysis.
For example, here is a free API floated by Open Movie DB, which lets us search for movies using parameters:
[http://www.omdbapi.com/?i=tt3896198&amp;amp;apikey=9ea43e94](http://www.omdbapi.com/?i=tt3896198&amp;amp;apikey=9ea43e94)  Here I provided the IMDB id for the movie Guardians of the Galaxy 2, using the i parameter for the API. If you open this link in your browser, you will see the whole information of the movie as per the Open Movie Database
Output from OMDB
But before we go any further, let’s understand some terms:
 Endpoint: In the above API call, the endpoint is : http://www.omdbapi.com/ . Simply this is the location of where the function code is running.
 API Access Key: Most of the public APIs will have some access key, which you can request. For OMDB API, I had to register and get the API key which is 9ea43e94.
 ? Operator:This operator is used to specify the parameters we want to send to the API or our “online function.” Here we give two params to our API i.e., IMDB movie ID and API Access Key using the ? operator. Since there are multiple inputs, we use &amp;amp; operator also.
  Why FastAPI? “If you’re looking to learn one modern framework for building REST APIs, check out FastAPI […] It’s fast, easy to use and easy to learn […]” — spaCy creators
While Python has many frameworks to build APIs, the most common being Flask and Tornado, FastAPI is much better than available alternatives in its ease of usage as it seems much more pythonic in comparison with Flask.
Also, FastAPI is fast. As the Github docs say, “Very high performance, on par with NodeJS and Go.” We can also check the latency benchmarks for ourselves.
That is around a speedup by a factor of 2 when compared to Flask and that too without a lot of code change. This means a huge deal when it comes to building an API that can serve millions of customers as it can reduce production efforts and also use less expensive hardware to serve.
So enough of comparison and talk, let’s try to use FastAPI to create our API.
How to write an API with FastAPI? One of the most common use cases for Data Science is how to create an API for getting a model’s prediction? Let us assume that we have a Titanic Survival model in place that predicts if a person will survive or not. And, it needs a person’s age and sex as input params to predict. We will create this API using FastAPI in two ways: GET and PUT. Don’t worry; I will explain each as we go.
What is GET? — In a GET request, we usually try to retrieve data using query parameters that are embedded in the query string itself. For example, in the OMDB API, we use the GET request to specify the movie id and access key as part of the query itself.
What is PUT? — An alternative to the GET request is the PUT request, where we send parameters using a payload, as we will see in the second method. The payload is not part of the query string, and thus PUT is more secure. It will become more clear when you see the second part.
But before we go any further, we need to install FastAPI and uvicorn ASGI server with:
pip install fastapi pip install uvicorn  1. The GET Way: A simple FastAPI method to writing a GET API for our titanic model use case is as follows:
from fastapi import FastAPI app = FastAPI() @app.get(&amp;quot;/predict&amp;quot;) def predict_complex_model(age: int,sex:str): # Assume a big and complex model here. For this test I am using a simple rule based model if age&amp;lt;10 or sex==&#39;F&#39;: return {&#39;survived&#39;:1} else: return {&#39;survived&#39;:0}  Save the above code in a file named fastapiapp.py and then you can run it using the below command on terminal.
$ uvicorn fastapiapp:app --reload  The above means that your API is now running on your server, and the &amp;ndash;reload flag indicates that the API gets updated automatically when you change the fastapiapp.py file. This is very helpful while developing and testing, but you should remove this &amp;ndash;reload flag when you put the API in production. Now you can visit the below path in your browser, and you will get the prediction results:
[http://127.0.0.1:8000/predict?age=10&amp;amp;sex=M](http://127.0.0.1:8000/predict?age=10&amp;amp;sex=M)  What happens is as you hit the command in your browser, it calls the http://127.0.0.1:8000/predict endpoint which in turn calls the associated method predict_complex_model with the with params age=10 and sex=&amp;rsquo;M&amp;rsquo;
So, it allows us to use our function from a browser, but that’s still not very helpful. Your developer friend needs to use your predict function to show output on a frontend website. How can you provide him with access to this function?
It is pretty simple. If your developer friend also uses Python, for example, he can use the requests module like below:
import requests age = 15 sex = &amp;quot;F&amp;quot; response = requests.get(f&amp;quot;[http://127.0.0.1:8000/predict?age={age}&amp;amp;sex={](http://127.0.0.1:8000/predict?age=10&amp;amp;sex=M)sex}&amp;quot;) output = response.json()  So we can get the output from the running API(on the server) into our Python Program. A Javascript user would use Javascript Request Library, and a nodeJS developer will use something similar to do this in nodeJS. We will just need to provide them with the endpoint and parameters required.
To test your API, you could also go to the:
[http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs)  Where you will find a GUI way to test your API.
But as we said earlier, THIS IS NOT SECURE as GET parameters are passed via URL. This means that parameters get stored in server logs and browser history. This is not intended. Further, this toy example just had two input parameters, so we were able to do it this way, think of a case where we need to provide many parameters to our predict function.
In such a case or I dare say in most of the cases, we use the PUT API.
2. The PUT Way Using the PUT API, we can call any function by providing a payload to the function. A payload is nothing but a JSON dictionary of input parameters that doesn’t get appended to the query string and is thus much more secure than GET.
Here is the minimal example where we do that same thing as before using PUT. We just change the content of fastapiapp.py to:
from fastapi import FastAPI from pydantic import BaseModel class Input(BaseModel): age : int sex : str app = FastAPI() [@app](http://twitter.com/app).put(&amp;quot;/predict&amp;quot;) def predict_complex_model(d:Input): if d.age&amp;lt;10 or d.sex==&#39;F&#39;: return {&#39;survived&#39;:1} else: return {&#39;survived&#39;:0}  note that we use app.put here in place of app.get previously. We also needed to provide a new class Input , which uses a library called pydantic to validate the input data types that we will get from the API end-user while previously in GET, we validated the inputs using the function parameter list. Also, this time you won’t be able to see your content using a URL on the web. For example, using the browser to point to the endpoint location gives:
So, we can check using the programmatic way using requests in Python again:
import requests,json payload = json.dumps({ &amp;quot;age&amp;quot;: 10, &amp;quot;sex&amp;quot;: &amp;quot;F&amp;quot; }) response = requests.put(&amp;quot;[http://127.0.0.1:8000/predict](http://127.0.0.1:8000/predict)&amp;quot;,data = payload) response.json()  Notice that we use requests.put here and we provide the payload using the data param in the requests.put function and we also make use of json library to convert our payload to JSON from a dict object.
We could also have used the GUI way as before using:
[http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs)  And, we are done with creating our API. It was simple for a change.
FastAPI makes the API creation, which used to be one of the dreaded parts of the Data Science process, much more intuitive, easy, and Fast.
You can find the code for this post as well as all my posts at my GitHub repository.
Continue Learning If you want to learn more about building and putting a Machine Learning model in production, this course on AWS for implementing Machine Learning applications promises just that.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog
Also, a small disclaimer — There might be some affiliate links in this post to relevant resources, as sharing knowledge is never a bad idea.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Bamboolib — Learn and use Pandas without Coding</title>
      <link>https://mlwhiz.com/blog/2020/02/23/bamboo/</link>
      <pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2020/02/23/bamboo/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/bamboo/main.gif"></media:content>
      

      
      <description>Have you ever been frustrated by doing data exploration and manipulation with Pandas?
With so many ways to do the same thing, I get spoiled by choice and end up doing absolutely nothing.
And then for a beginner, the problem is just the opposite as in how to do even a simple thing is not appropriately documented. Understanding Pandas syntax can be a hard thing for the uninitiated.
So what should one do?</description>

      <content:encoded>  
        
        <![CDATA[  Have you ever been frustrated by doing data exploration and manipulation with Pandas?
With so many ways to do the same thing, I get spoiled by choice and end up doing absolutely nothing.
And then for a beginner, the problem is just the opposite as in how to do even a simple thing is not appropriately documented. Understanding Pandas syntax can be a hard thing for the uninitiated.
So what should one do?
The creators of Bamboolib had an idea that solved this problem — Why not add a GUI to pandas?
The idea is to “Learn and use pandas without coding.” Now the idea may have started simple, but I found Bamboolib to be so much more when it comes to data exploration and data cleaning.
This post is about setting up and using Bamboolib for your data.
Installing Bamboolib Installation is pretty simple with:
pip install bamboolib  To get bamboolib to work with Jupyter and Jupyterlab, I will need to install some additional extensions. Since I like working with Jupyter Notebook, I installed the Jupyter Notebook extensions via the following command:
jupyter nbextension enable --py qgrid --sys-prefix jupyter nbextension enable --py widgetsnbextension --sys-prefix jupyter nbextension install --py bamboolib --sys-prefix jupyter nbextension enable --py bamboolib --sys-prefix  If you want the process to install for Jupyterlab, here is the process.
Verifying Bamboolib Installation To check if everything works as intended, you can open up a Jupyter notebook, and execute the following commands:
import bamboolib as bam import pandas as pd data = pd.read_csv(bam.titanic_csv) bam.show(data)  The first time you run this command, you will be asked to provide a Licence key. The key is needed if you want to use bamboolib over your own data. Since I wanted to use bamboolib for my own project, I got the key from one of Bamboolib founder Tobias Krabel who was gracious enough to provide it to me to review. You can, however, buy your own from https://bamboolib.8080labs.com/pricing/. If you want to see the library in action before purchasing the key, you can try out the live demo.
Once bamboolib is activated, the fun part starts. You can see the output of Bamboolib like this. You can choose to play with the options it provides.
So let’s try Bamboolib with our exciting data source, we all have seen Titanic data aplenty.
To do this, I will be using the Mobile Price Classification data from Kaggle. In this problem, we have to create a classifier that predicts the price range of mobile phones based on the features of a mobile phone. So lets start this up with Bamboolib.
train = pd.read_csv(&amp;quot;../Downloads/mobile-price-classification/train.csv&amp;quot;) bam.show(train)  We need to do a simple call to bam.show(train) to start Bamboolib.
Easy Data Exploration Bamboolib helps a great bit for Exploratory Data analysis. Now, Data exploration is an integral part of any data science pipeline. And writing the whole code for data exploration and creating all the charts is complicated and needs a lot of patience and effort to get right. I will admit sometimes I do slack off and am not able to give enough time for it.
Bamboolib makes the whole Data Exploration exercise a breeze.
For example. Here is a glimpse of your data, once you click on Visualize Dataframe.
You get to see the missing values in each column, as well as the number of unique values and a few instances.
But that’s not all. We can get univariate column-level statistics and information, as well. So lets get some information about our target variable — Price Range.
Here we deep-dive into the target column and can see univariate column statistics as well as the most important predictors for our target column. It looks like RAM and battery power are the most important predictors for the price range. Nice.
Let’s take a look at how RAM influences the price range. We can use bivariate plots for this.
Getting such beautiful plots with standard Python libraries like seaborn or plotly usually takes some amount of code. Although plotly_express helps a lot in this by giving simple functions for most charts, Bamboolib creates a lot of important charts for us automatically.
Above, we can see that as RAM increases, the price range increases. We also see a weighted F1 Score of 0.676 for the RAM Variable. You can do this for every variable in your dataset and try to get a sense of your data.
One can also export the code of these charts to use in some presentation/ export these charts as PNG.
To do this just copy the code fragment that shows above each graph. For example, you can copy and run the code to see price_range vs ram, and you will see an option to download these graphs as PNG. In the backend, they are all plotly graphs.
bam.plot(train, &#39;price_range&#39;, &#39;ram&#39;)  GUI Based Data Munging Have you ever faced the problem of forgetting pandas code to do something and going to stack overflow and getting lost in various threads? If yes, here is a Minimal Pandas refresher. Or you can use Bamboolib as per your preference.
Bamboolib makes it so easy to do things and not get lost in the code. You can drop columns, filter, sort, join, groupby, pivot, melt (Mostly everything you would like to do with a dataset) all by using the simple GUI provided.
For example, here I am dropping the missing values from the target column, if any. You can add multiple conditions, as well.
The best part is that it also gives us the code. Here the code to drop the missing values gets populated in the cell automatically.
train = train.loc[train[&#39;price_range&#39;].notna()] train.index = pd.RangeIndex(len(train))  It works just like Microsoft Excel for business users while providing all the code to slice and dice the data for the advanced ones. You can try to play with the other options to get familiar.
Here is another example of how to use groupby. It is actually pretty intuitive.
The code for this gets populated as:
train = train.groupby([&#39;price_range&#39;]).agg({&#39;battery_power&#39;: [&#39;mean&#39;], &#39;clock_speed&#39;: [&#39;std&#39;]}) train.columns = [&#39;_&#39;.join(multi_index) for multi_index in train.columns.ravel()] train = train.reset_index()  You can see how it takes care of multi_index as well as ravel for us, which are a bit difficult to understand and deal with.
Conclusion The GUI of Bamboolib is pretty intuitive, and I found it an absolute joy to work with. The project is still in its beginnings, but what a beginning it has been.
I can surely say that this library is pretty useful for beginners who want to learn to code in Pandas as it provides them access to all the necessary functions without being bothersome.
While I will still focus on understanding the basics of Pandas and would advise looking at the output of Bamboolib to learn Pandas as well, I would like to see how the adoption of Bamboolib happens in the future.
Let me know your thoughts as well in the comments.
If you want to learn more about Pandas, I would like to call out an excellent course on Introduction to Data Science in Python from the University of Michigan or check out my previous post on how to work with Pandas.
I am going to be writing more of such posts in the future too. Let me know what you think about them. Follow me up at Medium or Subscribe to my blog
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Share your Projects even more easily with this New Streamlit Feature</title>
      <link>https://mlwhiz.com/blog/2020/02/23/streamlitrec/</link>
      <pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2020/02/23/streamlitrec/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/streamlitrec/main.png"></media:content>
      

      
      <description>A Machine Learning project is never really complete if we don’t have a good way to showcase it.
While in the past, a well-made visualization or a small PPT used to be enough for showcasing a data science project, with the advent of dashboarding tools like RShiny and Dash, a good data scientist needs to have a fair bit of knowledge of web frameworks to get along.
As Sten Sootla says in his satire piece which I thoroughly enjoyed:</description>

      <content:encoded>  
        
        <![CDATA[  A Machine Learning project is never really complete if we don’t have a good way to showcase it.
While in the past, a well-made visualization or a small PPT used to be enough for showcasing a data science project, with the advent of dashboarding tools like RShiny and Dash, a good data scientist needs to have a fair bit of knowledge of web frameworks to get along.
As Sten Sootla says in his satire piece which I thoroughly enjoyed:
 The secret: it’s not what you know, it’s what you show.
 This is where StreamLit comes in and provides a way to create web apps just using Python. I have been keeping close tabs on this excellent product for the past few months. In my last few posts, I talked about Working with Streamlit and how to Deploy the streamlit app using ec2. I have also been in constant touch with the Streamlit team while they have been working continuously to make the user experience even better by releasing additional features.
So, have you ever had a problem with explaining how the app works to the stakeholders/business partners? Having to set up multiple calls with different stakeholders in different countries and explaining the whole process again and again?
Or have you worked on a project that you want to share on social media? LinkedIn, Youtube, and the like?
With their new version, Streamlit has released a new feature called “Record a Screencast” which will solve this problem for you.
How? Read on.
Setting up So to check this new feature out, which is a part of Streamlit’s version 0.55.0 offering, we need to first install or upgrade streamlit. Do this by using this command:
pip install --upgrade streamlit  We also need to run Streamlit. Here I will use the demo app. You can also use any of your own apps.
streamlit hello  You should see something like below:
A tab also opens up in your browser, where you can try their demo. If that doesn’t open up in the browser, you can manually go to the Local URL http://localhost:8501/ too.
Recording the Screencast Now the time has come to record our screencast to share with the world. You can find the option to record the screencast using the top-right menu in Streamlit.
Once you click on that, you will get the option to record audio, and you can select the aptly named “Start Recording” button to start recording.
You can then choose what you want to share — just your streamlit app or your entire desktop. One can choose to share the whole desktop if they need to go forth between different programs like Excel sheets, powerpoints, and the streamlit app, for example. Here I choose to show just the “Streamlit” App and click share.
Your screencast has now started, and you can record the explanation session for your shareholders now. Once you are done with the recording, you can click on the top-right menu again and select stop recording. Or conveniently press escape to end the recording session.
You will be able to preview and save the session video you recorded as a .webm file, which you can aim to send to your shareholders and even share on LinkedIn/twitter/youtube for your personal projects.
And that’s it. The process is pretty simple and doesn’t need any additional software installation from our side.
Endnotes Streamlit has democratized the whole process of creating apps.
I honestly like the way Streamlit is working on developing its product, keeping in mind all the pain points of its users. With this iteration, they have resolved one more pain point where users struggle to showcase their work in a meaningful way on social media sites or to explain the workings of an app multiple times to the shareholders.
On top of that, Streamlit is a free and open-source rather than a proprietary web app that works out of the box. I couldn’t recommend it more.
Also, do let me know if you want to request any additional features in Streamlit in the comments section. I will make sure to pass it on to the Streamlit team.
If you want to learn more about using Streamlit to create and deploy apps, take a look at my other posts:
 How to write Web apps using simple Python for Data Scientists? How to Deploy a Streamlit App using an Amazon Free ec2 instance?  If you want to learn about the best strategies for creating Visualizations, I would like to call out an excellent course about Data Visualization and applied plotting from the University of Michigan, which is a part of a pretty good Data Science Specialization with Python in itself. Do check it out.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog.
Also, a small disclaimer — There might be some affiliate links in this post to relevant resources, as sharing knowledge is never a bad idea.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>How to Deploy a Streamlit App using an Amazon Free ec2 instance?</title>
      <link>https://mlwhiz.com/blog/2020/02/22/streamlitec2/</link>
      <pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2020/02/22/streamlitec2/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/streamlitec2/main.png"></media:content>
      

      
      <description>A Machine Learning project is never really complete if we don’t have a good way to showcase it.
While in the past, a well-made visualization or a small PPT used to be enough for showcasing a data science project, with the advent of dashboarding tools like RShiny and Dash, a good data scientist needs to have a fair bit of knowledge of web frameworks to get along.
And Web frameworks are hard to learn.</description>

      <content:encoded>  
        
        <![CDATA[  A Machine Learning project is never really complete if we don’t have a good way to showcase it.
While in the past, a well-made visualization or a small PPT used to be enough for showcasing a data science project, with the advent of dashboarding tools like RShiny and Dash, a good data scientist needs to have a fair bit of knowledge of web frameworks to get along.
And Web frameworks are hard to learn. I still get confused in all that HTML, CSS, and Javascript with all the hit and trials, for something seemingly simple to do.
Not to mention the many ways to do the same thing, making it confusing for us data science folks for whom web development is a secondary skill.
This is where StreamLit comes in and delivers on its promise to create web apps just using Python.
In my last post on Streamlit, I talked about how to write Web apps using simple Python for Data Scientists.
But still, a major complaint, if you would check out the comment section of that post, was regarding the inability to deploy Streamlit apps over the web.
And it was a valid complaint.
 A developer can’t show up with his laptop every time the client wanted to use the app. What is the use of such an app?
 So in this post, we will go one step further deploy our Streamlit app over the Web using an Amazon Free ec2 instance.
Setting up the Amazon Instance Before we start with using the amazon ec2 instance, we need to set one up. You might need to sign up with your email ID and set up the payment information on the AWS website. Works just like a simple sign-on. From here, I will assume that you have an AWS account and so I am going to explain the next essential parts so you can follow through.
 Go to AWS Management Console using https://us-west-2.console.aws.amazon.com/console.
 On the AWS Management Console, you can select “Launch a Virtual Machine”. Here we are trying to set up the machine where we will deploy our Streamlit app.
 In the first step, you need to choose the AMI template for the machine. I select the 18.04 Ubuntu Server since it is applicable for the Free Tier. And Ubuntu.
   In the second step, I select the t2.micro instance as again it is the one which is eligible for the free tier. As you can see t2.micro is just a single CPU instance with 512 MB RAM. You can opt for a bigger machine if you are dealing with a powerful model or are willing to pay.   Keep pressing Next until you reach the “6. Configure Security Group” tab. You will need to add a rule with Type: “Custom TCP Rule”, Port Range:8501, and Source: Anywhere. We use the port 8501 here since it is the custom port used by Streamlit.   You can click on “Review and Launch” and finally on the “Launch” button to launch the instance. Once you click on Launch you might need to create a new key pair. Here I am creating a new key pair named streamlit and downloading that using the “Download Key Pair” button. Keep this key safe as it would be required every time you need to login to this particular machine. Click on “Launch Instance” after downloading the key pair   You can now go to your instances to see if your instance has started. Hint: See the Instance state, it should be showing “Running”   Select your instance, and copy the Public DNS(IPv4) Address from the description. It should be something starting with ec2.
 Once you have that run the following commands in the folder you saved the streamlit.pem file. I have masked some of the information here.
   chmod 400 streamlit.pem ssh -i &amp;quot;streamlit.pem&amp;quot; ubuntu@&amp;lt;Your Public DNS(IPv4) Address&amp;gt;  Installing Required Libraries Whoa, that was a handful. After all the above steps you should be able to see the ubuntu prompt for the virtual machine. We will need to set up this machine to run our app. I am going to be using the same streamlit_football_demo app that I used in my previous post.
We start by installing miniconda and adding its path to the environment variable.
sudo apt-get update wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh bash ~/miniconda.sh -b -p ~/miniconda echo &amp;quot;PATH=$PATH:$HOME/miniconda/bin&amp;quot; &amp;gt;&amp;gt; ~/.bashrc source ~/.bashrc  We then install additional dependencies for our app to run. That means I install streamlit and plotly_express.
pip install streamlit pip install plotly_express  And our machine is now prepped and ready to run.
Running Streamlit on Amazon ec2 As I am set up with the instance, I can get the code for my demo app from Github. Or you can choose to create or copy another app as you wish.
git clone https://github.com/MLWhiz/streamlit_football_demo.git cd streamlit_football_demo streamlit run helloworld.py  Now you can go to a browser and type the external URL to access your app. In my case the address is http://35.167.158.251:8501. Here is the output. This app will be up right now if you want to play with it.
A Very Small Problem Though We are up and running with our app for the world to see. But whenever you are going to close the SSH terminal window the process will stop and so will your app.
So what do we do?
TMUX to the rescue. TMUX allows us to keep running our sessions even after we leave the terminal window. It also helps with a lot of other things but I will just go through the steps we need.
First, we stop our app using Ctrl&#43;C and install tmux
sudo apt-get install tmux  We start a new tmux session using the below command. We keep the name of our session as StreamSession. You could use any name here.
tmux new -s StreamSession  You can see that the session name is “StreamSession” at the bottom of the screen. You can now start running streamlit in the tmux session.
streamlit run helloworld.py  You will be able to see your app at the External URL. The next step is to detach our TMUX session so that it continues running in the background when you leave the SSH shell. To do this just press Ctrl&#43;B and then D (Don’t press Ctrl when pressing D)
You can now close your SSH session and the app will continue running at the External URL.
And Voila! We are up and running.
Pro TMUX Tip: You can reattach to the same session by using the attach command below. The best part is that you can close your SSH shell and then maybe come back after some hours and reattach to a session and keep working from wherever you were when you closed the SSH shell.
tmux attach -t StreamSession  Simple Troubleshooting: If your app is not hosting at 8501, it means that an instance of streamlit app is already running on your system and you will need to stop that. You can do so by first finding the process ID
ps aux | grep streamlit  You will see something like:
ubuntu 20927 2.4 18.8 713780 189580 pts/3 Sl&#43; 19:55 0:26 /home/ubuntu/miniconda/bin/python /home/ubuntu/miniconda/bin/streamlit run helloworld.py  You will need to kill this process. You can do this simply by
kill -9 20947  Conclusion Streamlit has democratized the whole process to create apps, and I couldn’t recommend it more. If you want to learn more about how to create awesome web apps with Streamlit then read up my last post.
In this post, we deployed a simple web app on AWS using amazon ec2.
In the process of doing this, we created our own Amazon ec2 instance, logged into the SSH shell, installed miniconda and dependencies, ran our Streamlit application and learned about TMUX. Enough learning for a day?
So go and show on these Mad skills. To end on a lighter note, as Sten Sootla says in his satire piece which I thoroughly enjoyed:
 The secret: it’s not what you know, it’s what you show.
 If you want to learn more about how to structure a Machine Learning project and the best practices, I would like to call out his excellent third course named Structuring Machine learning projects in the Coursera Deep Learning Specialization. Do check it out.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog
Also, a small disclaimer — There might be some affiliate links in this post to relevant resources, as sharing knowledge is never a bad idea.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Add this single word to make your Pandas Apply faster</title>
      <link>https://mlwhiz.com/blog/2020/02/20/swifter/</link>
      <pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2020/02/20/swifter/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/swifter/main.png"></media:content>
      

      
      <description>We as data scientists have got laptops with quad-core, octa-core, turbo-boost. We work with servers with even more cores and computing power.
But do we really utilize the raw power we have at hand?
Sometimes we get limited by the limitation of tools at our disposal. And sometimes we are not willing to write all that extraneous code to save a couple of minutes. And end up realizing only later that time optimization would have helped in the long run.</description>

      <content:encoded>  
        
        <![CDATA[  We as data scientists have got laptops with quad-core, octa-core, turbo-boost. We work with servers with even more cores and computing power.
But do we really utilize the raw power we have at hand?
Sometimes we get limited by the limitation of tools at our disposal. And sometimes we are not willing to write all that extraneous code to save a couple of minutes. And end up realizing only later that time optimization would have helped in the long run.
So, can we do better?
Yes, Obviously.
Previously, I had written on how to make your apply function faster-using multiprocessing, but thanks to the swifter library, it is even more trivial now.
This post is about using the computing power we have at hand and applying it to Pandas DataFrames using Swifter.
Problem Statement We have got a huge pandas data frame, and we want to apply a complex function to it which takes a lot of time.
For this post, I will generate some data with 25M rows and 4 columns.
Can use parallelization easily to get extra performance out of our code?
import pandas as pd import numpy as np pdf = pd.DataFrame(np.random.randint(0,100,size=(25000000, 4)),columns=list(&#39;abcd&#39;))  The Data looks like:
Data Sample
Parallelization using just a single change Relax and Parallelize !!!
Let’s set up a simple experiment.
We will try to create a new column in our dataframe. We can do this simply by using apply-lambda in Pandas.
def func(a,b): if a&amp;gt;50: return True elif b&amp;gt;75: return True else: return False pdf[&#39;e&#39;] = pdf.apply(lambda x : func(x[&#39;a&#39;],x[&#39;b&#39;]),axis=1)  The above code takes ~10 Minutes to run. And we are just doing a simple calculation on 2 columns here.
Can we do better and what would it take?
Yes, we can do better just by adding a “magic word” — Swifter.
But first, you need to install swifter, which is as simple as:
conda install -c conda-forge swifter  You can then just import and append swifter keyword before the apply to use it.
import swifter pdf[&#39;e&#39;] = pdf.**swifter**.apply(lambda x : func(x[&#39;a&#39;],x[&#39;b&#39;]),axis=1)  So, Does this work? Yes. It does. We get a 2x improvement in run time vs. just using the function as it is.
So what exactly is happening here? Source: How increasing data size effects performances for Dask, Pandas and Swifter?
Swifter chooses the best way to implement the apply possible for your function by either vectorizing your function or using Dask in the backend to parallelize your function or by maybe using simple pandas apply if the dataset is small.
In this particular case, Swifter is using Dask to parallelize our apply functions with the default value of npartitions = cpu_count()*2.
For the MacBook I am working on the CPU Count is 6 and the hyperthreading is 2. Thus CPU Count is 12 and that makes npartitions=24.
We could also choose to set n_partitions ourselves. Though I have observed the default value works just fine in most cases sometimes you might be able to tune this as well to gain additional speedups.
For example: Below I set n_partitions=12 and we get a 2x speedup again. Here reducing our number of partitions results in smaller run times as the data movement cost between the partitions is high.
Conclusion  Parallelization is not a silver bullet; it is buckshot.
 Parallelization won’t solve all your problems, and you would still have to work on optimizing your functions, but it is a great tool to have in your arsenal.
Time never comes back, and sometimes we have a shortage of it. At these times we need parallelization to be at our disposal with a single word.
And that word is swifter.
Continue Learning Also if you want to learn more about Python 3, I would like to call out an excellent course on Learn Intermediate level Python from the University of Michigan. Do check it out.
I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog.
Also, a small disclaimer — There might be some affiliate links in this post to relevant resources, as sharing knowledge is never a bad idea.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>How to write Web apps using simple Python for Data Scientists?</title>
      <link>https://mlwhiz.com/blog/2019/12/07/streamlit/</link>
      <pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/12/07/streamlit/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/streamlit/main.jpeg"></media:content>
      

      
      <description>A Machine Learning project is never really complete if we don’t have a good way to showcase it.
While in the past, a well-made visualization or a small PPT used to be enough for showcasing a data science project, with the advent of dashboarding tools like RShiny and Dash, a good data scientist needs to have a fair bit of knowledge of web frameworks to get along.
And Web frameworks are hard to learn.</description>

      <content:encoded>  
        
        <![CDATA[  A Machine Learning project is never really complete if we don’t have a good way to showcase it.
While in the past, a well-made visualization or a small PPT used to be enough for showcasing a data science project, with the advent of dashboarding tools like RShiny and Dash, a good data scientist needs to have a fair bit of knowledge of web frameworks to get along.
And Web frameworks are hard to learn. I still get confused in all that HTML, CSS, and Javascript with all the hit and trials, for something seemingly simple to do.
Not to mention the many ways to do the same thing, making it confusing for us data science folks for whom web development is a secondary skill.
So, are we doomed to learn web frameworks? Or to call our developer friend for silly doubts in the middle of the night?
This is where StreamLit comes in and delivers on its promise to create web apps just using Python.
 Zen of Python: Simple is better than complex and Streamlit makes it dead simple to create apps.
 This post is about understanding how to create apps that support data science projects using Streamlit.
To understand more about the architecture and the thought process that led to streamlit, have a look at this excellent post by one of the original developers/founder Adrien Treuille.
Installation Installation is as simple as running the command:
pip install streamlit
To see if our installation is successful, we can just run:
streamlit hello
This should show you a screen that says:
You can go to the local URL: localhost:8501 in your browser to see a Streamlit app in action. The developers have provided some cool demos that you can play with. Do take your time and feel the power of the tool before coming back.
Streamlit Hello World Streamlit aims to make app development easy using simple Python.
So let us write a simple app to see if it delivers on that promise.
Here I start with a simple app which we will call the Hello World of streamlit. Just paste the code given below in a file named helloworld.py
import streamlit as st x = st.slider(&amp;#39;x&amp;#39;) st.write(x, &amp;#39;squared is&amp;#39;, x * x) And, on the terminal run:
streamlit run helloworld.py And voila, you should be able to see a simple app in action in your browser at localhost:8501 that allows you to move a slider and gives the result.
It was pretty easy. In the above app, we used two features from Streamlit:
 the st.slider widget that we can slide to change the output of the web app.
 and the versatile st.write command. I am amazed at how it can write anything from charts, dataframes, and simple text. More on this later.
  Important: Remember that every time we change the widget value, the whole app runs from top to bottom.
Streamlit Widgets Widgets provide us a way to control our app. The best place to read about the widgets is the API reference documentation itself but I will describe some most prominent ones that you might end up using.
1. Slider streamlit.slider(label, min_value=None, max_value=None, value=None, step=None, format=None) We already saw st.slider in action above. It can be used with min_value,max_value, and step for getting inputs in a range.
2. Text Input The simplest way to get user input be it some URL input or some text input for sentiment analysis. It just needs a single label for naming the textbox.
import streamlit as st url = st.text_input(&amp;#39;Enter URL&amp;#39;) st.write(&amp;#39;The Entered URL is&amp;#39;, url) This is how the app looks:
Tip: You can just change the file helloworld.py and refresh the browser. The way I work is to open and change helloworld.py in sublime text and see the changes in the browser side by side.
3. Checkbox One use case for checkboxes is to hide or show/hide a specific section in an app. Another could be setting up a boolean value in the parameters for a function.st.checkbox() takes a single argument, which is the widget label. In this app, the checkbox is used to toggle a conditional statement.
import streamlit as st import pandas as pd import numpy as np df = pd.read_csv(&amp;#34;football_data.csv&amp;#34;) if st.checkbox(&amp;#39;Show dataframe&amp;#39;): st.write(df) 4. SelectBox We can use st.selectbox to choose from a series or a list. Normally a use case is to use it as a simple dropdown to select values from a list.
import streamlit as st import pandas as pd import numpy as np df = pd.read_csv(&amp;#34;football_data.csv&amp;#34;) option = st.selectbox( &amp;#39;Which Club do you like best?&amp;#39;, df[&amp;#39;Club&amp;#39;].unique()) st.write(&amp;#39;You selected:&amp;#39;, option) 5. MultiSelect We can also use multiple values from a dropdown. Here we use st.multiselect to get multiple values as a list in the variable options
import streamlit as st import pandas as pd import numpy as np df = pd.read_csv(&amp;#34;football_data.csv&amp;#34;) options = st.multiselect( &amp;#39;What are your favorite clubs?&amp;#39;, df[&amp;#39;Club&amp;#39;].unique()) st.write(&amp;#39;You selected:&amp;#39;, options) Creating Our Simple App Step by Step So much for understanding the important widgets. Now, we are going to create a simple app using multiple widgets at once.
To start simple, we will try to visualize our football data using streamlit. It is pretty much simple to do this with the help of the above widgets.
import streamlit as st import pandas as pd import numpy as np df = pd.read_csv(&amp;#34;football_data.csv&amp;#34;) clubs = st.multiselect(&amp;#39;Show Player for clubs?&amp;#39;, df[&amp;#39;Club&amp;#39;].unique()) nationalities = st.multiselect(&amp;#39;Show Player from Nationalities?&amp;#39;, df[&amp;#39;Nationality&amp;#39;].unique()) # Filter dataframe new_df = df[(df[&amp;#39;Club&amp;#39;].isin(clubs)) &amp;amp; (df[&amp;#39;Nationality&amp;#39;].isin(nationalities))] # write dataframe to screen st.write(new_df) Our simple app looks like:
That was easy. But it seems pretty basic right now. Can we add some charts?
Streamlit currently supports many libraries for plotting.Plotly, Bokeh, Matplotlib, Altair, and Vega charts being some of them. Plotly Express also works, although they didn’t specify it in the docs. It also has some inbuilt chart types that are “native” to Streamlit, like st.line_chart and st.area_chart.
We will work with plotly_express here. Here is the code for our simple app. We just used four calls to streamlit. Rest is all simple python.
import streamlit as st import pandas as pd import numpy as np import plotly_express as px df = pd.read_csv(&amp;#34;football_data.csv&amp;#34;) clubs = st.multiselect(&amp;#39;Show Player for clubs?&amp;#39;, df[&amp;#39;Club&amp;#39;].unique()) nationalities = st.multiselect(&amp;#39;Show Player from Nationalities?&amp;#39;, df[&amp;#39;Nationality&amp;#39;].unique()) new_df = df[(df[&amp;#39;Club&amp;#39;].isin(clubs)) &amp;amp; (df[&amp;#39;Nationality&amp;#39;].isin(nationalities))] st.write(new_df) # create figure using plotly express fig = px.scatter(new_df, x =&amp;#39;Overall&amp;#39;,y=&amp;#39;Age&amp;#39;,color=&amp;#39;Name&amp;#39;) # Plot! st.plotly_chart(fig) Improvements In the start we said that each time we change any widget, the whole app runs from start to end. This is not feasible when we create apps that will serve deep learning models or complicated machine learning models. Streamlit covers us in this aspect by introducing Caching.
1. Caching In our simple app. We read the pandas dataframe again and again whenever a value changes. While it works for the small data we have, it will not work for big data or when we have to do a lot of processing on the data. Let us use caching using the st.cache decorator function in streamlit like below.
import streamlit as st import pandas as pd import numpy as np import plotly_express as px df = st.cache(pd.read_csv)(&amp;#34;football_data.csv&amp;#34;) Or for more complex and time taking functions that need to run only once(think loading big Deep Learning models), using:
@st.cache def complex_func(a,b): DO SOMETHING COMPLEX # Won&amp;#39;t run again and again. complex_func(a,b) When we mark a function with Streamlit’s cache decorator, whenever the function is called streamlit checks the input parameters that you called the function with.
If this is the first time Streamlit has seen these params, it runs the function and stores the result in a local cache.
When the function is called the next time, if those params have not changed, Streamlit knows it can skip executing the function altogether. It just uses the results from the cache.
2. Sidebar For a cleaner look based on your preference, you might want to move your widgets into a sidebar, something like Rshiny dashboards. This is pretty simple. Just add st.sidebar in your widget’s code.
import streamlit as st import pandas as pd import numpy as np import plotly_express as px df = st.cache(pd.read_csv)(&amp;#34;football_data.csv&amp;#34;) clubs = st.sidebar.multiselect(&amp;#39;Show Player for clubs?&amp;#39;, df[&amp;#39;Club&amp;#39;].unique()) nationalities = st.sidebar.multiselect(&amp;#39;Show Player from Nationalities?&amp;#39;, df[&amp;#39;Nationality&amp;#39;].unique()) new_df = df[(df[&amp;#39;Club&amp;#39;].isin(clubs)) &amp;amp; (df[&amp;#39;Nationality&amp;#39;].isin(nationalities))] st.write(new_df) # Create distplot with custom bin_size fig = px.scatter(new_df, x =&amp;#39;Overall&amp;#39;,y=&amp;#39;Age&amp;#39;,color=&amp;#39;Name&amp;#39;) # Plot! st.plotly_chart(fig) 3. Markdown? I love writing in Markdown. I find it less verbose than HTML and much more suited for data science work. So, can we use Markdown with the streamlit app?
Yes, we can. There are a couple of ways to do this. In my view, the best one is to use Magic commands. Magic commands allow you to write markdown as easily as comments. You could also have used the command st.markdown
import streamlit as st import pandas as pd import numpy as np import plotly_express as px &amp;#39;&amp;#39;&amp;#39; # Club and Nationality App This very simple webapp allows you to select and visualize players from certain clubs and certain nationalities. &amp;#39;&amp;#39;&amp;#39; df = st.cache(pd.read_csv)(&amp;#34;football_data.csv&amp;#34;) clubs = st.sidebar.multiselect(&amp;#39;Show Player for clubs?&amp;#39;, df[&amp;#39;Club&amp;#39;].unique()) nationalities = st.sidebar.multiselect(&amp;#39;Show Player from Nationalities?&amp;#39;, df[&amp;#39;Nationality&amp;#39;].unique()) new_df = df[(df[&amp;#39;Club&amp;#39;].isin(clubs)) &amp;amp; (df[&amp;#39;Nationality&amp;#39;].isin(nationalities))] st.write(new_df) # Create distplot with custom bin_size fig = px.scatter(new_df, x =&amp;#39;Overall&amp;#39;,y=&amp;#39;Age&amp;#39;,color=&amp;#39;Name&amp;#39;) &amp;#39;&amp;#39;&amp;#39; ### Here is a simple chart between player age and overall &amp;#39;&amp;#39;&amp;#39; st.plotly_chart(fig) Conclusion Streamlit has democratized the whole process to create apps, and I couldn’t recommend it more.
In this post, we created a simple web app. But the possibilities are endless. To give an example here is face GAN from the streamlit site. And it works by just using the same guiding ideas of widgets and caching.
I love the default colors and styles that the developers have used, and I found it much more comfortable than using Dash, which I was using until now for my demos. You can also include audio and video in your streamlit apps.
On top of that, Streamlit is a free and open-source rather than a proprietary web app that just works out of the box.
In the past, I had to reach out to my developer friends for any single change in a demo or presentation; now it is relatively trivial to do that.
 I aim to use it more in my workflow from now on, and considering the capabilities it provides without all the hard work, I think you should too.
 I don’t have an idea if it will perform well in a production environment yet, but its a boon for the small proof of concept projects and demos. I aim to use it more in my workflow from now on, and considering the capabilities it provides without all the hard work, I think you should too.
You can find the full code for the final app here.
If you want to learn about the best strategies for creating Visualizations, I would like to call out an excellent course about Data Visualization and applied plotting from the University of Michigan, which is a part of a pretty good Data Science Specialization with Python in itself. Do check it out.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog.
Also, a small disclaimer — There might be some affiliate links in this post to relevant resources, as sharing knowledge is never a bad idea.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>The Ultimate Guide to using the Python regex module</title>
      <link>https://mlwhiz.com/blog/2019/09/01/regex/</link>
      <pubDate>Sun, 01 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/09/01/regex/</guid>
      
      
      <media:content type="image/png" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/regex/1.png"></media:content>
      

      
      <description>One of the main tasks while working with text data is to create a lot of text-based features.
One could like to find out certain patterns in the text, emails if present in a text as well as phone numbers in a large text.
While it may sound fairly trivial to achieve such functionalities it is much simpler if we use the power of Python’s regex module.
For example, let&amp;amp;rsquo;s say you are tasked with finding the number of punctuations in a particular piece of text.</description>

      <content:encoded>  
        
        <![CDATA[  One of the main tasks while working with text data is to create a lot of text-based features.
One could like to find out certain patterns in the text, emails if present in a text as well as phone numbers in a large text.
While it may sound fairly trivial to achieve such functionalities it is much simpler if we use the power of Python’s regex module.
For example, let&amp;rsquo;s say you are tasked with finding the number of punctuations in a particular piece of text. Using text from Dickens here.
How do you normally go about it?
A simple enough way is to do something like:
target = [&amp;#39;;&amp;#39;,&amp;#39;.&amp;#39;,&amp;#39;,&amp;#39;,&amp;#39;–&amp;#39;] string = &amp;#34;It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way – in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only.**&amp;#34; num_puncts = 0 for punct in target: if punct in string: num_puncts&#43;=string.count(punct) print(num_puncts) 19  And that is all but fine if we didn’t have the re module at our disposal. With re it is simply 2 lines of code:
import re pattern = r&amp;#34;[;.,–]&amp;#34; print(len(re.findall(pattern,string)))  19  This post is about one of the most commonly used regex patterns and some regex functions I end up using regularly.
What is regex? In simpler terms, a regular expression(regex) is used to find patterns in a given string.
The pattern we want to find could be anything.
We can create patterns that resemble an email or a mobile number. We can create patterns that find out words that start with a and ends with z from a string.
In the above example:
import re pattern = r&amp;#39;[,;.,–]&amp;#39; print(len(re.findall(pattern,string))) The pattern we wanted to find out was r’[,;.,–]’. This pattern captures any of the 4 characters we wanted to capture. I find regex101 a great tool for testing patterns. This is how the pattern looks when applied to the target string.
As we can see we are able to find all the occurrences of ,;.,– in the target string as required.
I use the above tool whenever I need to test a regex. Much faster than running a python program again and again and much easier to debug.
So now we know that we can find patterns in a target string but how do we really create these patterns?
Creating Patterns The first thing we need to learn while using regex is how to create patterns.
I will go through some most commonly used patterns one by one.
As you would think, the simplest pattern is a simple string.
pattern = r&amp;#39;times&amp;#39; string = &amp;#34;It was the best of times, it was the worst of times.&amp;#34; print(len(re.findall(pattern,string))) But that is not very useful. To help with creating complex patterns regex provides us with special characters/operators. Let us go through some of these operators one by one. Please wait for the gifs to load.
1. the [] operator This is the one we used in our first example. We want to find one instance of any character within these square brackets.
[abc]- will find all occurrences of a or b or c.
[a-z]- will find all occurrences of a to z.
[a-z0–9A-Z]- will find all occurrences of a to z, A to Z and 0 to 9.
We can easily use this pattern as below in Python:
pattern = r&amp;#39;[a-zA-Z]&amp;#39; string = &amp;#34;It was the best of times, it was the worst of times.&amp;#34; print(len(re.findall(pattern,string))) There are other functionalities in regex apart from .findall but we will get to them a little bit later.
2. The dot Operator The dot operator(.) is used to match a single instance of any character except the newline character.
The best part about the operators is that we can use them in conjunction with one another.
For example, We want to find out the substrings in the string that start with small d or Capital D and end with e with a length of 6.
3. Some Meta Sequences There are some patterns that we end up using again and again while using regex. And so regex has created a few shortcuts for them. The most useful shortcuts are:
\w, Matches any letter, digit or underscore. Equivalent to [a-zA-Z0–9_]
\W, Matches anything other than a letter, digit or underscore.
\d, Matches any decimal digit. Equivalent to [0–9].
\D, Matches anything other than a decimal digit.
4. The Plus and Star operator The dot character is used to get a single instance of any character. What if we want to find more.
The Plus character &#43;, is used to signify 1 or more instance of the leftmost character.
The Star character *, is used to signify 0 or more instance of the leftmost character.
For example, if we want to find out all substrings that start with d and end with e, we can have zero characters or more characters between d and e. We can use: d\w*e
If we want to find out all substrings that start with d and end with e with at least one character between d and e, we can use: d\w&#43;e
We could also have used a more generic approach using {} \w{n} - Repeat \w exactly n number of times.
\w{n,} - Repeat \w at least n times or more.
\w{n1, n2} - Repeat \w at least n1 times but no more than n2 times.
5. ^ Caret Operator and $ Dollar operator. ^ Matches the start of a string, and $ Matches the end of the string.
6. Word Boundary This is an important concept.
Did you notice how I always matched substring and never a word in the above examples?
So, what if we want to find all words that start with d?
Can we use d\w* as the pattern? Let&amp;rsquo;s see using the web tool.
Regex Functions Till now we have only used the findall function from the re package, but it also supports a lot more functions. Let us look into the functions one by one.
1. findall We already have used findall. It is one of the regex functions I end up using most often. Let us understand it a little more formally.
Input: Pattern and test string
Output: List of strings.
#USAGE: pattern = r&amp;#39;[iI]t&amp;#39; string = &amp;#34;It was the best of times, it was the worst of times.&amp;#34; matches = re.findall(pattern,string) for match in matches: print(match) It it  2. Search Input: Pattern and test string
Output: Location object for the first match.
#USAGE: pattern = r&amp;#39;[iI]t&amp;#39; string = &amp;#34;It was the best of times, it was the worst of times.&amp;#34; location = re.search(pattern,string) print(location) &amp;lt;_sre.SRE_Match object; span=(0, 2), match=&#39;It&#39;&amp;gt;  We can get this location object’s data using
print(location.group()) &#39;It&#39;  3. Substitute This is another great functionality. When you work with NLP you sometimes need to substitute integers with X’s. Or you might need to redact some document. Just the basic find and replace in any of the text editors.
Input: search pattern, replacement pattern, and the target string
Output: Substituted string
string = &amp;#34;It was the best of times, it was the worst of times.&amp;#34; string = re.sub(r&amp;#39;times&amp;#39;, r&amp;#39;life&amp;#39;, string) print(string) It was the best of life, it was the worst of life.  Some Case Studies: Regex is used in many cases when validation is required. You might have seen prompts on websites like “This is not a valid email address”. While such a prompt could be written using multiple if and else conditions, regex is probably the best for such use cases.
1. PAN Numbers In India, we have got PAN Numbers for Tax identification rather than SSN numbers in the US. The basic validation criteria for PAN is that it must have all its letters in uppercase and characters in the following order:
&amp;lt;char&amp;gt;&amp;lt;char&amp;gt;&amp;lt;char&amp;gt;&amp;lt;char&amp;gt;&amp;lt;char&amp;gt;&amp;lt;digit&amp;gt;&amp;lt;digit&amp;gt;&amp;lt;digit&amp;gt;&amp;lt;digit&amp;gt;&amp;lt;char&amp;gt;  So the question is:
Is ‘ABcDE1234L’ a valid PAN?
How would you normally attempt to solve this without regex? You will most probably write a for loop and keep an index going through the string. With regex it is as simple as below:
match=re.search(r&amp;#39;[A-Z]{5}[0–9]{4}[A-Z]&amp;#39;,&amp;#39;ABcDE1234L&amp;#39;) if match: print(True) else: print(False) False  2. Find Domain Names Sometimes we have got a large text document and we have got to find out instances of telephone numbers or email IDs or domain names from the big text document.
For example, Suppose you have this text:
&amp;lt;div class=&amp;#34;reflist&amp;#34; style=&amp;#34;list-style-type: decimal;&amp;#34;&amp;gt; &amp;lt;ol class=&amp;#34;references&amp;#34;&amp;gt; &amp;lt;li id=&amp;#34;cite_note-1&amp;#34;&amp;gt;&amp;lt;span class=&amp;#34;mw-cite-backlink&amp;#34;&amp;gt;&amp;lt;b&amp;gt;^ [&amp;#34;Train (noun)&amp;#34;](http://www.askoxford.com/concise_oed/train?view=uk). &amp;lt;i&amp;gt;(definition – Compact OED)&amp;lt;/i&amp;gt;. Oxford University Press&amp;lt;span class=&amp;#34;reference-accessdate&amp;#34;&amp;gt;. Retrieved 2008-03-18&amp;lt;/span&amp;gt;.&amp;lt;/span&amp;gt;&amp;lt;span title=&amp;#34;ctx_ver=Z39.88-2004&amp;amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrain&amp;amp;rft.atitle=Train&#43;%28noun%29&amp;amp;rft.genre=article&amp;amp;rft_id=http%3A%2F%2Fwww.askoxford.com%2Fconcise_oed%2Ftrain%3Fview%3Duk&amp;amp;rft.jtitle=%28definition&#43;%E2%80%93&#43;Compact&#43;OED%29&amp;amp;rft.pub=Oxford&#43;University&#43;Press&amp;amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;#34; class=&amp;#34;Z3988&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;display:none;&amp;#34;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li id=&amp;#34;cite_note-2&amp;#34;&amp;gt;&amp;lt;span class=&amp;#34;mw-cite-backlink&amp;#34;&amp;gt;&amp;lt;b&amp;gt;^&amp;lt;/b&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;#34;reference-text&amp;#34;&amp;gt;&amp;lt;span class=&amp;#34;citation book&amp;#34;&amp;gt;Atchison, Topeka and Santa Fe Railway (1948). &amp;lt;i&amp;gt;Rules: Operating Department&amp;lt;/i&amp;gt;. p. 7.&amp;lt;/span&amp;gt;&amp;lt;span title=&amp;#34;ctx_ver=Z39.88-2004&amp;amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrain&amp;amp;rft.au=Atchison%2C&#43;Topeka&#43;and&#43;Santa&#43;Fe&#43;Railway&amp;amp;rft.aulast=Atchison%2C&#43;Topeka&#43;and&#43;Santa&#43;Fe&#43;Railway&amp;amp;rft.btitle=Rules%3A&#43;Operating&#43;Department&amp;amp;rft.date=1948&amp;amp;rft.genre=book&amp;amp;rft.pages=7&amp;amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;#34; class=&amp;#34;Z3988&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;display:none;&amp;#34;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li id=&amp;#34;cite_note-3&amp;#34;&amp;gt;&amp;lt;span class=&amp;#34;mw-cite-backlink&amp;#34;&amp;gt;&amp;lt;b&amp;gt;^ [Hydrogen trains](http://www.hydrogencarsnow.com/blog2/index.php/hydrogen-vehicles/i-hear-the-hydrogen-train-a-comin-its-rolling-round-the-bend/)&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li id=&amp;#34;cite_note-4&amp;#34;&amp;gt;&amp;lt;span class=&amp;#34;mw-cite-backlink&amp;#34;&amp;gt;&amp;lt;b&amp;gt;^ [Vehicle Projects Inc. Fuel cell locomotive](http://www.bnsf.com/media/news/articles/2008/01/2008-01-09a.html)&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li id=&amp;#34;cite_note-5&amp;#34;&amp;gt;&amp;lt;span class=&amp;#34;mw-cite-backlink&amp;#34;&amp;gt;&amp;lt;b&amp;gt;^&amp;lt;/b&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;#34;reference-text&amp;#34;&amp;gt;&amp;lt;span class=&amp;#34;citation book&amp;#34;&amp;gt;Central Japan Railway (2006). &amp;lt;i&amp;gt;Central Japan Railway Data Book 2006&amp;lt;/i&amp;gt;. p. 16.&amp;lt;/span&amp;gt;&amp;lt;span title=&amp;#34;ctx_ver=Z39.88-2004&amp;amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrain&amp;amp;rft.au=Central&#43;Japan&#43;Railway&amp;amp;rft.aulast=Central&#43;Japan&#43;Railway&amp;amp;rft.btitle=Central&#43;Japan&#43;Railway&#43;Data&#43;Book&#43;2006&amp;amp;rft.date=2006&amp;amp;rft.genre=book&amp;amp;rft.pages=16&amp;amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;#34; class=&amp;#34;Z3988&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;display:none;&amp;#34;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li id=&amp;#34;cite_note-6&amp;#34;&amp;gt;&amp;lt;span class=&amp;#34;mw-cite-backlink&amp;#34;&amp;gt;&amp;lt;b&amp;gt;^ [&amp;#34;Overview Of the existing Mumbai Suburban Railway&amp;#34;](http://web.archive.org/web/20080620033027/http://www.mrvc.indianrail.gov.in/overview.htm). _Official webpage of Mumbai Railway Vikas Corporation_. Archived from [the original](http://www.mrvc.indianrail.gov.in/overview.htm) on 2008-06-20&amp;lt;span class=&amp;#34;reference-accessdate&amp;#34;&amp;gt;. Retrieved 2008-12-11&amp;lt;/span&amp;gt;.&amp;lt;/span&amp;gt;&amp;lt;span title=&amp;#34;ctx_ver=Z39.88-2004&amp;amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrain&amp;amp;rft.atitle=Overview&#43;Of&#43;the&#43;existing&#43;Mumbai&#43;Suburban&#43;Railway&amp;amp;rft.genre=article&amp;amp;rft_id=http%3A%2F%2Fwww.mrvc.indianrail.gov.in%2Foverview.htm&amp;amp;rft.jtitle=Official&#43;webpage&#43;of&#43;Mumbai&#43;Railway&#43;Vikas&#43;Corporation&amp;amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;#34; class=&amp;#34;Z3988&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;display:none;&amp;#34;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ol&amp;gt; &amp;lt;/div&amp;gt; And you need to find out all the primary domains from this text- askoxford.com;bnsf.com;hydrogencarsnow.com;mrvc.indianrail.gov.in;web.archive.org
How would you do this?
match=re.findall(r&amp;#39;http(s:|:)\/\/([www.|ww2.|)([0-9a-z.A-Z-]*\.\w{2,3})&amp;#39;,string)](http://www.|ww2.|)([0-9a-z.A-Z-]*\.\w{2,3})&amp;#39;,string))for elem in match:print(elem) (&#39;:&#39;, &#39;www.&#39;, &#39;askoxford.com&#39;) (&#39;:&#39;, &#39;www.&#39;, &#39;hydrogencarsnow.com&#39;) (&#39;:&#39;, &#39;www.&#39;, &#39;bnsf.com&#39;) (&#39;:&#39;, &#39;&#39;, &#39;web.archive.org&#39;) (&#39;:&#39;, &#39;www.&#39;, &#39;mrvc.indianrail.gov.in&#39;) (&#39;:&#39;, &#39;www.&#39;, &#39;mrvc.indianrail.gov.in&#39;)  | is the or operator here and match returns tuples where the pattern part inside () is kept.
3. Find Email Addresses: Below is a regex to find email addresses in a long text.
match=re.findall(r&amp;#39;([\w0-9-._]&#43;@[\w0-9-.]&#43;[\w0-9]{2,3})&amp;#39;,string) These are advanced examples but if you try to understand these examples for yourself you should be fine with the info provided.
Conclusion While it might look a little daunting at first, regex provides a great degree of flexibility when it comes to data manipulation, creating features and finding patterns.
I use it quite regularly when I work with text data and it can also be included while working on data validation tasks.
I am also a fan of the regex101 tool and use it frequently to check my regexes. I wonder if I would be using regexes as much if not for this awesome tool.
Also if you want to learn more about NLP here is an excellent course. You can start for free with the 7-day Free Trial.
Thanks for the read. I am going to be writing more beginner-friendly posts in the future too. Follow me up at Medium or Subscribe to my blog.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>3 Great Additions for your Jupyter Notebooks</title>
      <link>https://mlwhiz.com/blog/2019/06/28/jupyter_extensions/</link>
      <pubDate>Fri, 28 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/06/28/jupyter_extensions/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/extensions/nbext_snippets.gif"></media:content>
      

      
      <description>I love Jupyter notebooks and the power they provide.
They can be used to present findings as well as share code in the most effective manner which was not easy with the previous IDEs.
Yet there is something still amiss.
There are a few functionalities I aspire in my text editor which don’t come by default in Jupyter.
But fret not. Just like everything in Python, Jupyter too has third-party extensions.</description>

      <content:encoded>  
        
        <![CDATA[    I love Jupyter notebooks and the power they provide.
They can be used to present findings as well as share code in the most effective manner which was not easy with the previous IDEs.
Yet there is something still amiss.
There are a few functionalities I aspire in my text editor which don’t come by default in Jupyter.
But fret not. Just like everything in Python, Jupyter too has third-party extensions.
This post is about some of the most useful extensions I found.
1. Collapsible Headings The one extension, I like most is collapsible headings.
It makes the flow of the notebook easier to comprehend and also helps in creating presentable notebooks.
To get this one, install the jupyter_contrib_nbextensions package with this command on the terminal window:
conda install -c conda-forge jupyter_contrib_nbextensions  Once the package is installed, we can start jupyter notebook using:
jupyter notebook  Once you go to the home page of your jupyter notebook, you can see that a new tab for NBExtensions is created.
  And we can get a lot of extensions using this package.
  This is how it looks:
  2. Automatic Imports   Automation is the future.
One thing that bugs me is that whenever I open a new Jupyter notebook in any of my data science projects, I need to copy paste a lot of libraries and default options for some of them.
To tell you about some of the usual imports I use:
 Pandas and numpy — In my view, Python must make these two as a default import.
 Seaborn, matplotlib, plotly_express
 change some pandas and seaborn default options.
  Here is the script that I end up pasting over and over again.
import pandas as pd import numpy as np import plotly_express as px import seaborn as sns import matplotlib.pyplot as plt %matplotlib inline *# We dont Probably need the Gridlines. Do we? If yes comment this line* sns.set(style=&amp;#34;ticks&amp;#34;) # pandas defaults pd.options.display.max_columns = 500 pd.options.display.max_rows = 500 Is there a way I can automate this?
Just go to the nbextensions tab and select the snippets extension.
You will need to make the following changes to the snippets.json file. You can find this file at /miniconda3/envs/py36/share/jupyter/nbextensions/snippets location. The py36 in this location here is my conda virtualenv. It took me some time to find this location for me. Yours might be different. Please note that you don’t have to change at the site-packages location.
{ &amp;#34;snippets&amp;#34; : [ { &amp;#34;name&amp;#34; : &amp;#34;example&amp;#34;, &amp;#34;code&amp;#34; : [ &amp;#34;# This is an example snippet!&amp;#34;, &amp;#34;# To create your own, add a new snippet block to the&amp;#34;, &amp;#34;# snippets.json file in your jupyter nbextensions directory:&amp;#34;, &amp;#34;# /nbextensions/snippets/snippets.json&amp;#34;, &amp;#34;import this&amp;#34; ] }, { &amp;#34;name&amp;#34; : &amp;#34;default&amp;#34;, &amp;#34;code&amp;#34; : [ &amp;#34;# This is A snippet for all data related tasks&amp;#34;, &amp;#34;import pandas as pd&amp;#34; &amp;#34;import numpy as np&amp;#34; &amp;#34;import plotly_express as px&amp;#34; &amp;#34;import seaborn as sns&amp;#34; &amp;#34;import matplotlib.pyplot as plt&amp;#34; &amp;#34;%matplotlib inline&amp;#34; &amp;#34;# We dont Probably need the Gridlines. Do we? If yes comment this line&amp;#34; &amp;#34;sns.set(style=&amp;#39;ticks&amp;#39;)&amp;#34; &amp;#34;# pandas defaults&amp;#34; &amp;#34;pd.options.display.max_columns = 500&amp;#34; &amp;#34;pd.options.display.max_rows = 500&amp;#34; ] } ] } You can see this extension in action below.
  Pretty cool. Right? I also use this to create basic snippets for my deep learning notebooks and NLP based notebooks.
3. Execution Time We have used %time as well as decorator based timer functions to measure time for our functions. You can also use this excellent extension to do that.
Plus it looks great.
Just select the ExecutionTime extension from the NBextensions list and you will have an execution result at the bottom of the cell after every cell execution as well as the time when the cell was executed.
  Other Extensions   NBExtensions has a lot of extensions. Some other extensions from NBExtensions I like and you might want to look at:
 Limit Output: Ever had your notebook hang since you printed a lot of text in your notebook. This extension limits the number of characters that can be printed below a code cell
 2to3Convertor: Having problems with your old python2 notebooks. Tired of changing the print statements. This one is a good one.
     Live Markdown Preview: Some of us like writing our blogs using Markdown in a jupyter notebook. Sometimes it can be hectic as you make errors in writing. Now you can see Live-preview of the rendered output of markdown cells while editing their source.    Conclusion I love how there is a package for everything with Python. And that holds good with the Jupyter notebook too.
The jupyter_contrib_nbextensions package works great out of the box.
It has made my life a lot easier when it comes to checking execution times, scrolling through the notebook, and repetitive tasks.
There are many other extensions this package does provide. Do take a look at them and try to see which ones you find useful.
Also, if you want to learn more about Python 3, I would like to call out an excellent course on Learn Intermediate level Python from the University of Michigan. Do check it out.
I am going to be writing more of such posts in the future too. Let me know what you think about the series. Follow me up at Medium or Subscribe to my blog.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Why Sublime Text for Data Science is Hotter than Jennifer Lawrence?</title>
      <link>https://mlwhiz.com/blog/2019/03/31/sublime_ds_post/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/03/31/sublime_ds_post/</guid>
      
      
      <media:content type="image/jpeg" medium="image" width="700" height="400"
      url="https://mlwhiz.com/images/sublime_ds/sublime_tool.jpeg"></media:content>
      

      
      <description>Just Kidding, Nothing is hotter than Jennifer Lawrence. But as you are here, let&amp;amp;rsquo;s proceed.
For a practitioner in any field, they turn out as good as the tools they use. Data Scientists are no different. But sometimes we don&amp;amp;rsquo;t even know which tools we need and also if we need them. We are not able to fathom if there could be a more natural way to solve the problem we face.</description>

      <content:encoded>  
        
        <![CDATA[    Just Kidding, Nothing is hotter than Jennifer Lawrence. But as you are here, let&amp;rsquo;s proceed.
For a practitioner in any field, they turn out as good as the tools they use. Data Scientists are no different. But sometimes we don&amp;rsquo;t even know which tools we need and also if we need them. We are not able to fathom if there could be a more natural way to solve the problem we face. We could learn about Data Science using awesome MOOCs like Machine Learning by Andrew Ng but no one teaches the spanky tools of the trade. This motivated me to write about the tools and skills that one is not taught in any course in my new series of short posts - Tools For Data Science. As it is rightly said:
 We shape our tools and afterward our tools shape us.
 In this post, I will try to talk about the Sublime Text Editor in the context of Data Science.
Sublime Text is such a lifesaver, and we as data scientists don&amp;rsquo;t even realize that we need it. We are generally so happy with our Jupyter Notebooks and R studio that we never try to use another editor.
So, let me try to sway you a little bit from your Jupyter notebooks into integrating another editor in your workflow. I will try to provide some use cases below. On that note, these use cases are not at all exhaustive and are here just to demonstrate the functionality and Sublime power.
1. Create A Dictionary/List or Whatever: How many times does it happen that we want to make a list or dictionary for our Python code from a list we got in an email text? I bet numerous times. How do we do this? We haggle in Excel by loading that Text in Excel and then trying out concatenating operations. For those of us on a Mac, it is even more troublesome since Mac&amp;rsquo;s Excel is not as good as windows(to put it mildly)
So, for example, if you had information about State Name and State Short Name and you had to create a dictionary for Python, you would end up doing something like this in Excel. Or maybe you will load the CSV in pandas and then play with it in Python itself.
  Here is how you would do the same in Sublime. And see just how wonderful it looks. We ended up getting the Dictionary in one single line. It took me around 27 seconds to do. I still remember the first time I saw one of my developer friends doing this, and I was amazed. On that note, We should always learn from other domains
  So how I did this?
Here is a step by step idea. You might want to get some data in Sublime and try it out yourself. The command that you will be using most frequently is Cmd&#43;Shift&#43;L
 Select all the text in the sublime window using Cmd&#43;A Cmd&#43;Shift&#43;L to get the cursor on all lines Use Cmd and Opt with arrow keys to move these cursors to required locations. Cmd takes to beginning and end. Opt takes you token by token Do your Magic and write. Press Delete key to getting everything in one line Press Esc to get out from Multiple cursor mode Enjoy!  2. Select Selectively and Look Good while doing it: Another functionality in Sublime that I love. We all have used Replace functionality in many text editors. This functionality is Find and Replace with a twist.
So, without further ado, let me demonstrate it with an example. Let&amp;rsquo;s say we have a code snippet written in Python and we want to replace some word. We can very well do it with Find and Replace Functionality. We will find and replace each word and would end up clicking a lot of times. Sublime makes it so much easier. And it looks impressive too. You look like you know what you are doing, which will get a few brownie points in my book.
  So how I did this?
 Select the word you want to replace Press Cmd&#43;D multiple times to only select instances of the word you want to remove. When all words are selected, write the new word And that&amp;rsquo;s all    This concludes my post about one of the most efficient editors I have ever known. You can try to do a lot of things with Sublime but the above use cases are the ones which I find most useful. These simple commands will make your work much more efficient and remove the manual drudgery which is sometimes a big part of our jobs. Hope you end up using this in your Workflow. Trust me you will end up loving it.
Let me know if you liked this post. I will continue writing such Tips and Tricks in a series of posts. Also, do follow me on Medium to get notified about my future posts.
PS1: All the things above will also work with Atom text editor using the exact same commands on Mac.
PS2: For Window Users, Replace Cmd by Ctrl and Opt with Alt to get the same functionality.
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Shell Basics every Data Scientist Should know - Part II(AWK)</title>
      <link>https://mlwhiz.com/blog/2015/10/11/shell_basics_for_data_science_2/</link>
      <pubDate>Sun, 11 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2015/10/11/shell_basics_for_data_science_2/</guid>
      
      

      
      <description>Yesterday I got introduced to awk programming on the shell and is it cool. It lets you do stuff on the command line which you never imagined. As a matter of fact, it&amp;amp;rsquo;s a whole data analytics software in itself when you think about it. You can do selections, groupby, mean, median, sum, duplication, append. You just ask. There is no limit actually.
And it is easy to learn.</description>

      <content:encoded>  
        
        <![CDATA[  Yesterday I got introduced to awk programming on the shell and is it cool. It lets you do stuff on the command line which you never imagined. As a matter of fact, it&amp;rsquo;s a whole data analytics software in itself when you think about it. You can do selections, groupby, mean, median, sum, duplication, append. You just ask. There is no limit actually.
And it is easy to learn.
In this post, I will try to give you a brief intro about how you could add awk to your daily work-flow.
Please see my previous post if you want some background or some basic to intermediate understanding of shell commands.
Basics/ Fundamentals So let me start with an example first. Say you wanted to sum a column in a comma delimited file. How would you do that in shell?
Here is the command. The great thing about awk is that it took me nearly 5 sec to write this command. I did not have to open any text editor to write a python script.
It lets you do adhoc work quickly.
awk &amp;#39;BEGIN{ sum=0; FS=&amp;#34;,&amp;#34;} { sum &#43;= $5 } END { print sum }&amp;#39; data.txt 44662539172  See the command one more time. There is a basic structure to the awk command
BEGIN {action} pattern {action} pattern {action} . . pattern { action} END {action}   An awk program consists of:
 An optional BEGIN segment : In the begin part we initialize our variables before we even start reading from the file or the standard input.
 pattern - action pairs: In the middle part we Process the input data. You put multiple pattern action pairs when you want to do multiple things with the same line.
 An optional END segment: In the end part we do something we want to do when we have reached the end of file.
  An awk command is called on a file using:
awk &amp;#39;BEGIN{SOMETHING HERE} {SOMETHING HERE: could put Multiple Blocks Like this} END {SOMETHING HERE}&amp;#39; file.txt You also need to know about these preinitialized variables that awk keeps track of.:
 FS : field separator. Default is whitespace (1 or more spaces or tabs). If you are using any other seperator in the file you should specify it in the Begin Part. RS : record separator. Default record separator is newline. Can be changed in BEGIN action. NR : NR is the variable whose value is the number of the current record. You normally use it in the action blocks in the middle. NF : The Number of Fields after the single line has been split up using FS. Dollar variables : awk splits up the line which is coming to it by using the given FS and keeps the split parts in the $ variables. For example column 1 is in $1, column 2 is in $2. $0 is the string representation of the whole line. Note that if you want to access last column you don&amp;rsquo;t have to count. You can just use $NF. For second last column you can use $(NF-1). Pretty handy. Right.  So If you are with me till here, the hard part is done. Now the fun part starts. Lets look at the first awk command again and try to understand it.
awk &amp;#39;BEGIN{ sum=0; FS=&amp;#34;,&amp;#34;} { sum &#43;= $5 } END { print sum }&amp;#39; data.txt So there is a begin block. Remember before we read any line. We initialize sum to 0 and FS to &amp;ldquo;,&amp;rdquo;.
Now as awk reads its input line by line it increments sum by the value in column 5(as specified by $5).
Note that there is no pattern specified here so awk will do the action for every line.
When awk has completed reading the file it prints out the sum.
What if you wanted mean?
We could create a cnt Variable:
awk &amp;#39;BEGIN{ sum=0;cnt=0; FS=&amp;#34;,&amp;#34;} { sum &#43;= $5; cnt&#43;=1 } END { print sum/cnt }&amp;#39; data.txt 1.86436e&#43;06  or better yet, use our friend NR which bash is already keeping track of:
awk &amp;#39;BEGIN{ sum=0; FS=&amp;#34;,&amp;#34;} { sum &#43;= $5 } END { print sum/NR }&amp;#39; data.txt 1.86436e&#43;06  Filter a file In the mean and sum awk commands we did not put any pattern in our middle commands. Let us use a simple pattern now. Suppose we have a file Salaries.csv which contains:
head salaries.txt yearID,teamID,lgID,playerID,salary 1985,BAL,AL,murraed02,1472819 1985,BAL,AL,lynnfr01,1090000 1985,BAL,AL,ripkeca01,800000 1985,BAL,AL,lacyle01,725000 1985,BAL,AL,flanami01,641667 1985,BAL,AL,boddimi01,625000 1985,BAL,AL,stewasa01,581250 1985,BAL,AL,martide01,560000 1985,BAL,AL,roeniga01,558333  I want to filter records for players who who earn more than 22 M in 2013 just because I want to. You just do:
awk &amp;#39;BEGIN{FS=&amp;#34;,&amp;#34;} $5&amp;gt;=22000000 &amp;amp;&amp;amp; $1==2013{print $0}&amp;#39; Salaries.csv 2013,DET,AL,fieldpr01,23000000 2013,MIN,AL,mauerjo01,23000000 2013,NYA,AL,rodrial01,29000000 2013,NYA,AL,wellsve01,24642857 2013,NYA,AL,sabatcc01,24285714 2013,NYA,AL,teixema01,23125000 2013,PHI,NL,leecl02,25000000 2013,SFN,NL,linceti01,22250000  Cool right. Now let me explain it a little bit. The part in the command &amp;ldquo;$5&amp;gt;=22000000 &amp;amp;&amp;amp; $1==2013&amp;rdquo; is called a pattern. It says that print this line($0) if and only if the Salary($5) is more than 22M and(&amp;amp;&amp;amp;) year($1) is equal to 2013. If the incoming record(line) does not satisfy this pattern it never reaches the inner block.
So Now you could do basic Select SQL at the command line only if you had:
The logic Operators:
 == equality operator; returns TRUE is both sides are equal
 != inverse equality operator
 &amp;amp;&amp;amp; logical AND
 || logical OR
 ! logical NOT
 &amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;= relational operators
  Normal Arithmetic Operators: &#43;, -, /, *, %, ^
Some String Functions: length, substr, split
GroupBy Now you will say: &amp;ldquo;Hey Dude SQL without groupby is incomplete&amp;rdquo;. You are right and for that we can use the associative array. Lets just see the command first and then I will explain. So lets create another useless use case(or may be something useful to someone :)) We want to find out the number of records for each year in the file. i.e we want to find the distribution of years in the file. Here is the command:
awk &amp;#39;BEGIN{FS=&amp;#34;,&amp;#34;} {my_array[$1]=my_array[$1]&#43;1} END{ for (k in my_array){if(k!=&amp;#34;yearID&amp;#34;)print k&amp;#34;|&amp;#34;my_array[k]}; }&amp;#39; Salaries.csv 1990|867 1991|685 1996|931 1997|925 ...  Now I would like to tell you a secret. You don&amp;rsquo;t really need to declare the variables you want to use in awk. So you did not really needed to define sum, cnt variables before. I only did that because it is good practice. If you don&amp;rsquo;t declare a user defined variable in awk, awk assumes it to be null or zero depending on the context. So in the command above we don&amp;rsquo;t declare our myarray in the begin block and that is fine.
Associative Array: The variable myarray is actually an associative array. i.e. It stores data in a key value format.(Python dictionaries anyone). The same array could keep integer keys and String keys. For example, I can do this in a single code.
myarray[1]=&#34;key&#34; myarray[&#39;mlwhiz&#39;] = 1   For Loop for associative arrays: I could use a for loop to read associative array
for (k in array) { DO SOMETHING } # Assigns to k each Key of array (unordered) # Element is array[k]   If Statement:Uses a syntax like C for the if statement. the else block is optional:
if (n  0){ DO SOMETHING } else{ DO SOMETHING }   So lets dissect the above command now.
I set the File separator to &amp;ldquo;,&amp;rdquo; in the beginning. I use the first column as the key of myarray. If the key exists I increment the value by 1.
At the end, I loop through all the keys and print out key value pairs separated by &amp;ldquo;|&amp;rdquo;
I know that the header line in my file contains &amp;ldquo;yearID&amp;rdquo; in column 1 and I don&amp;rsquo;t want &amp;lsquo;yearID|1&amp;rsquo; in the output. So I only print when Key is not equal to &amp;lsquo;yearID&amp;rsquo;.
GroupBy with case statement: cat Salaries.csv | awk &amp;#39;BEGIN{FS=&amp;#34;,&amp;#34;} $5&amp;lt;100000{array5[&amp;#34;[0-100000)&amp;#34;]&#43;=1} $5&amp;gt;=100000&amp;amp;&amp;amp;$5&amp;lt;250000{array5[&amp;#34;[100000,250000)&amp;#34;]=array5[&amp;#34;[100000,250000)&amp;#34;]&#43;1} $5&amp;gt;=250000&amp;amp;&amp;amp;$5&amp;lt;500000{array5[&amp;#34;[250000-500000)&amp;#34;]=array5[&amp;#34;[250000-500000)&amp;#34;]&#43;1} $5&amp;gt;=500000&amp;amp;&amp;amp;$5&amp;lt;1000000{array5[&amp;#34;[500000-1000000)&amp;#34;]=array5[&amp;#34;[500000-1000000)&amp;#34;]&#43;1} $5&amp;gt;=1000000{array5[&amp;#34;[1000000)&amp;#34;]=array5[&amp;#34;[1000000)&amp;#34;]&#43;1} END{ print &amp;#34;VAR Distrib:&amp;#34;; for (v in array5){print v&amp;#34;|&amp;#34;array5[v]} }&amp;#39; VAR Distrib: [250000-500000)|8326 [0-100000)|2 [1000000)|23661 [100000,250000)|9480  Here we used multiple pattern-action blocks to create a case statement.
For The Brave: This is a awk code that I wrote to calculate the Mean,Median,min,max and sum of a column simultaneously. Try to go through the code and understand it.I have added comments too. Think of this as an exercise. Try to run this code and play with it. You may learn some new tricks in the process. If you don&amp;rsquo;t understand it do not worry. Just get started writing your own awk codes, you will be able to understand it in very little time.
# Create a New file named A.txt to keep only the salary column. cat Salaries.csv | cut -d &amp;#34;,&amp;#34; -f 5 &amp;gt; A.txt FILENAME=&amp;#34;A.txt&amp;#34; # The first awk counts the number of lines which are numeric. We use a regex here to check if the column is numeric or not. # &amp;#39;;&amp;#39; stands for Synchronous execution i.e sort only runs after the awk is over. # The output of both commands are given to awk command which does the whole work. # So Now the first line going to the second awk is the number of lines in the file which are numeric. # and from the second to the end line the file is sorted. (awk &amp;#39;BEGIN {c=0} $1 ~ /^[-0-9]*(\.[0-9]*)?$/ {c=c&#43;1;} END {print c;}&amp;#39; &amp;#34;$FILENAME&amp;#34;; \  sort -n &amp;#34;$FILENAME&amp;#34;) | awk &amp;#39; BEGIN { c = 0; sum = 0; med1_loc = 0; med2_loc = 0; med1_val = 0; med2_val = 0; min = 0; max = 0; } NR==1 { LINES = $1 # We check whether numlines is even or odd so that we keep only # the locations in the array where the median might be. if (LINES%2==0) {med1_loc = LINES/2-1; med2_loc = med1_loc&#43;1;} if (LINES%2!=0) {med1_loc = med2_loc = (LINES-1)/2;} } $1 ~ /^[-0-9]*(\.[0-9]*)?$/ &amp;amp;&amp;amp; NR!=1 { # setting min value if (c==0) {min = $1;} # middle two values in array if (c==med1_loc) {med1_val = $1;} if (c==med2_loc) {med2_val = $1;} c&#43;&#43; sum &#43;= $1 max = $1 } END { ave = sum / c median = (med1_val &#43; med2_val ) / 2 print &amp;#34;sum:&amp;#34; sum print &amp;#34;count:&amp;#34; c print &amp;#34;mean:&amp;#34; ave print &amp;#34;median:&amp;#34; median print &amp;#34;min:&amp;#34; min print &amp;#34;max:&amp;#34; max } &amp;#39; &amp;lt;pre style=&amp;#34;font-size:50%; padding:7px; margin:0em; background-color:#FFF112&amp;#34;&amp;gt;sum:44662539172 count:23956 mean:1.86436e&#43;06 median:507950 min:0 max:33000000 &amp;lt;/pre&amp;gt; Endnote: awk is an awesome tool and there are a lot of use-cases where it can make your life simple. There is a sort of a learning curve, but I think that it would be worth it in the long term. I have tried to give you a taste of awk and I have covered a lot of ground here in this post. To tell you a bit more there, awk is a full programming language. There are for loops, while loops, conditionals, booleans, functions and everything else that you would expect from a programming language. So you could look more still.
To learn more about awk you can use this book. This book is a free resource and you could learn more about awk and use cases.
Or if you like to have your book binded and in paper like me you can buy this book, which is a gem:
Do leave comments in case you find more use-cases for awk or if you want me to write on new use-cases. Or just comment weather you liked it or not and how I could improve as I am also new and trying to learn more of this.
Till then Ciao !!!
]]>
        
      </content:encoded>
      
      
      
    </item>
    

    <item>
      <title>Shell Basics every Data Scientist Should know -Part I</title>
      <link>https://mlwhiz.com/blog/2015/10/09/shell_basics_for_data_science/</link>
      <pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2015/10/09/shell_basics_for_data_science/</guid>
      
      

      
      <description>Shell Commands are powerful. And life would be like hell without shell is how I like to say it(And that is probably the reason that I dislike windows).
Consider a case when you have a 6 GB pipe-delimited file sitting on your laptop and you want to find out the count of distinct values in one particular column. You can probably do this in more than one way. You could put that file in a database and run SQL Commands, or you could write a python/perl script.</description>

      <content:encoded>  
        
        <![CDATA[  Shell Commands are powerful. And life would be like hell without shell is how I like to say it(And that is probably the reason that I dislike windows).
Consider a case when you have a 6 GB pipe-delimited file sitting on your laptop and you want to find out the count of distinct values in one particular column. You can probably do this in more than one way. You could put that file in a database and run SQL Commands, or you could write a python/perl script.
Probably whatever you do it won&amp;rsquo;t be simpler/less time consuming than this
cat data.txt | cut -d &amp;#34;|&amp;#34; -f 1 | sort | uniq | wc -l 30  And this will run way faster than whatever you do with perl/python script.
Now this command says
 Use the cat command to print/stream the contents of the file to stdout. Pipe the streaming contents from our cat command to the next command cut. The cut commands specifies the delimiter by the argument -d and the column by the argument -f and streams the output to stdout. Pipe the streaming content to the sort command which sorts the input and streams only the distinct values to the stdout. It takes the argument -u that specifies that we only need unique values. Pipe the output to the wc -l command which counts the number of lines in the input.  There is a lot going on here and I will try my best to ensure that you will be able to understand most of it by the end of this Blog post.Although I will also try to explain more advanced concepts than the above command in this post.
Now, I use shell commands extensively at my job. I will try to explain the usage of each of the commands based on use cases that I counter nearly daily at may day job as a data scientist.
Some Basic Commands in Shell: There are a lot of times when you just need to know a little bit about the data. You just want to see may be a couple of lines to inspect a file. One way of doing this is opening the txt/csv file in the notepad. And that is probably the best way for small files. But you could also do it in the shell using:
1. cat cat data.txt yearID|teamID|lgID|playerID|salary 1985|BAL|AL|murraed02|1472819 1985|BAL|AL|lynnfr01|1090000 1985|BAL|AL|ripkeca01|800000 1985|BAL|AL|lacyle01|725000 1985|BAL|AL|flanami01|641667 1985|BAL|AL|boddimi01|625000 1985|BAL|AL|stewasa01|581250 1985|BAL|AL|martide01|560000 1985|BAL|AL|roeniga01|558333  Now the cat command prints the whole file in the terminal window for you.I have not shown the whole file here.
But sometimes the files will be so big that you wont be able to open them up in notepad&#43;&#43; or any other software utility and there the cat command will shine.
2. Head and Tail Now you might ask me why would you print the whole file in the terminal itself? Generally I won&amp;rsquo;t. But I just wanted to tell you about the cat command. For the use case when you want only the top/bottom n lines of your data you will generally use the head/tail commands. You can use them as below.
head data.txt yearID|teamID|lgID|playerID|salary 1985|BAL|AL|murraed02|1472819 1985|BAL|AL|lynnfr01|1090000 1985|BAL|AL|ripkeca01|800000 1985|BAL|AL|lacyle01|725000 1985|BAL|AL|flanami01|641667 1985|BAL|AL|boddimi01|625000 1985|BAL|AL|stewasa01|581250 1985|BAL|AL|martide01|560000 1985|BAL|AL|roeniga01|558333  head -n 3 data.txt yearID|teamID|lgID|playerID|salary 1985|BAL|AL|murraed02|1472819 1985|BAL|AL|lynnfr01|1090000  tail data.txt 2013|WAS|NL|bernaro01|1212500 2013|WAS|NL|tracych01|1000000 2013|WAS|NL|stammcr01|875000 2013|WAS|NL|dukeza01|700000 2013|WAS|NL|espinda01|526250 2013|WAS|NL|matthry01|504500 2013|WAS|NL|lombast02|501250 2013|WAS|NL|ramoswi01|501250 2013|WAS|NL|rodrihe03|501000 2013|WAS|NL|moorety01|493000  tail -n 2 data.txt 2013|WAS|NL|rodrihe03|501000 2013|WAS|NL|moorety01|493000  Notice the structure of the shell command here.
CommandName [-arg1name] [arg1value] [-arg2name] [arg2value] filename   3. Piping Now we could have also written the same command as:
cat data.txt | head yearID|teamID|lgID|playerID|salary 1985|BAL|AL|murraed02|1472819 1985|BAL|AL|lynnfr01|1090000 1985|BAL|AL|ripkeca01|800000 1985|BAL|AL|lacyle01|725000 1985|BAL|AL|flanami01|641667 1985|BAL|AL|boddimi01|625000 1985|BAL|AL|stewasa01|581250 1985|BAL|AL|martide01|560000 1985|BAL|AL|roeniga01|558333  This brings me to one of the most important concepts of Shell usage - piping. You won&amp;rsquo;t be able to utilize the full power the shell provides without using this concept. And the concept is actually simple.
Just read the &amp;ldquo;|&amp;rdquo; in the command as &amp;ldquo;pass the data on to&amp;rdquo;
So I would read the above command as:
cat(print) the whole data to stream, pass the data on to head so that it can just give me the first few lines only.
So did you understood what piping did? It is providing us a way to use our basic commands in a consecutive manner. There are a lot of commands that are fairly basic and it lets us use these basic commands in sequence to do some fairly non trivial things.
Now let me tell you about a couple of more commands before I show you how we can chain them to do fairly advanced tasks.
4. wc wc is a fairly useful shell utility/command that lets us count the number of lines(-l), words(-w) or characters(-c) in a given file
wc -l data.txt 23957 data.txt  5. grep You may want to print all the lines in your file which have a particular word. Or as a Data case you might like to see the salaries for the team BAL in 2000. In this case we have printed all the lines in the file which contain &amp;ldquo;2000|BAL&amp;rdquo;. grep is your friend.
grep &amp;#34;2000|BAL&amp;#34; data.txt | head 2000|BAL|AL|belleal01|12868670 2000|BAL|AL|anderbr01|7127199 2000|BAL|AL|mussimi01|6786032 2000|BAL|AL|ericksc01|6620921 2000|BAL|AL|ripkeca01|6300000 2000|BAL|AL|clarkwi02|6000000 2000|BAL|AL|johnsch04|4600000 2000|BAL|AL|timlimi01|4250000 2000|BAL|AL|deshide01|4209324 2000|BAL|AL|surhobj01|4146789  you could also use regular expressions with grep.
6. sort You may want to sort your dataset on a particular column.Sort is your friend. Say you want to find out the top 10 maximum salaries given to any player in your dataset.
sort -t &amp;#34;|&amp;#34; -k 5 -r -n data.txt | head -10 2010|NYA|AL|rodrial01|33000000 2009|NYA|AL|rodrial01|33000000 2011|NYA|AL|rodrial01|32000000 2012|NYA|AL|rodrial01|30000000 2013|NYA|AL|rodrial01|29000000 2008|NYA|AL|rodrial01|28000000 2011|LAA|AL|wellsve01|26187500 2005|NYA|AL|rodrial01|26000000 2013|PHI|NL|leecl02|25000000 2013|NYA|AL|wellsve01|24642857  So there are certainly a lot of options in this command. Lets go through them one by one.
 -t: Which delimiter to use? -k: Which column to sort on? -n: If you want Numerical Sorting. Dont use this option if you want Lexographical sorting. -r: I want to sort Descending. Sorts Ascending by Default.  7. cut This command lets you select certain columns from your data. Sometimes you may want to look at just some of the columns in your data. As in you may want to look only at the year, team and salary and not the other columns. cut is the command to use.
cut -d &amp;#34;|&amp;#34; -f 1,2,5 data.txt | head yearID|teamID|salary 1985|BAL|1472819 1985|BAL|1090000 1985|BAL|800000 1985|BAL|725000 1985|BAL|641667 1985|BAL|625000 1985|BAL|581250 1985|BAL|560000 1985|BAL|558333  The options are:
 -d: Which delimiter to use? -f: Which column/columns to cut?  8. uniq uniq is a little bit tricky as in you will want to use this command in sequence with sort. This command removes sequential duplicates. So in conjunction with sort it can be used to get the distinct values in the data. For example if I wanted to find out 10 distinct teamIDs in data, I would use:
cat data.txt | cut -d &amp;#34;|&amp;#34; -f 2 | sort | uniq | head ANA ARI ATL BAL BOS CAL CHA CHN CIN CLE  This command could be used with argument -c to count the occurrence of these distinct values. Something akin to count distinct.
cat data.txt | cut -d &amp;#34;|&amp;#34; -f 2 | sort | uniq -c | head 247 ANA 458 ARI 838 ATL 855 BAL 852 BOS 368 CAL 812 CHA 821 CHN 46 CIN 867 CLE  Some Other Utility Commands for Other Operations Some Other command line tools that you could use without going in the specifics as the specifics are pretty hard.
1. Change delimiter in a file Find and Replace Magic.: You may want to replace certain characters in file with something else using the tr command.
cat data.txt | tr &amp;#39;|&amp;#39; &amp;#39;,&amp;#39; | head -4 yearID,teamID,lgID,playerID,salary 1985,BAL,AL,murraed02,1472819 1985,BAL,AL,lynnfr01,1090000 1985,BAL,AL,ripkeca01,800000  or the sed command
cat data.txt | sed -e &amp;#39;s/|/,/g&amp;#39; | head -4 yearID,teamID,lgID,playerID,salary 1985,BAL,AL,murraed02,1472819 1985,BAL,AL,lynnfr01,1090000 1985,BAL,AL,ripkeca01,800000  2. Sum of a column in a file Using the awk command you could find the sum of column in file. Divide it by the number of lines and you can get the mean.
cat data.txt | awk -F &amp;#34;|&amp;#34; &amp;#39;{ sum &#43;= $5 } END { printf sum }&amp;#39; 44662539172  awk is a powerful command which is sort of a whole language in itself. Do see the wiki page for awk for a lot of great usecases of awk. I also wrote a post on awk as a second part in this series. Check it HERE
3. Find the files in a directory that satisfy a certain condition You can do this by using the find command. Lets say you want to find all the .txt files in the current working dir that start with lowercase h.
find . -name &amp;#34;h*.txt&amp;#34; ./hamlet.txt  To find all .txt files starting with h regarless of case we could use regex.
find . -name &amp;#34;[Hh]*.txt&amp;#34; ./hamlet.txt ./Hamlet1.txt  4. Passing file list as Argument. xargs was suggested by Gaurav in the comments, so I read about it and it is actually a very nice command which you could use in a variety of use cases.
So if you just use a pipe, any command/utility receives data on STDIN (the standard input stream) as a raw pile of data that it can sort through one line at a time. However some programs don&amp;rsquo;t accept their commands on standard in. For example the rm command(which is used to remove files), touch command(used to create file with a given name) or a certain python script you wrote(which takes command line arguments). They expect it to be spelled out in the arguments to the command.
For example: rm takes a file name as a parameter on the command line like so: rm file1.txt. If I wanted to delete all &amp;lsquo;.txt&amp;rsquo; files starting with &amp;ldquo;h/H&amp;rdquo; from my working directory, the below command won&amp;rsquo;t work because rm expects a file as an input.
find . -name &amp;#34;[hH]*.txt&amp;#34; | rm usage: rm [-f | -i] [-dPRrvW] file ... unlink file  To get around it we can use the xargs command which reads the STDIN stream data and converts each line into space separated arguments to the command.
find . -name &amp;#34;[hH]*.txt&amp;#34; | xargs ./hamlet.txt ./Hamlet1.txt  Now you could use rm to remove all .txt files that start with h/H. A word of advice: Always see the output of xargs first before using rm.
find . -name &amp;#34;[hH]*.txt&amp;#34; | xargs rm Another usage of xargs could be in conjunction with grep to find all files that contain a given string.
find . -name &amp;#34;*.txt&amp;#34; | xargs grep &amp;#39;honest soldier&amp;#39; ./Data1.txt:O, farewell, honest soldier; ./Data2.txt:O, farewell, honest soldier; ./Data3.txt:O, farewell, honest soldier;  Hopefully You could come up with varied uses building up on these examples. One other use case could be to use this for passing arguments to a python script.
Other Cool Tricks Sometimes you want your data that you got by some command line utility(Shell commands/ Python scripts) not to be shown on stdout but stored in a textfile. You can use the &amp;rdquo;&amp;gt;&amp;rdquo; operator for that. For Example: You could have stored the file after replacing the delimiters in the previous example into anther file called newdata.txt as follows:
cat data.txt | tr &amp;#39;|&amp;#39; &amp;#39;,&amp;#39; &amp;gt; newdata.txt I really got confused between &amp;rdquo;|&amp;rdquo; (piping) and &amp;rdquo;&amp;gt;&amp;rdquo; (to_file) operations a lot in the beginning. One way to remember is that you should only use &amp;rdquo;&amp;gt;&amp;rdquo; when you want to write something to a file. &amp;rdquo;|&amp;rdquo; cannot be used to write to a file. Another operation you should know about is the &amp;rdquo;&amp;gt;&amp;gt;&amp;rdquo; operation. It is analogous to &amp;rdquo;&amp;gt;&amp;rdquo; but it appends to an existing file rather that replacing the file and writing over.
If you would like to know more about commandline, which I guess you would, here are some books that I would recommend for a beginner:
The first book is more of a fun read at leisure type of book. THe second book is a little more serious. Whatever suits you.
So, this is just the tip of the iceberg. Although I am not an expert in shell usage, these commands reduced my workload to a large extent. If there are some shell commands you use on a regular basis or some shell command that are cool, do tell in the comments. I would love to include it in the blogpost.
I wrote a blogpost on awk as a second part of this post. Check it Here
]]>
        
      </content:encoded>
      
      
      
    </item>
    
  </channel>
</rss>