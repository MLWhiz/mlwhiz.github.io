<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>
    Chatbots on 
    MLWhiz
    </title>
    <link>https://mlwhiz.com/tags/chatbots/</link>
    <description>Recent content in Chatbots 
    on MLWhiz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    
    <lastBuildDate>Mon, 15 Apr 2019 00:00:00 +0000</lastBuildDate>
    
    
        <atom:link href="https://mlwhiz.com/tags/chatbots/atom.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Chatbots  aren&#39;t as difficult to make as You Think</title>
      <link>https://mlwhiz.com/blog/2019/04/15/chatbot/</link>
      <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlwhiz.com/blog/2019/04/15/chatbot/</guid>
      <description>

&lt;p&gt;Chatbots are the in thing now. Every website must implement it. Every Data Scientist must know about them. Anytime we talk about AI; Chatbots must be discussed. But they look intimidating to someone very new to the field. We struggle with a lot of questions before we even begin to start working on them.
Are they hard to create? What technologies should I know before attempting to work on them? In the end, we end up discouraged reading through many posts on the internet and effectively accomplishing nothing.&lt;/p&gt;

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/chatbot/dvader.jpeg&#34;  style=&#34;height:60%;width:60%&#34;&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;Let me assure you this is not going to be &lt;em&gt;&amp;ldquo;that kind of a post&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I will try to distill some of the knowledge I acquired while working through a project in the &lt;a href=&#34;https://click.linksynergy.com/link?id=lVarvwc5BD0&amp;amp;offerid=467035.11503135394&amp;amp;type=2&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Flanguage-processing&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Natural Language Processing&lt;/a&gt; course in the &lt;a href=&#34;https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-AqkGMb7JzoCMW0Np1uLfCA&amp;amp;utm_content=2&amp;amp;utm_medium=partners&amp;amp;utm_source=linkshare&amp;amp;utm_campaign=lVarvwc5BD0&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Advanced machine learning specialization&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So before I start, let me first say it for once that don&amp;rsquo;t be intimidated by the hype and the enigma surrounding Chatbots. They are pretty much using pretty simple NLP techniques which most of us already know. If you don&amp;rsquo;t, you are welcome to check out my &lt;a href=&#34;https://towardsdatascience.com/tagged/nlp-learning-series&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;NLP Learning Series&lt;/a&gt;, where I go through the problem of text classification in fair detail using &lt;a href=&#34;https://mlwhiz.com/blog/2019/02/08/deeplearning_nlp_conventional_methods/&#34;&gt;Conventional&lt;/a&gt;, &lt;a href=&#34;https://mlwhiz.com/blog/2019/03/09/deeplearning_architectures_text_classification/&#34;&gt;Deep Learning&lt;/a&gt; and &lt;a href=&#34;https://mlwhiz.com/blog/2019/03/30/transfer_learning_text_classification/&#34;&gt;Transfer Learning&lt;/a&gt; methods.&lt;/p&gt;

&lt;h2 id=&#34;a-very-brief-intro-to-chatbots&#34;&gt;A Very brief Intro to Chatbots&lt;/h2&gt;

&lt;p&gt;We can logically divide of Chatbots in the following two categories.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Database/FAQ based&lt;/strong&gt; - We have a database with some questions and answers, and we would like that a user can query that using Natural Language. This is the sort of Chatbots you find at most of the Banking websites for answering FAQs.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chit-Chat Based&lt;/strong&gt; - Simulate dialogue with the user. These are the kind of chatbots that bring the cool in chatbots. We can use Seq-2-Seq models to create such bots.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;the-chatbot-we-will-be-creating&#34;&gt;The Chatbot we will be creating&lt;/h2&gt;

&lt;p&gt;We will be creating a &lt;strong&gt;dialogue chat bot&lt;/strong&gt;, which will be able to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Answer programming-related questions&lt;/strong&gt; (using StackOverflow dataset)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Chit-Chat&lt;/strong&gt; and simulate dialogue on all non-programming related questions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we will have it up and running our final chatbot should look like this.&lt;/p&gt;

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/chatbot/telegram_final.png&#34;  style=&#34;height:60%;width:60%&#34;&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;Seems quite fun.&lt;/p&gt;

&lt;p&gt;We will be taking help of resources like Telegram and Chatterbot to build our Chatbot. So before we start, I think I should get you up and running with these two tools.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;1-telegram&#34;&gt;1. Telegram:&lt;/h2&gt;

&lt;p&gt;From the &lt;a href=&#34;https://telegram.org/faq#q-what-is-telegram-what-do-i-do-here&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;website&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Telegram is a messaging app with a focus on speed and security, it’s super-fast, simple and free. You can use Telegram on all your devices at the same time — your messages sync seamlessly across any number of your phones, tablets or computers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For us, Telegram provides us with an easy way to create a Chatbot UI. It provides us with an access token which we will use to connect to the Telegram App backend and run our chatbot logic. Naturally, we need to have a window where we will write our questions to the chatbot, for us that is provided by Telegram. Also, telegram powers the chatbot by communicating with our chatbot logic. The above screenshot is taken from the telegram app only.&lt;/p&gt;

&lt;h3 id=&#34;set-up-telegram&#34;&gt;Set up Telegram:&lt;/h3&gt;

&lt;p&gt;Don&amp;rsquo;t worry if you don&amp;rsquo;t understand how it works yet; I will try to give step by step instructions as we go forward.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Step 1: &lt;a href=&#34;https://macos.telegram.org/&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Download and Install&lt;/a&gt; Telegram App on your Laptop.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Step 2: Talk with BotFather by opening this &lt;a href=&#34;https://telegram.me/BotFather&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt; in Chrome and subsequently your Telegram App.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Step 3: The above steps will take you to a Chatbot called Botfather which can help you create a new bot. Inception Anyone? It will look something like this.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set up a new bot using command &amp;ldquo;/newbot&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Create a name for Your bot.&lt;/li&gt;
&lt;li&gt;Create a username for your bot.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/chatbot/telegram_botfather.png&#34;  style=&#34;height:70%;width:70%&#34;&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Step 4: You will get an access token for the bot. Copy the Token at a safe place.&lt;/li&gt;
&lt;li&gt;Step 5: Click on the &amp;ldquo;t.me/MLWhizbot&amp;rdquo; link to open Chat with your chatbot in a new window.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Right now if you try to communicate with the chatbot, you won&amp;rsquo;t receive any answers. And that is how it should be.&lt;/p&gt;

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/chatbot/telegram_unresponsive.png&#34;  style=&#34;height:20%;width:20%&#34;&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;But that&amp;rsquo;s not at all fun. Is it? Let&amp;rsquo;s do some python magic to make it responsive.&lt;/p&gt;

&lt;h3 id=&#34;making-our-telegram-chatbot-responsive&#34;&gt;Making our Telegram Chatbot responsive&lt;/h3&gt;

&lt;p&gt;Create a file &lt;code&gt;main.py&lt;/code&gt; and put the following code in it. Don&amp;rsquo;t worry most of the code here is Boilerplate code to make our Chatbot communicate with Telegram using the Access token. We need to worry about implementing the class &lt;code&gt;SimpleDialogueManager&lt;/code&gt;. This class contains a function called &lt;code&gt;generate_answer&lt;/code&gt; which is where we will write our bot logic.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; argparse
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; requests.compat &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; urljoin

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BotHandler&lt;/span&gt;(object):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        BotHandler is a class which implements all back-end of the bot.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        It has three main functions:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#39;get_updates&amp;#39; — checks for new messages
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#39;send_message&amp;#39; – posts new message to user
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#39;get_answer&amp;#39; — computes the most relevant on a user&amp;#39;s question
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, token, dialogue_manager):
        
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;token &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; token
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;api_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.telegram.org/bot{}/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(token)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dialogue_manager &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dialogue_manager

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_updates&lt;/span&gt;(self, offset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None, timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;):
        params &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;timeout&amp;#34;&lt;/span&gt;: timeout, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;offset&amp;#34;&lt;/span&gt;: offset}
        raw_resp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(urljoin(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;api_url, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;getUpdates&amp;#34;&lt;/span&gt;), params)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            resp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; raw_resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decoder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;JSONDecodeError &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to parse response {}: {}.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(raw_resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content, e))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; []

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;result&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; resp:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; resp[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;result&amp;#34;&lt;/span&gt;]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send_message&lt;/span&gt;(self, chat_id, text):
        params &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chat_id&amp;#34;&lt;/span&gt;: chat_id, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: text}
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;post(urljoin(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;api_url, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sendMessage&amp;#34;&lt;/span&gt;), params)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_answer&lt;/span&gt;(self, question):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; question &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/start&amp;#39;&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hi, I am your project bot. How can I help you today?&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dialogue_manager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;generate_answer(question)


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_unicode&lt;/span&gt;(text):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(text) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SimpleDialogueManager&lt;/span&gt;(object):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    This is a simple dialogue manager to test the telegram bot.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    The main part of our bot will be written here.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generate_answer&lt;/span&gt;(self, question): 
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hi&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; question:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, You&amp;#34;&lt;/span&gt; 
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Don&amp;#39;t be rude. Say Hi first.&amp;#34;&lt;/span&gt;
        

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
    &lt;span style=&#34;color:#75715e&#34;&gt;# Put your own Telegram Access token here...&lt;/span&gt;
    token &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;839585958:AAEfTDo2X6PgHb9IEdb62ueS4SmdpCkhtmc&amp;#39;&lt;/span&gt;
    simple_manager &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SimpleDialogueManager()
    bot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BotHandler(token, simple_manager)
    &lt;span style=&#34;color:#75715e&#34;&gt;###############################################################&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ready to talk!&amp;#34;&lt;/span&gt;)
    offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
        updates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_updates(offset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;offset)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; update &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; updates:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;An update received.&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; update:
                chat_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; update[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chat&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;]
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; update[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;]:
                    text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; update[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;]
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_unicode(text):
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Update content: {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(update))
                        bot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_message(chat_id, bot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_answer(update[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;]))
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                        bot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_message(chat_id, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hmm, you are sending some weird characters to me...&amp;#34;&lt;/span&gt;)
            offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(offset, update[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;update_id&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    main()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can run the file &lt;code&gt;main.py&lt;/code&gt; in the terminal window to make your bot responsive.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python main.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/chatbot/telegram_naive.png&#34;  style=&#34;height:100%;width:100%&#34;&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;Nice. It is following simple logic. But the good thing is that our bot now does something.&lt;/p&gt;

&lt;p&gt;Also, take a look at the terminal window where we have run our &lt;code&gt;main.py&lt;/code&gt; File. Whenever a user asks a question, we get the sort of dictionary below containing Unique Chat ID, Chat Text, User Information, etc.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Update content: {&#39;update_id&#39;: 484689748, &#39;message&#39;: {&#39;message_id&#39;: 115, &#39;from&#39;: {&#39;id&#39;: 844474950, &#39;is_bot&#39;: False, &#39;first_name&#39;: &#39;Rahul&#39;, &#39;last_name&#39;: &#39;Agarwal&#39;, &#39;language_code&#39;: &#39;en&#39;}, &#39;chat&#39;: {&#39;id&#39;: 844474950, &#39;first_name&#39;: &#39;Rahul&#39;, &#39;last_name&#39;: &#39;Agarwal&#39;, &#39;type&#39;: &#39;private&#39;}, &#39;date&#39;: 1555266010, &#39;text&#39;: &#39;What is 2+2&#39;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Until now whatever we had done was sort of setting up and engineering sort of work.&lt;/p&gt;

&lt;p&gt;Only if we can write some sound Data Science logic in the &lt;code&gt;generate_answer&lt;/code&gt; function in our &lt;code&gt;main.py&lt;/code&gt; we should have a decent chatbot.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;2-chatterbot&#34;&gt;2. ChatterBot&lt;/h2&gt;

&lt;p&gt;From the Documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ChatterBot is a Python library that makes it easy to generate automated responses to a user’s input. ChatterBot uses a selection of machine learning algorithms to produce different types of reactions. This makes it easy for developers to create chat bots and automate conversations with users.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Simply. It is a Blackbox system which can provide us with responses for Chitchat type questions for our Chatbot. And the best part about it is that it is pretty easy to integrate with our current flow. We could also have trained a SeqtoSeq model to do the same thing. Might be I will do it in a later post. I digress.&lt;/p&gt;

&lt;p&gt;So, install it with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ pip install chatterbot&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And change the &lt;code&gt;SimpleDialogueManager&lt;/code&gt; Class in main.py to the following. We can have a bot that can talk to the user and answer random queries.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SimpleDialogueManager&lt;/span&gt;(object):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    This is a simple dialogue manager to test the telegram bot.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    The main part of our bot will be written here.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):
        &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; chatterbot &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ChatBot
        &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; chatterbot.trainers &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ChatterBotCorpusTrainer
        chatbot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ChatBot(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MLWhizChatterbot&amp;#39;&lt;/span&gt;)
        trainer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ChatterBotCorpusTrainer(chatbot)
        trainer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;train(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;chatterbot.corpus.english&amp;#39;&lt;/span&gt;)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chitchat_bot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chatbot

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generate_answer&lt;/span&gt;(self, question): 
        response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chitchat_bot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_response(question)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; response&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code in &lt;code&gt;init&lt;/code&gt; instantiates a chatbot using chatterbot and trains it on the &lt;a href=&#34;https://github.com/gunthercox/chatterbot-corpus/tree/master/chatterbot_corpus/data/english&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;provided english corpus&lt;/a&gt; data. The data is pretty small, but you can always train it on your dataset too. Just see the &lt;a href=&#34;https://chatterbot.readthedocs.io/en/stable/training.html&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;documentation&lt;/a&gt;. We can then give our responses using the Chatterbot chatbot in the &lt;code&gt;generate_answer&lt;/code&gt; function.&lt;/p&gt;

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/chatbot/telegram_chatterbot.png&#34;  style=&#34;height:80%;width:80%&#34;&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;Not too &amp;ldquo;ba a a a a a d&amp;rdquo; , I must say.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;creating-our-stackoverflow-chatbot&#34;&gt;Creating our StackOverFlow ChatBot&lt;/h2&gt;

&lt;p&gt;Ok, so finally we are at a stage where we can do something we love. Use Data Science to power our Application/Chatbot. Let us start with creating a rough architecture of what we are going to do next.&lt;/p&gt;

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/chatbot/chatbot_architecture.png&#34;  style=&#34;height:80%;width:80%&#34;&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;We will need to create two classifiers and save them as &lt;code&gt;.pkl&lt;/code&gt; files.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Intent-Classifier&lt;/strong&gt;: This classifier will predict if it a question is a Stack-Overflow question or not. If it is not a Stack-overflow question, we let Chatterbot handle it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Programming-Language(Tag) Classifier&lt;/strong&gt;: This classifier will predict which language a question belongs to if the question is a Stack-Overflow question. We do this so that we can search for those language questions in our database only.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To keep it simple we will create simple TFIDF models. We will need to save these TFIDF vectorizers.&lt;/p&gt;

&lt;p&gt;We will also need to store word vectors for every question for similarity calculations later.&lt;/p&gt;

&lt;p&gt;Let us go through the process step by step. You can get the full code in this &lt;a href=&#34;https://github.com/MLWhiz/chatbot/blob/master/Model%20Creation.ipynb&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;jupyter notebook&lt;/a&gt; in my &lt;a href=&#34;https://github.com/MLWhiz/chatbot&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;project repository&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;step-1-reading-and-visualizing-the-data&#34;&gt;Step 1. Reading and Visualizing the Data&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;dialogues &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data/dialogues.tsv&amp;#34;&lt;/span&gt;,sep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
posts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data/tagged_posts.tsv&amp;#34;&lt;/span&gt;,sep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;dialogues&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: left;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;text&lt;/th&gt;
      &lt;th&gt;tag&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Okay -- you&#39;re gonna need to learn how to lie.&lt;/td&gt;
      &lt;td&gt;dialogue&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;I&#39;m kidding.  You know how sometimes you just ...&lt;/td&gt;
      &lt;td&gt;dialogue&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Like my fear of wearing pastels?&lt;/td&gt;
      &lt;td&gt;dialogue&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;I figured you&#39;d get to the good stuff eventually.&lt;/td&gt;
      &lt;td&gt;dialogue&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Thank God!  If I had to hear one more story ab...&lt;/td&gt;
      &lt;td&gt;dialogue&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;posts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;post_id&lt;/th&gt;
      &lt;th&gt;title&lt;/th&gt;
      &lt;th&gt;tag&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;Calculate age in C#&lt;/td&gt;
      &lt;td&gt;c#&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;Filling a DataSet or DataTable from a LINQ que...&lt;/td&gt;
      &lt;td&gt;c#&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;39&lt;/td&gt;
      &lt;td&gt;Reliable timer in a console application&lt;/td&gt;
      &lt;td&gt;c#&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;42&lt;/td&gt;
      &lt;td&gt;Best way to allow plugins for a PHP application&lt;/td&gt;
      &lt;td&gt;php&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;59&lt;/td&gt;
      &lt;td&gt;How do I get a distinct, ordered list of names...&lt;/td&gt;
      &lt;td&gt;c#&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Num Posts:&amp;#34;&lt;/span&gt;,len(posts))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Num Dialogues:&amp;#34;&lt;/span&gt;,len(dialogues))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;Num Posts: 2171575
Num Dialogues: 218609
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;step-2-create-training-data-for-intent-classifier-chitchat-stackoverflow-question&#34;&gt;Step 2: Create training data for intent classifier - Chitchat/StackOverflow Question&lt;/h4&gt;

&lt;p&gt;We will be creating a TFIDF model with Logistic regression to do this. If you want to know about the TFIDF model you can read it here.&lt;/p&gt;

&lt;p&gt;We could also have used one of the Deep Learning models or transfer learning approaches to do this, but since the main objective of this post is to get a chatbot up and running and not worry too much about the accuracy we sort of work with the TFIDF based model only.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;texts  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  list(dialogues[:&lt;span style=&#34;color:#ae81ff&#34;&gt;200000&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; list(posts[:&lt;span style=&#34;color:#ae81ff&#34;&gt;200000&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values)
labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dialogue&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;200000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;stackoverflow&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;200000&lt;/span&gt;
data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;:texts,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;:labels})

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;text_prepare&lt;/span&gt;(text):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Performs tokenization and simple preprocessing.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    
    replace_by_space_re &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[/(){}\[\]\|@,;]&amp;#39;&lt;/span&gt;)
    bad_symbols_re &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[^0-9a-z #+_]&amp;#39;&lt;/span&gt;)
    stopwords_set &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(stopwords&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;words(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;english&amp;#39;&lt;/span&gt;))

    text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lower()
    text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; replace_by_space_re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sub(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;, text)
    text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bad_symbols_re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sub(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, text)
    text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split() &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; stopwords_set])

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()

&lt;span style=&#34;color:#75715e&#34;&gt;# Doing some data cleaning&lt;/span&gt;
data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x : text_prepare(x))

X_train, X_test, y_train, y_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; train_test_split(data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;],data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;],test_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; , random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Train size = {}, test size = {}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(len(X_train), len(X_test)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;Train size = 360000, test size = 40000
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;step-3-create-intent-classifier&#34;&gt;Step 3. Create Intent classifier&lt;/h4&gt;

&lt;p&gt;Here we Create a TFIDF Vectorizer to create features and also train a Logistic regression model to create the intent_classifier. Please note how we are saving TFIDF Vectorizer to &lt;code&gt;resources/tfidf.pkl&lt;/code&gt; and intent_classifier to &lt;code&gt;resources/intent_clf.pkl&lt;/code&gt;. We will need these files once we are going to write the &lt;code&gt;SimpleDialogueManager&lt;/code&gt; class for our final Chatbot.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# We will keep our models and vectorizers in this folder&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;mkdir resources

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tfidf_features&lt;/span&gt;(X_train, X_test, vectorizer_path):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Performs TF-IDF transformation and dumps the model.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    tfv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TfidfVectorizer(dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;float32, min_df&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,  max_features&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None, 
            strip_accents&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unicode&amp;#39;&lt;/span&gt;, analyzer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;word&amp;#39;&lt;/span&gt;,token_pattern&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\w{1,}&amp;#39;&lt;/span&gt;,
            ngram_range&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), use_idf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,smooth_idf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,sublinear_tf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
            stop_words &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;english&amp;#39;&lt;/span&gt;)
    
    X_train &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tfv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit_transform(X_train)
    X_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tfv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transform(X_test)
    
    pickle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(tfv,vectorizer_path)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; X_train, X_test

X_train_tfidf, X_test_tfidf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tfidf_features(X_train, X_test, open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/tfidf.pkl&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;))

intent_recognizer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LogisticRegression(C&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
intent_recognizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(X_train_tfidf,y_train)
pickle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(intent_recognizer, open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/intent_clf.pkl&amp;#34;&lt;/span&gt; , &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;# Check test accuracy.&lt;/span&gt;
y_test_pred &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; intent_recognizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X_test_tfidf)
test_accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; accuracy_score(y_test, y_test_pred)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Test accuracy = {}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(test_accuracy))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;Test accuracy = 0.989825
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Intent Classifier has a pretty good test accuracy of 98%. TFIDF is not so bad.&lt;/p&gt;

&lt;h4 id=&#34;step-4-create-programming-language-classifier&#34;&gt;Step 4: Create Programming Language classifier&lt;/h4&gt;

&lt;p&gt;Let us first create the data for Programming Language classifier and then train a Logistic Regression model using TFIDF features. We save this tag Classifier at the location &lt;code&gt;resources/tag_clf.pkl&lt;/code&gt;. We do this step mostly because we don&amp;rsquo;t want to do similarity calculations over the whole database of questions but only on the subset of questions by the language tag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# creating the data for Programming Language classifier &lt;/span&gt;
X &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; posts[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values
y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; posts[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values

X_train, X_test, y_train, y_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; train_test_split(X, y, test_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;, random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Train size = {}, test size = {}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(len(X_train), len(X_test)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;Train size = 1737260, test size = 434315
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;vectorizer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pickle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/tfidf.pkl&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;))
X_train_tfidf, X_test_tfidf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vectorizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transform(X_train), vectorizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transform(X_test)
tag_classifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; OneVsRestClassifier(LogisticRegression(C&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
tag_classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(X_train_tfidf,y_train)
pickle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(tag_classifier, open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/tag_clf.pkl&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;# Check test accuracy.&lt;/span&gt;
y_test_pred &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tag_classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X_test_tfidf)
test_accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; accuracy_score(y_test, y_test_pred)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Test accuracy = {}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(test_accuracy))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;Test accuracy = 0.8043816124241622
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not Bad again.&lt;/p&gt;

&lt;h4 id=&#34;step-5-store-question-database-embeddings&#34;&gt;Step 5: Store Question database Embeddings&lt;/h4&gt;

&lt;p&gt;One can use &lt;a href=&#34;https://code.google.com/archive/p/word2vec/&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;pre-trained word vectors&lt;/a&gt; from Google or get a better result by training their embeddings using their data. Since again accuracy and precision is not the primary goal of this post, we will use pretrained vectors.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Load Google&amp;#39;s pre-trained Word2Vec model.&lt;/span&gt;
model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gensim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;KeyedVectors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_word2vec_format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GoogleNews-vectors-negative300.bin&amp;#39;&lt;/span&gt;, binary&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True) &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We want to convert every question to an embedding and store them so that we don&amp;rsquo;t calculate the embeddings for the whole dataset every time. In essence, whenever the user asks a Stack Overflow question, we want to use some distance similarity measure to get the most similar question.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;question_to_vec&lt;/span&gt;(question, embeddings, dim&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        question: a string
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        embeddings: dict where the key is a word and a value is its&amp;#39; embedding
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        dim: size of the representation
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        result: vector representation for the question
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    word_tokens &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; question&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)
    question_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(word_tokens)
    question_mat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros((question_len,dim), dtype &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;float32)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; idx, word &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(word_tokens):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; embeddings:
            question_mat[idx,:] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; embeddings[word]
            
    &lt;span style=&#34;color:#75715e&#34;&gt;# remove zero-rows which stand for OOV words       &lt;/span&gt;
    question_mat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; question_mat[&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all(question_mat &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Compute the mean of each word along the sentence&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; question_mat&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        vec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(question_mat, axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), dtype &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;float32)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,dim))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        vec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,dim), dtype &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;float32)
        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; vec

counts_by_tag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; posts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby(by&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;])[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tag&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;count&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort_values([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;count&amp;#39;&lt;/span&gt;], ascending &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False)
counts_by_tag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(zip(counts_by_tag[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;],counts_by_tag[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;count&amp;#39;&lt;/span&gt;]))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(counts_by_tag)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;[(&#39;c#&#39;, 394451), (&#39;java&#39;, 383456), (&#39;javascript&#39;, 375867), (&#39;php&#39;, 321752), (&#39;c_cpp&#39;, 281300), (&#39;python&#39;, 208607), (&#39;ruby&#39;, 99930), (&#39;r&#39;, 36359), (&#39;vb&#39;, 35044), (&#39;swift&#39;, 34809)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We save the embeddings in a folder aptly named &lt;code&gt;resources/embeddings_folder&lt;/code&gt;. This folder will contain a .pkl file for every tag. For example one of the files will be &lt;code&gt;python.pkl&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt; mkdir resources&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;embeddings_folder

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; tag, count &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; counts_by_tag:
    tag_posts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; posts[posts[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; tag]
    tag_post_ids &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tag_posts[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;post_id&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values
    tag_vectors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros((count, &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;), dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;float32)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, title &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(tag_posts[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;]):
        tag_vectors[i, :] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; question_to_vec(title, model, &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;# Dump post ids and vectors to a file.&lt;/span&gt;
    filename &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;resources/embeddings_folder/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; tag &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.pkl&amp;#39;&lt;/span&gt;
    pickle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump((tag_post_ids, tag_vectors), open(filename, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are nearing the end now. We need to have a function to get most similar question&amp;rsquo;s &lt;em&gt;post id&lt;/em&gt; in the dataset given we know the programming Language of the question. Here it is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_similar_question&lt;/span&gt;(question,tag):
    &lt;span style=&#34;color:#75715e&#34;&gt;# get the path where all question embeddings are kept and load the post_ids and post_embeddings&lt;/span&gt;
    embeddings_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;resources/embeddings_folder/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; tag &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.pkl&amp;#34;&lt;/span&gt;
    post_ids, post_embeddings &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pickle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(open(embeddings_path, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;))
    &lt;span style=&#34;color:#75715e&#34;&gt;# Get the embeddings for the question&lt;/span&gt;
    question_vec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; question_to_vec(question, model, &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;# find index of most similar post&lt;/span&gt;
    best_post_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pairwise_distances_argmin(question_vec,
                                                post_embeddings)
    &lt;span style=&#34;color:#75715e&#34;&gt;# return best post id&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; post_ids[best_post_index]

get_similar_question(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;how to use list comprehension in python?&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;array([5947137])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we can use this post ID and find this question at &lt;a href=&#34;https://stackoverflow.com/questions/5947137&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;https://stackoverflow.com/questions/5947137&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The question the similarity checker suggested has the actual text: &amp;ldquo;How can I use a list comprehension to extend a list in python? [duplicate]&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Not too bad. It could have been better if we train our embeddings or use &lt;a href=&#34;https://github.com/facebookresearch/StarSpace&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;starspace&lt;/a&gt; embeddings.&lt;/p&gt;

&lt;h2 id=&#34;assemble-the-puzzle-simpledialoguemanager-class&#34;&gt;Assemble the Puzzle - SimpleDialogueManager Class&lt;/h2&gt;

&lt;p&gt;Finally, we have reached the end of the whole exercise, and we have to fit all the pieces in the puzzle in our &lt;code&gt;SimpleDialogueManager&lt;/code&gt; Class. Here is the code for that. Go in the &lt;code&gt;main.py&lt;/code&gt; file again to paste this code and see if it works or not.&lt;/p&gt;

&lt;p&gt;Go through the comments to understand how the pieces are fitting together to build one wholesome logic.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; gensim
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pickle
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; nltk
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; nltk.corpus &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; stopwords
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.metrics.pairwise &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pairwise_distances_argmin

&lt;span style=&#34;color:#75715e&#34;&gt;# We will need this function to prepare text at prediction time&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;text_prepare&lt;/span&gt;(text):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Performs tokenization and simple preprocessing.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    
    replace_by_space_re &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[/(){}\[\]\|@,;]&amp;#39;&lt;/span&gt;)
    bad_symbols_re &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[^0-9a-z #+_]&amp;#39;&lt;/span&gt;)
    stopwords_set &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(stopwords&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;words(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;english&amp;#39;&lt;/span&gt;))

    text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lower()
    text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; replace_by_space_re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sub(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;, text)
    text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bad_symbols_re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sub(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, text)
    text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split() &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; stopwords_set])

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()

&lt;span style=&#34;color:#75715e&#34;&gt;# need this to convert questions asked by user to vectors&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;question_to_vec&lt;/span&gt;(question, embeddings, dim&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        question: a string
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        embeddings: dict where the key is a word and a value is its&amp;#39; embedding
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        dim: size of the representation
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        result: vector representation for the question
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    word_tokens &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; question&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)
    question_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(word_tokens)
    question_mat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros((question_len,dim), dtype &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;float32)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; idx, word &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(word_tokens):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; embeddings:
            question_mat[idx,:] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; embeddings[word]
            
    &lt;span style=&#34;color:#75715e&#34;&gt;# remove zero-rows which stand for OOV words       &lt;/span&gt;
    question_mat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; question_mat[&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all(question_mat &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Compute the mean of each word along the sentence&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; question_mat&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        vec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(question_mat, axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), dtype &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;float32)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,dim))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        vec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,dim), dtype &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;float32)
        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; vec

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SimpleDialogueManager&lt;/span&gt;(object):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    This is a simple dialogue manager to test the telegram bot.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    The main part of our bot will be written here.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):

        &lt;span style=&#34;color:#75715e&#34;&gt;# Instantiate all the models and TFIDF Objects.&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Loading resources...&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;# Instantiate a Chatterbot for Chitchat type questions&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; chatterbot &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ChatBot
        &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; chatterbot.trainers &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ChatterBotCorpusTrainer
        chatbot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ChatBot(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MLWhizChatterbot&amp;#39;&lt;/span&gt;)
        trainer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ChatterBotCorpusTrainer(chatbot)
        trainer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;train(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;chatterbot.corpus.english&amp;#39;&lt;/span&gt;)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chitchat_bot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chatbot
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Loading Word2vec model...&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;# Instantiate the Google&amp;#39;s pre-trained Word2Vec model.&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gensim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;KeyedVectors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_word2vec_format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GoogleNews-vectors-negative300.bin&amp;#39;&lt;/span&gt;, binary&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True) 
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Loading Classifier objects...&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;# Load the intent classifier and tag classifier&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;intent_recognizer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  pickle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;resources/intent_clf.pkl&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;))
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tag_classifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  pickle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;resources/tag_clf.pkl&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;))
        &lt;span style=&#34;color:#75715e&#34;&gt;# Load the TFIDF vectorizer object&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tfidf_vectorizer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pickle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;resources/tfidf.pkl&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Finished Loading Resources&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;# We created this function just above. We just need to have a function to get most similar question&amp;#39;s *post id* in the dataset given we know the programming Language of the question. Here it is:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_similar_question&lt;/span&gt;(self,question,tag):
        &lt;span style=&#34;color:#75715e&#34;&gt;# get the path where all question embeddings are kept and load the post_ids and post_embeddings&lt;/span&gt;
        embeddings_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;resources/embeddings_folder/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; tag &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.pkl&amp;#34;&lt;/span&gt;
        post_ids, post_embeddings &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pickle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(open(embeddings_path, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;))
        &lt;span style=&#34;color:#75715e&#34;&gt;# Get the embeddings for the question&lt;/span&gt;
        question_vec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; question_to_vec(question, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;model, &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;# find index of most similar post&lt;/span&gt;
        best_post_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pairwise_distances_argmin(question_vec,
                                                    post_embeddings)
        &lt;span style=&#34;color:#75715e&#34;&gt;# return best post id&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; post_ids[best_post_index]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generate_answer&lt;/span&gt;(self, question): 
        prepared_question &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text_prepare(question)
        features &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tfidf_vectorizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transform([prepared_question])
        &lt;span style=&#34;color:#75715e&#34;&gt;# find intent&lt;/span&gt;
        intent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;intent_recognizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(features)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        &lt;span style=&#34;color:#75715e&#34;&gt;# Chit-chat part:   &lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; intent &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dialogue&amp;#39;&lt;/span&gt;:
            response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chitchat_bot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_response(question)
        &lt;span style=&#34;color:#75715e&#34;&gt;# Stack Overflow Question&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;# find programming language&lt;/span&gt;
            tag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tag_classifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(features)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
            &lt;span style=&#34;color:#75715e&#34;&gt;# find most similar question post id&lt;/span&gt;
            post_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_similar_question(question,tag)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
            &lt;span style=&#34;color:#75715e&#34;&gt;# respond with &lt;/span&gt;
            response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I think its about &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;This thread might help you: https://stackoverflow.com/questions/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (tag, post_id)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; response&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the code for the whole &lt;a href=&#34;https://github.com/MLWhiz/chatbot/blob/master/main.py&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;main.py&lt;/code&gt;&lt;/a&gt; for you to use and see. Just run the whole &lt;code&gt;main.py&lt;/code&gt; using&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python main.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we will have our bot up and running.&lt;/p&gt;

&lt;p&gt;Again, here is the link to the github &lt;a href=&#34;https://github.com/MLWhiz/chatbot&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;repository&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-possibilities-are-really-endless&#34;&gt;The possibilities are really endless&lt;/h2&gt;

&lt;p&gt;This is just a small demo project of what you can do with the chatbots. You can do a whole lot more once you recognize that the backend is just python.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One idea is to run a chatbot script on all the servers I have to run system commands straight from telegram. We can use &lt;code&gt;os.system&lt;/code&gt; to run any system command. Bye Bye SSH.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can &lt;strong&gt;make chatbots to do some daily tasks by using simple keyword-based intents&lt;/strong&gt;. It is just simple logic. Find out the weather, find out cricket scores or maybe newly released movies. Whatever floats your boat.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Or maybe try to integrate Telegram based Chatbot in your website. See &lt;a href=&#34;https://livechatbot.net/#&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;livechatbot&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Or maybe just try to have fun with it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&#34;margin-top: 9px; margin-bottom: 10px;&#34;&gt;
&lt;center&gt;&lt;img src=&#34;https://mlwhiz.com/images/chatbot/dilbert_chatbot.jpg&#34;  style=&#34;height:80%;width:80%&#34;&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Here we learned how to create a simple chatbot. And it works well. We can improve a whole lot on this present chatbot by increasing classifier accuracy, handling edge cases, making it respond faster or maybe adding more logic to handle more use cases. But the fact remains the same. The AI in chatbots is just simple human logic and nothing magic.&lt;/p&gt;

&lt;p&gt;In this post, I closely followed one of the projects from this &lt;a href=&#34;https://click.linksynergy.com/link?id=lVarvwc5BD0&amp;amp;offerid=467035.11503135394&amp;amp;type=2&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Flanguage-processing&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;course&lt;/a&gt; to create this chatbot. Do check out this course if you get confused, or tell me your problems in the comments I will certainly try to help.&lt;/p&gt;

&lt;p&gt;Follow me up at &lt;a href=&#34;https://medium.com/@rahul_agarwal&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Medium&lt;/a&gt; or Subscribe to my &lt;a href=&#34;https://mlwhiz.com&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;blog&lt;/a&gt; to be informed about my next posts.&lt;/p&gt;

&lt;p&gt;Till then Ciao!!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>